
MEGA_GPIO_EXAMPLE1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000001e4  00800200  00002b32  00002bc6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00002b32  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000007b  008003e4  008003e4  00002daa  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00002daa  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00002e08  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000002d8  00000000  00000000  00002e44  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00003206  00000000  00000000  0000311c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000016bf  00000000  00000000  00006322  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000353e  00000000  00000000  000079e1  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000073c  00000000  00000000  0000af20  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00014d34  00000000  00000000  0000b65c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001a5c  00000000  00000000  00020390  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000228  00000000  00000000  00021dec  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  00005e5a  00000000  00000000  00022014  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	f2 c0       	rjmp	.+484    	; 0x1e6 <__ctors_end>
       2:	00 00       	nop
       4:	0d c1       	rjmp	.+538    	; 0x220 <__bad_interrupt>
       6:	00 00       	nop
       8:	0b c1       	rjmp	.+534    	; 0x220 <__bad_interrupt>
       a:	00 00       	nop
       c:	09 c1       	rjmp	.+530    	; 0x220 <__bad_interrupt>
       e:	00 00       	nop
      10:	07 c1       	rjmp	.+526    	; 0x220 <__bad_interrupt>
      12:	00 00       	nop
      14:	05 c1       	rjmp	.+522    	; 0x220 <__bad_interrupt>
      16:	00 00       	nop
      18:	03 c1       	rjmp	.+518    	; 0x220 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	01 c1       	rjmp	.+514    	; 0x220 <__bad_interrupt>
      1e:	00 00       	nop
      20:	ff c0       	rjmp	.+510    	; 0x220 <__bad_interrupt>
      22:	00 00       	nop
      24:	fd c0       	rjmp	.+506    	; 0x220 <__bad_interrupt>
      26:	00 00       	nop
      28:	fb c0       	rjmp	.+502    	; 0x220 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	f9 c0       	rjmp	.+498    	; 0x220 <__bad_interrupt>
      2e:	00 00       	nop
      30:	0c 94 2c 0e 	jmp	0x1c58	; 0x1c58 <__vector_12>
      34:	f5 c0       	rjmp	.+490    	; 0x220 <__bad_interrupt>
      36:	00 00       	nop
      38:	f3 c0       	rjmp	.+486    	; 0x220 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	f1 c0       	rjmp	.+482    	; 0x220 <__bad_interrupt>
      3e:	00 00       	nop
      40:	ef c0       	rjmp	.+478    	; 0x220 <__bad_interrupt>
      42:	00 00       	nop
      44:	0c 94 5f 0d 	jmp	0x1abe	; 0x1abe <__vector_17>
      48:	eb c0       	rjmp	.+470    	; 0x220 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	e9 c0       	rjmp	.+466    	; 0x220 <__bad_interrupt>
      4e:	00 00       	nop
      50:	e7 c0       	rjmp	.+462    	; 0x220 <__bad_interrupt>
      52:	00 00       	nop
      54:	e5 c0       	rjmp	.+458    	; 0x220 <__bad_interrupt>
      56:	00 00       	nop
      58:	e3 c0       	rjmp	.+454    	; 0x220 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	e1 c0       	rjmp	.+450    	; 0x220 <__bad_interrupt>
      5e:	00 00       	nop
      60:	df c0       	rjmp	.+446    	; 0x220 <__bad_interrupt>
      62:	00 00       	nop
      64:	0c 94 fc 0d 	jmp	0x1bf8	; 0x1bf8 <__vector_25>
      68:	db c0       	rjmp	.+438    	; 0x220 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	d9 c0       	rjmp	.+434    	; 0x220 <__bad_interrupt>
      6e:	00 00       	nop
      70:	d7 c0       	rjmp	.+430    	; 0x220 <__bad_interrupt>
      72:	00 00       	nop
      74:	d5 c0       	rjmp	.+426    	; 0x220 <__bad_interrupt>
      76:	00 00       	nop
      78:	d3 c0       	rjmp	.+422    	; 0x220 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	d1 c0       	rjmp	.+418    	; 0x220 <__bad_interrupt>
      7e:	00 00       	nop
      80:	cf c0       	rjmp	.+414    	; 0x220 <__bad_interrupt>
      82:	00 00       	nop
      84:	cd c0       	rjmp	.+410    	; 0x220 <__bad_interrupt>
      86:	00 00       	nop
      88:	cb c0       	rjmp	.+406    	; 0x220 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	c9 c0       	rjmp	.+402    	; 0x220 <__bad_interrupt>
      8e:	00 00       	nop
      90:	c7 c0       	rjmp	.+398    	; 0x220 <__bad_interrupt>
      92:	00 00       	nop
      94:	c5 c0       	rjmp	.+394    	; 0x220 <__bad_interrupt>
      96:	00 00       	nop
      98:	c3 c0       	rjmp	.+390    	; 0x220 <__bad_interrupt>
      9a:	00 00       	nop
      9c:	c1 c0       	rjmp	.+386    	; 0x220 <__bad_interrupt>
      9e:	00 00       	nop
      a0:	bf c0       	rjmp	.+382    	; 0x220 <__bad_interrupt>
      a2:	00 00       	nop
      a4:	bd c0       	rjmp	.+378    	; 0x220 <__bad_interrupt>
      a6:	00 00       	nop
      a8:	bb c0       	rjmp	.+374    	; 0x220 <__bad_interrupt>
      aa:	00 00       	nop
      ac:	b9 c0       	rjmp	.+370    	; 0x220 <__bad_interrupt>
      ae:	00 00       	nop
      b0:	b7 c0       	rjmp	.+366    	; 0x220 <__bad_interrupt>
      b2:	00 00       	nop
      b4:	b5 c0       	rjmp	.+362    	; 0x220 <__bad_interrupt>
      b6:	00 00       	nop
      b8:	b3 c0       	rjmp	.+358    	; 0x220 <__bad_interrupt>
      ba:	00 00       	nop
      bc:	b1 c0       	rjmp	.+354    	; 0x220 <__bad_interrupt>
      be:	00 00       	nop
      c0:	af c0       	rjmp	.+350    	; 0x220 <__bad_interrupt>
      c2:	00 00       	nop
      c4:	ad c0       	rjmp	.+346    	; 0x220 <__bad_interrupt>
      c6:	00 00       	nop
      c8:	ab c0       	rjmp	.+342    	; 0x220 <__bad_interrupt>
      ca:	00 00       	nop
      cc:	a9 c0       	rjmp	.+338    	; 0x220 <__bad_interrupt>
      ce:	00 00       	nop
      d0:	a7 c0       	rjmp	.+334    	; 0x220 <__bad_interrupt>
      d2:	00 00       	nop
      d4:	a5 c0       	rjmp	.+330    	; 0x220 <__bad_interrupt>
      d6:	00 00       	nop
      d8:	a3 c0       	rjmp	.+326    	; 0x220 <__bad_interrupt>
      da:	00 00       	nop
      dc:	a1 c0       	rjmp	.+322    	; 0x220 <__bad_interrupt>
      de:	00 00       	nop
      e0:	9f c0       	rjmp	.+318    	; 0x220 <__bad_interrupt>
	...

000000e4 <__trampolines_end>:
      e4:	6e 61       	ori	r22, 0x1E	; 30
      e6:	6e 00       	.word	0x006e	; ????

000000e8 <__c.2332>:
      e8:	69 6e 66 00 00 40 7a 10 f3 5a 00 a0 72 4e 18 09     inf..@z..Z..rN..
      f8:	00 10 a5 d4 e8 00 00 e8 76 48 17 00 00 e4 0b 54     ........vH.....T
     108:	02 00 00 ca 9a 3b 00 00 00 e1 f5 05 00 00 80 96     .....;..........
     118:	98 00 00 00 40 42 0f 00 00 00 a0 86 01 00 00 00     ....@B..........
     128:	10 27 00 00 00 00 e8 03 00 00 00 00 64 00 00 00     .'..........d...
     138:	00 00 0a 00 00 00 00 00 01 00 00 00 00 00 2c 76     ..............,v
     148:	d8 88 dc 67 4f 08 23 df c1 df ae 59 e1 b1 b7 96     ...gO.#....Y....
     158:	e5 e3 e4 53 c6 3a e6 51 99 76 96 e8 e6 c2 84 26     ...S.:.Q.v.....&
     168:	eb 89 8c 9b 62 ed 40 7c 6f fc ef bc 9c 9f 40 f2     ....b.@|o.....@.
     178:	ba a5 6f a5 f4 90 05 5a 2a f7 5c 93 6b 6c f9 67     ..o....Z*.\.kl.g
     188:	6d c1 1b fc e0 e4 0d 47 fe f5 20 e6 b5 00 d0 ed     m......G.. .....
     198:	90 2e 03 00 94 35 77 05 00 80 84 1e 08 00 00 20     .....5w........ 
     1a8:	4e 0a 00 00 00 c8 0c 33 33 33 33 0f 98 6e 12 83     N......3333..n..
     1b8:	11 41 ef 8d 21 14 89 3b e6 55 16 cf fe e6 db 18     .A..!..;.U......
     1c8:	d1 84 4b 38 1b f7 7c 1d 90 1d a4 bb e4 24 20 32     ..K8..|......$ 2
     1d8:	84 72 5e 22 81 00 c9 f1 24 ec a1 e5 3d 27           .r^"....$...='

000001e6 <__ctors_end>:
     1e6:	11 24       	eor	r1, r1
     1e8:	1f be       	out	0x3f, r1	; 63
     1ea:	cf ef       	ldi	r28, 0xFF	; 255
     1ec:	d1 e2       	ldi	r29, 0x21	; 33
     1ee:	de bf       	out	0x3e, r29	; 62
     1f0:	cd bf       	out	0x3d, r28	; 61

000001f2 <__do_copy_data>:
     1f2:	13 e0       	ldi	r17, 0x03	; 3
     1f4:	a0 e0       	ldi	r26, 0x00	; 0
     1f6:	b2 e0       	ldi	r27, 0x02	; 2
     1f8:	e2 e3       	ldi	r30, 0x32	; 50
     1fa:	fb e2       	ldi	r31, 0x2B	; 43
     1fc:	02 c0       	rjmp	.+4      	; 0x202 <__do_copy_data+0x10>
     1fe:	05 90       	lpm	r0, Z+
     200:	0d 92       	st	X+, r0
     202:	a4 3e       	cpi	r26, 0xE4	; 228
     204:	b1 07       	cpc	r27, r17
     206:	d9 f7       	brne	.-10     	; 0x1fe <__do_copy_data+0xc>

00000208 <__do_clear_bss>:
     208:	24 e0       	ldi	r18, 0x04	; 4
     20a:	a4 ee       	ldi	r26, 0xE4	; 228
     20c:	b3 e0       	ldi	r27, 0x03	; 3
     20e:	01 c0       	rjmp	.+2      	; 0x212 <.do_clear_bss_start>

00000210 <.do_clear_bss_loop>:
     210:	1d 92       	st	X+, r1

00000212 <.do_clear_bss_start>:
     212:	af 35       	cpi	r26, 0x5F	; 95
     214:	b2 07       	cpc	r27, r18
     216:	e1 f7       	brne	.-8      	; 0x210 <.do_clear_bss_loop>
     218:	0e 94 51 0e 	call	0x1ca2	; 0x1ca2 <main>
     21c:	0c 94 97 15 	jmp	0x2b2e	; 0x2b2e <_exit>

00000220 <__bad_interrupt>:
     220:	ef ce       	rjmp	.-546    	; 0x0 <__vectors>

00000222 <Change_ADC>:
// Date: 2019-01-15
// Description: Change ADC_MUX to read next value
/*========================================================================================*/

void Change_ADC(int i){
	if (i < 4){
     222:	84 30       	cpi	r24, 0x04	; 4
     224:	91 05       	cpc	r25, r1
     226:	44 f4       	brge	.+16     	; 0x238 <Change_ADC+0x16>
		ADCSRB &= 0xf7;
     228:	eb e7       	ldi	r30, 0x7B	; 123
     22a:	f0 e0       	ldi	r31, 0x00	; 0
     22c:	90 81       	ld	r25, Z
     22e:	97 7f       	andi	r25, 0xF7	; 247
     230:	90 83       	st	Z, r25
		ADMUX = 0x00 + i;
     232:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>
     236:	08 95       	ret
	}
	else{
		ADCSRB = 0x08;
     238:	98 e0       	ldi	r25, 0x08	; 8
     23a:	90 93 7b 00 	sts	0x007B, r25	; 0x80007b <__TEXT_REGION_LENGTH__+0x7e007b>
		ADMUX = 0x00 + (i - 4);
     23e:	84 50       	subi	r24, 0x04	; 4
     240:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>
     244:	08 95       	ret

00000246 <Read_ADC>:
/*========================================================================================*/

uint16_t Read_ADC(){
	
	// start conversion
	ADCSRA |= 0x40;
     246:	ea e7       	ldi	r30, 0x7A	; 122
     248:	f0 e0       	ldi	r31, 0x00	; 0
     24a:	80 81       	ld	r24, Z
     24c:	80 64       	ori	r24, 0x40	; 64
     24e:	80 83       	st	Z, r24
	
	// Wait until conversion is done
	while(ADCSRA & 0x40);
     250:	80 81       	ld	r24, Z
     252:	86 fd       	sbrc	r24, 6
     254:	fd cf       	rjmp	.-6      	; 0x250 <Read_ADC+0xa>
	
	return ADC;
     256:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
     25a:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
}
     25e:	08 95       	ret

00000260 <Check_ADC>:
/*========================================================================================*/

float Check_ADC(int i){
	
	// Choose the correct ADC channel to read from
	Change_ADC(i);
     260:	e0 df       	rcall	.-64     	; 0x222 <Change_ADC>
	
	// Get the read value from the ADC
	return Read_ADC();	
     262:	f1 df       	rcall	.-30     	; 0x246 <Read_ADC>
     264:	bc 01       	movw	r22, r24
     266:	80 e0       	ldi	r24, 0x00	; 0
     268:	90 e0       	ldi	r25, 0x00	; 0
     26a:	0c 94 2e 0f 	jmp	0x1e5c	; 0x1e5c <__floatunsisf>
     26e:	08 95       	ret

00000270 <Volt_ADC>:
	
}
     270:	9c 01       	movw	r18, r24
// Date: 2019-03-06
// Description: Voltage Measurements via ADC.
/*========================================================================================*/

float Volt_ADC(int Volt_num){
	int ADC_num = Volt_num + 4; // ADC_num is the value needed for Change_ADC
     272:	2c 5f       	subi	r18, 0xFC	; 252
     274:	3f 4f       	sbci	r19, 0xFF	; 255
	
	// Explained
	// voltage = (ADC_value / total resolution)
	
	// 3V3-1 & 3V3-2 rails
	if(ADC_num == 4 || ADC_num == 5){
     276:	02 97       	sbiw	r24, 0x02	; 2
     278:	a8 f4       	brcc	.+42     	; 0x2a4 <Volt_ADC+0x34>
		val = ((Check_ADC(ADC_num) / 1024) * 3.3) / 0.9090;
     27a:	c9 01       	movw	r24, r18
     27c:	f1 df       	rcall	.-30     	; 0x260 <Check_ADC>
     27e:	20 e0       	ldi	r18, 0x00	; 0
     280:	30 e0       	ldi	r19, 0x00	; 0
     282:	40 e8       	ldi	r20, 0x80	; 128
     284:	5a e3       	ldi	r21, 0x3A	; 58
     286:	0e 94 e4 0f 	call	0x1fc8	; 0x1fc8 <__mulsf3>
     28a:	23 e3       	ldi	r18, 0x33	; 51
     28c:	33 e3       	ldi	r19, 0x33	; 51
     28e:	43 e5       	ldi	r20, 0x53	; 83
     290:	50 e4       	ldi	r21, 0x40	; 64
     292:	0e 94 e4 0f 	call	0x1fc8	; 0x1fc8 <__mulsf3>
     296:	29 e3       	ldi	r18, 0x39	; 57
     298:	34 eb       	ldi	r19, 0xB4	; 180
     29a:	48 e6       	ldi	r20, 0x68	; 104
     29c:	5f e3       	ldi	r21, 0x3F	; 63
     29e:	0c 94 c6 0e 	jmp	0x1d8c	; 0x1d8c <__divsf3>
     2a2:	08 95       	ret
	}
	// 5V rail
	else if(ADC_num == 6){
     2a4:	26 30       	cpi	r18, 0x06	; 6
     2a6:	31 05       	cpc	r19, r1
     2a8:	b1 f4       	brne	.+44     	; 0x2d6 <Volt_ADC+0x66>
		val = ((Check_ADC(ADC_num) / 1024) * 3.3) / 0.5997;
     2aa:	86 e0       	ldi	r24, 0x06	; 6
     2ac:	90 e0       	ldi	r25, 0x00	; 0
     2ae:	d8 df       	rcall	.-80     	; 0x260 <Check_ADC>
     2b0:	20 e0       	ldi	r18, 0x00	; 0
     2b2:	30 e0       	ldi	r19, 0x00	; 0
     2b4:	40 e8       	ldi	r20, 0x80	; 128
     2b6:	5a e3       	ldi	r21, 0x3A	; 58
     2b8:	0e 94 e4 0f 	call	0x1fc8	; 0x1fc8 <__mulsf3>
     2bc:	23 e3       	ldi	r18, 0x33	; 51
     2be:	33 e3       	ldi	r19, 0x33	; 51
     2c0:	43 e5       	ldi	r20, 0x53	; 83
     2c2:	50 e4       	ldi	r21, 0x40	; 64
     2c4:	0e 94 e4 0f 	call	0x1fc8	; 0x1fc8 <__mulsf3>
     2c8:	20 ef       	ldi	r18, 0xF0	; 240
     2ca:	35 e8       	ldi	r19, 0x85	; 133
     2cc:	49 e1       	ldi	r20, 0x19	; 25
     2ce:	5f e3       	ldi	r21, 0x3F	; 63
     2d0:	0c 94 c6 0e 	jmp	0x1d8c	; 0x1d8c <__divsf3>
     2d4:	08 95       	ret
		// Correction factor (through testing)
		// 69 (mV) offset
	}
	// 8V rail
	else if(ADC_num == 7){
     2d6:	27 30       	cpi	r18, 0x07	; 7
     2d8:	31 05       	cpc	r19, r1
     2da:	b1 f4       	brne	.+44     	; 0x308 <Volt_ADC+0x98>
		val = ((Check_ADC(ADC_num) / 1024) * 3.3) / 0.3597;
     2dc:	87 e0       	ldi	r24, 0x07	; 7
     2de:	90 e0       	ldi	r25, 0x00	; 0
     2e0:	bf df       	rcall	.-130    	; 0x260 <Check_ADC>
     2e2:	20 e0       	ldi	r18, 0x00	; 0
     2e4:	30 e0       	ldi	r19, 0x00	; 0
     2e6:	40 e8       	ldi	r20, 0x80	; 128
     2e8:	5a e3       	ldi	r21, 0x3A	; 58
     2ea:	0e 94 e4 0f 	call	0x1fc8	; 0x1fc8 <__mulsf3>
     2ee:	23 e3       	ldi	r18, 0x33	; 51
     2f0:	33 e3       	ldi	r19, 0x33	; 51
     2f2:	43 e5       	ldi	r20, 0x53	; 83
     2f4:	50 e4       	ldi	r21, 0x40	; 64
     2f6:	0e 94 e4 0f 	call	0x1fc8	; 0x1fc8 <__mulsf3>
     2fa:	29 e9       	ldi	r18, 0x99	; 153
     2fc:	3a e2       	ldi	r19, 0x2A	; 42
     2fe:	48 eb       	ldi	r20, 0xB8	; 184
     300:	5e e3       	ldi	r21, 0x3E	; 62
     302:	0c 94 c6 0e 	jmp	0x1d8c	; 0x1d8c <__divsf3>
     306:	08 95       	ret
	}
	// VBatt rail
	else if(ADC_num == 8){
     308:	28 30       	cpi	r18, 0x08	; 8
     30a:	31 05       	cpc	r19, r1
		val = ((Check_ADC(ADC_num) / 1024) * 3.3) / 0.7141;
     30c:	b1 f4       	brne	.+44     	; 0x33a <Volt_ADC+0xca>
     30e:	88 e0       	ldi	r24, 0x08	; 8
     310:	90 e0       	ldi	r25, 0x00	; 0
     312:	a6 df       	rcall	.-180    	; 0x260 <Check_ADC>
     314:	20 e0       	ldi	r18, 0x00	; 0
     316:	30 e0       	ldi	r19, 0x00	; 0
     318:	40 e8       	ldi	r20, 0x80	; 128
     31a:	5a e3       	ldi	r21, 0x3A	; 58
     31c:	0e 94 e4 0f 	call	0x1fc8	; 0x1fc8 <__mulsf3>
     320:	23 e3       	ldi	r18, 0x33	; 51
     322:	33 e3       	ldi	r19, 0x33	; 51
     324:	43 e5       	ldi	r20, 0x53	; 83
     326:	50 e4       	ldi	r21, 0x40	; 64
     328:	0e 94 e4 0f 	call	0x1fc8	; 0x1fc8 <__mulsf3>
     32c:	22 e4       	ldi	r18, 0x42	; 66
     32e:	3f ec       	ldi	r19, 0xCF	; 207
     330:	46 e3       	ldi	r20, 0x36	; 54
     332:	5f e3       	ldi	r21, 0x3F	; 63
     334:	0c 94 c6 0e 	jmp	0x1d8c	; 0x1d8c <__divsf3>
     338:	08 95       	ret
// Description: Voltage Measurements via ADC.
/*========================================================================================*/

float Volt_ADC(int Volt_num){
	int ADC_num = Volt_num + 4; // ADC_num is the value needed for Change_ADC
	float val = 0;
     33a:	60 e0       	ldi	r22, 0x00	; 0
     33c:	70 e0       	ldi	r23, 0x00	; 0
     33e:	cb 01       	movw	r24, r22
	}
	else{
		// do nothing
	}
	return val;
}
     340:	08 95       	ret

00000342 <Amp_ADC>:
// Author: Chris Thomas
// Date: 2019-03-06
// Description: Ammeter measurements via ADC.
/*========================================================================================*/

float Amp_ADC(int Amp_num){
     342:	4f 92       	push	r4
     344:	5f 92       	push	r5
     346:	6f 92       	push	r6
     348:	7f 92       	push	r7
     34a:	8f 92       	push	r8
     34c:	9f 92       	push	r9
     34e:	af 92       	push	r10
     350:	bf 92       	push	r11
     352:	cf 92       	push	r12
     354:	df 92       	push	r13
     356:	ef 92       	push	r14
     358:	ff 92       	push	r15
     35a:	0f 93       	push	r16
     35c:	1f 93       	push	r17
     35e:	cf 93       	push	r28
     360:	df 93       	push	r29
     362:	cd b7       	in	r28, 0x3d	; 61
     364:	de b7       	in	r29, 0x3e	; 62
     366:	68 97       	sbiw	r28, 0x18	; 24
     368:	0f b6       	in	r0, 0x3f	; 63
     36a:	f8 94       	cli
     36c:	de bf       	out	0x3e, r29	; 62
     36e:	0f be       	out	0x3f, r0	; 63
     370:	cd bf       	out	0x3d, r28	; 61
     372:	5c 01       	movw	r10, r24
	int ADC_num = 0; // initialize ADC number to check
	float val = 0; // initialize the voltage value to 0 V
	float zero[6] = {0.515, 0.542, 0.523, 0.505, 0.508, 0.530};
     374:	88 e1       	ldi	r24, 0x18	; 24
     376:	e0 e0       	ldi	r30, 0x00	; 0
     378:	f2 e0       	ldi	r31, 0x02	; 2
     37a:	de 01       	movw	r26, r28
     37c:	11 96       	adiw	r26, 0x01	; 1
     37e:	01 90       	ld	r0, Z+
     380:	0d 92       	st	X+, r0
     382:	8a 95       	dec	r24
     384:	e1 f7       	brne	.-8      	; 0x37e <Amp_ADC+0x3c>
	int i = 0;
	
	// Voltage rail current 8V, 5V, 3V3-1, 3V3-2 respectively
	if(Amp_num < 4){
     386:	84 e0       	ldi	r24, 0x04	; 4
     388:	a8 16       	cp	r10, r24
     38a:	b1 04       	cpc	r11, r1
     38c:	0c f0       	brlt	.+2      	; 0x390 <Amp_ADC+0x4e>
     38e:	3d c0       	rjmp	.+122    	; 0x40a <__LOCK_REGION_LENGTH__+0xa>
     390:	09 e1       	ldi	r16, 0x19	; 25
     392:	10 e0       	ldi	r17, 0x00	; 0
     394:	c1 2c       	mov	r12, r1
     396:	d1 2c       	mov	r13, r1
     398:	76 01       	movw	r14, r12
		ADC_num = Amp_num;
		while(i < 25){
			val += (((Check_ADC(ADC_num) / 1024) * 3.3) - zero[Amp_num]) / 0.4;
     39a:	45 01       	movw	r8, r10
     39c:	88 0c       	add	r8, r8
     39e:	99 1c       	adc	r9, r9
     3a0:	88 0c       	add	r8, r8
     3a2:	99 1c       	adc	r9, r9
     3a4:	e1 e0       	ldi	r30, 0x01	; 1
     3a6:	f0 e0       	ldi	r31, 0x00	; 0
     3a8:	ec 0f       	add	r30, r28
     3aa:	fd 1f       	adc	r31, r29
     3ac:	8e 0e       	add	r8, r30
     3ae:	9f 1e       	adc	r9, r31
     3b0:	c5 01       	movw	r24, r10
     3b2:	56 df       	rcall	.-340    	; 0x260 <Check_ADC>
     3b4:	20 e0       	ldi	r18, 0x00	; 0
     3b6:	30 e0       	ldi	r19, 0x00	; 0
     3b8:	40 e8       	ldi	r20, 0x80	; 128
     3ba:	5a e3       	ldi	r21, 0x3A	; 58
     3bc:	0e 94 e4 0f 	call	0x1fc8	; 0x1fc8 <__mulsf3>
     3c0:	23 e3       	ldi	r18, 0x33	; 51
     3c2:	33 e3       	ldi	r19, 0x33	; 51
     3c4:	43 e5       	ldi	r20, 0x53	; 83
     3c6:	50 e4       	ldi	r21, 0x40	; 64
     3c8:	0e 94 e4 0f 	call	0x1fc8	; 0x1fc8 <__mulsf3>
     3cc:	f4 01       	movw	r30, r8
     3ce:	20 81       	ld	r18, Z
     3d0:	31 81       	ldd	r19, Z+1	; 0x01
     3d2:	42 81       	ldd	r20, Z+2	; 0x02
     3d4:	53 81       	ldd	r21, Z+3	; 0x03
     3d6:	0e 94 5d 0e 	call	0x1cba	; 0x1cba <__subsf3>
     3da:	2d ec       	ldi	r18, 0xCD	; 205
     3dc:	3c ec       	ldi	r19, 0xCC	; 204
     3de:	4c ec       	ldi	r20, 0xCC	; 204
     3e0:	5e e3       	ldi	r21, 0x3E	; 62
     3e2:	0e 94 c6 0e 	call	0x1d8c	; 0x1d8c <__divsf3>
     3e6:	9b 01       	movw	r18, r22
     3e8:	ac 01       	movw	r20, r24
     3ea:	c7 01       	movw	r24, r14
     3ec:	b6 01       	movw	r22, r12
     3ee:	0e 94 5e 0e 	call	0x1cbc	; 0x1cbc <__addsf3>
     3f2:	6b 01       	movw	r12, r22
     3f4:	7c 01       	movw	r14, r24
     3f6:	01 50       	subi	r16, 0x01	; 1
     3f8:	11 09       	sbc	r17, r1
	int i = 0;
	
	// Voltage rail current 8V, 5V, 3V3-1, 3V3-2 respectively
	if(Amp_num < 4){
		ADC_num = Amp_num;
		while(i < 25){
     3fa:	d1 f6       	brne	.-76     	; 0x3b0 <Amp_ADC+0x6e>
			val += (((Check_ADC(ADC_num) / 1024) * 3.3) - zero[Amp_num]) / 0.4;
			i++;
		}
		val = val/25;
     3fc:	20 e0       	ldi	r18, 0x00	; 0
     3fe:	30 e0       	ldi	r19, 0x00	; 0
     400:	48 ec       	ldi	r20, 0xC8	; 200
     402:	51 e4       	ldi	r21, 0x41	; 65
     404:	0e 94 c6 0e 	call	0x1d8c	; 0x1d8c <__divsf3>
     408:	48 c0       	rjmp	.+144    	; 0x49a <__LOCK_REGION_LENGTH__+0x9a>
	}
	// Solar current and Battery current, respectively
	else if(Amp_num == 4 || Amp_num == 5){
     40a:	c5 01       	movw	r24, r10
     40c:	04 97       	sbiw	r24, 0x04	; 4
     40e:	02 97       	sbiw	r24, 0x02	; 2
     410:	08 f0       	brcs	.+2      	; 0x414 <__LOCK_REGION_LENGTH__+0x14>
     412:	40 c0       	rjmp	.+128    	; 0x494 <__LOCK_REGION_LENGTH__+0x94>
		ADC_num = Amp_num + 5;
     414:	75 01       	movw	r14, r10
     416:	f5 e0       	ldi	r31, 0x05	; 5
     418:	ef 0e       	add	r14, r31
     41a:	f1 1c       	adc	r15, r1
     41c:	09 e1       	ldi	r16, 0x19	; 25
     41e:	10 e0       	ldi	r17, 0x00	; 0
// Description: Ammeter measurements via ADC.
/*========================================================================================*/

float Amp_ADC(int Amp_num){
	int ADC_num = 0; // initialize ADC number to check
	float val = 0; // initialize the voltage value to 0 V
     420:	41 2c       	mov	r4, r1
     422:	51 2c       	mov	r5, r1
     424:	32 01       	movw	r6, r4
	}
	// Solar current and Battery current, respectively
	else if(Amp_num == 4 || Amp_num == 5){
		ADC_num = Amp_num + 5;
		while(i < 25){
			val += (((Check_ADC(ADC_num) / 1024) * 3.3) - zero[Amp_num]) / 0.4;
     426:	aa 0c       	add	r10, r10
     428:	bb 1c       	adc	r11, r11
     42a:	aa 0c       	add	r10, r10
     42c:	bb 1c       	adc	r11, r11
     42e:	81 e0       	ldi	r24, 0x01	; 1
     430:	90 e0       	ldi	r25, 0x00	; 0
     432:	8c 0f       	add	r24, r28
     434:	9d 1f       	adc	r25, r29
     436:	a8 0e       	add	r10, r24
     438:	b9 1e       	adc	r11, r25
     43a:	c7 01       	movw	r24, r14
     43c:	11 df       	rcall	.-478    	; 0x260 <Check_ADC>
     43e:	20 e0       	ldi	r18, 0x00	; 0
     440:	30 e0       	ldi	r19, 0x00	; 0
     442:	40 e8       	ldi	r20, 0x80	; 128
     444:	5a e3       	ldi	r21, 0x3A	; 58
     446:	0e 94 e4 0f 	call	0x1fc8	; 0x1fc8 <__mulsf3>
     44a:	23 e3       	ldi	r18, 0x33	; 51
     44c:	33 e3       	ldi	r19, 0x33	; 51
     44e:	43 e5       	ldi	r20, 0x53	; 83
     450:	50 e4       	ldi	r21, 0x40	; 64
     452:	0e 94 e4 0f 	call	0x1fc8	; 0x1fc8 <__mulsf3>
     456:	f5 01       	movw	r30, r10
     458:	20 81       	ld	r18, Z
     45a:	31 81       	ldd	r19, Z+1	; 0x01
     45c:	42 81       	ldd	r20, Z+2	; 0x02
     45e:	53 81       	ldd	r21, Z+3	; 0x03
     460:	0e 94 5d 0e 	call	0x1cba	; 0x1cba <__subsf3>
     464:	2d ec       	ldi	r18, 0xCD	; 205
     466:	3c ec       	ldi	r19, 0xCC	; 204
     468:	4c ec       	ldi	r20, 0xCC	; 204
     46a:	5e e3       	ldi	r21, 0x3E	; 62
     46c:	0e 94 c6 0e 	call	0x1d8c	; 0x1d8c <__divsf3>
     470:	9b 01       	movw	r18, r22
     472:	ac 01       	movw	r20, r24
     474:	c3 01       	movw	r24, r6
     476:	b2 01       	movw	r22, r4
     478:	0e 94 5e 0e 	call	0x1cbc	; 0x1cbc <__addsf3>
     47c:	2b 01       	movw	r4, r22
     47e:	3c 01       	movw	r6, r24
     480:	01 50       	subi	r16, 0x01	; 1
     482:	11 09       	sbc	r17, r1
		val = val/25;
	}
	// Solar current and Battery current, respectively
	else if(Amp_num == 4 || Amp_num == 5){
		ADC_num = Amp_num + 5;
		while(i < 25){
     484:	d1 f6       	brne	.-76     	; 0x43a <__LOCK_REGION_LENGTH__+0x3a>
			val += (((Check_ADC(ADC_num) / 1024) * 3.3) - zero[Amp_num]) / 0.4;
			i++;
		}
		val = val/25;
     486:	20 e0       	ldi	r18, 0x00	; 0
     488:	30 e0       	ldi	r19, 0x00	; 0
     48a:	48 ec       	ldi	r20, 0xC8	; 200
     48c:	51 e4       	ldi	r21, 0x41	; 65
     48e:	0e 94 c6 0e 	call	0x1d8c	; 0x1d8c <__divsf3>
     492:	03 c0       	rjmp	.+6      	; 0x49a <__LOCK_REGION_LENGTH__+0x9a>
// Description: Ammeter measurements via ADC.
/*========================================================================================*/

float Amp_ADC(int Amp_num){
	int ADC_num = 0; // initialize ADC number to check
	float val = 0; // initialize the voltage value to 0 V
     494:	60 e0       	ldi	r22, 0x00	; 0
     496:	70 e0       	ldi	r23, 0x00	; 0
     498:	cb 01       	movw	r24, r22
			i++;
		}
		val = val/25;
	}
	return val;
}
     49a:	68 96       	adiw	r28, 0x18	; 24
     49c:	0f b6       	in	r0, 0x3f	; 63
     49e:	f8 94       	cli
     4a0:	de bf       	out	0x3e, r29	; 62
     4a2:	0f be       	out	0x3f, r0	; 63
     4a4:	cd bf       	out	0x3d, r28	; 61
     4a6:	df 91       	pop	r29
     4a8:	cf 91       	pop	r28
     4aa:	1f 91       	pop	r17
     4ac:	0f 91       	pop	r16
     4ae:	ff 90       	pop	r15
     4b0:	ef 90       	pop	r14
     4b2:	df 90       	pop	r13
     4b4:	cf 90       	pop	r12
     4b6:	bf 90       	pop	r11
     4b8:	af 90       	pop	r10
     4ba:	9f 90       	pop	r9
     4bc:	8f 90       	pop	r8
     4be:	7f 90       	pop	r7
     4c0:	6f 90       	pop	r6
     4c2:	5f 90       	pop	r5
     4c4:	4f 90       	pop	r4
     4c6:	08 95       	ret

000004c8 <Temp_ADC>:
// Author: Chris Thomas
// Date: 2019-03-17
// Description: Temperature measurement via ADC.
/*========================================================================================*/

float Temp_ADC(){
     4c8:	cf 92       	push	r12
     4ca:	df 92       	push	r13
     4cc:	ef 92       	push	r14
     4ce:	ff 92       	push	r15
     4d0:	0f 93       	push	r16
     4d2:	1f 93       	push	r17
     4d4:	cf 93       	push	r28
     4d6:	df 93       	push	r29
	int i = 0;
	float temp;
	
	// Enable temperature sensor
	Clear_GPIO(1);
     4d8:	81 e0       	ldi	r24, 0x01	; 1
     4da:	90 e0       	ldi	r25, 0x00	; 0
     4dc:	05 d7       	rcall	.+3594   	; 0x12e8 <Clear_GPIO>
     4de:	01 e0       	ldi	r16, 0x01	; 1
     4e0:	10 e0       	ldi	r17, 0x00	; 0
     4e2:	c0 e0       	ldi	r28, 0x00	; 0
     4e4:	d0 e0       	ldi	r29, 0x00	; 0
     4e6:	03 c0       	rjmp	.+6      	; 0x4ee <Temp_ADC+0x26>
     4e8:	21 96       	adiw	r28, 0x01	; 1
     4ea:	0f 5f       	subi	r16, 0xFF	; 255
     4ec:	1f 4f       	sbci	r17, 0xFF	; 255
	
	 // 3 Temperature sensors on battery
	while(i < 3){
		if (i == 0){
     4ee:	20 97       	sbiw	r28, 0x00	; 0
     4f0:	69 f5       	brne	.+90     	; 0x54c <Temp_ADC+0x84>
			Clear_GPIO(4);
     4f2:	84 e0       	ldi	r24, 0x04	; 4
     4f4:	90 e0       	ldi	r25, 0x00	; 0
     4f6:	f8 d6       	rcall	.+3568   	; 0x12e8 <Clear_GPIO>
			Set_GPIO(5);
     4f8:	85 e0       	ldi	r24, 0x05	; 5
     4fa:	90 e0       	ldi	r25, 0x00	; 0
     4fc:	8f d6       	rcall	.+3358   	; 0x121c <Set_GPIO>
			Set_GPIO(6);
     4fe:	86 e0       	ldi	r24, 0x06	; 6
     500:	90 e0       	ldi	r25, 0x00	; 0
     502:	8c d6       	rcall	.+3352   	; 0x121c <Set_GPIO>
			temp += (((Check_ADC(11) / 1024) * 3.3) - 0.6972) / 0.0328;
     504:	8b e0       	ldi	r24, 0x0B	; 11
     506:	90 e0       	ldi	r25, 0x00	; 0
     508:	ab de       	rcall	.-682    	; 0x260 <Check_ADC>
     50a:	20 e0       	ldi	r18, 0x00	; 0
     50c:	30 e0       	ldi	r19, 0x00	; 0
     50e:	40 e8       	ldi	r20, 0x80	; 128
     510:	5a e3       	ldi	r21, 0x3A	; 58
     512:	0e 94 e4 0f 	call	0x1fc8	; 0x1fc8 <__mulsf3>
     516:	23 e3       	ldi	r18, 0x33	; 51
     518:	33 e3       	ldi	r19, 0x33	; 51
     51a:	43 e5       	ldi	r20, 0x53	; 83
     51c:	50 e4       	ldi	r21, 0x40	; 64
     51e:	0e 94 e4 0f 	call	0x1fc8	; 0x1fc8 <__mulsf3>
     522:	23 eb       	ldi	r18, 0xB3	; 179
     524:	3b e7       	ldi	r19, 0x7B	; 123
     526:	42 e3       	ldi	r20, 0x32	; 50
     528:	5f e3       	ldi	r21, 0x3F	; 63
     52a:	0e 94 5d 0e 	call	0x1cba	; 0x1cba <__subsf3>
     52e:	2b e4       	ldi	r18, 0x4B	; 75
     530:	39 e5       	ldi	r19, 0x59	; 89
     532:	46 e0       	ldi	r20, 0x06	; 6
     534:	5d e3       	ldi	r21, 0x3D	; 61
     536:	0e 94 c6 0e 	call	0x1d8c	; 0x1d8c <__divsf3>
     53a:	9b 01       	movw	r18, r22
     53c:	ac 01       	movw	r20, r24
     53e:	c7 01       	movw	r24, r14
     540:	b6 01       	movw	r22, r12
     542:	0e 94 5e 0e 	call	0x1cbc	; 0x1cbc <__addsf3>
     546:	6b 01       	movw	r12, r22
     548:	7c 01       	movw	r14, r24
     54a:	ce cf       	rjmp	.-100    	; 0x4e8 <Temp_ADC+0x20>
     54c:	c1 30       	cpi	r28, 0x01	; 1
		}
		else if(i == 1){
     54e:	d1 05       	cpc	r29, r1
     550:	69 f5       	brne	.+90     	; 0x5ac <Temp_ADC+0xe4>
			Set_GPIO(4);
     552:	84 e0       	ldi	r24, 0x04	; 4
     554:	90 e0       	ldi	r25, 0x00	; 0
     556:	62 d6       	rcall	.+3268   	; 0x121c <Set_GPIO>
			Set_GPIO(5);
     558:	85 e0       	ldi	r24, 0x05	; 5
     55a:	90 e0       	ldi	r25, 0x00	; 0
     55c:	5f d6       	rcall	.+3262   	; 0x121c <Set_GPIO>
			Clear_GPIO(6);
     55e:	86 e0       	ldi	r24, 0x06	; 6
     560:	90 e0       	ldi	r25, 0x00	; 0
     562:	c2 d6       	rcall	.+3460   	; 0x12e8 <Clear_GPIO>
     564:	8b e0       	ldi	r24, 0x0B	; 11
			temp += (((Check_ADC(11) / 1024) * 3.3) - 0.6972) / 0.0328;
     566:	90 e0       	ldi	r25, 0x00	; 0
     568:	7b de       	rcall	.-778    	; 0x260 <Check_ADC>
     56a:	20 e0       	ldi	r18, 0x00	; 0
     56c:	30 e0       	ldi	r19, 0x00	; 0
     56e:	40 e8       	ldi	r20, 0x80	; 128
     570:	5a e3       	ldi	r21, 0x3A	; 58
     572:	0e 94 e4 0f 	call	0x1fc8	; 0x1fc8 <__mulsf3>
     576:	23 e3       	ldi	r18, 0x33	; 51
     578:	33 e3       	ldi	r19, 0x33	; 51
     57a:	43 e5       	ldi	r20, 0x53	; 83
     57c:	50 e4       	ldi	r21, 0x40	; 64
     57e:	0e 94 e4 0f 	call	0x1fc8	; 0x1fc8 <__mulsf3>
     582:	23 eb       	ldi	r18, 0xB3	; 179
     584:	3b e7       	ldi	r19, 0x7B	; 123
     586:	42 e3       	ldi	r20, 0x32	; 50
     588:	5f e3       	ldi	r21, 0x3F	; 63
     58a:	0e 94 5d 0e 	call	0x1cba	; 0x1cba <__subsf3>
     58e:	2b e4       	ldi	r18, 0x4B	; 75
     590:	39 e5       	ldi	r19, 0x59	; 89
     592:	46 e0       	ldi	r20, 0x06	; 6
     594:	5d e3       	ldi	r21, 0x3D	; 61
     596:	0e 94 c6 0e 	call	0x1d8c	; 0x1d8c <__divsf3>
     59a:	9b 01       	movw	r18, r22
     59c:	ac 01       	movw	r20, r24
     59e:	c7 01       	movw	r24, r14
     5a0:	b6 01       	movw	r22, r12
     5a2:	0e 94 5e 0e 	call	0x1cbc	; 0x1cbc <__addsf3>
     5a6:	6b 01       	movw	r12, r22
     5a8:	7c 01       	movw	r14, r24
     5aa:	9e cf       	rjmp	.-196    	; 0x4e8 <Temp_ADC+0x20>
     5ac:	c2 30       	cpi	r28, 0x02	; 2
		}
		else if (i == 2){
     5ae:	d1 05       	cpc	r29, r1
     5b0:	69 f5       	brne	.+90     	; 0x60c <Temp_ADC+0x144>
			Set_GPIO(4);
     5b2:	84 e0       	ldi	r24, 0x04	; 4
     5b4:	90 e0       	ldi	r25, 0x00	; 0
     5b6:	32 d6       	rcall	.+3172   	; 0x121c <Set_GPIO>
			Set_GPIO(5);
     5b8:	85 e0       	ldi	r24, 0x05	; 5
     5ba:	90 e0       	ldi	r25, 0x00	; 0
     5bc:	2f d6       	rcall	.+3166   	; 0x121c <Set_GPIO>
     5be:	86 e0       	ldi	r24, 0x06	; 6
			Set_GPIO(6);
     5c0:	90 e0       	ldi	r25, 0x00	; 0
     5c2:	2c d6       	rcall	.+3160   	; 0x121c <Set_GPIO>
     5c4:	8b e0       	ldi	r24, 0x0B	; 11
     5c6:	90 e0       	ldi	r25, 0x00	; 0
			temp += (((Check_ADC(11) / 1024) * 3.3) - 0.6972) / 0.0328;
     5c8:	4b de       	rcall	.-874    	; 0x260 <Check_ADC>
     5ca:	20 e0       	ldi	r18, 0x00	; 0
     5cc:	30 e0       	ldi	r19, 0x00	; 0
     5ce:	40 e8       	ldi	r20, 0x80	; 128
     5d0:	5a e3       	ldi	r21, 0x3A	; 58
     5d2:	0e 94 e4 0f 	call	0x1fc8	; 0x1fc8 <__mulsf3>
     5d6:	23 e3       	ldi	r18, 0x33	; 51
     5d8:	33 e3       	ldi	r19, 0x33	; 51
     5da:	43 e5       	ldi	r20, 0x53	; 83
     5dc:	50 e4       	ldi	r21, 0x40	; 64
     5de:	0e 94 e4 0f 	call	0x1fc8	; 0x1fc8 <__mulsf3>
     5e2:	23 eb       	ldi	r18, 0xB3	; 179
     5e4:	3b e7       	ldi	r19, 0x7B	; 123
     5e6:	42 e3       	ldi	r20, 0x32	; 50
     5e8:	5f e3       	ldi	r21, 0x3F	; 63
     5ea:	0e 94 5d 0e 	call	0x1cba	; 0x1cba <__subsf3>
     5ee:	2b e4       	ldi	r18, 0x4B	; 75
     5f0:	39 e5       	ldi	r19, 0x59	; 89
     5f2:	46 e0       	ldi	r20, 0x06	; 6
     5f4:	5d e3       	ldi	r21, 0x3D	; 61
     5f6:	0e 94 c6 0e 	call	0x1d8c	; 0x1d8c <__divsf3>
     5fa:	9b 01       	movw	r18, r22
     5fc:	ac 01       	movw	r20, r24
     5fe:	c7 01       	movw	r24, r14
     600:	b6 01       	movw	r22, r12
     602:	0e 94 5e 0e 	call	0x1cbc	; 0x1cbc <__addsf3>
     606:	6b 01       	movw	r12, r22
     608:	7c 01       	movw	r14, r24
     60a:	04 c0       	rjmp	.+8      	; 0x614 <Temp_ADC+0x14c>
     60c:	03 30       	cpi	r16, 0x03	; 3
	
	// Enable temperature sensor
	Clear_GPIO(1);
	
	 // 3 Temperature sensors on battery
	while(i < 3){
     60e:	11 05       	cpc	r17, r1
     610:	0c f4       	brge	.+2      	; 0x614 <Temp_ADC+0x14c>
     612:	6a cf       	rjmp	.-300    	; 0x4e8 <Temp_ADC+0x20>
		}
		i++;
	}
	
	// Disable temperature Sensor
	Set_GPIO(1);
     614:	81 e0       	ldi	r24, 0x01	; 1
     616:	90 e0       	ldi	r25, 0x00	; 0
     618:	01 d6       	rcall	.+3074   	; 0x121c <Set_GPIO>
     61a:	84 e0       	ldi	r24, 0x04	; 4
	
	// Pull GPIO 4,5 & 6 low
	Clear_GPIO(4);
     61c:	90 e0       	ldi	r25, 0x00	; 0
     61e:	64 d6       	rcall	.+3272   	; 0x12e8 <Clear_GPIO>
     620:	85 e0       	ldi	r24, 0x05	; 5
     622:	90 e0       	ldi	r25, 0x00	; 0
	Clear_GPIO(5);
     624:	61 d6       	rcall	.+3266   	; 0x12e8 <Clear_GPIO>
     626:	86 e0       	ldi	r24, 0x06	; 6
     628:	90 e0       	ldi	r25, 0x00	; 0
     62a:	5e d6       	rcall	.+3260   	; 0x12e8 <Clear_GPIO>
	Clear_GPIO(6);
     62c:	20 e0       	ldi	r18, 0x00	; 0
     62e:	30 e0       	ldi	r19, 0x00	; 0
     630:	40 e4       	ldi	r20, 0x40	; 64
     632:	50 e4       	ldi	r21, 0x40	; 64
	
	// Divide temperature measurements by 3 to get an average (To be discussed)
	return temp/3;
     634:	c7 01       	movw	r24, r14
     636:	b6 01       	movw	r22, r12
     638:	0e 94 c6 0e 	call	0x1d8c	; 0x1d8c <__divsf3>
     63c:	df 91       	pop	r29
     63e:	cf 91       	pop	r28
     640:	1f 91       	pop	r17
     642:	0f 91       	pop	r16
}
     644:	ff 90       	pop	r15
     646:	ef 90       	pop	r14
     648:	df 90       	pop	r13
     64a:	cf 90       	pop	r12
     64c:	08 95       	ret

0000064e <SoC_ADC>:
     64e:	8f 92       	push	r8
     650:	9f 92       	push	r9
     652:	af 92       	push	r10
     654:	bf 92       	push	r11
// Author: Chris Thomas
// Date: 2019-03-17
// Description: Temperature measurement via ADC.
/*========================================================================================*/

float SoC_ADC(float volt, float amp){
     656:	cf 92       	push	r12
     658:	df 92       	push	r13
     65a:	ef 92       	push	r14
     65c:	ff 92       	push	r15
     65e:	6b 01       	movw	r12, r22
     660:	7c 01       	movw	r14, r24
     662:	49 01       	movw	r8, r18
     664:	5a 01       	movw	r10, r20
	
	// Check Battery voltage and current
	
	
	// Lookup table
	if (amp < 0.6 && amp > 0){
     666:	2a e9       	ldi	r18, 0x9A	; 154
     668:	39 e9       	ldi	r19, 0x99	; 153
     66a:	49 e1       	ldi	r20, 0x19	; 25
     66c:	5f e3       	ldi	r21, 0x3F	; 63
     66e:	c5 01       	movw	r24, r10
     670:	b4 01       	movw	r22, r8
     672:	0e 94 c2 0e 	call	0x1d84	; 0x1d84 <__cmpsf2>
     676:	88 23       	and	r24, r24
     678:	0c f0       	brlt	.+2      	; 0x67c <SoC_ADC+0x2e>
     67a:	91 c0       	rjmp	.+290    	; 0x79e <SoC_ADC+0x150>
     67c:	20 e0       	ldi	r18, 0x00	; 0
     67e:	30 e0       	ldi	r19, 0x00	; 0
     680:	a9 01       	movw	r20, r18
     682:	c5 01       	movw	r24, r10
     684:	b4 01       	movw	r22, r8
     686:	0e 94 e0 0f 	call	0x1fc0	; 0x1fc0 <__gesf2>
     68a:	18 16       	cp	r1, r24
     68c:	0c f0       	brlt	.+2      	; 0x690 <SoC_ADC+0x42>
     68e:	87 c0       	rjmp	.+270    	; 0x79e <SoC_ADC+0x150>
		if (volt > 4.00) {
     690:	20 e0       	ldi	r18, 0x00	; 0
     692:	30 e0       	ldi	r19, 0x00	; 0
     694:	40 e8       	ldi	r20, 0x80	; 128
     696:	50 e4       	ldi	r21, 0x40	; 64
     698:	c7 01       	movw	r24, r14
     69a:	b6 01       	movw	r22, r12
     69c:	0e 94 e0 0f 	call	0x1fc0	; 0x1fc0 <__gesf2>
     6a0:	18 16       	cp	r1, r24
     6a2:	0c f4       	brge	.+2      	; 0x6a6 <SoC_ADC+0x58>
     6a4:	aa c1       	rjmp	.+852    	; 0x9fa <SoC_ADC+0x3ac>
			soc = 80;
		} //end if
		else if (volt < 4.00 && volt > 3.80) {
     6a6:	20 e0       	ldi	r18, 0x00	; 0
     6a8:	30 e0       	ldi	r19, 0x00	; 0
     6aa:	40 e8       	ldi	r20, 0x80	; 128
     6ac:	50 e4       	ldi	r21, 0x40	; 64
     6ae:	c7 01       	movw	r24, r14
     6b0:	b6 01       	movw	r22, r12
     6b2:	0e 94 c2 0e 	call	0x1d84	; 0x1d84 <__cmpsf2>
     6b6:	88 23       	and	r24, r24
     6b8:	5c f4       	brge	.+22     	; 0x6d0 <SoC_ADC+0x82>
     6ba:	23 e3       	ldi	r18, 0x33	; 51
     6bc:	33 e3       	ldi	r19, 0x33	; 51
     6be:	43 e7       	ldi	r20, 0x73	; 115
     6c0:	50 e4       	ldi	r21, 0x40	; 64
     6c2:	c7 01       	movw	r24, r14
     6c4:	b6 01       	movw	r22, r12
     6c6:	0e 94 e0 0f 	call	0x1fc0	; 0x1fc0 <__gesf2>
     6ca:	18 16       	cp	r1, r24
     6cc:	0c f4       	brge	.+2      	; 0x6d0 <SoC_ADC+0x82>
     6ce:	9a c1       	rjmp	.+820    	; 0xa04 <SoC_ADC+0x3b6>
			soc = 70;
		} //end else if
		else if (volt < 3.80 && volt > 3.75) {
     6d0:	23 e3       	ldi	r18, 0x33	; 51
     6d2:	33 e3       	ldi	r19, 0x33	; 51
     6d4:	43 e7       	ldi	r20, 0x73	; 115
     6d6:	50 e4       	ldi	r21, 0x40	; 64
     6d8:	c7 01       	movw	r24, r14
     6da:	b6 01       	movw	r22, r12
     6dc:	0e 94 c2 0e 	call	0x1d84	; 0x1d84 <__cmpsf2>
     6e0:	88 23       	and	r24, r24
     6e2:	5c f4       	brge	.+22     	; 0x6fa <SoC_ADC+0xac>
     6e4:	20 e0       	ldi	r18, 0x00	; 0
     6e6:	30 e0       	ldi	r19, 0x00	; 0
     6e8:	40 e7       	ldi	r20, 0x70	; 112
     6ea:	50 e4       	ldi	r21, 0x40	; 64
     6ec:	c7 01       	movw	r24, r14
     6ee:	b6 01       	movw	r22, r12
     6f0:	0e 94 e0 0f 	call	0x1fc0	; 0x1fc0 <__gesf2>
     6f4:	18 16       	cp	r1, r24
     6f6:	0c f4       	brge	.+2      	; 0x6fa <SoC_ADC+0xac>
     6f8:	8a c1       	rjmp	.+788    	; 0xa0e <SoC_ADC+0x3c0>
			soc = 60;
		} //end else if
		else if (volt < 3.75 && volt > 3.70) {
     6fa:	20 e0       	ldi	r18, 0x00	; 0
     6fc:	30 e0       	ldi	r19, 0x00	; 0
     6fe:	40 e7       	ldi	r20, 0x70	; 112
     700:	50 e4       	ldi	r21, 0x40	; 64
     702:	c7 01       	movw	r24, r14
     704:	b6 01       	movw	r22, r12
     706:	0e 94 c2 0e 	call	0x1d84	; 0x1d84 <__cmpsf2>
     70a:	88 23       	and	r24, r24
     70c:	5c f4       	brge	.+22     	; 0x724 <SoC_ADC+0xd6>
     70e:	2d ec       	ldi	r18, 0xCD	; 205
     710:	3c ec       	ldi	r19, 0xCC	; 204
     712:	4c e6       	ldi	r20, 0x6C	; 108
     714:	50 e4       	ldi	r21, 0x40	; 64
     716:	c7 01       	movw	r24, r14
     718:	b6 01       	movw	r22, r12
     71a:	0e 94 e0 0f 	call	0x1fc0	; 0x1fc0 <__gesf2>
     71e:	18 16       	cp	r1, r24
     720:	0c f4       	brge	.+2      	; 0x724 <SoC_ADC+0xd6>
     722:	7a c1       	rjmp	.+756    	; 0xa18 <SoC_ADC+0x3ca>
			soc = 50;
		} //end else if
		else if (volt < 3.70 && volt > 3.60) {
     724:	2d ec       	ldi	r18, 0xCD	; 205
     726:	3c ec       	ldi	r19, 0xCC	; 204
     728:	4c e6       	ldi	r20, 0x6C	; 108
     72a:	50 e4       	ldi	r21, 0x40	; 64
     72c:	c7 01       	movw	r24, r14
     72e:	b6 01       	movw	r22, r12
     730:	0e 94 c2 0e 	call	0x1d84	; 0x1d84 <__cmpsf2>
     734:	88 23       	and	r24, r24
     736:	5c f4       	brge	.+22     	; 0x74e <SoC_ADC+0x100>
     738:	26 e6       	ldi	r18, 0x66	; 102
     73a:	36 e6       	ldi	r19, 0x66	; 102
     73c:	46 e6       	ldi	r20, 0x66	; 102
     73e:	50 e4       	ldi	r21, 0x40	; 64
     740:	c7 01       	movw	r24, r14
     742:	b6 01       	movw	r22, r12
     744:	0e 94 e0 0f 	call	0x1fc0	; 0x1fc0 <__gesf2>
     748:	18 16       	cp	r1, r24
     74a:	0c f4       	brge	.+2      	; 0x74e <SoC_ADC+0x100>
     74c:	6a c1       	rjmp	.+724    	; 0xa22 <SoC_ADC+0x3d4>
			soc = 40;
		} //end else if
		else if (volt < 3.60 && volt > 3.5) {
     74e:	26 e6       	ldi	r18, 0x66	; 102
     750:	36 e6       	ldi	r19, 0x66	; 102
     752:	46 e6       	ldi	r20, 0x66	; 102
     754:	50 e4       	ldi	r21, 0x40	; 64
     756:	c7 01       	movw	r24, r14
     758:	b6 01       	movw	r22, r12
     75a:	0e 94 c2 0e 	call	0x1d84	; 0x1d84 <__cmpsf2>
     75e:	88 23       	and	r24, r24
     760:	5c f4       	brge	.+22     	; 0x778 <SoC_ADC+0x12a>
     762:	20 e0       	ldi	r18, 0x00	; 0
     764:	30 e0       	ldi	r19, 0x00	; 0
     766:	40 e6       	ldi	r20, 0x60	; 96
     768:	50 e4       	ldi	r21, 0x40	; 64
     76a:	c7 01       	movw	r24, r14
     76c:	b6 01       	movw	r22, r12
     76e:	0e 94 e0 0f 	call	0x1fc0	; 0x1fc0 <__gesf2>
     772:	18 16       	cp	r1, r24
     774:	0c f4       	brge	.+2      	; 0x778 <SoC_ADC+0x12a>
     776:	5a c1       	rjmp	.+692    	; 0xa2c <SoC_ADC+0x3de>
			soc = 30;
		} //end else if
		else if (volt < 3.50) {
     778:	20 e0       	ldi	r18, 0x00	; 0
     77a:	30 e0       	ldi	r19, 0x00	; 0
     77c:	40 e6       	ldi	r20, 0x60	; 96
     77e:	50 e4       	ldi	r21, 0x40	; 64
     780:	c7 01       	movw	r24, r14
     782:	b6 01       	movw	r22, r12
     784:	0e 94 c2 0e 	call	0x1d84	; 0x1d84 <__cmpsf2>
     788:	88 23       	and	r24, r24
     78a:	0c f4       	brge	.+2      	; 0x78e <SoC_ADC+0x140>
     78c:	54 c1       	rjmp	.+680    	; 0xa36 <SoC_ADC+0x3e8>
			soc = 20;
		} //end else if
		else {
			UART0_putstring("Error Reading State of Charge \n\n\r");
     78e:	89 e4       	ldi	r24, 0x49	; 73
     790:	93 e0       	ldi	r25, 0x03	; 3
     792:	0e 94 de 0c 	call	0x19bc	; 0x19bc <UART0_putstring>
// Description: Temperature measurement via ADC.
/*========================================================================================*/

float SoC_ADC(float volt, float amp){
	// return value
	float soc = 0;
     796:	60 e0       	ldi	r22, 0x00	; 0
     798:	70 e0       	ldi	r23, 0x00	; 0
     79a:	cb 01       	movw	r24, r22
     79c:	9a c1       	rjmp	.+820    	; 0xad2 <SoC_ADC+0x484>
		} //end else if
		else {
			UART0_putstring("Error Reading State of Charge \n\n\r");
		} //end else
	}
	else if(amp > 0.6 && amp < 3){
     79e:	2a e9       	ldi	r18, 0x9A	; 154
     7a0:	39 e9       	ldi	r19, 0x99	; 153
     7a2:	49 e1       	ldi	r20, 0x19	; 25
     7a4:	5f e3       	ldi	r21, 0x3F	; 63
     7a6:	c5 01       	movw	r24, r10
     7a8:	b4 01       	movw	r22, r8
     7aa:	0e 94 e0 0f 	call	0x1fc0	; 0x1fc0 <__gesf2>
     7ae:	18 16       	cp	r1, r24
     7b0:	0c f0       	brlt	.+2      	; 0x7b4 <SoC_ADC+0x166>
     7b2:	92 c0       	rjmp	.+292    	; 0x8d8 <SoC_ADC+0x28a>
     7b4:	20 e0       	ldi	r18, 0x00	; 0
     7b6:	30 e0       	ldi	r19, 0x00	; 0
     7b8:	40 e4       	ldi	r20, 0x40	; 64
     7ba:	50 e4       	ldi	r21, 0x40	; 64
     7bc:	c5 01       	movw	r24, r10
     7be:	b4 01       	movw	r22, r8
     7c0:	0e 94 c2 0e 	call	0x1d84	; 0x1d84 <__cmpsf2>
     7c4:	88 23       	and	r24, r24
     7c6:	0c f0       	brlt	.+2      	; 0x7ca <SoC_ADC+0x17c>
     7c8:	87 c0       	rjmp	.+270    	; 0x8d8 <SoC_ADC+0x28a>
		if (volt > 3.75) {
     7ca:	20 e0       	ldi	r18, 0x00	; 0
     7cc:	30 e0       	ldi	r19, 0x00	; 0
     7ce:	40 e7       	ldi	r20, 0x70	; 112
     7d0:	50 e4       	ldi	r21, 0x40	; 64
     7d2:	c7 01       	movw	r24, r14
     7d4:	b6 01       	movw	r22, r12
     7d6:	0e 94 e0 0f 	call	0x1fc0	; 0x1fc0 <__gesf2>
     7da:	18 16       	cp	r1, r24
     7dc:	0c f4       	brge	.+2      	; 0x7e0 <SoC_ADC+0x192>
     7de:	30 c1       	rjmp	.+608    	; 0xa40 <SoC_ADC+0x3f2>
			soc = 80;
		} //end if
		else if (volt < 3.75 && volt > 3.65) {
     7e0:	20 e0       	ldi	r18, 0x00	; 0
     7e2:	30 e0       	ldi	r19, 0x00	; 0
     7e4:	40 e7       	ldi	r20, 0x70	; 112
     7e6:	50 e4       	ldi	r21, 0x40	; 64
     7e8:	c7 01       	movw	r24, r14
     7ea:	b6 01       	movw	r22, r12
     7ec:	0e 94 c2 0e 	call	0x1d84	; 0x1d84 <__cmpsf2>
     7f0:	88 23       	and	r24, r24
     7f2:	5c f4       	brge	.+22     	; 0x80a <SoC_ADC+0x1bc>
     7f4:	2a e9       	ldi	r18, 0x9A	; 154
     7f6:	39 e9       	ldi	r19, 0x99	; 153
     7f8:	49 e6       	ldi	r20, 0x69	; 105
     7fa:	50 e4       	ldi	r21, 0x40	; 64
     7fc:	c7 01       	movw	r24, r14
     7fe:	b6 01       	movw	r22, r12
     800:	0e 94 e0 0f 	call	0x1fc0	; 0x1fc0 <__gesf2>
     804:	18 16       	cp	r1, r24
     806:	0c f4       	brge	.+2      	; 0x80a <SoC_ADC+0x1bc>
     808:	20 c1       	rjmp	.+576    	; 0xa4a <SoC_ADC+0x3fc>
			soc = 70;
		} //end else if
		else if (volt < 3.65 && volt > 3.55) {
     80a:	2a e9       	ldi	r18, 0x9A	; 154
     80c:	39 e9       	ldi	r19, 0x99	; 153
     80e:	49 e6       	ldi	r20, 0x69	; 105
     810:	50 e4       	ldi	r21, 0x40	; 64
     812:	c7 01       	movw	r24, r14
     814:	b6 01       	movw	r22, r12
     816:	0e 94 c2 0e 	call	0x1d84	; 0x1d84 <__cmpsf2>
     81a:	88 23       	and	r24, r24
     81c:	5c f4       	brge	.+22     	; 0x834 <SoC_ADC+0x1e6>
     81e:	23 e3       	ldi	r18, 0x33	; 51
     820:	33 e3       	ldi	r19, 0x33	; 51
     822:	43 e6       	ldi	r20, 0x63	; 99
     824:	50 e4       	ldi	r21, 0x40	; 64
     826:	c7 01       	movw	r24, r14
     828:	b6 01       	movw	r22, r12
     82a:	0e 94 e0 0f 	call	0x1fc0	; 0x1fc0 <__gesf2>
     82e:	18 16       	cp	r1, r24
     830:	0c f4       	brge	.+2      	; 0x834 <SoC_ADC+0x1e6>
     832:	10 c1       	rjmp	.+544    	; 0xa54 <SoC_ADC+0x406>
			soc = 60;
		} //end else if
		else if (volt < 3.55 && volt > 3.45) {
     834:	23 e3       	ldi	r18, 0x33	; 51
     836:	33 e3       	ldi	r19, 0x33	; 51
     838:	43 e6       	ldi	r20, 0x63	; 99
     83a:	50 e4       	ldi	r21, 0x40	; 64
     83c:	c7 01       	movw	r24, r14
     83e:	b6 01       	movw	r22, r12
     840:	0e 94 c2 0e 	call	0x1d84	; 0x1d84 <__cmpsf2>
     844:	88 23       	and	r24, r24
     846:	5c f4       	brge	.+22     	; 0x85e <SoC_ADC+0x210>
     848:	2d ec       	ldi	r18, 0xCD	; 205
     84a:	3c ec       	ldi	r19, 0xCC	; 204
     84c:	4c e5       	ldi	r20, 0x5C	; 92
     84e:	50 e4       	ldi	r21, 0x40	; 64
     850:	c7 01       	movw	r24, r14
     852:	b6 01       	movw	r22, r12
     854:	0e 94 e0 0f 	call	0x1fc0	; 0x1fc0 <__gesf2>
     858:	18 16       	cp	r1, r24
     85a:	0c f4       	brge	.+2      	; 0x85e <SoC_ADC+0x210>
     85c:	00 c1       	rjmp	.+512    	; 0xa5e <SoC_ADC+0x410>
			soc = 50;
		} //end else if
 		else if (volt < 3.45 && volt > 3.35) {
     85e:	2d ec       	ldi	r18, 0xCD	; 205
     860:	3c ec       	ldi	r19, 0xCC	; 204
     862:	4c e5       	ldi	r20, 0x5C	; 92
     864:	50 e4       	ldi	r21, 0x40	; 64
     866:	c7 01       	movw	r24, r14
     868:	b6 01       	movw	r22, r12
     86a:	0e 94 c2 0e 	call	0x1d84	; 0x1d84 <__cmpsf2>
     86e:	88 23       	and	r24, r24
     870:	5c f4       	brge	.+22     	; 0x888 <SoC_ADC+0x23a>
     872:	26 e6       	ldi	r18, 0x66	; 102
     874:	36 e6       	ldi	r19, 0x66	; 102
     876:	46 e5       	ldi	r20, 0x56	; 86
     878:	50 e4       	ldi	r21, 0x40	; 64
     87a:	c7 01       	movw	r24, r14
     87c:	b6 01       	movw	r22, r12
     87e:	0e 94 e0 0f 	call	0x1fc0	; 0x1fc0 <__gesf2>
     882:	18 16       	cp	r1, r24
     884:	0c f4       	brge	.+2      	; 0x888 <SoC_ADC+0x23a>
     886:	f0 c0       	rjmp	.+480    	; 0xa68 <SoC_ADC+0x41a>
			soc = 40;
		 } //end else if
		else if (volt < 3.35 && volt > 3.30) {
     888:	26 e6       	ldi	r18, 0x66	; 102
     88a:	36 e6       	ldi	r19, 0x66	; 102
     88c:	46 e5       	ldi	r20, 0x56	; 86
     88e:	50 e4       	ldi	r21, 0x40	; 64
     890:	c7 01       	movw	r24, r14
     892:	b6 01       	movw	r22, r12
     894:	0e 94 c2 0e 	call	0x1d84	; 0x1d84 <__cmpsf2>
     898:	88 23       	and	r24, r24
     89a:	5c f4       	brge	.+22     	; 0x8b2 <SoC_ADC+0x264>
     89c:	23 e3       	ldi	r18, 0x33	; 51
     89e:	33 e3       	ldi	r19, 0x33	; 51
     8a0:	43 e5       	ldi	r20, 0x53	; 83
     8a2:	50 e4       	ldi	r21, 0x40	; 64
     8a4:	c7 01       	movw	r24, r14
     8a6:	b6 01       	movw	r22, r12
     8a8:	0e 94 e0 0f 	call	0x1fc0	; 0x1fc0 <__gesf2>
     8ac:	18 16       	cp	r1, r24
     8ae:	0c f4       	brge	.+2      	; 0x8b2 <SoC_ADC+0x264>
     8b0:	e0 c0       	rjmp	.+448    	; 0xa72 <SoC_ADC+0x424>
			soc = 30;
		 } //end else if
		else if (volt < 3.30) {
     8b2:	23 e3       	ldi	r18, 0x33	; 51
     8b4:	33 e3       	ldi	r19, 0x33	; 51
     8b6:	43 e5       	ldi	r20, 0x53	; 83
     8b8:	50 e4       	ldi	r21, 0x40	; 64
     8ba:	c7 01       	movw	r24, r14
     8bc:	b6 01       	movw	r22, r12
     8be:	0e 94 c2 0e 	call	0x1d84	; 0x1d84 <__cmpsf2>
     8c2:	88 23       	and	r24, r24
     8c4:	0c f4       	brge	.+2      	; 0x8c8 <SoC_ADC+0x27a>
     8c6:	da c0       	rjmp	.+436    	; 0xa7c <SoC_ADC+0x42e>
			soc = 20;
		}
		else {
			UART0_putstring("Error Reading State of Charge \n\n\r");
     8c8:	89 e4       	ldi	r24, 0x49	; 73
     8ca:	93 e0       	ldi	r25, 0x03	; 3
     8cc:	0e 94 de 0c 	call	0x19bc	; 0x19bc <UART0_putstring>
// Description: Temperature measurement via ADC.
/*========================================================================================*/

float SoC_ADC(float volt, float amp){
	// return value
	float soc = 0;
     8d0:	60 e0       	ldi	r22, 0x00	; 0
     8d2:	70 e0       	ldi	r23, 0x00	; 0
     8d4:	cb 01       	movw	r24, r22
     8d6:	fd c0       	rjmp	.+506    	; 0xad2 <SoC_ADC+0x484>
		}
		else {
			UART0_putstring("Error Reading State of Charge \n\n\r");
		} //end else
	}
	else if(amp > 3){
     8d8:	20 e0       	ldi	r18, 0x00	; 0
     8da:	30 e0       	ldi	r19, 0x00	; 0
     8dc:	40 e4       	ldi	r20, 0x40	; 64
     8de:	50 e4       	ldi	r21, 0x40	; 64
     8e0:	c5 01       	movw	r24, r10
     8e2:	b4 01       	movw	r22, r8
     8e4:	0e 94 e0 0f 	call	0x1fc0	; 0x1fc0 <__gesf2>
     8e8:	18 16       	cp	r1, r24
     8ea:	0c f0       	brlt	.+2      	; 0x8ee <SoC_ADC+0x2a0>
     8ec:	cc c0       	rjmp	.+408    	; 0xa86 <SoC_ADC+0x438>
		if (volt > 3.80) {
     8ee:	23 e3       	ldi	r18, 0x33	; 51
     8f0:	33 e3       	ldi	r19, 0x33	; 51
     8f2:	43 e7       	ldi	r20, 0x73	; 115
     8f4:	50 e4       	ldi	r21, 0x40	; 64
     8f6:	c7 01       	movw	r24, r14
     8f8:	b6 01       	movw	r22, r12
     8fa:	0e 94 e0 0f 	call	0x1fc0	; 0x1fc0 <__gesf2>
     8fe:	18 16       	cp	r1, r24
     900:	0c f4       	brge	.+2      	; 0x904 <SoC_ADC+0x2b6>
     902:	c5 c0       	rjmp	.+394    	; 0xa8e <SoC_ADC+0x440>
			soc = 80;
		} //end if
		else if (volt < 3.80 && volt > 3.75) {
     904:	23 e3       	ldi	r18, 0x33	; 51
     906:	33 e3       	ldi	r19, 0x33	; 51
     908:	43 e7       	ldi	r20, 0x73	; 115
     90a:	50 e4       	ldi	r21, 0x40	; 64
     90c:	c7 01       	movw	r24, r14
     90e:	b6 01       	movw	r22, r12
     910:	0e 94 c2 0e 	call	0x1d84	; 0x1d84 <__cmpsf2>
     914:	88 23       	and	r24, r24
     916:	5c f4       	brge	.+22     	; 0x92e <SoC_ADC+0x2e0>
     918:	20 e0       	ldi	r18, 0x00	; 0
     91a:	30 e0       	ldi	r19, 0x00	; 0
     91c:	40 e7       	ldi	r20, 0x70	; 112
     91e:	50 e4       	ldi	r21, 0x40	; 64
     920:	c7 01       	movw	r24, r14
     922:	b6 01       	movw	r22, r12
     924:	0e 94 e0 0f 	call	0x1fc0	; 0x1fc0 <__gesf2>
     928:	18 16       	cp	r1, r24
     92a:	0c f4       	brge	.+2      	; 0x92e <SoC_ADC+0x2e0>
     92c:	b5 c0       	rjmp	.+362    	; 0xa98 <SoC_ADC+0x44a>
			soc = 70;
		} //end else if
		else if (volt < 3.75 && volt > 3.65) {
     92e:	20 e0       	ldi	r18, 0x00	; 0
     930:	30 e0       	ldi	r19, 0x00	; 0
     932:	40 e7       	ldi	r20, 0x70	; 112
     934:	50 e4       	ldi	r21, 0x40	; 64
     936:	c7 01       	movw	r24, r14
     938:	b6 01       	movw	r22, r12
     93a:	0e 94 c2 0e 	call	0x1d84	; 0x1d84 <__cmpsf2>
     93e:	88 23       	and	r24, r24
     940:	5c f4       	brge	.+22     	; 0x958 <SoC_ADC+0x30a>
     942:	2a e9       	ldi	r18, 0x9A	; 154
     944:	39 e9       	ldi	r19, 0x99	; 153
     946:	49 e6       	ldi	r20, 0x69	; 105
     948:	50 e4       	ldi	r21, 0x40	; 64
     94a:	c7 01       	movw	r24, r14
     94c:	b6 01       	movw	r22, r12
     94e:	0e 94 e0 0f 	call	0x1fc0	; 0x1fc0 <__gesf2>
     952:	18 16       	cp	r1, r24
     954:	0c f4       	brge	.+2      	; 0x958 <SoC_ADC+0x30a>
     956:	a5 c0       	rjmp	.+330    	; 0xaa2 <SoC_ADC+0x454>
			soc = 60;
		} //end else if
		else if (volt < 3.65 && volt > 3.50) {
     958:	2a e9       	ldi	r18, 0x9A	; 154
     95a:	39 e9       	ldi	r19, 0x99	; 153
     95c:	49 e6       	ldi	r20, 0x69	; 105
     95e:	50 e4       	ldi	r21, 0x40	; 64
     960:	c7 01       	movw	r24, r14
     962:	b6 01       	movw	r22, r12
     964:	0e 94 c2 0e 	call	0x1d84	; 0x1d84 <__cmpsf2>
     968:	88 23       	and	r24, r24
     96a:	5c f4       	brge	.+22     	; 0x982 <SoC_ADC+0x334>
     96c:	20 e0       	ldi	r18, 0x00	; 0
     96e:	30 e0       	ldi	r19, 0x00	; 0
     970:	40 e6       	ldi	r20, 0x60	; 96
     972:	50 e4       	ldi	r21, 0x40	; 64
     974:	c7 01       	movw	r24, r14
     976:	b6 01       	movw	r22, r12
     978:	0e 94 e0 0f 	call	0x1fc0	; 0x1fc0 <__gesf2>
     97c:	18 16       	cp	r1, r24
     97e:	0c f4       	brge	.+2      	; 0x982 <SoC_ADC+0x334>
     980:	95 c0       	rjmp	.+298    	; 0xaac <SoC_ADC+0x45e>
			soc = 50;
		} //end else if
		else if (volt < 3.50 && volt > 3.40) {
     982:	20 e0       	ldi	r18, 0x00	; 0
     984:	30 e0       	ldi	r19, 0x00	; 0
     986:	40 e6       	ldi	r20, 0x60	; 96
     988:	50 e4       	ldi	r21, 0x40	; 64
     98a:	c7 01       	movw	r24, r14
     98c:	b6 01       	movw	r22, r12
     98e:	0e 94 c2 0e 	call	0x1d84	; 0x1d84 <__cmpsf2>
     992:	88 23       	and	r24, r24
     994:	5c f4       	brge	.+22     	; 0x9ac <SoC_ADC+0x35e>
     996:	2a e9       	ldi	r18, 0x9A	; 154
     998:	39 e9       	ldi	r19, 0x99	; 153
     99a:	49 e5       	ldi	r20, 0x59	; 89
     99c:	50 e4       	ldi	r21, 0x40	; 64
     99e:	c7 01       	movw	r24, r14
     9a0:	b6 01       	movw	r22, r12
     9a2:	0e 94 e0 0f 	call	0x1fc0	; 0x1fc0 <__gesf2>
     9a6:	18 16       	cp	r1, r24
     9a8:	0c f4       	brge	.+2      	; 0x9ac <SoC_ADC+0x35e>
     9aa:	85 c0       	rjmp	.+266    	; 0xab6 <SoC_ADC+0x468>
			soc = 40;
		} //end else if
		else if (volt < 3.40 && volt > 3.25) {
     9ac:	2a e9       	ldi	r18, 0x9A	; 154
     9ae:	39 e9       	ldi	r19, 0x99	; 153
     9b0:	49 e5       	ldi	r20, 0x59	; 89
     9b2:	50 e4       	ldi	r21, 0x40	; 64
     9b4:	c7 01       	movw	r24, r14
     9b6:	b6 01       	movw	r22, r12
     9b8:	0e 94 c2 0e 	call	0x1d84	; 0x1d84 <__cmpsf2>
     9bc:	88 23       	and	r24, r24
     9be:	5c f4       	brge	.+22     	; 0x9d6 <SoC_ADC+0x388>
     9c0:	20 e0       	ldi	r18, 0x00	; 0
     9c2:	30 e0       	ldi	r19, 0x00	; 0
     9c4:	40 e5       	ldi	r20, 0x50	; 80
     9c6:	50 e4       	ldi	r21, 0x40	; 64
     9c8:	c7 01       	movw	r24, r14
     9ca:	b6 01       	movw	r22, r12
     9cc:	0e 94 e0 0f 	call	0x1fc0	; 0x1fc0 <__gesf2>
     9d0:	18 16       	cp	r1, r24
     9d2:	0c f4       	brge	.+2      	; 0x9d6 <SoC_ADC+0x388>
     9d4:	75 c0       	rjmp	.+234    	; 0xac0 <SoC_ADC+0x472>
			soc = 30;
		} //end else if
		else if (volt < 3.25) {
     9d6:	20 e0       	ldi	r18, 0x00	; 0
     9d8:	30 e0       	ldi	r19, 0x00	; 0
     9da:	40 e5       	ldi	r20, 0x50	; 80
     9dc:	50 e4       	ldi	r21, 0x40	; 64
     9de:	c7 01       	movw	r24, r14
     9e0:	b6 01       	movw	r22, r12
     9e2:	0e 94 c2 0e 	call	0x1d84	; 0x1d84 <__cmpsf2>
     9e6:	88 23       	and	r24, r24
     9e8:	0c f4       	brge	.+2      	; 0x9ec <SoC_ADC+0x39e>
     9ea:	6f c0       	rjmp	.+222    	; 0xaca <SoC_ADC+0x47c>
			soc = 20;
		} //end else if
		else {
			UART0_putstring("Error Reading State of Charge \n\n\r");
     9ec:	89 e4       	ldi	r24, 0x49	; 73
     9ee:	93 e0       	ldi	r25, 0x03	; 3
     9f0:	e5 d7       	rcall	.+4042   	; 0x19bc <UART0_putstring>
// Description: Temperature measurement via ADC.
/*========================================================================================*/

float SoC_ADC(float volt, float amp){
	// return value
	float soc = 0;
     9f2:	60 e0       	ldi	r22, 0x00	; 0
     9f4:	70 e0       	ldi	r23, 0x00	; 0
     9f6:	cb 01       	movw	r24, r22
     9f8:	6c c0       	rjmp	.+216    	; 0xad2 <SoC_ADC+0x484>
	
	
	// Lookup table
	if (amp < 0.6 && amp > 0){
		if (volt > 4.00) {
			soc = 80;
     9fa:	60 e0       	ldi	r22, 0x00	; 0
     9fc:	70 e0       	ldi	r23, 0x00	; 0
     9fe:	80 ea       	ldi	r24, 0xA0	; 160
     a00:	92 e4       	ldi	r25, 0x42	; 66
     a02:	67 c0       	rjmp	.+206    	; 0xad2 <SoC_ADC+0x484>
		} //end if
		else if (volt < 4.00 && volt > 3.80) {
			soc = 70;
     a04:	60 e0       	ldi	r22, 0x00	; 0
     a06:	70 e0       	ldi	r23, 0x00	; 0
     a08:	8c e8       	ldi	r24, 0x8C	; 140
     a0a:	92 e4       	ldi	r25, 0x42	; 66
     a0c:	62 c0       	rjmp	.+196    	; 0xad2 <SoC_ADC+0x484>
		} //end else if
		else if (volt < 3.80 && volt > 3.75) {
			soc = 60;
     a0e:	60 e0       	ldi	r22, 0x00	; 0
     a10:	70 e0       	ldi	r23, 0x00	; 0
     a12:	80 e7       	ldi	r24, 0x70	; 112
     a14:	92 e4       	ldi	r25, 0x42	; 66
     a16:	5d c0       	rjmp	.+186    	; 0xad2 <SoC_ADC+0x484>
		} //end else if
		else if (volt < 3.75 && volt > 3.70) {
			soc = 50;
     a18:	60 e0       	ldi	r22, 0x00	; 0
     a1a:	70 e0       	ldi	r23, 0x00	; 0
     a1c:	88 e4       	ldi	r24, 0x48	; 72
     a1e:	92 e4       	ldi	r25, 0x42	; 66
     a20:	58 c0       	rjmp	.+176    	; 0xad2 <SoC_ADC+0x484>
		} //end else if
		else if (volt < 3.70 && volt > 3.60) {
			soc = 40;
     a22:	60 e0       	ldi	r22, 0x00	; 0
     a24:	70 e0       	ldi	r23, 0x00	; 0
     a26:	80 e2       	ldi	r24, 0x20	; 32
     a28:	92 e4       	ldi	r25, 0x42	; 66
     a2a:	53 c0       	rjmp	.+166    	; 0xad2 <SoC_ADC+0x484>
		} //end else if
		else if (volt < 3.60 && volt > 3.5) {
			soc = 30;
     a2c:	60 e0       	ldi	r22, 0x00	; 0
     a2e:	70 e0       	ldi	r23, 0x00	; 0
     a30:	80 ef       	ldi	r24, 0xF0	; 240
     a32:	91 e4       	ldi	r25, 0x41	; 65
     a34:	4e c0       	rjmp	.+156    	; 0xad2 <SoC_ADC+0x484>
		} //end else if
		else if (volt < 3.50) {
			soc = 20;
     a36:	60 e0       	ldi	r22, 0x00	; 0
     a38:	70 e0       	ldi	r23, 0x00	; 0
     a3a:	80 ea       	ldi	r24, 0xA0	; 160
     a3c:	91 e4       	ldi	r25, 0x41	; 65
     a3e:	49 c0       	rjmp	.+146    	; 0xad2 <SoC_ADC+0x484>
			UART0_putstring("Error Reading State of Charge \n\n\r");
		} //end else
	}
	else if(amp > 0.6 && amp < 3){
		if (volt > 3.75) {
			soc = 80;
     a40:	60 e0       	ldi	r22, 0x00	; 0
     a42:	70 e0       	ldi	r23, 0x00	; 0
     a44:	80 ea       	ldi	r24, 0xA0	; 160
     a46:	92 e4       	ldi	r25, 0x42	; 66
     a48:	44 c0       	rjmp	.+136    	; 0xad2 <SoC_ADC+0x484>
		} //end if
		else if (volt < 3.75 && volt > 3.65) {
			soc = 70;
     a4a:	60 e0       	ldi	r22, 0x00	; 0
     a4c:	70 e0       	ldi	r23, 0x00	; 0
     a4e:	8c e8       	ldi	r24, 0x8C	; 140
     a50:	92 e4       	ldi	r25, 0x42	; 66
     a52:	3f c0       	rjmp	.+126    	; 0xad2 <SoC_ADC+0x484>
		} //end else if
		else if (volt < 3.65 && volt > 3.55) {
			soc = 60;
     a54:	60 e0       	ldi	r22, 0x00	; 0
     a56:	70 e0       	ldi	r23, 0x00	; 0
     a58:	80 e7       	ldi	r24, 0x70	; 112
     a5a:	92 e4       	ldi	r25, 0x42	; 66
     a5c:	3a c0       	rjmp	.+116    	; 0xad2 <SoC_ADC+0x484>
		} //end else if
		else if (volt < 3.55 && volt > 3.45) {
			soc = 50;
     a5e:	60 e0       	ldi	r22, 0x00	; 0
     a60:	70 e0       	ldi	r23, 0x00	; 0
     a62:	88 e4       	ldi	r24, 0x48	; 72
     a64:	92 e4       	ldi	r25, 0x42	; 66
     a66:	35 c0       	rjmp	.+106    	; 0xad2 <SoC_ADC+0x484>
		} //end else if
 		else if (volt < 3.45 && volt > 3.35) {
			soc = 40;
     a68:	60 e0       	ldi	r22, 0x00	; 0
     a6a:	70 e0       	ldi	r23, 0x00	; 0
     a6c:	80 e2       	ldi	r24, 0x20	; 32
     a6e:	92 e4       	ldi	r25, 0x42	; 66
     a70:	30 c0       	rjmp	.+96     	; 0xad2 <SoC_ADC+0x484>
		 } //end else if
		else if (volt < 3.35 && volt > 3.30) {
			soc = 30;
     a72:	60 e0       	ldi	r22, 0x00	; 0
     a74:	70 e0       	ldi	r23, 0x00	; 0
     a76:	80 ef       	ldi	r24, 0xF0	; 240
     a78:	91 e4       	ldi	r25, 0x41	; 65
     a7a:	2b c0       	rjmp	.+86     	; 0xad2 <SoC_ADC+0x484>
		 } //end else if
		else if (volt < 3.30) {
			soc = 20;
     a7c:	60 e0       	ldi	r22, 0x00	; 0
     a7e:	70 e0       	ldi	r23, 0x00	; 0
     a80:	80 ea       	ldi	r24, 0xA0	; 160
     a82:	91 e4       	ldi	r25, 0x41	; 65
     a84:	26 c0       	rjmp	.+76     	; 0xad2 <SoC_ADC+0x484>
// Description: Temperature measurement via ADC.
/*========================================================================================*/

float SoC_ADC(float volt, float amp){
	// return value
	float soc = 0;
     a86:	60 e0       	ldi	r22, 0x00	; 0
     a88:	70 e0       	ldi	r23, 0x00	; 0
     a8a:	cb 01       	movw	r24, r22
     a8c:	22 c0       	rjmp	.+68     	; 0xad2 <SoC_ADC+0x484>
			UART0_putstring("Error Reading State of Charge \n\n\r");
		} //end else
	}
	else if(amp > 3){
		if (volt > 3.80) {
			soc = 80;
     a8e:	60 e0       	ldi	r22, 0x00	; 0
     a90:	70 e0       	ldi	r23, 0x00	; 0
     a92:	80 ea       	ldi	r24, 0xA0	; 160
     a94:	92 e4       	ldi	r25, 0x42	; 66
     a96:	1d c0       	rjmp	.+58     	; 0xad2 <SoC_ADC+0x484>
		} //end if
		else if (volt < 3.80 && volt > 3.75) {
			soc = 70;
     a98:	60 e0       	ldi	r22, 0x00	; 0
     a9a:	70 e0       	ldi	r23, 0x00	; 0
     a9c:	8c e8       	ldi	r24, 0x8C	; 140
     a9e:	92 e4       	ldi	r25, 0x42	; 66
     aa0:	18 c0       	rjmp	.+48     	; 0xad2 <SoC_ADC+0x484>
		} //end else if
		else if (volt < 3.75 && volt > 3.65) {
			soc = 60;
     aa2:	60 e0       	ldi	r22, 0x00	; 0
     aa4:	70 e0       	ldi	r23, 0x00	; 0
     aa6:	80 e7       	ldi	r24, 0x70	; 112
     aa8:	92 e4       	ldi	r25, 0x42	; 66
     aaa:	13 c0       	rjmp	.+38     	; 0xad2 <SoC_ADC+0x484>
		} //end else if
		else if (volt < 3.65 && volt > 3.50) {
			soc = 50;
     aac:	60 e0       	ldi	r22, 0x00	; 0
     aae:	70 e0       	ldi	r23, 0x00	; 0
     ab0:	88 e4       	ldi	r24, 0x48	; 72
     ab2:	92 e4       	ldi	r25, 0x42	; 66
     ab4:	0e c0       	rjmp	.+28     	; 0xad2 <SoC_ADC+0x484>
		} //end else if
		else if (volt < 3.50 && volt > 3.40) {
			soc = 40;
     ab6:	60 e0       	ldi	r22, 0x00	; 0
     ab8:	70 e0       	ldi	r23, 0x00	; 0
     aba:	80 e2       	ldi	r24, 0x20	; 32
     abc:	92 e4       	ldi	r25, 0x42	; 66
     abe:	09 c0       	rjmp	.+18     	; 0xad2 <SoC_ADC+0x484>
		} //end else if
		else if (volt < 3.40 && volt > 3.25) {
			soc = 30;
     ac0:	60 e0       	ldi	r22, 0x00	; 0
     ac2:	70 e0       	ldi	r23, 0x00	; 0
     ac4:	80 ef       	ldi	r24, 0xF0	; 240
     ac6:	91 e4       	ldi	r25, 0x41	; 65
     ac8:	04 c0       	rjmp	.+8      	; 0xad2 <SoC_ADC+0x484>
		} //end else if
		else if (volt < 3.25) {
			soc = 20;
     aca:	60 e0       	ldi	r22, 0x00	; 0
     acc:	70 e0       	ldi	r23, 0x00	; 0
     ace:	80 ea       	ldi	r24, 0xA0	; 160
     ad0:	91 e4       	ldi	r25, 0x41	; 65
	}
	else{
		//UART0_putstring("Battery Charging");
	}
	return soc;
}
     ad2:	ff 90       	pop	r15
     ad4:	ef 90       	pop	r14
     ad6:	df 90       	pop	r13
     ad8:	cf 90       	pop	r12
     ada:	bf 90       	pop	r11
     adc:	af 90       	pop	r10
     ade:	9f 90       	pop	r9
     ae0:	8f 90       	pop	r8
     ae2:	08 95       	ret

00000ae4 <launch_pre>:
// Date: 2019-03-25
// Description: Initializes the launch bits to zero (8 bits).
/*========================================================================================*/

void launch_pre(){
	EEPROM_Write(0x00,0x0000);
     ae4:	60 e0       	ldi	r22, 0x00	; 0
     ae6:	70 e0       	ldi	r23, 0x00	; 0
     ae8:	80 e0       	ldi	r24, 0x00	; 0
     aea:	86 c3       	rjmp	.+1804   	; 0x11f8 <EEPROM_Write>
     aec:	08 95       	ret

00000aee <launch_post>:
// Date: 2019-03-25
// Description: Sets the launch bits to 1 (8 bits).
/*========================================================================================*/

void launch_post(){
	EEPROM_Write(0xff,0x0000);
     aee:	60 e0       	ldi	r22, 0x00	; 0
     af0:	70 e0       	ldi	r23, 0x00	; 0
     af2:	8f ef       	ldi	r24, 0xFF	; 255
     af4:	81 c3       	rjmp	.+1794   	; 0x11f8 <EEPROM_Write>
     af6:	08 95       	ret

00000af8 <launch_check>:
/*========================================================================================*/

uint8_t launch_check(){
	
	// Read from permanent memory
	uint8_t launch = EEPROM_Read(0x0000);
     af8:	80 e0       	ldi	r24, 0x00	; 0
     afa:	90 e0       	ldi	r25, 0x00	; 0
     afc:	87 d3       	rcall	.+1806   	; 0x120c <EEPROM_Read>
	// Check mask
	uint8_t mask_check = 0x01;
	uint8_t sum = 0;
	int i = 0; // increment
	
	while(launch){
     afe:	88 23       	and	r24, r24
     b00:	39 f0       	breq	.+14     	; 0xb10 <launch_check+0x18>
		launch = launch >> 1;
     b02:	86 95       	lsr	r24
	// Check mask
	uint8_t mask_check = 0x01;
	uint8_t sum = 0;
	int i = 0; // increment
	
	while(launch){
     b04:	39 f0       	breq	.+14     	; 0xb14 <launch_check+0x1c>
		launch = launch >> 1;
     b06:	86 95       	lsr	r24
	// Check mask
	uint8_t mask_check = 0x01;
	uint8_t sum = 0;
	int i = 0; // increment
	
	while(launch){
     b08:	39 f0       	breq	.+14     	; 0xb18 <launch_check+0x20>
     b0a:	86 95       	lsr	r24
     b0c:	39 f4       	brne	.+14     	; 0xb1c <launch_check+0x24>
     b0e:	08 95       	ret
		sum += 1;
		if(sum > 3){
			return sum;
		}
	}
	return 0;
     b10:	80 e0       	ldi	r24, 0x00	; 0
     b12:	08 95       	ret
     b14:	80 e0       	ldi	r24, 0x00	; 0
     b16:	08 95       	ret
     b18:	80 e0       	ldi	r24, 0x00	; 0
     b1a:	08 95       	ret
	uint8_t sum = 0;
	int i = 0; // increment
	
	while(launch){
		launch = launch >> 1;
		sum += 1;
     b1c:	84 e0       	ldi	r24, 0x04	; 4
		if(sum > 3){
			return sum;
		}
	}
	return 0;
}
     b1e:	08 95       	ret

00000b20 <launch_state>:
/*========================================================================================*/

void launch_state(){
	
	// Check if the satellite has been launched
	if(launch_check()){
     b20:	eb df       	rcall	.-42     	; 0xaf8 <launch_check>
     b22:	81 11       	cpse	r24, r1
     b24:	0a c0       	rjmp	.+20     	; 0xb3a <launch_state+0x1a>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     b26:	2f ef       	ldi	r18, 0xFF	; 255
     b28:	89 e6       	ldi	r24, 0x69	; 105
     b2a:	98 e1       	ldi	r25, 0x18	; 24
     b2c:	21 50       	subi	r18, 0x01	; 1
     b2e:	80 40       	sbci	r24, 0x00	; 0
     b30:	90 40       	sbci	r25, 0x00	; 0
     b32:	e1 f7       	brne	.-8      	; 0xb2c <launch_state+0xc>
     b34:	00 c0       	rjmp	.+0      	; 0xb36 <launch_state+0x16>
		// don't set the timer
	}
	else{
		launch_timer();
		launch_post();
     b36:	00 00       	nop
     b38:	da cf       	rjmp	.-76     	; 0xaee <launch_post>
     b3a:	08 95       	ret

00000b3c <launch_reset>:
/*========================================================================================*/

void launch_reset(){
	
	// Reset the launch bits to 0x00
	launch_pre();
     b3c:	d3 df       	rcall	.-90     	; 0xae4 <launch_pre>
	/* Watchdog must be reset to ensure the clock starts at 0.
	/ This is especially important as we are shortening the timeout period
	*/
	
	// Watchdog reset
	wdt_reset(); 
     b3e:	a8 95       	wdr
	
	// Set the watchdog to System Reset Mode
	wdt_enable(SYSTEM_RESET_MODE);
     b40:	81 e0       	ldi	r24, 0x01	; 1
     b42:	82 d7       	rcall	.+3844   	; 0x1a48 <wdt_enable>
	
	// Change the tiemout period to 1.0s			 
	wdt_set_timeout_period(WDT_TIMEOUT_PERIOD_128KCLK); // timeout set from 1024k to 128k
     b44:	86 e0       	ldi	r24, 0x06	; 6
     b46:	5c c7       	rjmp	.+3768   	; 0x1a00 <wdt_set_timeout_period>
     b48:	08 95       	ret

00000b4a <Enable_3V3_1>:
// Description: Enables 3V3-1 rail power. Waits for transient to finish.
/*========================================================================================*/
void Enable_3V3_1(){

	// Set 5V rail for readings
	Set_GPIO(10);
     b4a:	8a e0       	ldi	r24, 0x0A	; 10
     b4c:	90 e0       	ldi	r25, 0x00	; 0
     b4e:	66 d3       	rcall	.+1740   	; 0x121c <Set_GPIO>

	while(Volt_ADC(0) < 3.1){
     b50:	80 e0       	ldi	r24, 0x00	; 0
     b52:	90 e0       	ldi	r25, 0x00	; 0
     b54:	8d db       	rcall	.-2278   	; 0x270 <Volt_ADC>
     b56:	26 e6       	ldi	r18, 0x66	; 102
     b58:	36 e6       	ldi	r19, 0x66	; 102
     b5a:	46 e4       	ldi	r20, 0x46	; 70
     b5c:	50 e4       	ldi	r21, 0x40	; 64
     b5e:	0e 94 c2 0e 	call	0x1d84	; 0x1d84 <__cmpsf2>
     b62:	88 23       	and	r24, r24
     b64:	ac f3       	brlt	.-22     	; 0xb50 <Enable_3V3_1+0x6>
		// Wait until 3V3-1 rail transient is finished
	}
}
     b66:	08 95       	ret

00000b68 <Enable_5V>:
// Description: Enables 5V rail power. Waits for transient to finish.
/*========================================================================================*/
void Enable_5V(){

	// Set 5V rail for readings
	Set_GPIO(11);
     b68:	8b e0       	ldi	r24, 0x0B	; 11
     b6a:	90 e0       	ldi	r25, 0x00	; 0
     b6c:	57 d3       	rcall	.+1710   	; 0x121c <Set_GPIO>

	while(Volt_ADC(2) < 4.8){
     b6e:	82 e0       	ldi	r24, 0x02	; 2
     b70:	90 e0       	ldi	r25, 0x00	; 0
     b72:	7e db       	rcall	.-2308   	; 0x270 <Volt_ADC>
     b74:	2a e9       	ldi	r18, 0x9A	; 154
     b76:	39 e9       	ldi	r19, 0x99	; 153
     b78:	49 e9       	ldi	r20, 0x99	; 153
     b7a:	50 e4       	ldi	r21, 0x40	; 64
     b7c:	0e 94 c2 0e 	call	0x1d84	; 0x1d84 <__cmpsf2>
     b80:	88 23       	and	r24, r24
     b82:	ac f3       	brlt	.-22     	; 0xb6e <Enable_5V+0x6>
		// Wait until 5V rail transient is finished
	}
}
     b84:	08 95       	ret

00000b86 <Enable_8V>:
// Description: Enables 8V rail power. Waits for transient to finish.
/*========================================================================================*/
void Enable_8V(){

	// Set 8V rail for readings
	Set_GPIO(16);
     b86:	80 e1       	ldi	r24, 0x10	; 16
     b88:	90 e0       	ldi	r25, 0x00	; 0
     b8a:	48 d3       	rcall	.+1680   	; 0x121c <Set_GPIO>

	while(Volt_ADC(3) < 7.8){
     b8c:	83 e0       	ldi	r24, 0x03	; 3
     b8e:	90 e0       	ldi	r25, 0x00	; 0
     b90:	6f db       	rcall	.-2338   	; 0x270 <Volt_ADC>
     b92:	2a e9       	ldi	r18, 0x9A	; 154
     b94:	39 e9       	ldi	r19, 0x99	; 153
     b96:	49 ef       	ldi	r20, 0xF9	; 249
     b98:	50 e4       	ldi	r21, 0x40	; 64
     b9a:	0e 94 c2 0e 	call	0x1d84	; 0x1d84 <__cmpsf2>
     b9e:	88 23       	and	r24, r24
     ba0:	ac f3       	brlt	.-22     	; 0xb8c <Enable_8V+0x6>
		// Wait until 8V rail transient is finished
	}
}
     ba2:	08 95       	ret

00000ba4 <Enable_VBatt>:
// Description: Enables VBatt rail power. Waits for transient to finish.
/*========================================================================================*/
void Enable_VBatt(){

	// Set 8V rail for readings
	Set_GPIO(16);
     ba4:	80 e1       	ldi	r24, 0x10	; 16
     ba6:	90 e0       	ldi	r25, 0x00	; 0
     ba8:	39 d3       	rcall	.+1650   	; 0x121c <Set_GPIO>

	while(Volt_ADC(4) < 2.5){
     baa:	84 e0       	ldi	r24, 0x04	; 4
     bac:	90 e0       	ldi	r25, 0x00	; 0
     bae:	60 db       	rcall	.-2368   	; 0x270 <Volt_ADC>
     bb0:	20 e0       	ldi	r18, 0x00	; 0
     bb2:	30 e0       	ldi	r19, 0x00	; 0
     bb4:	40 e2       	ldi	r20, 0x20	; 32
     bb6:	50 e4       	ldi	r21, 0x40	; 64
     bb8:	0e 94 c2 0e 	call	0x1d84	; 0x1d84 <__cmpsf2>
     bbc:	88 23       	and	r24, r24
     bbe:	ac f3       	brlt	.-22     	; 0xbaa <Enable_VBatt+0x6>
		// Wait until 8V rail transient is finished
	}
}
     bc0:	08 95       	ret

00000bc2 <Disable_3V3_1>:
	
	// 3V3-1 rail subsystem mask
	uint8_t mask_3V3_1 = 0b00100000;

	// Check for subsystems using the 3V3-1 rail
	if(power_state & mask_3V3_1){
     bc2:	85 fd       	sbrc	r24, 5
     bc4:	03 c0       	rjmp	.+6      	; 0xbcc <Disable_3V3_1+0xa>
		// Do not turn off the rail
	}
	else{
		Clear_GPIO(10); // turn 3V3-1 rail off if nothing is using the rail.
     bc6:	8a e0       	ldi	r24, 0x0A	; 10
     bc8:	90 e0       	ldi	r25, 0x00	; 0
     bca:	8e c3       	rjmp	.+1820   	; 0x12e8 <Clear_GPIO>
     bcc:	08 95       	ret

00000bce <Disable_5V>:
	
	// 5V rail subsystem mask
	uint8_t mask_5V = 0b00110010;
	
	// Check for subsystems using the 5V rail
	if(power_state & mask_5V){
     bce:	82 73       	andi	r24, 0x32	; 50
     bd0:	19 f4       	brne	.+6      	; 0xbd8 <Disable_5V+0xa>
		// do not turn the rail off
	}
	else{
		Clear_GPIO(11); // turn off the 5V rail if nothing is using the rail.
     bd2:	8b e0       	ldi	r24, 0x0B	; 11
     bd4:	90 e0       	ldi	r25, 0x00	; 0
     bd6:	88 c3       	rjmp	.+1808   	; 0x12e8 <Clear_GPIO>
     bd8:	08 95       	ret

00000bda <Disable_8V>:
	
	// 5V rail subsystem mask
	uint8_t mask_8V = 0b11000100;
	
	// Check for subsystems using the 5V rail
	if(power_state & mask_8V){
     bda:	84 7c       	andi	r24, 0xC4	; 196
     bdc:	19 f4       	brne	.+6      	; 0xbe4 <Disable_8V+0xa>
		// do not turn the rail off
	}
	else{
		Clear_GPIO(16); // turn off the 5V rail if nothing is using the rail.
     bde:	80 e1       	ldi	r24, 0x10	; 16
     be0:	90 e0       	ldi	r25, 0x00	; 0
     be2:	82 c3       	rjmp	.+1796   	; 0x12e8 <Clear_GPIO>
     be4:	08 95       	ret

00000be6 <Disable_VBatt>:
	
	// 5V rail subsystem mask
	uint8_t mask_8V = 0b00000001;
	
	// Check for subsystems using the 5V rail
	if(power_state & mask_8V){
     be6:	80 fd       	sbrc	r24, 0
     be8:	03 c0       	rjmp	.+6      	; 0xbf0 <Disable_VBatt+0xa>
		// do not turn the rail off
	}
	else{
		Clear_GPIO(21); // turn off the 5V rail if nothing is using the rail.
     bea:	85 e1       	ldi	r24, 0x15	; 21
     bec:	90 e0       	ldi	r25, 0x00	; 0
     bee:	7c c3       	rjmp	.+1784   	; 0x12e8 <Clear_GPIO>
     bf0:	08 95       	ret

00000bf2 <heater_SWITCH>:
// Description: Switches power to Heaters based on current power state. Only one heater
//				can be turned on at a time. If none or more than one heater is set to be
//				turned on, all heaters are turned off.
/*========================================================================================*/

void heater_SWITCH(uint8_t power_state){
     bf2:	cf 93       	push	r28
     bf4:	c8 2f       	mov	r28, r24
	uint8_t mask_heater_VBatt = 0b00000001;
	uint8_t mask_heater_5V = 0b00000010;
	uint8_t mask_heater_8V = 0b00000100;
	
	// Check which of the heaters is turned on
	if((power_state & mask_heater_VBatt) && !(power_state & (mask_heater_5V | mask_heater_8V))){
     bf6:	80 ff       	sbrs	r24, 0
     bf8:	0d c0       	rjmp	.+26     	; 0xc14 <heater_SWITCH+0x22>
     bfa:	86 70       	andi	r24, 0x06	; 6
     bfc:	59 f4       	brne	.+22     	; 0xc14 <heater_SWITCH+0x22>
		Clear_GPIO(3); // Turn off 5V heater
     bfe:	83 e0       	ldi	r24, 0x03	; 3
     c00:	90 e0       	ldi	r25, 0x00	; 0
     c02:	72 d3       	rcall	.+1764   	; 0x12e8 <Clear_GPIO>
		Clear_GPIO(2); // Turn off 8V heater
     c04:	82 e0       	ldi	r24, 0x02	; 2
     c06:	90 e0       	ldi	r25, 0x00	; 0
		Enable_VBatt();
     c08:	6f d3       	rcall	.+1758   	; 0x12e8 <Clear_GPIO>
		Set_GPIO(0);  // Enable VBatt heater
     c0a:	cc df       	rcall	.-104    	; 0xba4 <Enable_VBatt>
     c0c:	80 e0       	ldi	r24, 0x00	; 0
     c0e:	90 e0       	ldi	r25, 0x00	; 0
     c10:	05 d3       	rcall	.+1546   	; 0x121c <Set_GPIO>
     c12:	2f c0       	rjmp	.+94     	; 0xc72 <heater_SWITCH+0x80>
	}
	else if((power_state & mask_heater_5V) && !(power_state & (mask_heater_VBatt | mask_heater_8V))){
     c14:	c1 ff       	sbrs	r28, 1
     c16:	0e c0       	rjmp	.+28     	; 0xc34 <heater_SWITCH+0x42>
     c18:	8c 2f       	mov	r24, r28
     c1a:	85 70       	andi	r24, 0x05	; 5
		Clear_GPIO(0); // Turn off VBatt heater
     c1c:	59 f4       	brne	.+22     	; 0xc34 <heater_SWITCH+0x42>
     c1e:	80 e0       	ldi	r24, 0x00	; 0
		Clear_GPIO(2); // Turn off 8V heater
     c20:	90 e0       	ldi	r25, 0x00	; 0
     c22:	62 d3       	rcall	.+1732   	; 0x12e8 <Clear_GPIO>
     c24:	82 e0       	ldi	r24, 0x02	; 2
		Enable_5V();
     c26:	90 e0       	ldi	r25, 0x00	; 0
     c28:	5f d3       	rcall	.+1726   	; 0x12e8 <Clear_GPIO>
		Set_GPIO(3); // Enable 5V heater
     c2a:	9e df       	rcall	.-196    	; 0xb68 <Enable_5V>
     c2c:	83 e0       	ldi	r24, 0x03	; 3
     c2e:	90 e0       	ldi	r25, 0x00	; 0
     c30:	f5 d2       	rcall	.+1514   	; 0x121c <Set_GPIO>
	}
	else if((power_state & mask_heater_8V) && !(power_state & (mask_heater_VBatt | mask_heater_5V))){
     c32:	1f c0       	rjmp	.+62     	; 0xc72 <heater_SWITCH+0x80>
     c34:	c2 ff       	sbrs	r28, 2
     c36:	0e c0       	rjmp	.+28     	; 0xc54 <heater_SWITCH+0x62>
		Clear_GPIO(0); // Turn off VBatt heater
     c38:	8c 2f       	mov	r24, r28
     c3a:	83 70       	andi	r24, 0x03	; 3
     c3c:	59 f4       	brne	.+22     	; 0xc54 <heater_SWITCH+0x62>
		Clear_GPIO(3); // Turn off 5V heater
     c3e:	80 e0       	ldi	r24, 0x00	; 0
     c40:	90 e0       	ldi	r25, 0x00	; 0
     c42:	52 d3       	rcall	.+1700   	; 0x12e8 <Clear_GPIO>
		Enable_8V();
     c44:	83 e0       	ldi	r24, 0x03	; 3
		Set_GPIO(2); // Enable 8V heater
     c46:	90 e0       	ldi	r25, 0x00	; 0
     c48:	4f d3       	rcall	.+1694   	; 0x12e8 <Clear_GPIO>
     c4a:	9d df       	rcall	.-198    	; 0xb86 <Enable_8V>
	}
	else{
		// Turn off all heaters
		Clear_GPIO(0);
     c4c:	82 e0       	ldi	r24, 0x02	; 2
     c4e:	90 e0       	ldi	r25, 0x00	; 0
		Clear_GPIO(3);
     c50:	e5 d2       	rcall	.+1482   	; 0x121c <Set_GPIO>
     c52:	0f c0       	rjmp	.+30     	; 0xc72 <heater_SWITCH+0x80>
     c54:	80 e0       	ldi	r24, 0x00	; 0
     c56:	90 e0       	ldi	r25, 0x00	; 0
		Clear_GPIO(2);
     c58:	47 d3       	rcall	.+1678   	; 0x12e8 <Clear_GPIO>
     c5a:	83 e0       	ldi	r24, 0x03	; 3
     c5c:	90 e0       	ldi	r25, 0x00	; 0
     c5e:	44 d3       	rcall	.+1672   	; 0x12e8 <Clear_GPIO>
		
		// Turn off associated rails (rail logic is taken care of in the function)
		Disable_VBatt(power_state);
     c60:	82 e0       	ldi	r24, 0x02	; 2
     c62:	90 e0       	ldi	r25, 0x00	; 0
     c64:	41 d3       	rcall	.+1666   	; 0x12e8 <Clear_GPIO>
		Disable_5V(power_state);
     c66:	8c 2f       	mov	r24, r28
     c68:	be df       	rcall	.-132    	; 0xbe6 <Disable_VBatt>
     c6a:	8c 2f       	mov	r24, r28
		Disable_8V(power_state);
     c6c:	b0 df       	rcall	.-160    	; 0xbce <Disable_5V>
     c6e:	8c 2f       	mov	r24, r28
     c70:	b4 df       	rcall	.-152    	; 0xbda <Disable_8V>
	}
	
}
     c72:	cf 91       	pop	r28
     c74:	08 95       	ret

00000c76 <obc_SWITCH>:
	
	// OBC mask
	uint8_t mask_OBC = 0b00001000;
	
	// Turn on OBC if it is set to one
	if(power_state & mask_OBC){
     c76:	83 ff       	sbrs	r24, 3
     c78:	04 c0       	rjmp	.+8      	; 0xc82 <obc_SWITCH+0xc>
		Set_GPIO(24); // turn on OBC
     c7a:	88 e1       	ldi	r24, 0x18	; 24
     c7c:	90 e0       	ldi	r25, 0x00	; 0
     c7e:	ce c2       	rjmp	.+1436   	; 0x121c <Set_GPIO>
     c80:	08 95       	ret
	}
	else{
		Clear_GPIO(24); // turn off OBC
     c82:	88 e1       	ldi	r24, 0x18	; 24
     c84:	90 e0       	ldi	r25, 0x00	; 0
     c86:	30 c3       	rjmp	.+1632   	; 0x12e8 <Clear_GPIO>
     c88:	08 95       	ret

00000c8a <imager_SWITCH>:
// Author: Chris Thomas
// Date: 2019-03-24
// Description: Switches power to Imager based on current power state.
/*========================================================================================*/

void imager_SWITCH(uint8_t power_state){
     c8a:	cf 93       	push	r28
     c8c:	c8 2f       	mov	r28, r24
	
	// Imager Mask
	uint8_t mask_imager = 0b00010000;
	
	// Turn on Imager subcomponents if power state calls for it
	if(power_state & mask_imager){
     c8e:	84 ff       	sbrs	r24, 4
     c90:	08 c0       	rjmp	.+16     	; 0xca2 <imager_SWITCH+0x18>
		Enable_5V();
     c92:	6a df       	rcall	.-300    	; 0xb68 <Enable_5V>
		Set_GPIO(23); // turn on imager beagle
     c94:	87 e1       	ldi	r24, 0x17	; 23
     c96:	90 e0       	ldi	r25, 0x00	; 0
     c98:	c1 d2       	rcall	.+1410   	; 0x121c <Set_GPIO>
		Set_GPIO(22); // turn on camera 
     c9a:	86 e1       	ldi	r24, 0x16	; 22
     c9c:	90 e0       	ldi	r25, 0x00	; 0
     c9e:	be d2       	rcall	.+1404   	; 0x121c <Set_GPIO>
     ca0:	08 c0       	rjmp	.+16     	; 0xcb2 <imager_SWITCH+0x28>
	}
	else{
		Clear_GPIO(22); // turn off camera
     ca2:	86 e1       	ldi	r24, 0x16	; 22
     ca4:	90 e0       	ldi	r25, 0x00	; 0
     ca6:	20 d3       	rcall	.+1600   	; 0x12e8 <Clear_GPIO>
		Clear_GPIO(23); // turn off imager beagle
     ca8:	87 e1       	ldi	r24, 0x17	; 23
     caa:	90 e0       	ldi	r25, 0x00	; 0
     cac:	1d d3       	rcall	.+1594   	; 0x12e8 <Clear_GPIO>
		Disable_5V(power_state); // turn off associated rail (5V)		
     cae:	8c 2f       	mov	r24, r28
     cb0:	8e df       	rcall	.-228    	; 0xbce <Disable_5V>
     cb2:	cf 91       	pop	r28
	}
}
     cb4:	08 95       	ret

00000cb6 <grips_SWITCH>:
     cb6:	cf 93       	push	r28
// Author: Chris Thomas
// Date: 2019-03-24
// Description: Switches power to GRIPS based on current power state.
/*========================================================================================*/

void grips_SWITCH(uint8_t power_state){
     cb8:	c8 2f       	mov	r28, r24
	
	// GRIPS mask
	uint8_t grips_mask = 0b00100000;
	
	// Turn on Grips subcomponents if power state calls for it
	if(power_state & grips_mask){
     cba:	85 ff       	sbrs	r24, 5
     cbc:	09 c0       	rjmp	.+18     	; 0xcd0 <grips_SWITCH+0x1a>
		Enable_5V();
     cbe:	54 df       	rcall	.-344    	; 0xb68 <Enable_5V>
		Enable_3V3_1();
     cc0:	44 df       	rcall	.-376    	; 0xb4a <Enable_3V3_1>
     cc2:	8b e1       	ldi	r24, 0x1B	; 27
		Set_GPIO(27); // turn on GNSS beagle
     cc4:	90 e0       	ldi	r25, 0x00	; 0
     cc6:	aa d2       	rcall	.+1364   	; 0x121c <Set_GPIO>
     cc8:	8c e1       	ldi	r24, 0x1C	; 28
		Set_GPIO(28); // turn on OEM719
     cca:	90 e0       	ldi	r25, 0x00	; 0
     ccc:	a7 d2       	rcall	.+1358   	; 0x121c <Set_GPIO>
     cce:	0a c0       	rjmp	.+20     	; 0xce4 <grips_SWITCH+0x2e>
     cd0:	8c e1       	ldi	r24, 0x1C	; 28
	}
	else{
		Clear_GPIO(28); // turn off OEM719
     cd2:	90 e0       	ldi	r25, 0x00	; 0
     cd4:	09 d3       	rcall	.+1554   	; 0x12e8 <Clear_GPIO>
     cd6:	8b e1       	ldi	r24, 0x1B	; 27
		Clear_GPIO(27); // turn off GNSS beagle
     cd8:	90 e0       	ldi	r25, 0x00	; 0
     cda:	06 d3       	rcall	.+1548   	; 0x12e8 <Clear_GPIO>
     cdc:	8c 2f       	mov	r24, r28
		Disable_3V3_1(power_state); // turn off 5V rail
     cde:	71 df       	rcall	.-286    	; 0xbc2 <Disable_3V3_1>
     ce0:	8c 2f       	mov	r24, r28
     ce2:	75 df       	rcall	.-278    	; 0xbce <Disable_5V>
		Disable_5V(power_state); // turn off 3V3-1 rail
     ce4:	cf 91       	pop	r28
     ce6:	08 95       	ret

00000ce8 <sband_SWITCH>:
     ce8:	cf 93       	push	r28
	}
}
     cea:	c8 2f       	mov	r28, r24
     cec:	86 ff       	sbrs	r24, 6
	
	// SBand mask
	uint8_t mask_sband = 0b01000000;
	
	// Turn on SBand components if power stated calls for it
	if(power_state & mask_sband){
     cee:	05 c0       	rjmp	.+10     	; 0xcfa <sband_SWITCH+0x12>
		Enable_8V();
     cf0:	4a df       	rcall	.-364    	; 0xb86 <Enable_8V>
		Set_GPIO(26); // turn on SBand
     cf2:	8a e1       	ldi	r24, 0x1A	; 26
     cf4:	90 e0       	ldi	r25, 0x00	; 0
     cf6:	92 d2       	rcall	.+1316   	; 0x121c <Set_GPIO>
     cf8:	05 c0       	rjmp	.+10     	; 0xd04 <sband_SWITCH+0x1c>
	}
	else{
		Clear_GPIO(26); // turn off SBand
     cfa:	8a e1       	ldi	r24, 0x1A	; 26
     cfc:	90 e0       	ldi	r25, 0x00	; 0
		Disable_8V(power_state); // turn off 8V rail
     cfe:	f4 d2       	rcall	.+1512   	; 0x12e8 <Clear_GPIO>
     d00:	8c 2f       	mov	r24, r28
     d02:	6b df       	rcall	.-298    	; 0xbda <Disable_8V>
	}
}
     d04:	cf 91       	pop	r28
     d06:	08 95       	ret

00000d08 <uhf_SWITCH>:
// Author: Chris Thomas
// Date: 2019-03-24
// Description: Switches power to UHF based on current power state.
/*========================================================================================*/

uhf_SWITCH(uint8_t power_state){
     d08:	cf 93       	push	r28
     d0a:	c8 2f       	mov	r28, r24
	
	// UHF mask
	uint8_t mask_uhf = 0b10000000;
	
	// Turn on UHF components if power state calls for it
	if(power_state & mask_uhf){
     d0c:	88 23       	and	r24, r24
     d0e:	2c f4       	brge	.+10     	; 0xd1a <uhf_SWITCH+0x12>
		Enable_8V();
     d10:	3a df       	rcall	.-396    	; 0xb86 <Enable_8V>
		Set_GPIO(25); // turn on UHF
     d12:	89 e1       	ldi	r24, 0x19	; 25
     d14:	90 e0       	ldi	r25, 0x00	; 0
     d16:	82 d2       	rcall	.+1284   	; 0x121c <Set_GPIO>
     d18:	05 c0       	rjmp	.+10     	; 0xd24 <uhf_SWITCH+0x1c>
	}
	else{
		Clear_GPIO(25); // turn off UHF
     d1a:	89 e1       	ldi	r24, 0x19	; 25
     d1c:	90 e0       	ldi	r25, 0x00	; 0
		Disable_8V(power_state); // turn off 8V rail
     d1e:	e4 d2       	rcall	.+1480   	; 0x12e8 <Clear_GPIO>
     d20:	8c 2f       	mov	r24, r28
     d22:	5b df       	rcall	.-330    	; 0xbda <Disable_8V>
	}
     d24:	cf 91       	pop	r28
     d26:	08 95       	ret

00000d28 <Update_LOADS>:
// Description: Switches power to subsystems based on the current power state. The
//				power state is treated the same way whether the EPS is in autonomous or
//				manual mode.
/*========================================================================================*/

void Update_LOADS(uint8_t power_state){
     d28:	cf 93       	push	r28
     d2a:	c8 2f       	mov	r28, r24
	
	// Heater switching
	heater_SWITCH(power_state);
     d2c:	62 df       	rcall	.-316    	; 0xbf2 <heater_SWITCH>
	
	// OBC switching
	obc_SWITCH(power_state);
     d2e:	8c 2f       	mov	r24, r28
     d30:	a2 df       	rcall	.-188    	; 0xc76 <obc_SWITCH>
	
	// Imager switching
	imager_SWITCH(power_state);
     d32:	8c 2f       	mov	r24, r28
     d34:	aa df       	rcall	.-172    	; 0xc8a <imager_SWITCH>
	
	// GRIPS switching
	grips_SWITCH(power_state);
     d36:	8c 2f       	mov	r24, r28
     d38:	be df       	rcall	.-132    	; 0xcb6 <grips_SWITCH>
	
	// SBand switching
	sband_SWITCH(power_state);
     d3a:	8c 2f       	mov	r24, r28
     d3c:	d5 df       	rcall	.-86     	; 0xce8 <sband_SWITCH>
     d3e:	8c 2f       	mov	r24, r28
	
	// UHF switching
	uhf_SWITCH(power_state);
     d40:	e3 df       	rcall	.-58     	; 0xd08 <uhf_SWITCH>
     d42:	cf 91       	pop	r28
     d44:	08 95       	ret

00000d46 <pwrMatInit>:
	
}
     d46:	fc 01       	movw	r30, r24
     d48:	81 e0       	ldi	r24, 0x01	; 1
// The structure for the power state matrix is
//
/*========================================================================================*/

void pwrMatInit(uint8_t* pwrMat){
	pwrMat[0] = 0b00000001;
     d4a:	80 83       	st	Z, r24
	pwrMat[1] = 0b00000001;
     d4c:	81 83       	std	Z+1, r24	; 0x01
	pwrMat[2] = 0b00000000;
     d4e:	12 82       	std	Z+2, r1	; 0x02
	pwrMat[3] = 0b00000000;
     d50:	13 82       	std	Z+3, r1	; 0x03
	pwrMat[4] = 0b00000000;
     d52:	14 82       	std	Z+4, r1	; 0x04
	pwrMat[5] = 0b00000000;
     d54:	15 82       	std	Z+5, r1	; 0x05
	pwrMat[6] = 0b00000100;
     d56:	84 e0       	ldi	r24, 0x04	; 4
     d58:	86 83       	std	Z+6, r24	; 0x06
	pwrMat[7] = 0b00001010;
     d5a:	8a e0       	ldi	r24, 0x0A	; 10
     d5c:	87 83       	std	Z+7, r24	; 0x07
	pwrMat[8] = 0b00001000;
     d5e:	88 e0       	ldi	r24, 0x08	; 8
     d60:	80 87       	std	Z+8, r24	; 0x08
	pwrMat[9] = 0b00001000;
     d62:	81 87       	std	Z+9, r24	; 0x09
	pwrMat[10] = 0b00011100;
     d64:	8c e1       	ldi	r24, 0x1C	; 28
     d66:	82 87       	std	Z+10, r24	; 0x0a
	pwrMat[11] = 0b00011010;
     d68:	8a e1       	ldi	r24, 0x1A	; 26
     d6a:	83 87       	std	Z+11, r24	; 0x0b
	pwrMat[12] = 0b00011000;
     d6c:	88 e1       	ldi	r24, 0x18	; 24
     d6e:	84 87       	std	Z+12, r24	; 0x0c
	pwrMat[13] = 0b00011000;
     d70:	85 87       	std	Z+13, r24	; 0x0d
	pwrMat[14] = 0b00000000;
     d72:	16 86       	std	Z+14, r1	; 0x0e
	pwrMat[15] = 0b10111100;
     d74:	8c eb       	ldi	r24, 0xBC	; 188
     d76:	87 87       	std	Z+15, r24	; 0x0f
	pwrMat[16] = 0b00111010;
     d78:	8a e3       	ldi	r24, 0x3A	; 58
     d7a:	80 8b       	std	Z+16, r24	; 0x10
	pwrMat[17] = 0b00111000;
     d7c:	88 e3       	ldi	r24, 0x38	; 56
     d7e:	81 8b       	std	Z+17, r24	; 0x11
	pwrMat[18] = 0b00111000;
     d80:	82 8b       	std	Z+18, r24	; 0x12
	pwrMat[19] = 0b00000000;
     d82:	13 8a       	std	Z+19, r1	; 0x13
	pwrMat[20] = 0b11111100;
     d84:	8c ef       	ldi	r24, 0xFC	; 252
     d86:	84 8b       	std	Z+20, r24	; 0x14
	pwrMat[21] = 0b11111010;
     d88:	8a ef       	ldi	r24, 0xFA	; 250
     d8a:	85 8b       	std	Z+21, r24	; 0x15
	pwrMat[22] = 0b11111000;
     d8c:	88 ef       	ldi	r24, 0xF8	; 248
     d8e:	86 8b       	std	Z+22, r24	; 0x16
	pwrMat[23] = 0b11111000;
     d90:	87 8b       	std	Z+23, r24	; 0x17
	pwrMat[24] = 0b00000000;
     d92:	10 8e       	std	Z+24, r1	; 0x18
     d94:	08 95       	ret

00000d96 <PowerStateCheck>:
// Author: Kyle Andersen
// Date: 2019-03-20
// Description: 
/*========================================================================================*/

int PowerStateCheck(float SOC, float temp){
     d96:	8f 92       	push	r8
     d98:	9f 92       	push	r9
     d9a:	af 92       	push	r10
     d9c:	bf 92       	push	r11
     d9e:	cf 92       	push	r12
     da0:	df 92       	push	r13
     da2:	ef 92       	push	r14
     da4:	ff 92       	push	r15
     da6:	cf 93       	push	r28
     da8:	6b 01       	movw	r12, r22
     daa:	7c 01       	movw	r14, r24
     dac:	49 01       	movw	r8, r18
     dae:	5a 01       	movw	r10, r20
	if(SOC < 20){
     db0:	20 e0       	ldi	r18, 0x00	; 0
     db2:	30 e0       	ldi	r19, 0x00	; 0
     db4:	40 ea       	ldi	r20, 0xA0	; 160
     db6:	51 e4       	ldi	r21, 0x41	; 65
     db8:	e5 d7       	rcall	.+4042   	; 0x1d84 <__cmpsf2>
     dba:	88 23       	and	r24, r24
     dbc:	0c f0       	brlt	.+2      	; 0xdc0 <PowerStateCheck+0x2a>
     dbe:	4c c0       	rjmp	.+152    	; 0xe58 <PowerStateCheck+0xc2>
		if(temp >= 40){
     dc0:	20 e0       	ldi	r18, 0x00	; 0
     dc2:	30 e0       	ldi	r19, 0x00	; 0
     dc4:	40 e2       	ldi	r20, 0x20	; 32
     dc6:	52 e4       	ldi	r21, 0x42	; 66
     dc8:	c5 01       	movw	r24, r10
     dca:	b4 01       	movw	r22, r8
     dcc:	0e 94 e0 0f 	call	0x1fc0	; 0x1fc0 <__gesf2>
     dd0:	88 23       	and	r24, r24
     dd2:	0c f0       	brlt	.+2      	; 0xdd6 <PowerStateCheck+0x40>
     dd4:	ab c1       	rjmp	.+854    	; 0x112c <PowerStateCheck+0x396>
			return 4;
		}//end else if
		else if(temp >= 30 && temp < 40){
     dd6:	20 e0       	ldi	r18, 0x00	; 0
     dd8:	30 e0       	ldi	r19, 0x00	; 0
     dda:	40 ef       	ldi	r20, 0xF0	; 240
     ddc:	51 e4       	ldi	r21, 0x41	; 65
     dde:	c5 01       	movw	r24, r10
     de0:	b4 01       	movw	r22, r8
     de2:	0e 94 e0 0f 	call	0x1fc0	; 0x1fc0 <__gesf2>
     de6:	88 23       	and	r24, r24
     de8:	54 f0       	brlt	.+20     	; 0xdfe <PowerStateCheck+0x68>
     dea:	20 e0       	ldi	r18, 0x00	; 0
     dec:	30 e0       	ldi	r19, 0x00	; 0
     dee:	40 e2       	ldi	r20, 0x20	; 32
     df0:	52 e4       	ldi	r21, 0x42	; 66
     df2:	c5 01       	movw	r24, r10
     df4:	b4 01       	movw	r22, r8
     df6:	c6 d7       	rcall	.+3980   	; 0x1d84 <__cmpsf2>
     df8:	88 23       	and	r24, r24
     dfa:	0c f4       	brge	.+2      	; 0xdfe <PowerStateCheck+0x68>
     dfc:	9a c1       	rjmp	.+820    	; 0x1132 <PowerStateCheck+0x39c>
			return 3;
		}//end else if
		else if(temp >= 15 && temp < 30){
     dfe:	20 e0       	ldi	r18, 0x00	; 0
     e00:	30 e0       	ldi	r19, 0x00	; 0
     e02:	40 e7       	ldi	r20, 0x70	; 112
     e04:	51 e4       	ldi	r21, 0x41	; 65
     e06:	c5 01       	movw	r24, r10
     e08:	b4 01       	movw	r22, r8
     e0a:	0e 94 e0 0f 	call	0x1fc0	; 0x1fc0 <__gesf2>
     e0e:	88 23       	and	r24, r24
     e10:	54 f0       	brlt	.+20     	; 0xe26 <PowerStateCheck+0x90>
     e12:	20 e0       	ldi	r18, 0x00	; 0
     e14:	30 e0       	ldi	r19, 0x00	; 0
     e16:	40 ef       	ldi	r20, 0xF0	; 240
     e18:	51 e4       	ldi	r21, 0x41	; 65
     e1a:	c5 01       	movw	r24, r10
     e1c:	b4 01       	movw	r22, r8
     e1e:	b2 d7       	rcall	.+3940   	; 0x1d84 <__cmpsf2>
     e20:	88 23       	and	r24, r24
     e22:	0c f4       	brge	.+2      	; 0xe26 <PowerStateCheck+0x90>
     e24:	89 c1       	rjmp	.+786    	; 0x1138 <PowerStateCheck+0x3a2>
			return 2;
		}//end else if
		else if(temp >= 0 && temp < 15){
     e26:	20 e0       	ldi	r18, 0x00	; 0
     e28:	30 e0       	ldi	r19, 0x00	; 0
     e2a:	a9 01       	movw	r20, r18
     e2c:	c5 01       	movw	r24, r10
     e2e:	b4 01       	movw	r22, r8
     e30:	0e 94 e0 0f 	call	0x1fc0	; 0x1fc0 <__gesf2>
     e34:	88 23       	and	r24, r24
     e36:	0c f4       	brge	.+2      	; 0xe3a <PowerStateCheck+0xa4>
     e38:	82 c1       	rjmp	.+772    	; 0x113e <PowerStateCheck+0x3a8>
/*========================================================================================*/

int PowerStateCheck(float SOC, float temp){
	if(SOC < 20){
		if(temp >= 40){
			return 4;
     e3a:	c1 e0       	ldi	r28, 0x01	; 1
     e3c:	f1 2c       	mov	r15, r1
     e3e:	20 e0       	ldi	r18, 0x00	; 0
     e40:	30 e0       	ldi	r19, 0x00	; 0
     e42:	40 e7       	ldi	r20, 0x70	; 112
     e44:	51 e4       	ldi	r21, 0x41	; 65
     e46:	c5 01       	movw	r24, r10
     e48:	b4 01       	movw	r22, r8
     e4a:	9c d7       	rcall	.+3896   	; 0x1d84 <__cmpsf2>
     e4c:	88 23       	and	r24, r24
     e4e:	0c f0       	brlt	.+2      	; 0xe52 <PowerStateCheck+0xbc>
     e50:	c0 e0       	ldi	r28, 0x00	; 0
     e52:	8c 2f       	mov	r24, r28
     e54:	9f 2d       	mov	r25, r15
     e56:	b1 c1       	rjmp	.+866    	; 0x11ba <PowerStateCheck+0x424>
		}//end else if
		else{
			return 0;
		}//end else
	}//end if SOC < 20
	else if(SOC < 40 && SOC >= 20){
     e58:	20 e0       	ldi	r18, 0x00	; 0
     e5a:	30 e0       	ldi	r19, 0x00	; 0
     e5c:	40 e2       	ldi	r20, 0x20	; 32
     e5e:	52 e4       	ldi	r21, 0x42	; 66
     e60:	c7 01       	movw	r24, r14
     e62:	b6 01       	movw	r22, r12
     e64:	8f d7       	rcall	.+3870   	; 0x1d84 <__cmpsf2>
     e66:	88 23       	and	r24, r24
     e68:	0c f0       	brlt	.+2      	; 0xe6c <PowerStateCheck+0xd6>
     e6a:	58 c0       	rjmp	.+176    	; 0xf1c <PowerStateCheck+0x186>
     e6c:	20 e0       	ldi	r18, 0x00	; 0
     e6e:	30 e0       	ldi	r19, 0x00	; 0
     e70:	40 ea       	ldi	r20, 0xA0	; 160
     e72:	51 e4       	ldi	r21, 0x41	; 65
     e74:	c7 01       	movw	r24, r14
     e76:	b6 01       	movw	r22, r12
     e78:	0e 94 e0 0f 	call	0x1fc0	; 0x1fc0 <__gesf2>
     e7c:	88 23       	and	r24, r24
     e7e:	0c f4       	brge	.+2      	; 0xe82 <PowerStateCheck+0xec>
     e80:	4d c0       	rjmp	.+154    	; 0xf1c <PowerStateCheck+0x186>
		if(temp >= 40){
     e82:	20 e0       	ldi	r18, 0x00	; 0
     e84:	30 e0       	ldi	r19, 0x00	; 0
     e86:	40 e2       	ldi	r20, 0x20	; 32
     e88:	52 e4       	ldi	r21, 0x42	; 66
     e8a:	c5 01       	movw	r24, r10
     e8c:	b4 01       	movw	r22, r8
     e8e:	0e 94 e0 0f 	call	0x1fc0	; 0x1fc0 <__gesf2>
     e92:	88 23       	and	r24, r24
     e94:	0c f0       	brlt	.+2      	; 0xe98 <PowerStateCheck+0x102>
     e96:	56 c1       	rjmp	.+684    	; 0x1144 <PowerStateCheck+0x3ae>
			return 9;
		}//end else if
		else if(temp >= 30 && temp < 40){
     e98:	20 e0       	ldi	r18, 0x00	; 0
     e9a:	30 e0       	ldi	r19, 0x00	; 0
     e9c:	40 ef       	ldi	r20, 0xF0	; 240
     e9e:	51 e4       	ldi	r21, 0x41	; 65
     ea0:	c5 01       	movw	r24, r10
     ea2:	b4 01       	movw	r22, r8
     ea4:	0e 94 e0 0f 	call	0x1fc0	; 0x1fc0 <__gesf2>
     ea8:	88 23       	and	r24, r24
     eaa:	54 f0       	brlt	.+20     	; 0xec0 <PowerStateCheck+0x12a>
     eac:	20 e0       	ldi	r18, 0x00	; 0
     eae:	30 e0       	ldi	r19, 0x00	; 0
     eb0:	40 e2       	ldi	r20, 0x20	; 32
     eb2:	52 e4       	ldi	r21, 0x42	; 66
     eb4:	c5 01       	movw	r24, r10
     eb6:	b4 01       	movw	r22, r8
     eb8:	65 d7       	rcall	.+3786   	; 0x1d84 <__cmpsf2>
     eba:	88 23       	and	r24, r24
     ebc:	0c f4       	brge	.+2      	; 0xec0 <PowerStateCheck+0x12a>
     ebe:	45 c1       	rjmp	.+650    	; 0x114a <PowerStateCheck+0x3b4>
			return 8;
		}//end else if
		else if(temp >= 15 && temp < 30){
     ec0:	20 e0       	ldi	r18, 0x00	; 0
     ec2:	30 e0       	ldi	r19, 0x00	; 0
     ec4:	40 e7       	ldi	r20, 0x70	; 112
     ec6:	51 e4       	ldi	r21, 0x41	; 65
     ec8:	c5 01       	movw	r24, r10
     eca:	b4 01       	movw	r22, r8
     ecc:	0e 94 e0 0f 	call	0x1fc0	; 0x1fc0 <__gesf2>
     ed0:	88 23       	and	r24, r24
     ed2:	54 f0       	brlt	.+20     	; 0xee8 <PowerStateCheck+0x152>
     ed4:	20 e0       	ldi	r18, 0x00	; 0
     ed6:	30 e0       	ldi	r19, 0x00	; 0
     ed8:	40 ef       	ldi	r20, 0xF0	; 240
     eda:	51 e4       	ldi	r21, 0x41	; 65
     edc:	c5 01       	movw	r24, r10
     ede:	b4 01       	movw	r22, r8
     ee0:	51 d7       	rcall	.+3746   	; 0x1d84 <__cmpsf2>
     ee2:	88 23       	and	r24, r24
     ee4:	0c f4       	brge	.+2      	; 0xee8 <PowerStateCheck+0x152>
     ee6:	34 c1       	rjmp	.+616    	; 0x1150 <PowerStateCheck+0x3ba>
			return 7;
		}//end else if
		else if(temp >= 0 && temp < 15){
     ee8:	20 e0       	ldi	r18, 0x00	; 0
     eea:	30 e0       	ldi	r19, 0x00	; 0
     eec:	a9 01       	movw	r20, r18
     eee:	c5 01       	movw	r24, r10
     ef0:	b4 01       	movw	r22, r8
     ef2:	0e 94 e0 0f 	call	0x1fc0	; 0x1fc0 <__gesf2>
     ef6:	88 23       	and	r24, r24
     ef8:	0c f4       	brge	.+2      	; 0xefc <PowerStateCheck+0x166>
     efa:	2d c1       	rjmp	.+602    	; 0x1156 <PowerStateCheck+0x3c0>
     efc:	20 e0       	ldi	r18, 0x00	; 0
     efe:	30 e0       	ldi	r19, 0x00	; 0
     f00:	40 e7       	ldi	r20, 0x70	; 112
     f02:	51 e4       	ldi	r21, 0x41	; 65
     f04:	c5 01       	movw	r24, r10
     f06:	b4 01       	movw	r22, r8
     f08:	3d d7       	rcall	.+3706   	; 0x1d84 <__cmpsf2>
			return 6;
		}//end else if
		else{
			return 5;
     f0a:	08 2e       	mov	r0, r24
     f0c:	00 0c       	add	r0, r0
     f0e:	99 0b       	sbc	r25, r25
     f10:	88 27       	eor	r24, r24
     f12:	99 0f       	add	r25, r25
     f14:	88 1f       	adc	r24, r24
     f16:	99 27       	eor	r25, r25
     f18:	05 96       	adiw	r24, 0x05	; 5
     f1a:	4f c1       	rjmp	.+670    	; 0x11ba <PowerStateCheck+0x424>
		}//end else
	}//end else if SOC < 40
	else if(SOC < 60 && SOC >= 40){
     f1c:	20 e0       	ldi	r18, 0x00	; 0
     f1e:	30 e0       	ldi	r19, 0x00	; 0
     f20:	40 e7       	ldi	r20, 0x70	; 112
     f22:	52 e4       	ldi	r21, 0x42	; 66
     f24:	c7 01       	movw	r24, r14
     f26:	b6 01       	movw	r22, r12
     f28:	2d d7       	rcall	.+3674   	; 0x1d84 <__cmpsf2>
     f2a:	88 23       	and	r24, r24
     f2c:	0c f0       	brlt	.+2      	; 0xf30 <PowerStateCheck+0x19a>
     f2e:	58 c0       	rjmp	.+176    	; 0xfe0 <PowerStateCheck+0x24a>
     f30:	20 e0       	ldi	r18, 0x00	; 0
     f32:	30 e0       	ldi	r19, 0x00	; 0
     f34:	40 e2       	ldi	r20, 0x20	; 32
     f36:	52 e4       	ldi	r21, 0x42	; 66
     f38:	c7 01       	movw	r24, r14
     f3a:	b6 01       	movw	r22, r12
     f3c:	0e 94 e0 0f 	call	0x1fc0	; 0x1fc0 <__gesf2>
     f40:	88 23       	and	r24, r24
     f42:	0c f4       	brge	.+2      	; 0xf46 <PowerStateCheck+0x1b0>
     f44:	2f c1       	rjmp	.+606    	; 0x11a4 <PowerStateCheck+0x40e>
		if(temp >= 40){
     f46:	20 e0       	ldi	r18, 0x00	; 0
     f48:	30 e0       	ldi	r19, 0x00	; 0
     f4a:	40 e2       	ldi	r20, 0x20	; 32
     f4c:	52 e4       	ldi	r21, 0x42	; 66
     f4e:	c5 01       	movw	r24, r10
     f50:	b4 01       	movw	r22, r8
     f52:	0e 94 e0 0f 	call	0x1fc0	; 0x1fc0 <__gesf2>
     f56:	88 23       	and	r24, r24
     f58:	0c f0       	brlt	.+2      	; 0xf5c <PowerStateCheck+0x1c6>
     f5a:	00 c1       	rjmp	.+512    	; 0x115c <PowerStateCheck+0x3c6>
			return 14;
		}//end else if
		else if(temp >= 30 && temp < 40){
     f5c:	20 e0       	ldi	r18, 0x00	; 0
     f5e:	30 e0       	ldi	r19, 0x00	; 0
     f60:	40 ef       	ldi	r20, 0xF0	; 240
     f62:	51 e4       	ldi	r21, 0x41	; 65
     f64:	c5 01       	movw	r24, r10
     f66:	b4 01       	movw	r22, r8
     f68:	0e 94 e0 0f 	call	0x1fc0	; 0x1fc0 <__gesf2>
     f6c:	88 23       	and	r24, r24
     f6e:	54 f0       	brlt	.+20     	; 0xf84 <PowerStateCheck+0x1ee>
     f70:	20 e0       	ldi	r18, 0x00	; 0
     f72:	30 e0       	ldi	r19, 0x00	; 0
     f74:	40 e2       	ldi	r20, 0x20	; 32
     f76:	52 e4       	ldi	r21, 0x42	; 66
     f78:	c5 01       	movw	r24, r10
     f7a:	b4 01       	movw	r22, r8
     f7c:	03 d7       	rcall	.+3590   	; 0x1d84 <__cmpsf2>
     f7e:	88 23       	and	r24, r24
     f80:	0c f4       	brge	.+2      	; 0xf84 <PowerStateCheck+0x1ee>
     f82:	ef c0       	rjmp	.+478    	; 0x1162 <PowerStateCheck+0x3cc>
			return 13;
		}//end else if
		else if(temp >= 15 && temp < 30){
     f84:	20 e0       	ldi	r18, 0x00	; 0
     f86:	30 e0       	ldi	r19, 0x00	; 0
     f88:	40 e7       	ldi	r20, 0x70	; 112
     f8a:	51 e4       	ldi	r21, 0x41	; 65
     f8c:	c5 01       	movw	r24, r10
     f8e:	b4 01       	movw	r22, r8
     f90:	0e 94 e0 0f 	call	0x1fc0	; 0x1fc0 <__gesf2>
     f94:	88 23       	and	r24, r24
     f96:	54 f0       	brlt	.+20     	; 0xfac <PowerStateCheck+0x216>
     f98:	20 e0       	ldi	r18, 0x00	; 0
     f9a:	30 e0       	ldi	r19, 0x00	; 0
     f9c:	40 ef       	ldi	r20, 0xF0	; 240
     f9e:	51 e4       	ldi	r21, 0x41	; 65
     fa0:	c5 01       	movw	r24, r10
     fa2:	b4 01       	movw	r22, r8
     fa4:	ef d6       	rcall	.+3550   	; 0x1d84 <__cmpsf2>
     fa6:	88 23       	and	r24, r24
     fa8:	0c f4       	brge	.+2      	; 0xfac <PowerStateCheck+0x216>
     faa:	de c0       	rjmp	.+444    	; 0x1168 <PowerStateCheck+0x3d2>
			return 12;
		}//end else if
		else if(temp >= 0 && temp < 15){
     fac:	20 e0       	ldi	r18, 0x00	; 0
     fae:	30 e0       	ldi	r19, 0x00	; 0
     fb0:	a9 01       	movw	r20, r18
     fb2:	c5 01       	movw	r24, r10
     fb4:	b4 01       	movw	r22, r8
     fb6:	0e 94 e0 0f 	call	0x1fc0	; 0x1fc0 <__gesf2>
     fba:	88 23       	and	r24, r24
     fbc:	0c f4       	brge	.+2      	; 0xfc0 <PowerStateCheck+0x22a>
     fbe:	d7 c0       	rjmp	.+430    	; 0x116e <PowerStateCheck+0x3d8>
     fc0:	20 e0       	ldi	r18, 0x00	; 0
     fc2:	30 e0       	ldi	r19, 0x00	; 0
     fc4:	40 e7       	ldi	r20, 0x70	; 112
     fc6:	51 e4       	ldi	r21, 0x41	; 65
     fc8:	c5 01       	movw	r24, r10
     fca:	b4 01       	movw	r22, r8
     fcc:	db d6       	rcall	.+3510   	; 0x1d84 <__cmpsf2>
			return 11;
		}//end else if
		else{
			return 10;
     fce:	08 2e       	mov	r0, r24
     fd0:	00 0c       	add	r0, r0
     fd2:	99 0b       	sbc	r25, r25
     fd4:	88 27       	eor	r24, r24
     fd6:	99 0f       	add	r25, r25
     fd8:	88 1f       	adc	r24, r24
     fda:	99 27       	eor	r25, r25
     fdc:	0a 96       	adiw	r24, 0x0a	; 10
		}//end else
	}//end if SOC < 60
	else if(SOC < 80 && SOC <= 60){
     fde:	ed c0       	rjmp	.+474    	; 0x11ba <PowerStateCheck+0x424>
     fe0:	20 e0       	ldi	r18, 0x00	; 0
     fe2:	30 e0       	ldi	r19, 0x00	; 0
     fe4:	40 ea       	ldi	r20, 0xA0	; 160
     fe6:	52 e4       	ldi	r21, 0x42	; 66
     fe8:	c7 01       	movw	r24, r14
     fea:	b6 01       	movw	r22, r12
     fec:	cb d6       	rcall	.+3478   	; 0x1d84 <__cmpsf2>
     fee:	88 23       	and	r24, r24
     ff0:	0c f0       	brlt	.+2      	; 0xff4 <PowerStateCheck+0x25e>
     ff2:	53 c0       	rjmp	.+166    	; 0x109a <PowerStateCheck+0x304>
     ff4:	20 e0       	ldi	r18, 0x00	; 0
     ff6:	30 e0       	ldi	r19, 0x00	; 0
     ff8:	40 e7       	ldi	r20, 0x70	; 112
     ffa:	52 e4       	ldi	r21, 0x42	; 66
     ffc:	c7 01       	movw	r24, r14
     ffe:	b6 01       	movw	r22, r12
    1000:	c1 d6       	rcall	.+3458   	; 0x1d84 <__cmpsf2>
    1002:	18 16       	cp	r1, r24
    1004:	0c f4       	brge	.+2      	; 0x1008 <PowerStateCheck+0x272>
		if(temp >= 40){
    1006:	49 c0       	rjmp	.+146    	; 0x109a <PowerStateCheck+0x304>
    1008:	20 e0       	ldi	r18, 0x00	; 0
    100a:	30 e0       	ldi	r19, 0x00	; 0
    100c:	40 e2       	ldi	r20, 0x20	; 32
    100e:	52 e4       	ldi	r21, 0x42	; 66
    1010:	c5 01       	movw	r24, r10
    1012:	b4 01       	movw	r22, r8
    1014:	d5 d7       	rcall	.+4010   	; 0x1fc0 <__gesf2>
    1016:	88 23       	and	r24, r24
    1018:	0c f0       	brlt	.+2      	; 0x101c <PowerStateCheck+0x286>
			return 19;
		}//end else if
		else if(temp >= 30 && temp < 40){
    101a:	ac c0       	rjmp	.+344    	; 0x1174 <PowerStateCheck+0x3de>
    101c:	20 e0       	ldi	r18, 0x00	; 0
    101e:	30 e0       	ldi	r19, 0x00	; 0
    1020:	40 ef       	ldi	r20, 0xF0	; 240
    1022:	51 e4       	ldi	r21, 0x41	; 65
    1024:	c5 01       	movw	r24, r10
    1026:	b4 01       	movw	r22, r8
    1028:	cb d7       	rcall	.+3990   	; 0x1fc0 <__gesf2>
    102a:	88 23       	and	r24, r24
    102c:	54 f0       	brlt	.+20     	; 0x1042 <PowerStateCheck+0x2ac>
    102e:	20 e0       	ldi	r18, 0x00	; 0
    1030:	30 e0       	ldi	r19, 0x00	; 0
    1032:	40 e2       	ldi	r20, 0x20	; 32
    1034:	52 e4       	ldi	r21, 0x42	; 66
    1036:	c5 01       	movw	r24, r10
    1038:	b4 01       	movw	r22, r8
    103a:	a4 d6       	rcall	.+3400   	; 0x1d84 <__cmpsf2>
    103c:	88 23       	and	r24, r24
    103e:	0c f4       	brge	.+2      	; 0x1042 <PowerStateCheck+0x2ac>
			return 18;
		}//end else if
		else if(temp >= 15 && temp < 30){
    1040:	9c c0       	rjmp	.+312    	; 0x117a <PowerStateCheck+0x3e4>
    1042:	20 e0       	ldi	r18, 0x00	; 0
    1044:	30 e0       	ldi	r19, 0x00	; 0
    1046:	40 e7       	ldi	r20, 0x70	; 112
    1048:	51 e4       	ldi	r21, 0x41	; 65
    104a:	c5 01       	movw	r24, r10
    104c:	b4 01       	movw	r22, r8
    104e:	b8 d7       	rcall	.+3952   	; 0x1fc0 <__gesf2>
    1050:	88 23       	and	r24, r24
    1052:	54 f0       	brlt	.+20     	; 0x1068 <PowerStateCheck+0x2d2>
    1054:	20 e0       	ldi	r18, 0x00	; 0
    1056:	30 e0       	ldi	r19, 0x00	; 0
    1058:	40 ef       	ldi	r20, 0xF0	; 240
    105a:	51 e4       	ldi	r21, 0x41	; 65
    105c:	c5 01       	movw	r24, r10
    105e:	b4 01       	movw	r22, r8
    1060:	91 d6       	rcall	.+3362   	; 0x1d84 <__cmpsf2>
    1062:	88 23       	and	r24, r24
    1064:	0c f4       	brge	.+2      	; 0x1068 <PowerStateCheck+0x2d2>
			return 17;
		}//end else if
		else if(temp >= 0 && temp < 15){
    1066:	8c c0       	rjmp	.+280    	; 0x1180 <PowerStateCheck+0x3ea>
    1068:	20 e0       	ldi	r18, 0x00	; 0
    106a:	30 e0       	ldi	r19, 0x00	; 0
    106c:	a9 01       	movw	r20, r18
    106e:	c5 01       	movw	r24, r10
    1070:	b4 01       	movw	r22, r8
    1072:	a6 d7       	rcall	.+3916   	; 0x1fc0 <__gesf2>
    1074:	88 23       	and	r24, r24
    1076:	0c f4       	brge	.+2      	; 0x107a <PowerStateCheck+0x2e4>
    1078:	86 c0       	rjmp	.+268    	; 0x1186 <PowerStateCheck+0x3f0>
    107a:	20 e0       	ldi	r18, 0x00	; 0
    107c:	30 e0       	ldi	r19, 0x00	; 0
    107e:	40 e7       	ldi	r20, 0x70	; 112
    1080:	51 e4       	ldi	r21, 0x41	; 65
    1082:	c5 01       	movw	r24, r10
    1084:	b4 01       	movw	r22, r8
    1086:	7e d6       	rcall	.+3324   	; 0x1d84 <__cmpsf2>
			return 16;
		}//end else if
		else{
			return 15;
    1088:	08 2e       	mov	r0, r24
    108a:	00 0c       	add	r0, r0
    108c:	99 0b       	sbc	r25, r25
    108e:	88 27       	eor	r24, r24
    1090:	99 0f       	add	r25, r25
    1092:	88 1f       	adc	r24, r24
    1094:	99 27       	eor	r25, r25
    1096:	0f 96       	adiw	r24, 0x0f	; 15
		}//end else
	}//end if SOC < 80
	else {
		if(temp >= 40){
    1098:	90 c0       	rjmp	.+288    	; 0x11ba <PowerStateCheck+0x424>
    109a:	20 e0       	ldi	r18, 0x00	; 0
    109c:	30 e0       	ldi	r19, 0x00	; 0
    109e:	40 e2       	ldi	r20, 0x20	; 32
    10a0:	52 e4       	ldi	r21, 0x42	; 66
    10a2:	c5 01       	movw	r24, r10
    10a4:	b4 01       	movw	r22, r8
    10a6:	8c d7       	rcall	.+3864   	; 0x1fc0 <__gesf2>
    10a8:	88 23       	and	r24, r24
    10aa:	0c f0       	brlt	.+2      	; 0x10ae <PowerStateCheck+0x318>
			return 24;
		}//end else if
		else if(temp >= 30 && temp < 40){
    10ac:	6f c0       	rjmp	.+222    	; 0x118c <PowerStateCheck+0x3f6>
    10ae:	20 e0       	ldi	r18, 0x00	; 0
    10b0:	30 e0       	ldi	r19, 0x00	; 0
    10b2:	40 ef       	ldi	r20, 0xF0	; 240
    10b4:	51 e4       	ldi	r21, 0x41	; 65
    10b6:	c5 01       	movw	r24, r10
    10b8:	b4 01       	movw	r22, r8
    10ba:	82 d7       	rcall	.+3844   	; 0x1fc0 <__gesf2>
    10bc:	88 23       	and	r24, r24
    10be:	54 f0       	brlt	.+20     	; 0x10d4 <PowerStateCheck+0x33e>
    10c0:	20 e0       	ldi	r18, 0x00	; 0
    10c2:	30 e0       	ldi	r19, 0x00	; 0
    10c4:	40 e2       	ldi	r20, 0x20	; 32
    10c6:	52 e4       	ldi	r21, 0x42	; 66
    10c8:	c5 01       	movw	r24, r10
    10ca:	b4 01       	movw	r22, r8
    10cc:	5b d6       	rcall	.+3254   	; 0x1d84 <__cmpsf2>
    10ce:	88 23       	and	r24, r24
			return 23;
		}//end else if
		else if(temp >= 15 && temp < 30){
    10d0:	0c f4       	brge	.+2      	; 0x10d4 <PowerStateCheck+0x33e>
    10d2:	5f c0       	rjmp	.+190    	; 0x1192 <PowerStateCheck+0x3fc>
    10d4:	20 e0       	ldi	r18, 0x00	; 0
    10d6:	30 e0       	ldi	r19, 0x00	; 0
    10d8:	40 e7       	ldi	r20, 0x70	; 112
    10da:	51 e4       	ldi	r21, 0x41	; 65
    10dc:	c5 01       	movw	r24, r10
    10de:	b4 01       	movw	r22, r8
    10e0:	6f d7       	rcall	.+3806   	; 0x1fc0 <__gesf2>
    10e2:	88 23       	and	r24, r24
    10e4:	54 f0       	brlt	.+20     	; 0x10fa <PowerStateCheck+0x364>
    10e6:	20 e0       	ldi	r18, 0x00	; 0
    10e8:	30 e0       	ldi	r19, 0x00	; 0
    10ea:	40 ef       	ldi	r20, 0xF0	; 240
    10ec:	51 e4       	ldi	r21, 0x41	; 65
    10ee:	c5 01       	movw	r24, r10
    10f0:	b4 01       	movw	r22, r8
    10f2:	48 d6       	rcall	.+3216   	; 0x1d84 <__cmpsf2>
    10f4:	88 23       	and	r24, r24
			return 22;
		}//end else if
		else if(temp >= 0 && temp < 15){
    10f6:	0c f4       	brge	.+2      	; 0x10fa <PowerStateCheck+0x364>
    10f8:	4f c0       	rjmp	.+158    	; 0x1198 <PowerStateCheck+0x402>
    10fa:	20 e0       	ldi	r18, 0x00	; 0
    10fc:	30 e0       	ldi	r19, 0x00	; 0
    10fe:	a9 01       	movw	r20, r18
    1100:	c5 01       	movw	r24, r10
    1102:	b4 01       	movw	r22, r8
    1104:	5d d7       	rcall	.+3770   	; 0x1fc0 <__gesf2>
    1106:	88 23       	and	r24, r24
    1108:	0c f4       	brge	.+2      	; 0x110c <PowerStateCheck+0x376>
    110a:	49 c0       	rjmp	.+146    	; 0x119e <PowerStateCheck+0x408>
    110c:	20 e0       	ldi	r18, 0x00	; 0
    110e:	30 e0       	ldi	r19, 0x00	; 0
    1110:	40 e7       	ldi	r20, 0x70	; 112
    1112:	51 e4       	ldi	r21, 0x41	; 65
    1114:	c5 01       	movw	r24, r10
    1116:	b4 01       	movw	r22, r8
    1118:	35 d6       	rcall	.+3178   	; 0x1d84 <__cmpsf2>
			return 21;
		}//end else if
		else{
			return 20;
    111a:	08 2e       	mov	r0, r24
    111c:	00 0c       	add	r0, r0
    111e:	99 0b       	sbc	r25, r25
    1120:	88 27       	eor	r24, r24
    1122:	99 0f       	add	r25, r25
    1124:	88 1f       	adc	r24, r24
    1126:	99 27       	eor	r25, r25
    1128:	44 96       	adiw	r24, 0x14	; 20
    112a:	47 c0       	rjmp	.+142    	; 0x11ba <PowerStateCheck+0x424>
/*========================================================================================*/

int PowerStateCheck(float SOC, float temp){
	if(SOC < 20){
		if(temp >= 40){
			return 4;
    112c:	84 e0       	ldi	r24, 0x04	; 4
    112e:	90 e0       	ldi	r25, 0x00	; 0
    1130:	44 c0       	rjmp	.+136    	; 0x11ba <PowerStateCheck+0x424>
		}//end else if
		else if(temp >= 30 && temp < 40){
			return 3;
    1132:	83 e0       	ldi	r24, 0x03	; 3
    1134:	90 e0       	ldi	r25, 0x00	; 0
    1136:	41 c0       	rjmp	.+130    	; 0x11ba <PowerStateCheck+0x424>
		}//end else if
		else if(temp >= 15 && temp < 30){
			return 2;
    1138:	82 e0       	ldi	r24, 0x02	; 2
    113a:	90 e0       	ldi	r25, 0x00	; 0
    113c:	3e c0       	rjmp	.+124    	; 0x11ba <PowerStateCheck+0x424>
		}//end else if
		else if(temp >= 0 && temp < 15){
			return 1;
		}//end else if
		else{
			return 0;
    113e:	80 e0       	ldi	r24, 0x00	; 0
    1140:	90 e0       	ldi	r25, 0x00	; 0
    1142:	3b c0       	rjmp	.+118    	; 0x11ba <PowerStateCheck+0x424>
		}//end else
	}//end if SOC < 20
	else if(SOC < 40 && SOC >= 20){
		if(temp >= 40){
			return 9;
    1144:	89 e0       	ldi	r24, 0x09	; 9
    1146:	90 e0       	ldi	r25, 0x00	; 0
    1148:	38 c0       	rjmp	.+112    	; 0x11ba <PowerStateCheck+0x424>
		}//end else if
		else if(temp >= 30 && temp < 40){
			return 8;
    114a:	88 e0       	ldi	r24, 0x08	; 8
    114c:	90 e0       	ldi	r25, 0x00	; 0
    114e:	35 c0       	rjmp	.+106    	; 0x11ba <PowerStateCheck+0x424>
		}//end else if
		else if(temp >= 15 && temp < 30){
			return 7;
    1150:	87 e0       	ldi	r24, 0x07	; 7
    1152:	90 e0       	ldi	r25, 0x00	; 0
    1154:	32 c0       	rjmp	.+100    	; 0x11ba <PowerStateCheck+0x424>
		}//end else if
		else if(temp >= 0 && temp < 15){
			return 6;
		}//end else if
		else{
			return 5;
    1156:	85 e0       	ldi	r24, 0x05	; 5
    1158:	90 e0       	ldi	r25, 0x00	; 0
    115a:	2f c0       	rjmp	.+94     	; 0x11ba <PowerStateCheck+0x424>
		}//end else
	}//end else if SOC < 40
	else if(SOC < 60 && SOC >= 40){
		if(temp >= 40){
			return 14;
    115c:	8e e0       	ldi	r24, 0x0E	; 14
    115e:	90 e0       	ldi	r25, 0x00	; 0
    1160:	2c c0       	rjmp	.+88     	; 0x11ba <PowerStateCheck+0x424>
		}//end else if
		else if(temp >= 30 && temp < 40){
			return 13;
    1162:	8d e0       	ldi	r24, 0x0D	; 13
    1164:	90 e0       	ldi	r25, 0x00	; 0
    1166:	29 c0       	rjmp	.+82     	; 0x11ba <PowerStateCheck+0x424>
		}//end else if
		else if(temp >= 15 && temp < 30){
			return 12;
    1168:	8c e0       	ldi	r24, 0x0C	; 12
    116a:	90 e0       	ldi	r25, 0x00	; 0
    116c:	26 c0       	rjmp	.+76     	; 0x11ba <PowerStateCheck+0x424>
		}//end else if
		else if(temp >= 0 && temp < 15){
			return 11;
		}//end else if
		else{
			return 10;
    116e:	8a e0       	ldi	r24, 0x0A	; 10
    1170:	90 e0       	ldi	r25, 0x00	; 0
    1172:	23 c0       	rjmp	.+70     	; 0x11ba <PowerStateCheck+0x424>
		}//end else
	}//end if SOC < 60
	else if(SOC < 80 && SOC <= 60){
		if(temp >= 40){
			return 19;
    1174:	83 e1       	ldi	r24, 0x13	; 19
    1176:	90 e0       	ldi	r25, 0x00	; 0
    1178:	20 c0       	rjmp	.+64     	; 0x11ba <PowerStateCheck+0x424>
		}//end else if
		else if(temp >= 30 && temp < 40){
			return 18;
    117a:	82 e1       	ldi	r24, 0x12	; 18
    117c:	90 e0       	ldi	r25, 0x00	; 0
    117e:	1d c0       	rjmp	.+58     	; 0x11ba <PowerStateCheck+0x424>
		}//end else if
		else if(temp >= 15 && temp < 30){
			return 17;
    1180:	81 e1       	ldi	r24, 0x11	; 17
    1182:	90 e0       	ldi	r25, 0x00	; 0
    1184:	1a c0       	rjmp	.+52     	; 0x11ba <PowerStateCheck+0x424>
		}//end else if
		else if(temp >= 0 && temp < 15){
			return 16;
		}//end else if
		else{
			return 15;
    1186:	8f e0       	ldi	r24, 0x0F	; 15
    1188:	90 e0       	ldi	r25, 0x00	; 0
		}//end else
	}//end if SOC < 80
	else {
		if(temp >= 40){
			return 24;
    118a:	17 c0       	rjmp	.+46     	; 0x11ba <PowerStateCheck+0x424>
    118c:	88 e1       	ldi	r24, 0x18	; 24
    118e:	90 e0       	ldi	r25, 0x00	; 0
		}//end else if
		else if(temp >= 30 && temp < 40){
			return 23;
    1190:	14 c0       	rjmp	.+40     	; 0x11ba <PowerStateCheck+0x424>
    1192:	87 e1       	ldi	r24, 0x17	; 23
    1194:	90 e0       	ldi	r25, 0x00	; 0
		}//end else if
		else if(temp >= 15 && temp < 30){
			return 22;
    1196:	11 c0       	rjmp	.+34     	; 0x11ba <PowerStateCheck+0x424>
    1198:	86 e1       	ldi	r24, 0x16	; 22
    119a:	90 e0       	ldi	r25, 0x00	; 0
		}//end else if
		else if(temp >= 0 && temp < 15){
			return 21;
		}//end else if
		else{
			return 20;
    119c:	0e c0       	rjmp	.+28     	; 0x11ba <PowerStateCheck+0x424>
    119e:	84 e1       	ldi	r24, 0x14	; 20
    11a0:	90 e0       	ldi	r25, 0x00	; 0
		}//end else if
		else{
			return 10;
		}//end else
	}//end if SOC < 60
	else if(SOC < 80 && SOC <= 60){
    11a2:	0b c0       	rjmp	.+22     	; 0x11ba <PowerStateCheck+0x424>
    11a4:	20 e0       	ldi	r18, 0x00	; 0
    11a6:	30 e0       	ldi	r19, 0x00	; 0
    11a8:	40 ea       	ldi	r20, 0xA0	; 160
    11aa:	52 e4       	ldi	r21, 0x42	; 66
    11ac:	c7 01       	movw	r24, r14
    11ae:	b6 01       	movw	r22, r12
    11b0:	e9 d5       	rcall	.+3026   	; 0x1d84 <__cmpsf2>
    11b2:	88 23       	and	r24, r24
    11b4:	0c f4       	brge	.+2      	; 0x11b8 <PowerStateCheck+0x422>
    11b6:	28 cf       	rjmp	.-432    	; 0x1008 <PowerStateCheck+0x272>
    11b8:	70 cf       	rjmp	.-288    	; 0x109a <PowerStateCheck+0x304>
		}//end else if
		else{
			return 20;
		}//end else
	}//end else SOC > 80
}//end PowerStateCheck
    11ba:	cf 91       	pop	r28
    11bc:	ff 90       	pop	r15
    11be:	ef 90       	pop	r14
    11c0:	df 90       	pop	r13
    11c2:	cf 90       	pop	r12
    11c4:	bf 90       	pop	r11
    11c6:	af 90       	pop	r10
    11c8:	9f 90       	pop	r9
    11ca:	8f 90       	pop	r8
    11cc:	08 95       	ret

000011ce <Update_STATE>:
// Date: 2019-03-25
// Description: Updates to the state to character array form for ease of use as it is
//				impossbile to read individual bits in a unsigned integer.
/*========================================================================================*/

void Update_STATE(char* power, uint8_t state){
    11ce:	fc 01       	movw	r30, r24
    11d0:	ac 01       	movw	r20, r24
    11d2:	48 5f       	subi	r20, 0xF8	; 248
    11d4:	5f 4f       	sbci	r21, 0xFF	; 255
	power[6] => SBand   Power
	power[7] => UHF     Power	
	*/
	
	// 8 bit mask to check the state of each position
	uint8_t mask = 0x01;
    11d6:	91 e0       	ldi	r25, 0x01	; 1
		if (mask & state){
			power[i] = 'Y';
			mask = mask << 1; // shift left once
		}
		else{
			power[i] = 'N';
    11d8:	3e e4       	ldi	r19, 0x4E	; 78
	uint8_t mask = 0x01;
	// keep track of the first index
	
	while(i < 8){
		if (mask & state){
			power[i] = 'Y';
    11da:	89 e5       	ldi	r24, 0x59	; 89
	// 8 bit mask to check the state of each position
	uint8_t mask = 0x01;
	// keep track of the first index
	
	while(i < 8){
		if (mask & state){
    11dc:	26 2f       	mov	r18, r22
    11de:	29 23       	and	r18, r25
    11e0:	19 f0       	breq	.+6      	; 0x11e8 <Update_STATE+0x1a>
			power[i] = 'Y';
    11e2:	80 83       	st	Z, r24
			mask = mask << 1; // shift left once
    11e4:	99 0f       	add	r25, r25
    11e6:	02 c0       	rjmp	.+4      	; 0x11ec <Update_STATE+0x1e>
		}
		else{
			power[i] = 'N';
    11e8:	30 83       	st	Z, r19
			mask = mask << 1; // shift left once
    11ea:	99 0f       	add	r25, r25
    11ec:	31 96       	adiw	r30, 0x01	; 1
	
	// 8 bit mask to check the state of each position
	uint8_t mask = 0x01;
	// keep track of the first index
	
	while(i < 8){
    11ee:	e4 17       	cp	r30, r20
    11f0:	f5 07       	cpc	r31, r21
    11f2:	a1 f7       	brne	.-24     	; 0x11dc <Update_STATE+0xe>
			power[i] = 'N';
			mask = mask << 1; // shift left once
		}
		i++;
	}
}
    11f4:	08 95       	ret

000011f6 <Set_MODE>:
// Date: 2019-03-25
// Description: Sets the mode of the EPS. A value of 0 will be interpreted as manual mode.
//				Anything other than 0 will be interpreted as autonomous mode.
/*========================================================================================*/

void Set_MODE(uint8_t mode){
    11f6:	08 95       	ret

000011f8 <EEPROM_Write>:
/*========================================================================================*/

void EEPROM_Write(uint8_t launch_bits, uint16_t address){
	
	// Wait for previous read/write cycle to be finished
	while(EECR & 0x02);
    11f8:	f9 99       	sbic	0x1f, 1	; 31
    11fa:	fe cf       	rjmp	.-4      	; 0x11f8 <EEPROM_Write>
	
	// Select EEPROM Address (first address)
	EEAR = address; // first address
    11fc:	72 bd       	out	0x22, r23	; 34
    11fe:	61 bd       	out	0x21, r22	; 33
	
	// Write to data Register
	EEDR = launch_bits;
    1200:	80 bd       	out	0x20, r24	; 32
	
	// Master Write Enable
	EECR = 0x04;
    1202:	84 e0       	ldi	r24, 0x04	; 4
    1204:	8f bb       	out	0x1f, r24	; 31
	
	// Write Enable
	EECR = 0x02;
    1206:	82 e0       	ldi	r24, 0x02	; 2
    1208:	8f bb       	out	0x1f, r24	; 31
    120a:	08 95       	ret

0000120c <EEPROM_Read>:
/*========================================================================================*/

uint8_t EEPROM_Read(uint16_t address){
	
	// Wait for previous read/write cycle to be finished
	while(EECR & 0x02);
    120c:	f9 99       	sbic	0x1f, 1	; 31
    120e:	fe cf       	rjmp	.-4      	; 0x120c <EEPROM_Read>
	
	// Select EEPROM Address (first address)
	EEAR = address;
    1210:	92 bd       	out	0x22, r25	; 34
    1212:	81 bd       	out	0x21, r24	; 33
	
	// Read Enable
	EECR = 0x01;
    1214:	81 e0       	ldi	r24, 0x01	; 1
    1216:	8f bb       	out	0x1f, r24	; 31
	
	return EEDR;
    1218:	80 b5       	in	r24, 0x20	; 32
	
}
    121a:	08 95       	ret

0000121c <Set_GPIO>:
void Set_GPIO(int gpio_num){
	
	int gpio = 0x01; // initialize gpio selection to bit 0
	
	// PORT H
	if (gpio_num < 7){
    121c:	87 30       	cpi	r24, 0x07	; 7
    121e:	91 05       	cpc	r25, r1
    1220:	7c f4       	brge	.+30     	; 0x1240 <Set_GPIO+0x24>
		gpio = gpio << gpio_num; // shift to correct bit
		PORTH |= gpio; // set selected pin high
    1222:	e2 e0       	ldi	r30, 0x02	; 2
    1224:	f1 e0       	ldi	r31, 0x01	; 1
    1226:	40 81       	ld	r20, Z
    1228:	21 e0       	ldi	r18, 0x01	; 1
    122a:	30 e0       	ldi	r19, 0x00	; 0
    122c:	b9 01       	movw	r22, r18
    122e:	02 c0       	rjmp	.+4      	; 0x1234 <Set_GPIO+0x18>
    1230:	66 0f       	add	r22, r22
    1232:	77 1f       	adc	r23, r23
    1234:	8a 95       	dec	r24
    1236:	e2 f7       	brpl	.-8      	; 0x1230 <Set_GPIO+0x14>
    1238:	cb 01       	movw	r24, r22
    123a:	84 2b       	or	r24, r20
    123c:	80 83       	st	Z, r24
    123e:	08 95       	ret
	}
	// PORT L
	else if (gpio_num >= 7 && gpio_num < 10){
    1240:	9c 01       	movw	r18, r24
    1242:	27 50       	subi	r18, 0x07	; 7
    1244:	31 09       	sbc	r19, r1
    1246:	23 30       	cpi	r18, 0x03	; 3
    1248:	31 05       	cpc	r19, r1
    124a:	80 f4       	brcc	.+32     	; 0x126c <Set_GPIO+0x50>
		gpio = gpio << (gpio_num - 6); // shift to correct bit
		PORTL |= gpio; // set selected pin high
    124c:	eb e0       	ldi	r30, 0x0B	; 11
    124e:	f1 e0       	ldi	r31, 0x01	; 1
    1250:	40 81       	ld	r20, Z
    1252:	06 97       	sbiw	r24, 0x06	; 6
    1254:	21 e0       	ldi	r18, 0x01	; 1
    1256:	30 e0       	ldi	r19, 0x00	; 0
    1258:	b9 01       	movw	r22, r18
    125a:	02 c0       	rjmp	.+4      	; 0x1260 <Set_GPIO+0x44>
    125c:	66 0f       	add	r22, r22
    125e:	77 1f       	adc	r23, r23
    1260:	8a 95       	dec	r24
    1262:	e2 f7       	brpl	.-8      	; 0x125c <Set_GPIO+0x40>
    1264:	cb 01       	movw	r24, r22
    1266:	84 2b       	or	r24, r20
    1268:	80 83       	st	Z, r24
    126a:	08 95       	ret
	}
	// PORT A
	else if(gpio_num >= 10 && gpio_num < 14){
    126c:	9c 01       	movw	r18, r24
    126e:	2a 50       	subi	r18, 0x0A	; 10
    1270:	31 09       	sbc	r19, r1
    1272:	24 30       	cpi	r18, 0x04	; 4
    1274:	31 05       	cpc	r19, r1
    1276:	70 f4       	brcc	.+28     	; 0x1294 <Set_GPIO+0x78>
		gpio = gpio << (gpio_num - 6); // shift to correct bit
		PORTA |= gpio; // set selected pin high
    1278:	42 b1       	in	r20, 0x02	; 2
    127a:	06 97       	sbiw	r24, 0x06	; 6
    127c:	21 e0       	ldi	r18, 0x01	; 1
    127e:	30 e0       	ldi	r19, 0x00	; 0
    1280:	b9 01       	movw	r22, r18
    1282:	02 c0       	rjmp	.+4      	; 0x1288 <Set_GPIO+0x6c>
    1284:	66 0f       	add	r22, r22
    1286:	77 1f       	adc	r23, r23
    1288:	8a 95       	dec	r24
    128a:	e2 f7       	brpl	.-8      	; 0x1284 <Set_GPIO+0x68>
    128c:	cb 01       	movw	r24, r22
    128e:	84 2b       	or	r24, r20
    1290:	82 b9       	out	0x02, r24	; 2
    1292:	08 95       	ret
	}
	// PORT J
	else if(gpio_num >= 14 && gpio_num < 21){
    1294:	9c 01       	movw	r18, r24
    1296:	2e 50       	subi	r18, 0x0E	; 14
    1298:	31 09       	sbc	r19, r1
    129a:	27 30       	cpi	r18, 0x07	; 7
    129c:	31 05       	cpc	r19, r1
    129e:	80 f4       	brcc	.+32     	; 0x12c0 <Set_GPIO+0xa4>
		gpio = gpio << (gpio_num - 14); // shift to correct bit
		PORTJ |= gpio; // set selected pin high
    12a0:	e5 e0       	ldi	r30, 0x05	; 5
    12a2:	f1 e0       	ldi	r31, 0x01	; 1
    12a4:	40 81       	ld	r20, Z
    12a6:	c9 01       	movw	r24, r18
    12a8:	21 e0       	ldi	r18, 0x01	; 1
    12aa:	30 e0       	ldi	r19, 0x00	; 0
    12ac:	b9 01       	movw	r22, r18
    12ae:	02 c0       	rjmp	.+4      	; 0x12b4 <Set_GPIO+0x98>
    12b0:	66 0f       	add	r22, r22
    12b2:	77 1f       	adc	r23, r23
    12b4:	8a 95       	dec	r24
    12b6:	e2 f7       	brpl	.-8      	; 0x12b0 <Set_GPIO+0x94>
    12b8:	cb 01       	movw	r24, r22
    12ba:	84 2b       	or	r24, r20
    12bc:	80 83       	st	Z, r24
    12be:	08 95       	ret
	}
	// PORT C
	else if (gpio_num >= 21 && gpio_num < 29){
    12c0:	9c 01       	movw	r18, r24
    12c2:	25 51       	subi	r18, 0x15	; 21
    12c4:	31 09       	sbc	r19, r1
    12c6:	28 30       	cpi	r18, 0x08	; 8
    12c8:	31 05       	cpc	r19, r1
    12ca:	68 f4       	brcc	.+26     	; 0x12e6 <Set_GPIO+0xca>
		gpio = gpio << (gpio_num - 21); // shift to correct bit
		PORTC |= gpio; // set selected pin high
    12cc:	48 b1       	in	r20, 0x08	; 8
    12ce:	c9 01       	movw	r24, r18
    12d0:	21 e0       	ldi	r18, 0x01	; 1
    12d2:	30 e0       	ldi	r19, 0x00	; 0
    12d4:	b9 01       	movw	r22, r18
    12d6:	02 c0       	rjmp	.+4      	; 0x12dc <Set_GPIO+0xc0>
    12d8:	66 0f       	add	r22, r22
    12da:	77 1f       	adc	r23, r23
    12dc:	8a 95       	dec	r24
    12de:	e2 f7       	brpl	.-8      	; 0x12d8 <Set_GPIO+0xbc>
    12e0:	cb 01       	movw	r24, r22
    12e2:	84 2b       	or	r24, r20
    12e4:	88 b9       	out	0x08, r24	; 8
    12e6:	08 95       	ret

000012e8 <Clear_GPIO>:
	
	int gpio = 0x01; // initialize gpio selection to bit 0
	int gpio_mask = 0xFE; //gpio mask
	
	// PORT H
	if (gpio_num < 7){
    12e8:	87 30       	cpi	r24, 0x07	; 7
    12ea:	91 05       	cpc	r25, r1
    12ec:	84 f4       	brge	.+32     	; 0x130e <Clear_GPIO+0x26>
		gpio = gpio << gpio_num; // shift to correct bit
		PORTH &= (gpio^gpio_mask); // use mask to clear bit
    12ee:	e2 e0       	ldi	r30, 0x02	; 2
    12f0:	f1 e0       	ldi	r31, 0x01	; 1
    12f2:	90 81       	ld	r25, Z
    12f4:	41 e0       	ldi	r20, 0x01	; 1
    12f6:	50 e0       	ldi	r21, 0x00	; 0
    12f8:	02 c0       	rjmp	.+4      	; 0x12fe <Clear_GPIO+0x16>
    12fa:	44 0f       	add	r20, r20
    12fc:	55 1f       	adc	r21, r21
    12fe:	8a 95       	dec	r24
    1300:	e2 f7       	brpl	.-8      	; 0x12fa <Clear_GPIO+0x12>
    1302:	2e ef       	ldi	r18, 0xFE	; 254
    1304:	84 2f       	mov	r24, r20
    1306:	82 27       	eor	r24, r18
    1308:	89 23       	and	r24, r25
    130a:	80 83       	st	Z, r24
    130c:	08 95       	ret
	}
	// PORT L
	else if (gpio_num >= 7 && gpio_num < 10){
    130e:	9c 01       	movw	r18, r24
    1310:	27 50       	subi	r18, 0x07	; 7
    1312:	31 09       	sbc	r19, r1
    1314:	23 30       	cpi	r18, 0x03	; 3
    1316:	31 05       	cpc	r19, r1
    1318:	90 f4       	brcc	.+36     	; 0x133e <Clear_GPIO+0x56>
		gpio = gpio << (gpio_num - 6); // shift to correct bit
		PORTL &= (gpio^gpio_mask); // use mask to clear bit
    131a:	eb e0       	ldi	r30, 0x0B	; 11
    131c:	f1 e0       	ldi	r31, 0x01	; 1
    131e:	20 81       	ld	r18, Z
    1320:	ac 01       	movw	r20, r24
    1322:	46 50       	subi	r20, 0x06	; 6
    1324:	51 09       	sbc	r21, r1
    1326:	81 e0       	ldi	r24, 0x01	; 1
    1328:	90 e0       	ldi	r25, 0x00	; 0
    132a:	02 c0       	rjmp	.+4      	; 0x1330 <Clear_GPIO+0x48>
    132c:	88 0f       	add	r24, r24
    132e:	99 1f       	adc	r25, r25
    1330:	4a 95       	dec	r20
    1332:	e2 f7       	brpl	.-8      	; 0x132c <Clear_GPIO+0x44>
    1334:	9e ef       	ldi	r25, 0xFE	; 254
    1336:	89 27       	eor	r24, r25
    1338:	82 23       	and	r24, r18
    133a:	80 83       	st	Z, r24
    133c:	08 95       	ret
	}
	// PORT A
	else if(gpio_num >= 10 && gpio_num < 14){
    133e:	9c 01       	movw	r18, r24
    1340:	2a 50       	subi	r18, 0x0A	; 10
    1342:	31 09       	sbc	r19, r1
    1344:	24 30       	cpi	r18, 0x04	; 4
    1346:	31 05       	cpc	r19, r1
    1348:	80 f4       	brcc	.+32     	; 0x136a <Clear_GPIO+0x82>
		gpio = gpio << (gpio_num - 6); // shift to correct bit
		PORTA &= (gpio^gpio_mask); // use mask to clear bit
    134a:	22 b1       	in	r18, 0x02	; 2
    134c:	ac 01       	movw	r20, r24
    134e:	46 50       	subi	r20, 0x06	; 6
    1350:	51 09       	sbc	r21, r1
    1352:	81 e0       	ldi	r24, 0x01	; 1
    1354:	90 e0       	ldi	r25, 0x00	; 0
    1356:	02 c0       	rjmp	.+4      	; 0x135c <Clear_GPIO+0x74>
    1358:	88 0f       	add	r24, r24
    135a:	99 1f       	adc	r25, r25
    135c:	4a 95       	dec	r20
    135e:	e2 f7       	brpl	.-8      	; 0x1358 <Clear_GPIO+0x70>
    1360:	9e ef       	ldi	r25, 0xFE	; 254
    1362:	89 27       	eor	r24, r25
    1364:	82 23       	and	r24, r18
    1366:	82 b9       	out	0x02, r24	; 2
    1368:	08 95       	ret
	}
	// PORT J
	else if(gpio_num >= 14 && gpio_num < 21){
    136a:	9c 01       	movw	r18, r24
    136c:	2e 50       	subi	r18, 0x0E	; 14
    136e:	31 09       	sbc	r19, r1
    1370:	27 30       	cpi	r18, 0x07	; 7
    1372:	31 05       	cpc	r19, r1
    1374:	90 f4       	brcc	.+36     	; 0x139a <Clear_GPIO+0xb2>
		gpio = gpio << (gpio_num - 14); // shift to correct bit
		PORTJ &= (gpio^gpio_mask); // use mask to clear bit
    1376:	e5 e0       	ldi	r30, 0x05	; 5
    1378:	f1 e0       	ldi	r31, 0x01	; 1
    137a:	20 81       	ld	r18, Z
    137c:	ac 01       	movw	r20, r24
    137e:	4e 50       	subi	r20, 0x0E	; 14
    1380:	51 09       	sbc	r21, r1
    1382:	81 e0       	ldi	r24, 0x01	; 1
    1384:	90 e0       	ldi	r25, 0x00	; 0
    1386:	02 c0       	rjmp	.+4      	; 0x138c <Clear_GPIO+0xa4>
    1388:	88 0f       	add	r24, r24
    138a:	99 1f       	adc	r25, r25
    138c:	4a 95       	dec	r20
    138e:	e2 f7       	brpl	.-8      	; 0x1388 <Clear_GPIO+0xa0>
    1390:	9e ef       	ldi	r25, 0xFE	; 254
    1392:	89 27       	eor	r24, r25
    1394:	82 23       	and	r24, r18
    1396:	80 83       	st	Z, r24
    1398:	08 95       	ret
	}
	// PORT C
	else if (gpio_num >= 21 && gpio_num < 29){
    139a:	9c 01       	movw	r18, r24
    139c:	25 51       	subi	r18, 0x15	; 21
    139e:	31 09       	sbc	r19, r1
    13a0:	28 30       	cpi	r18, 0x08	; 8
    13a2:	31 05       	cpc	r19, r1
    13a4:	78 f4       	brcc	.+30     	; 0x13c4 <Clear_GPIO+0xdc>
		gpio = gpio << (gpio_num - 21); // shift to correct bit
		PORTC &= (gpio^gpio_mask); // use mask to clear bit
    13a6:	28 b1       	in	r18, 0x08	; 8
    13a8:	45 97       	sbiw	r24, 0x15	; 21
    13aa:	41 e0       	ldi	r20, 0x01	; 1
    13ac:	50 e0       	ldi	r21, 0x00	; 0
    13ae:	ba 01       	movw	r22, r20
    13b0:	02 c0       	rjmp	.+4      	; 0x13b6 <Clear_GPIO+0xce>
    13b2:	66 0f       	add	r22, r22
    13b4:	77 1f       	adc	r23, r23
    13b6:	8a 95       	dec	r24
    13b8:	e2 f7       	brpl	.-8      	; 0x13b2 <Clear_GPIO+0xca>
    13ba:	cb 01       	movw	r24, r22
    13bc:	9e ef       	ldi	r25, 0xFE	; 254
    13be:	89 27       	eor	r24, r25
    13c0:	82 23       	and	r24, r18
    13c2:	88 b9       	out	0x08, r24	; 8
    13c4:	08 95       	ret

000013c6 <Update_TELEM>:
// Author: Chris Thomas
// Date: 2019-02-03
// Description: Updates telemetry information for OBC. Voltage, current and temperature.
/*========================================================================================*/

void Update_TELEM(double* telem, uint8_t power_state){
    13c6:	1f 93       	push	r17
    13c8:	cf 93       	push	r28
    13ca:	df 93       	push	r29
    13cc:	ec 01       	movw	r28, r24
    13ce:	16 2f       	mov	r17, r22
	
	//Enable_5V();
	// ^^^^^^^^^^^
	
	// Ammeter measurements
	telem[0] = Amp_ADC(2); // 3V3-1 rail current
    13d0:	82 e0       	ldi	r24, 0x02	; 2
    13d2:	90 e0       	ldi	r25, 0x00	; 0
    13d4:	0e 94 a1 01 	call	0x342	; 0x342 <Amp_ADC>
    13d8:	68 83       	st	Y, r22
    13da:	79 83       	std	Y+1, r23	; 0x01
    13dc:	8a 83       	std	Y+2, r24	; 0x02
    13de:	9b 83       	std	Y+3, r25	; 0x03
	telem[1] = Amp_ADC(3); // 3V3-2 rail current
    13e0:	83 e0       	ldi	r24, 0x03	; 3
    13e2:	90 e0       	ldi	r25, 0x00	; 0
    13e4:	0e 94 a1 01 	call	0x342	; 0x342 <Amp_ADC>
    13e8:	6c 83       	std	Y+4, r22	; 0x04
    13ea:	7d 83       	std	Y+5, r23	; 0x05
    13ec:	8e 83       	std	Y+6, r24	; 0x06
    13ee:	9f 83       	std	Y+7, r25	; 0x07
	telem[2] = Amp_ADC(1); // 5V rail current
    13f0:	81 e0       	ldi	r24, 0x01	; 1
    13f2:	90 e0       	ldi	r25, 0x00	; 0
    13f4:	0e 94 a1 01 	call	0x342	; 0x342 <Amp_ADC>
    13f8:	68 87       	std	Y+8, r22	; 0x08
    13fa:	79 87       	std	Y+9, r23	; 0x09
    13fc:	8a 87       	std	Y+10, r24	; 0x0a
    13fe:	9b 87       	std	Y+11, r25	; 0x0b
	telem[3] = Amp_ADC(0); // 8V rail current
    1400:	80 e0       	ldi	r24, 0x00	; 0
    1402:	90 e0       	ldi	r25, 0x00	; 0
    1404:	0e 94 a1 01 	call	0x342	; 0x342 <Amp_ADC>
    1408:	6c 87       	std	Y+12, r22	; 0x0c
    140a:	7d 87       	std	Y+13, r23	; 0x0d
    140c:	8e 87       	std	Y+14, r24	; 0x0e
    140e:	9f 87       	std	Y+15, r25	; 0x0f
	telem[4] = Amp_ADC(5); // VBatt rail current
    1410:	85 e0       	ldi	r24, 0x05	; 5
    1412:	90 e0       	ldi	r25, 0x00	; 0
    1414:	0e 94 a1 01 	call	0x342	; 0x342 <Amp_ADC>
    1418:	68 8b       	std	Y+16, r22	; 0x10
    141a:	79 8b       	std	Y+17, r23	; 0x11
    141c:	8a 8b       	std	Y+18, r24	; 0x12
    141e:	9b 8b       	std	Y+19, r25	; 0x13
	telem[5] = Amp_ADC(4); // Solar panel current
    1420:	84 e0       	ldi	r24, 0x04	; 4
    1422:	90 e0       	ldi	r25, 0x00	; 0
    1424:	0e 94 a1 01 	call	0x342	; 0x342 <Amp_ADC>
    1428:	6c 8b       	std	Y+20, r22	; 0x14
    142a:	7d 8b       	std	Y+21, r23	; 0x15
    142c:	8e 8b       	std	Y+22, r24	; 0x16
    142e:	9f 8b       	std	Y+23, r25	; 0x17
	
	// Voltmeter measurements
	telem[6] = Volt_ADC(0); // 3V3-1 rail voltage
    1430:	80 e0       	ldi	r24, 0x00	; 0
    1432:	90 e0       	ldi	r25, 0x00	; 0
    1434:	0e 94 38 01 	call	0x270	; 0x270 <Volt_ADC>
    1438:	68 8f       	std	Y+24, r22	; 0x18
    143a:	79 8f       	std	Y+25, r23	; 0x19
    143c:	8a 8f       	std	Y+26, r24	; 0x1a
    143e:	9b 8f       	std	Y+27, r25	; 0x1b
	telem[7] = Volt_ADC(1); // 3V3-2 rail voltage
    1440:	81 e0       	ldi	r24, 0x01	; 1
    1442:	90 e0       	ldi	r25, 0x00	; 0
    1444:	0e 94 38 01 	call	0x270	; 0x270 <Volt_ADC>
    1448:	6c 8f       	std	Y+28, r22	; 0x1c
    144a:	7d 8f       	std	Y+29, r23	; 0x1d
    144c:	8e 8f       	std	Y+30, r24	; 0x1e
    144e:	9f 8f       	std	Y+31, r25	; 0x1f
	telem[8] = Volt_ADC(2); // 5V rail voltage
    1450:	82 e0       	ldi	r24, 0x02	; 2
    1452:	90 e0       	ldi	r25, 0x00	; 0
    1454:	0e 94 38 01 	call	0x270	; 0x270 <Volt_ADC>
    1458:	68 a3       	std	Y+32, r22	; 0x20
    145a:	79 a3       	std	Y+33, r23	; 0x21
    145c:	8a a3       	std	Y+34, r24	; 0x22
    145e:	9b a3       	std	Y+35, r25	; 0x23
	telem[9] = Volt_ADC(3); // 8V-1 rail voltage
    1460:	83 e0       	ldi	r24, 0x03	; 3
    1462:	90 e0       	ldi	r25, 0x00	; 0
    1464:	0e 94 38 01 	call	0x270	; 0x270 <Volt_ADC>
    1468:	6c a3       	std	Y+36, r22	; 0x24
    146a:	7d a3       	std	Y+37, r23	; 0x25
    146c:	8e a3       	std	Y+38, r24	; 0x26
    146e:	9f a3       	std	Y+39, r25	; 0x27
	telem[10] = Volt_ADC(4); // VBatt rail voltage
    1470:	84 e0       	ldi	r24, 0x04	; 4
    1472:	90 e0       	ldi	r25, 0x00	; 0
    1474:	0e 94 38 01 	call	0x270	; 0x270 <Volt_ADC>
    1478:	68 a7       	std	Y+40, r22	; 0x28
    147a:	79 a7       	std	Y+41, r23	; 0x29
    147c:	8a a7       	std	Y+42, r24	; 0x2a
    147e:	9b a7       	std	Y+43, r25	; 0x2b
	telem[11] = Temp_ADC(); // Battery temperature
    1480:	23 d8       	rcall	.-4026   	; 0x4c8 <Temp_ADC>
    1482:	6c a7       	std	Y+44, r22	; 0x2c
    1484:	7d a7       	std	Y+45, r23	; 0x2d
    1486:	8e a7       	std	Y+46, r24	; 0x2e
    1488:	9f a7       	std	Y+47, r25	; 0x2f
	
	// Disable 5V rail
	Disable_5V(power_state);	
    148a:	81 2f       	mov	r24, r17
    148c:	a0 db       	rcall	.-2240   	; 0xbce <Disable_5V>
}
    148e:	df 91       	pop	r29
    1490:	cf 91       	pop	r28
    1492:	1f 91       	pop	r17
    1494:	08 95       	ret

00001496 <commandDecode>:
//
// Author: Ben Wedemire & Chris Thomas
// Date: 2019-03-17
// Description: Decodes commands from the OBC and calls their corresponding function.		
/*========================================================================================*/
void commandDecode (char* obc_command, double* telem, uint8_t mode, uint8_t power_state){
    1496:	ff 92       	push	r15
    1498:	0f 93       	push	r16
    149a:	1f 93       	push	r17
    149c:	cf 93       	push	r28
    149e:	df 93       	push	r29
    14a0:	ec 01       	movw	r28, r24
    14a2:	8b 01       	movw	r16, r22
    14a4:	f2 2e       	mov	r15, r18
		
	// Receive Command from OBC
	UART0_getstring(obc_command);
    14a6:	98 d2       	rcall	.+1328   	; 0x19d8 <UART0_getstring>
	
	// Print the Command for TESTING
	UART0_putstring(obc_command);
    14a8:	ce 01       	movw	r24, r28
    14aa:	88 d2       	rcall	.+1296   	; 0x19bc <UART0_putstring>
	
	if (strlen(obc_command) > 20) {
    14ac:	fe 01       	movw	r30, r28
    14ae:	01 90       	ld	r0, Z+
    14b0:	00 20       	and	r0, r0
    14b2:	e9 f7       	brne	.-6      	; 0x14ae <commandDecode+0x18>
    14b4:	31 97       	sbiw	r30, 0x01	; 1
    14b6:	ec 1b       	sub	r30, r28
    14b8:	fd 0b       	sbc	r31, r29
    14ba:	75 97       	sbiw	r30, 0x15	; 21
    14bc:	20 f0       	brcs	.+8      	; 0x14c6 <commandDecode+0x30>
		UART0_putstring("Error! Command larger than 20 chars");
    14be:	8b e6       	ldi	r24, 0x6B	; 107
    14c0:	93 e0       	ldi	r25, 0x03	; 3
    14c2:	7c d2       	rcall	.+1272   	; 0x19bc <UART0_putstring>
    14c4:	38 c0       	rjmp	.+112    	; 0x1536 <commandDecode+0xa0>
	} //end if
	else {
		if (strcmp(obc_command, "TelemRqt") == 0) {
    14c6:	6f e8       	ldi	r22, 0x8F	; 143
    14c8:	73 e0       	ldi	r23, 0x03	; 3
    14ca:	ce 01       	movw	r24, r28
    14cc:	0e 94 ca 14 	call	0x2994	; 0x2994 <strcmp>
    14d0:	89 2b       	or	r24, r25
			Update_TELEM(telem, power_state);
    14d2:	21 f4       	brne	.+8      	; 0x14dc <commandDecode+0x46>
    14d4:	6f 2d       	mov	r22, r15
    14d6:	c8 01       	movw	r24, r16
    14d8:	76 df       	rcall	.-276    	; 0x13c6 <Update_TELEM>
    14da:	2d c0       	rjmp	.+90     	; 0x1536 <commandDecode+0xa0>
			//send telem
		} //end if
		else if (strcmp(obc_command, "SubSysRqt") == 0) {	
    14dc:	68 e9       	ldi	r22, 0x98	; 152
    14de:	73 e0       	ldi	r23, 0x03	; 3
    14e0:	ce 01       	movw	r24, r28
    14e2:	0e 94 ca 14 	call	0x2994	; 0x2994 <strcmp>
    14e6:	89 2b       	or	r24, r25
    14e8:	31 f1       	breq	.+76     	; 0x1536 <commandDecode+0xa0>
			}
			else{
				// Tell the user the EPS is still in autonomous mode and it must be changed
			}
		} //else if
		else if (strcmp(obc_command, "PwrMatEdit") == 0) {
    14ea:	62 ea       	ldi	r22, 0xA2	; 162
    14ec:	73 e0       	ldi	r23, 0x03	; 3
    14ee:	ce 01       	movw	r24, r28
    14f0:	0e 94 ca 14 	call	0x2994	; 0x2994 <strcmp>
    14f4:	89 2b       	or	r24, r25
    14f6:	f9 f0       	breq	.+62     	; 0x1536 <commandDecode+0xa0>
			//edit the power state matrix
		} //end else if
		else if (strcmp(obc_command, "PwrMatRqt") == 0) {
    14f8:	6d ea       	ldi	r22, 0xAD	; 173
    14fa:	73 e0       	ldi	r23, 0x03	; 3
    14fc:	ce 01       	movw	r24, r28
    14fe:	0e 94 ca 14 	call	0x2994	; 0x2994 <strcmp>
    1502:	89 2b       	or	r24, r25
    1504:	c1 f0       	breq	.+48     	; 0x1536 <commandDecode+0xa0>
			//send the power state matrix cell to the obc
		} //end else if
		else if (strcmp(obc_command, "ModeChange") == 0) {
    1506:	67 eb       	ldi	r22, 0xB7	; 183
    1508:	73 e0       	ldi	r23, 0x03	; 3
    150a:	ce 01       	movw	r24, r28
    150c:	0e 94 ca 14 	call	0x2994	; 0x2994 <strcmp>
    1510:	89 2b       	or	r24, r25
			// The character 0 must be sent to go into manual mode
			if(UART0_getchar() - 0x31){
    1512:	49 f4       	brne	.+18     	; 0x1526 <commandDecode+0x90>
    1514:	4b d2       	rcall	.+1174   	; 0x19ac <UART0_getchar>
    1516:	81 33       	cpi	r24, 0x31	; 49
				Set_MODE(0);
    1518:	19 f0       	breq	.+6      	; 0x1520 <commandDecode+0x8a>
    151a:	80 e0       	ldi	r24, 0x00	; 0
    151c:	6c de       	rcall	.-808    	; 0x11f6 <Set_MODE>
    151e:	0b c0       	rjmp	.+22     	; 0x1536 <commandDecode+0xa0>
			}
			else{
				Set_MODE(1);
    1520:	81 e0       	ldi	r24, 0x01	; 1
    1522:	69 de       	rcall	.-814    	; 0x11f6 <Set_MODE>
    1524:	08 c0       	rjmp	.+16     	; 0x1536 <commandDecode+0xa0>
    1526:	62 ec       	ldi	r22, 0xC2	; 194
			}
			//change or update the mode of the micro
			// In this state do not update the power state, simply remain in the one specified
			// Have an SOC thing here
		} //end else if
		else if (strcmp(obc_command, "LaunchReset") == 0) {
    1528:	73 e0       	ldi	r23, 0x03	; 3
    152a:	ce 01       	movw	r24, r28
    152c:	0e 94 ca 14 	call	0x2994	; 0x2994 <strcmp>
    1530:	89 2b       	or	r24, r25
    1532:	09 f4       	brne	.+2      	; 0x1536 <commandDecode+0xa0>
			launch_reset();
    1534:	03 db       	rcall	.-2554   	; 0xb3c <launch_reset>
    1536:	df 91       	pop	r29
		} //end else if
		else {
			//UART0_putstring(strcat("Error! The following command isn't recognized: ", obc_command));
		} //end else
	} //end else
} //end commandDecode
    1538:	cf 91       	pop	r28
    153a:	1f 91       	pop	r17
    153c:	0f 91       	pop	r16
    153e:	ff 90       	pop	r15
    1540:	08 95       	ret

00001542 <Update_OBC>:
    1542:	2f 92       	push	r2
// Author: Chris Thomas
// Date: 2019-02-03
// Description: Updates the telemetry information to the OBC.
/*========================================================================================*/

void Update_OBC(double* telem, char* power){
    1544:	3f 92       	push	r3
    1546:	4f 92       	push	r4
    1548:	5f 92       	push	r5
    154a:	6f 92       	push	r6
    154c:	7f 92       	push	r7
    154e:	8f 92       	push	r8
    1550:	9f 92       	push	r9
    1552:	af 92       	push	r10
    1554:	bf 92       	push	r11
    1556:	cf 92       	push	r12
    1558:	df 92       	push	r13
    155a:	ef 92       	push	r14
    155c:	ff 92       	push	r15
    155e:	0f 93       	push	r16
    1560:	1f 93       	push	r17
    1562:	cf 93       	push	r28
    1564:	df 93       	push	r29
    1566:	cd b7       	in	r28, 0x3d	; 61
    1568:	de b7       	in	r29, 0x3e	; 62
    156a:	cf 53       	subi	r28, 0x3F	; 63
    156c:	d1 40       	sbci	r29, 0x01	; 1
    156e:	0f b6       	in	r0, 0x3f	; 63
    1570:	f8 94       	cli
    1572:	de bf       	out	0x3e, r29	; 62
    1574:	0f be       	out	0x3f, r0	; 63
    1576:	cd bf       	out	0x3d, r28	; 61
    1578:	c4 5c       	subi	r28, 0xC4	; 196
    157a:	de 4f       	sbci	r29, 0xFE	; 254
    157c:	99 83       	std	Y+1, r25	; 0x01
    157e:	88 83       	st	Y, r24
    1580:	cc 53       	subi	r28, 0x3C	; 60
    1582:	d1 40       	sbci	r29, 0x01	; 1
    1584:	4b 01       	movw	r8, r22
	// Prints a border to the Putty
	char stars[60] = "/***************************************CubeSat EPS"; // left side of border
    1586:	84 e3       	ldi	r24, 0x34	; 52
    1588:	e8 e1       	ldi	r30, 0x18	; 24
    158a:	f2 e0       	ldi	r31, 0x02	; 2
    158c:	de 01       	movw	r26, r28
    158e:	11 96       	adiw	r26, 0x01	; 1
    1590:	01 90       	ld	r0, Z+
    1592:	0d 92       	st	X+, r0
    1594:	8a 95       	dec	r24
    1596:	e1 f7       	brne	.-8      	; 0x1590 <Update_OBC+0x4e>
    1598:	fe 01       	movw	r30, r28
    159a:	f5 96       	adiw	r30, 0x35	; 53
    159c:	88 e0       	ldi	r24, 0x08	; 8
    159e:	df 01       	movw	r26, r30
    15a0:	1d 92       	st	X+, r1
    15a2:	8a 95       	dec	r24
    15a4:	e9 f7       	brne	.-6      	; 0x15a0 <Update_OBC+0x5e>
	char stars2[45] = "***************************************/"; // right side of border
    15a6:	89 e2       	ldi	r24, 0x29	; 41
    15a8:	e4 e5       	ldi	r30, 0x54	; 84
    15aa:	f2 e0       	ldi	r31, 0x02	; 2
    15ac:	de 01       	movw	r26, r28
    15ae:	dd 96       	adiw	r26, 0x3d	; 61
    15b0:	01 90       	ld	r0, Z+
    15b2:	0d 92       	st	X+, r0
    15b4:	8a 95       	dec	r24
    15b6:	e1 f7       	brne	.-8      	; 0x15b0 <Update_OBC+0x6e>
    15b8:	fe 01       	movw	r30, r28
    15ba:	ea 59       	subi	r30, 0x9A	; 154
    15bc:	ff 4f       	sbci	r31, 0xFF	; 255
    15be:	84 e0       	ldi	r24, 0x04	; 4
    15c0:	df 01       	movw	r26, r30
    15c2:	1d 92       	st	X+, r1
    15c4:	8a 95       	dec	r24
    15c6:	e9 f7       	brne	.-6      	; 0x15c2 <Update_OBC+0x80>
	char* border; // complete border top and bottom
	border = strcat(stars,stars2);
    15c8:	be 01       	movw	r22, r28
    15ca:	63 5c       	subi	r22, 0xC3	; 195
    15cc:	7f 4f       	sbci	r23, 0xFF	; 255
    15ce:	ce 01       	movw	r24, r28
    15d0:	01 96       	adiw	r24, 0x01	; 1
    15d2:	0e 94 bf 14 	call	0x297e	; 0x297e <strcat>
	
	// Print border
	UART0_putstring(border);
    15d6:	f2 d1       	rcall	.+996    	; 0x19bc <UART0_putstring>
	
	// Spacing
	UART0_putchar('\n');
    15d8:	8a e0       	ldi	r24, 0x0A	; 10
    15da:	e0 d1       	rcall	.+960    	; 0x199c <UART0_putchar>
	UART0_putchar('\n');
    15dc:	8a e0       	ldi	r24, 0x0A	; 10
    15de:	de d1       	rcall	.+956    	; 0x199c <UART0_putchar>
	UART0_putchar('\r');
    15e0:	8d e0       	ldi	r24, 0x0D	; 13
    15e2:	dc d1       	rcall	.+952    	; 0x199c <UART0_putchar>
    15e4:	80 e5       	ldi	r24, 0x50	; 80
	
	// String Initializations
	char loads[8][10] = {"Heater 1", "Heater 2", "Heater 3", "OBC", "Imager", "GRIPS", "S-Band", "UHF"};
    15e6:	e1 e8       	ldi	r30, 0x81	; 129
    15e8:	f2 e0       	ldi	r31, 0x02	; 2
    15ea:	de 01       	movw	r26, r28
    15ec:	a6 59       	subi	r26, 0x96	; 150
    15ee:	bf 4f       	sbci	r27, 0xFF	; 255
    15f0:	01 90       	ld	r0, Z+
    15f2:	0d 92       	st	X+, r0
    15f4:	8a 95       	dec	r24
    15f6:	e1 f7       	brne	.-8      	; 0x15f0 <Update_OBC+0xae>
    15f8:	88 e7       	ldi	r24, 0x78	; 120
	char sensors[12][10] = {"3V3-1 [A]", "3V3-2 [A]", "5V [A]", "8V [A]", "VBatt [A]", "Solar [A]",
    15fa:	e1 ed       	ldi	r30, 0xD1	; 209
    15fc:	f2 e0       	ldi	r31, 0x02	; 2
    15fe:	de 01       	movw	r26, r28
    1600:	a6 54       	subi	r26, 0x46	; 70
    1602:	bf 4f       	sbci	r27, 0xFF	; 255
    1604:	01 90       	ld	r0, Z+
    1606:	0d 92       	st	X+, r0
    1608:	8a 95       	dec	r24
    160a:	e1 f7       	brne	.-8      	; 0x1604 <Update_OBC+0xc2>
    160c:	fe 01       	movw	r30, r28
    160e:	e6 54       	subi	r30, 0x46	; 70
    1610:	ff 4f       	sbci	r31, 0xFF	; 255
    1612:	7f 01       	movw	r14, r30
    1614:	c1 2c       	mov	r12, r1
	// Doing to the spacing correctly						
	int spacing = 15;
	int spaces = 0;
	int spaces2 = 0; // for inner loops
	int l_incr = 0; // load increment (8)
	int s_incr = 0; // sensor increment (12)
    1616:	d1 2c       	mov	r13, r1
    1618:	41 2c       	mov	r4, r1
							"3V3-1 [V]", "3V3-2 [V]", "5V [V]", "8V [V]", "VBatt [V]", "Temp [C]"};
							
	// Doing to the spacing correctly						
	int spacing = 15;
	int spaces = 0;
	int spaces2 = 0; // for inner loops
    161a:	51 2c       	mov	r5, r1
    161c:	00 e0       	ldi	r16, 0x00	; 0
	char sensors[12][10] = {"3V3-1 [A]", "3V3-2 [A]", "5V [A]", "8V [A]", "VBatt [A]", "Solar [A]",
							"3V3-1 [V]", "3V3-2 [V]", "5V [V]", "8V [V]", "VBatt [V]", "Temp [C]"};
							
	// Doing to the spacing correctly						
	int spacing = 15;
	int spaces = 0;
    161e:	10 e0       	ldi	r17, 0x00	; 0
    1620:	0f 2e       	mov	r0, r31
			UART0_putchar(' ');
			spaces--;
		}
		UART0_putstring(sensors[s_incr]);
		s_incr++;
		spaces = spacing - strlen(sensors[s_incr - 1]);
    1622:	ff e0       	ldi	r31, 0x0F	; 15
    1624:	af 2e       	mov	r10, r31
    1626:	b1 2c       	mov	r11, r1
    1628:	f0 2d       	mov	r31, r0
    162a:	3e 01       	movw	r6, r28
			while(i < s_incr){
				while(spaces2){
					UART0_putchar(' ');
					spaces2--;
				}
				sprintf(measure,"%f",telem[i]);
    162c:	fe ec       	ldi	r31, 0xCE	; 206
    162e:	6f 1a       	sub	r6, r31
    1630:	fe ef       	ldi	r31, 0xFE	; 254
    1632:	7f 0a       	sbc	r7, r31
    1634:	c2 5c       	subi	r28, 0xC2	; 194
    1636:	de 4f       	sbci	r29, 0xFE	; 254
    1638:	68 82       	st	Y, r6
    163a:	ce 53       	subi	r28, 0x3E	; 62
    163c:	d1 40       	sbci	r29, 0x01	; 1
    163e:	c1 5c       	subi	r28, 0xC1	; 193
    1640:	de 4f       	sbci	r29, 0xFE	; 254
    1642:	78 82       	st	Y, r7
    1644:	cf 53       	subi	r28, 0x3F	; 63
    1646:	d1 40       	sbci	r29, 0x01	; 1
    1648:	26 e0       	ldi	r18, 0x06	; 6
	// Print the telemetry information
	while (s_incr < 12){
		
		// Switch lines after 6 titles are written and write
		// data on the next line
		if (s_incr == 6){
    164a:	c2 16       	cp	r12, r18
    164c:	d1 04       	cpc	r13, r1
    164e:	09 f0       	breq	.+2      	; 0x1652 <Update_OBC+0x110>
    1650:	71 c0       	rjmp	.+226    	; 0x1734 <Update_OBC+0x1f2>
			UART0_putchar('\n');
    1652:	8a e0       	ldi	r24, 0x0A	; 10
    1654:	a3 d1       	rcall	.+838    	; 0x199c <UART0_putchar>
    1656:	8d e0       	ldi	r24, 0x0D	; 13
			UART0_putchar('\r');
    1658:	a1 d1       	rcall	.+834    	; 0x199c <UART0_putchar>
    165a:	46 e0       	ldi	r20, 0x06	; 6
    165c:	24 16       	cp	r2, r20
			// print values
			while(i < s_incr){
    165e:	31 04       	cpc	r3, r1
    1660:	0c f0       	brlt	.+2      	; 0x1664 <Update_OBC+0x122>
    1662:	52 c0       	rjmp	.+164    	; 0x1708 <Update_OBC+0x1c6>
    1664:	81 01       	movw	r16, r2
    1666:	00 0f       	add	r16, r16
    1668:	11 1f       	adc	r17, r17
    166a:	00 0f       	add	r16, r16
    166c:	11 1f       	adc	r17, r17
    166e:	c4 5c       	subi	r28, 0xC4	; 196
    1670:	de 4f       	sbci	r29, 0xFE	; 254
    1672:	88 81       	ld	r24, Y
    1674:	99 81       	ldd	r25, Y+1	; 0x01
    1676:	cc 53       	subi	r28, 0x3C	; 60
    1678:	d1 40       	sbci	r29, 0x01	; 1
    167a:	08 0f       	add	r16, r24
    167c:	19 1f       	adc	r17, r25
    167e:	3f c0       	rjmp	.+126    	; 0x16fe <Update_OBC+0x1bc>
    1680:	80 e2       	ldi	r24, 0x20	; 32
				while(spaces2){
					UART0_putchar(' ');
    1682:	8c d1       	rcall	.+792    	; 0x199c <UART0_putchar>
    1684:	91 e0       	ldi	r25, 0x01	; 1
    1686:	49 1a       	sub	r4, r25
					spaces2--;
    1688:	51 08       	sbc	r5, r1
    168a:	d1 f7       	brne	.-12     	; 0x1680 <Update_OBC+0x13e>
    168c:	d8 01       	movw	r26, r16
		if (s_incr == 6){
			UART0_putchar('\n');
			UART0_putchar('\r');
			// print values
			while(i < s_incr){
				while(spaces2){
    168e:	8c 91       	ld	r24, X
					UART0_putchar(' ');
					spaces2--;
				}
				sprintf(measure,"%f",telem[i]);
    1690:	11 96       	adiw	r26, 0x01	; 1
    1692:	9c 91       	ld	r25, X
    1694:	11 97       	sbiw	r26, 0x01	; 1
    1696:	12 96       	adiw	r26, 0x02	; 2
    1698:	2c 91       	ld	r18, X
    169a:	12 97       	sbiw	r26, 0x02	; 2
    169c:	13 96       	adiw	r26, 0x03	; 3
    169e:	3c 91       	ld	r19, X
    16a0:	0c 5f       	subi	r16, 0xFC	; 252
    16a2:	1f 4f       	sbci	r17, 0xFF	; 255
    16a4:	3f 93       	push	r19
    16a6:	2f 93       	push	r18
    16a8:	9f 93       	push	r25
    16aa:	8f 93       	push	r24
    16ac:	ee ec       	ldi	r30, 0xCE	; 206
    16ae:	f3 e0       	ldi	r31, 0x03	; 3
    16b0:	ff 93       	push	r31
    16b2:	ef 93       	push	r30
    16b4:	7f 92       	push	r7
    16b6:	6f 92       	push	r6
    16b8:	0e 94 1a 15 	call	0x2a34	; 0x2a34 <sprintf>
    16bc:	c2 5c       	subi	r28, 0xC2	; 194
    16be:	de 4f       	sbci	r29, 0xFE	; 254
				UART0_putstring(measure);
    16c0:	88 81       	ld	r24, Y
    16c2:	ce 53       	subi	r28, 0x3E	; 62
    16c4:	d1 40       	sbci	r29, 0x01	; 1
    16c6:	c1 5c       	subi	r28, 0xC1	; 193
    16c8:	de 4f       	sbci	r29, 0xFE	; 254
    16ca:	98 81       	ld	r25, Y
    16cc:	cf 53       	subi	r28, 0x3F	; 63
    16ce:	d1 40       	sbci	r29, 0x01	; 1
    16d0:	75 d1       	rcall	.+746    	; 0x19bc <UART0_putstring>
    16d2:	4f ef       	ldi	r20, 0xFF	; 255
    16d4:	24 1a       	sub	r2, r20
				i++;
    16d6:	34 0a       	sbc	r3, r20
    16d8:	f3 01       	movw	r30, r6
    16da:	01 90       	ld	r0, Z+
				spaces2 = spacing - strlen(measure);
    16dc:	00 20       	and	r0, r0
    16de:	e9 f7       	brne	.-6      	; 0x16da <Update_OBC+0x198>
    16e0:	31 97       	sbiw	r30, 0x01	; 1
    16e2:	e6 19       	sub	r30, r6
    16e4:	f7 09       	sbc	r31, r7
    16e6:	25 01       	movw	r4, r10
    16e8:	4e 1a       	sub	r4, r30
    16ea:	5f 0a       	sbc	r5, r31
    16ec:	0f b6       	in	r0, 0x3f	; 63
    16ee:	f8 94       	cli
		// data on the next line
		if (s_incr == 6){
			UART0_putchar('\n');
			UART0_putchar('\r');
			// print values
			while(i < s_incr){
    16f0:	de bf       	out	0x3e, r29	; 62
    16f2:	0f be       	out	0x3f, r0	; 63
    16f4:	cd bf       	out	0x3d, r28	; 61
    16f6:	96 e0       	ldi	r25, 0x06	; 6
    16f8:	29 16       	cp	r2, r25
    16fa:	31 04       	cpc	r3, r1
    16fc:	29 f0       	breq	.+10     	; 0x1708 <Update_OBC+0x1c6>
    16fe:	41 14       	cp	r4, r1
				while(spaces2){
    1700:	51 04       	cpc	r5, r1
    1702:	09 f0       	breq	.+2      	; 0x1706 <Update_OBC+0x1c4>
    1704:	bd cf       	rjmp	.-134    	; 0x1680 <Update_OBC+0x13e>
				sprintf(measure,"%f",telem[i]);
				UART0_putstring(measure);
				i++;
				spaces2 = spacing - strlen(measure);
			}
			UART0_putchar('\n');
    1706:	c2 cf       	rjmp	.-124    	; 0x168c <Update_OBC+0x14a>
    1708:	8a e0       	ldi	r24, 0x0A	; 10
    170a:	48 d1       	rcall	.+656    	; 0x199c <UART0_putchar>
			UART0_putchar('\n');
    170c:	8a e0       	ldi	r24, 0x0A	; 10
    170e:	46 d1       	rcall	.+652    	; 0x199c <UART0_putchar>
    1710:	8d e0       	ldi	r24, 0x0D	; 13
			UART0_putchar('\r');
    1712:	44 d1       	rcall	.+648    	; 0x199c <UART0_putchar>
    1714:	c7 01       	movw	r24, r14
    1716:	52 d1       	rcall	.+676    	; 0x19bc <UART0_putstring>
		// re-initialize the spaces
		while(spaces){
			UART0_putchar(' ');
			spaces--;
		}
		UART0_putstring(sensors[s_incr]);
    1718:	af ef       	ldi	r26, 0xFF	; 255
    171a:	ca 1a       	sub	r12, r26
    171c:	da 0a       	sbc	r13, r26
		s_incr++;
    171e:	f7 01       	movw	r30, r14
    1720:	01 90       	ld	r0, Z+
    1722:	00 20       	and	r0, r0
		spaces = spacing - strlen(sensors[s_incr - 1]);
    1724:	e9 f7       	brne	.-6      	; 0x1720 <Update_OBC+0x1de>
    1726:	31 97       	sbiw	r30, 0x01	; 1
    1728:	ee 19       	sub	r30, r14
    172a:	ff 09       	sbc	r31, r15
    172c:	85 01       	movw	r16, r10
    172e:	0e 1b       	sub	r16, r30
    1730:	1f 0b       	sbc	r17, r31
    1732:	7b c0       	rjmp	.+246    	; 0x182a <Update_OBC+0x2e8>
    1734:	01 15       	cp	r16, r1
			spaces = 0; // reset for next line of titles
		}
		
		// Put the titles in normally
		// re-initialize the spaces
		while(spaces){
    1736:	11 05       	cpc	r17, r1
    1738:	29 f0       	breq	.+10     	; 0x1744 <Update_OBC+0x202>
    173a:	80 e2       	ldi	r24, 0x20	; 32
			UART0_putchar(' ');
    173c:	2f d1       	rcall	.+606    	; 0x199c <UART0_putchar>
    173e:	01 50       	subi	r16, 0x01	; 1
    1740:	11 09       	sbc	r17, r1
			spaces--;
    1742:	d9 f7       	brne	.-10     	; 0x173a <Update_OBC+0x1f8>
    1744:	c7 01       	movw	r24, r14
			spaces = 0; // reset for next line of titles
		}
		
		// Put the titles in normally
		// re-initialize the spaces
		while(spaces){
    1746:	3a d1       	rcall	.+628    	; 0x19bc <UART0_putstring>
			UART0_putchar(' ');
			spaces--;
		}
		UART0_putstring(sensors[s_incr]);
    1748:	bf ef       	ldi	r27, 0xFF	; 255
    174a:	cb 1a       	sub	r12, r27
    174c:	db 0a       	sbc	r13, r27
		s_incr++;
    174e:	f7 01       	movw	r30, r14
    1750:	01 90       	ld	r0, Z+
    1752:	00 20       	and	r0, r0
		spaces = spacing - strlen(sensors[s_incr - 1]);
    1754:	e9 f7       	brne	.-6      	; 0x1750 <Update_OBC+0x20e>
    1756:	31 97       	sbiw	r30, 0x01	; 1
    1758:	ee 19       	sub	r30, r14
    175a:	ff 09       	sbc	r31, r15
    175c:	85 01       	movw	r16, r10
    175e:	0e 1b       	sub	r16, r30
    1760:	1f 0b       	sbc	r17, r31
    1762:	ec e0       	ldi	r30, 0x0C	; 12
		
		// Print the second round of telemetry data
		if (s_incr == 12){
    1764:	ce 16       	cp	r12, r30
    1766:	d1 04       	cpc	r13, r1
    1768:	09 f0       	breq	.+2      	; 0x176c <Update_OBC+0x22a>
    176a:	5f c0       	rjmp	.+190    	; 0x182a <Update_OBC+0x2e8>
    176c:	8a e0       	ldi	r24, 0x0A	; 10
			spaces2 = 0; // re-initialize spaces to 0
			UART0_putchar('\n');
    176e:	16 d1       	rcall	.+556    	; 0x199c <UART0_putchar>
    1770:	8d e0       	ldi	r24, 0x0D	; 13
    1772:	14 d1       	rcall	.+552    	; 0x199c <UART0_putchar>
			UART0_putchar('\r');
    1774:	fc e0       	ldi	r31, 0x0C	; 12
    1776:	2f 16       	cp	r2, r31
    1778:	31 04       	cpc	r3, r1
			// print values
			while(i < s_incr){
    177a:	0c f0       	brlt	.+2      	; 0x177e <Update_OBC+0x23c>
    177c:	99 c0       	rjmp	.+306    	; 0x18b0 <Update_OBC+0x36e>
    177e:	c1 01       	movw	r24, r2
    1780:	88 0f       	add	r24, r24
    1782:	99 1f       	adc	r25, r25
    1784:	88 0f       	add	r24, r24
    1786:	99 1f       	adc	r25, r25
    1788:	c4 5c       	subi	r28, 0xC4	; 196
    178a:	de 4f       	sbci	r29, 0xFE	; 254
    178c:	48 80       	ld	r4, Y
    178e:	59 80       	ldd	r5, Y+1	; 0x01
    1790:	cc 53       	subi	r28, 0x3C	; 60
    1792:	d1 40       	sbci	r29, 0x01	; 1
    1794:	48 0e       	add	r4, r24
    1796:	59 1e       	adc	r5, r25
    1798:	0f 2e       	mov	r0, r31
    179a:	fe ec       	ldi	r31, 0xCE	; 206
    179c:	af 2e       	mov	r10, r31
				while(spaces2){
					UART0_putchar(' ');
					spaces2--;
				}
				sprintf(measure,"%f",telem[i]);
    179e:	f3 e0       	ldi	r31, 0x03	; 3
    17a0:	bf 2e       	mov	r11, r31
    17a2:	f0 2d       	mov	r31, r0
    17a4:	8e 01       	movw	r16, r28
    17a6:	0e 5c       	subi	r16, 0xCE	; 206
    17a8:	1e 4f       	sbci	r17, 0xFE	; 254
    17aa:	0f 2e       	mov	r0, r31
    17ac:	ff e0       	ldi	r31, 0x0F	; 15
				UART0_putstring(measure);
				i++;
				spaces2 = spacing - strlen(measure);
    17ae:	cf 2e       	mov	r12, r31
    17b0:	d1 2c       	mov	r13, r1
    17b2:	f0 2d       	mov	r31, r0
    17b4:	06 c0       	rjmp	.+12     	; 0x17c2 <Update_OBC+0x280>
    17b6:	80 e2       	ldi	r24, 0x20	; 32
    17b8:	f1 d0       	rcall	.+482    	; 0x199c <UART0_putchar>
			UART0_putchar('\n');
			UART0_putchar('\r');
			// print values
			while(i < s_incr){
				while(spaces2){
					UART0_putchar(' ');
    17ba:	21 e0       	ldi	r18, 0x01	; 1
    17bc:	e2 1a       	sub	r14, r18
    17be:	f1 08       	sbc	r15, r1
					spaces2--;
    17c0:	d1 f7       	brne	.-12     	; 0x17b6 <Update_OBC+0x274>
    17c2:	d2 01       	movw	r26, r4
    17c4:	8c 91       	ld	r24, X
			spaces2 = 0; // re-initialize spaces to 0
			UART0_putchar('\n');
			UART0_putchar('\r');
			// print values
			while(i < s_incr){
				while(spaces2){
    17c6:	11 96       	adiw	r26, 0x01	; 1
					UART0_putchar(' ');
					spaces2--;
				}
				sprintf(measure,"%f",telem[i]);
    17c8:	9c 91       	ld	r25, X
    17ca:	11 97       	sbiw	r26, 0x01	; 1
    17cc:	12 96       	adiw	r26, 0x02	; 2
    17ce:	2c 91       	ld	r18, X
    17d0:	12 97       	sbiw	r26, 0x02	; 2
    17d2:	13 96       	adiw	r26, 0x03	; 3
    17d4:	3c 91       	ld	r19, X
    17d6:	b4 e0       	ldi	r27, 0x04	; 4
    17d8:	4b 0e       	add	r4, r27
    17da:	51 1c       	adc	r5, r1
    17dc:	3f 93       	push	r19
    17de:	2f 93       	push	r18
    17e0:	9f 93       	push	r25
    17e2:	8f 93       	push	r24
    17e4:	bf 92       	push	r11
    17e6:	af 92       	push	r10
    17e8:	1f 93       	push	r17
    17ea:	0f 93       	push	r16
    17ec:	0e 94 1a 15 	call	0x2a34	; 0x2a34 <sprintf>
    17f0:	c8 01       	movw	r24, r16
    17f2:	e4 d0       	rcall	.+456    	; 0x19bc <UART0_putstring>
				UART0_putstring(measure);
    17f4:	ef ef       	ldi	r30, 0xFF	; 255
    17f6:	2e 1a       	sub	r2, r30
    17f8:	3e 0a       	sbc	r3, r30
				i++;
    17fa:	f8 01       	movw	r30, r16
    17fc:	01 90       	ld	r0, Z+
    17fe:	00 20       	and	r0, r0
				spaces2 = spacing - strlen(measure);
    1800:	e9 f7       	brne	.-6      	; 0x17fc <Update_OBC+0x2ba>
    1802:	31 97       	sbiw	r30, 0x01	; 1
    1804:	e0 1b       	sub	r30, r16
    1806:	f1 0b       	sbc	r31, r17
    1808:	76 01       	movw	r14, r12
    180a:	ee 1a       	sub	r14, r30
    180c:	ff 0a       	sbc	r15, r31
    180e:	0f b6       	in	r0, 0x3f	; 63
    1810:	f8 94       	cli
    1812:	de bf       	out	0x3e, r29	; 62
		if (s_incr == 12){
			spaces2 = 0; // re-initialize spaces to 0
			UART0_putchar('\n');
			UART0_putchar('\r');
			// print values
			while(i < s_incr){
    1814:	0f be       	out	0x3f, r0	; 63
    1816:	cd bf       	out	0x3d, r28	; 61
    1818:	9c e0       	ldi	r25, 0x0C	; 12
    181a:	29 16       	cp	r2, r25
    181c:	31 04       	cpc	r3, r1
    181e:	09 f4       	brne	.+2      	; 0x1822 <Update_OBC+0x2e0>
    1820:	47 c0       	rjmp	.+142    	; 0x18b0 <Update_OBC+0x36e>
    1822:	e1 14       	cp	r14, r1
    1824:	f1 04       	cpc	r15, r1
				while(spaces2){
    1826:	39 f6       	brne	.-114    	; 0x17b6 <Update_OBC+0x274>
    1828:	cc cf       	rjmp	.-104    	; 0x17c2 <Update_OBC+0x280>
    182a:	aa e0       	ldi	r26, 0x0A	; 10
    182c:	ea 0e       	add	r14, r26
    182e:	f1 1c       	adc	r15, r1
    1830:	0b cf       	rjmp	.-490    	; 0x1648 <Update_OBC+0x106>
    1832:	80 e2       	ldi	r24, 0x20	; 32
    1834:	b3 d0       	rcall	.+358    	; 0x199c <UART0_putchar>
	UART0_putchar('\n');
	UART0_putchar('\n');
	UART0_putchar('\r');
	while(l_incr < 8){
		while(spaces){
			UART0_putchar(' ');
    1836:	01 50       	subi	r16, 0x01	; 1
    1838:	11 09       	sbc	r17, r1
    183a:	d9 f7       	brne	.-10     	; 0x1832 <Update_OBC+0x2f0>
			spaces--;
    183c:	ba e0       	ldi	r27, 0x0A	; 10
    183e:	eb 0e       	add	r14, r27
	spaces = 0; // re initialize spaces
	UART0_putchar('\n');
	UART0_putchar('\n');
	UART0_putchar('\r');
	while(l_incr < 8){
		while(spaces){
    1840:	f1 1c       	adc	r15, r1
    1842:	c7 01       	movw	r24, r14
    1844:	bb d0       	rcall	.+374    	; 0x19bc <UART0_putstring>
    1846:	f7 01       	movw	r30, r14
			UART0_putchar(' ');
			spaces--;
		}
		UART0_putstring(loads[l_incr]);
    1848:	01 90       	ld	r0, Z+
    184a:	00 20       	and	r0, r0
		l_incr++;
		spaces = spacing - strlen(loads[l_incr - 1]);
    184c:	e9 f7       	brne	.-6      	; 0x1848 <Update_OBC+0x306>
    184e:	31 97       	sbiw	r30, 0x01	; 1
    1850:	ee 19       	sub	r30, r14
    1852:	ff 09       	sbc	r31, r15
    1854:	86 01       	movw	r16, r12
    1856:	0e 1b       	sub	r16, r30
    1858:	1f 0b       	sbc	r17, r31
    185a:	ae 14       	cp	r10, r14
    185c:	bf 04       	cpc	r11, r15
	// Print the Load Titles
	spaces = 0; // re initialize spaces
	UART0_putchar('\n');
	UART0_putchar('\n');
	UART0_putchar('\r');
	while(l_incr < 8){
    185e:	21 f0       	breq	.+8      	; 0x1868 <Update_OBC+0x326>
    1860:	01 15       	cp	r16, r1
    1862:	11 05       	cpc	r17, r1
		while(spaces){
    1864:	31 f7       	brne	.-52     	; 0x1832 <Update_OBC+0x2f0>
    1866:	ea cf       	rjmp	.-44     	; 0x183c <Update_OBC+0x2fa>
    1868:	8a e0       	ldi	r24, 0x0A	; 10
	
	// Print the load states
	// Print the Load Titles
	l_incr = 0; // reset load increment to 0
	spaces = 0; // re initialize spaces
	UART0_putchar('\n');
    186a:	98 d0       	rcall	.+304    	; 0x199c <UART0_putchar>
    186c:	8d e0       	ldi	r24, 0x0D	; 13
    186e:	96 d0       	rcall	.+300    	; 0x199c <UART0_putchar>
	UART0_putchar('\r');
    1870:	74 01       	movw	r14, r8
    1872:	e8 e0       	ldi	r30, 0x08	; 8
    1874:	8e 0e       	add	r8, r30
    1876:	91 1c       	adc	r9, r1
    1878:	00 e0       	ldi	r16, 0x00	; 0
    187a:	10 e0       	ldi	r17, 0x00	; 0
    187c:	0e c0       	rjmp	.+28     	; 0x189a <Update_OBC+0x358>
	}
	
	// Print the load states
	// Print the Load Titles
	l_incr = 0; // reset load increment to 0
	spaces = 0; // re initialize spaces
    187e:	80 e2       	ldi	r24, 0x20	; 32
    1880:	8d d0       	rcall	.+282    	; 0x199c <UART0_putchar>
	UART0_putchar('\n');
	UART0_putchar('\r');
	while(l_incr < 8){
		while(spaces){
			UART0_putchar(' ');
    1882:	01 50       	subi	r16, 0x01	; 1
    1884:	11 09       	sbc	r17, r1
			spaces--;
    1886:	d9 f7       	brne	.-10     	; 0x187e <Update_OBC+0x33c>
	l_incr = 0; // reset load increment to 0
	spaces = 0; // re initialize spaces
	UART0_putchar('\n');
	UART0_putchar('\r');
	while(l_incr < 8){
		while(spaces){
    1888:	d7 01       	movw	r26, r14
			UART0_putchar(' ');
			spaces--;
		}
		UART0_putchar(power[l_incr]);
    188a:	8d 91       	ld	r24, X+
    188c:	7d 01       	movw	r14, r26
    188e:	86 d0       	rcall	.+268    	; 0x199c <UART0_putchar>
		l_incr++;
		spaces = spacing - 1;
    1890:	0e e0       	ldi	r16, 0x0E	; 14
    1892:	10 e0       	ldi	r17, 0x00	; 0
	// Print the Load Titles
	l_incr = 0; // reset load increment to 0
	spaces = 0; // re initialize spaces
	UART0_putchar('\n');
	UART0_putchar('\r');
	while(l_incr < 8){
    1894:	8e 14       	cp	r8, r14
    1896:	9f 04       	cpc	r9, r15
    1898:	21 f0       	breq	.+8      	; 0x18a2 <Update_OBC+0x360>
		while(spaces){
    189a:	01 15       	cp	r16, r1
    189c:	11 05       	cpc	r17, r1
    189e:	79 f7       	brne	.-34     	; 0x187e <Update_OBC+0x33c>
    18a0:	f3 cf       	rjmp	.-26     	; 0x1888 <Update_OBC+0x346>
		}
		UART0_putchar(power[l_incr]);
		l_incr++;
		spaces = spacing - 1;
	}
	UART0_putchar('\n');
    18a2:	8a e0       	ldi	r24, 0x0A	; 10
    18a4:	7b d0       	rcall	.+246    	; 0x199c <UART0_putchar>
    18a6:	8a e0       	ldi	r24, 0x0A	; 10
	UART0_putchar('\n');
    18a8:	79 d0       	rcall	.+242    	; 0x199c <UART0_putchar>
    18aa:	8d e0       	ldi	r24, 0x0D	; 13
    18ac:	77 d0       	rcall	.+238    	; 0x199c <UART0_putchar>
	UART0_putchar('\r');
    18ae:	14 c0       	rjmp	.+40     	; 0x18d8 <Update_OBC+0x396>
    18b0:	8a e0       	ldi	r24, 0x0A	; 10
    18b2:	74 d0       	rcall	.+232    	; 0x199c <UART0_putchar>
    18b4:	8a e0       	ldi	r24, 0x0A	; 10
	}
	
	
	// Print the Load Titles
	spaces = 0; // re initialize spaces
	UART0_putchar('\n');
    18b6:	72 d0       	rcall	.+228    	; 0x199c <UART0_putchar>
    18b8:	8d e0       	ldi	r24, 0x0D	; 13
    18ba:	70 d0       	rcall	.+224    	; 0x199c <UART0_putchar>
	UART0_putchar('\n');
    18bc:	7e 01       	movw	r14, r28
    18be:	ba e6       	ldi	r27, 0x6A	; 106
    18c0:	eb 0e       	add	r14, r27
	UART0_putchar('\r');
    18c2:	f1 1c       	adc	r15, r1
    18c4:	5e 01       	movw	r10, r28
    18c6:	e0 eb       	ldi	r30, 0xB0	; 176
    18c8:	ae 0e       	add	r10, r30
    18ca:	b1 1c       	adc	r11, r1
    18cc:	0f 2e       	mov	r0, r31
    18ce:	ff e0       	ldi	r31, 0x0F	; 15
    18d0:	cf 2e       	mov	r12, r31
    18d2:	d1 2c       	mov	r13, r1
    18d4:	f0 2d       	mov	r31, r0
    18d6:	b5 cf       	rjmp	.-150    	; 0x1842 <Update_OBC+0x300>
			UART0_putchar(' ');
			spaces--;
		}
		UART0_putstring(loads[l_incr]);
		l_incr++;
		spaces = spacing - strlen(loads[l_incr - 1]);
    18d8:	c1 5c       	subi	r28, 0xC1	; 193
    18da:	de 4f       	sbci	r29, 0xFE	; 254
    18dc:	0f b6       	in	r0, 0x3f	; 63
    18de:	f8 94       	cli
    18e0:	de bf       	out	0x3e, r29	; 62
    18e2:	0f be       	out	0x3f, r0	; 63
		spaces = spacing - 1;
	}
	UART0_putchar('\n');
	UART0_putchar('\n');
	UART0_putchar('\r');
    18e4:	cd bf       	out	0x3d, r28	; 61
    18e6:	df 91       	pop	r29
    18e8:	cf 91       	pop	r28
    18ea:	1f 91       	pop	r17
    18ec:	0f 91       	pop	r16
    18ee:	ff 90       	pop	r15
    18f0:	ef 90       	pop	r14
    18f2:	df 90       	pop	r13
    18f4:	cf 90       	pop	r12
    18f6:	bf 90       	pop	r11
    18f8:	af 90       	pop	r10
    18fa:	9f 90       	pop	r9
    18fc:	8f 90       	pop	r8
    18fe:	7f 90       	pop	r7
    1900:	6f 90       	pop	r6
    1902:	5f 90       	pop	r5
    1904:	4f 90       	pop	r4
    1906:	3f 90       	pop	r3
    1908:	2f 90       	pop	r2
    190a:	08 95       	ret

0000190c <GPIO_init>:

void GPIO_init(){
	
	// Initializing the PORTs
	
	DDRH = 0x7F; // PORTH pins 0-6 set as outputs
    190c:	8f e7       	ldi	r24, 0x7F	; 127
    190e:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <__TEXT_REGION_LENGTH__+0x7e0101>
	DDRL = 0x0E; // PORTL pins 1-3 set as outputs
    1912:	9e e0       	ldi	r25, 0x0E	; 14
    1914:	90 93 0a 01 	sts	0x010A, r25	; 0x80010a <__TEXT_REGION_LENGTH__+0x7e010a>
	DDRA = 0xF0; // PORTA pins 4-7 set as outputs
    1918:	90 ef       	ldi	r25, 0xF0	; 240
    191a:	91 b9       	out	0x01, r25	; 1
	DDRJ = 0x7F; // PORTJ pins 0-6 set as outputs
    191c:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <__TEXT_REGION_LENGTH__+0x7e0104>
	DDRC = 0xFF; // PORTC pins 0-7 set as outputs
    1920:	8f ef       	ldi	r24, 0xFF	; 255
    1922:	87 b9       	out	0x07, r24	; 7
	
	// Set Output as Low
	PORTH = 0x02; // pin 1 set high to inhibit temperature measurement
    1924:	82 e0       	ldi	r24, 0x02	; 2
    1926:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <__TEXT_REGION_LENGTH__+0x7e0102>
	PORTL = 0x00;
    192a:	10 92 0b 01 	sts	0x010B, r1	; 0x80010b <__TEXT_REGION_LENGTH__+0x7e010b>
	PORTA = 0x00;
    192e:	12 b8       	out	0x02, r1	; 2
	PORTJ = 0x00; 
    1930:	10 92 05 01 	sts	0x0105, r1	; 0x800105 <__TEXT_REGION_LENGTH__+0x7e0105>
	PORTC = 0x00;
    1934:	18 b8       	out	0x08, r1	; 8
    1936:	08 95       	ret

00001938 <ADC_init>:
/*========================================================================================*/

void ADC_init(){
	
	// Enable as Input
	DDRF = 0x00;
    1938:	10 ba       	out	0x10, r1	; 16
	
	// Enable the 1.1V internal reference
	//ADMUX |= ((REFS1 << 0) | (REFS0 << 0)); // set the first bit to 1
	ADMUX = 0x00;
    193a:	10 92 7c 00 	sts	0x007C, r1	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>
	
	// Enable the ADC via the status control register & enable interrupt
	//ADCSRA |= (ADEN << 1) | (ADPS2 << 1) | (ADPS0 << 1) | (ADIE << 1);
	ADCSRA = 0x85;
    193e:	85 e8       	ldi	r24, 0x85	; 133
    1940:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
    1944:	08 95       	ret

00001946 <CLK_init>:
/*========================================================================================*/

CLK_init(){
	
	// Enable Timer 1
	TCCR1B = 0x04;
    1946:	84 e0       	ldi	r24, 0x04	; 4
    1948:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
	
	// Enable Output Compare Interrupt
	TIMSK1 = 0x02;
    194c:	82 e0       	ldi	r24, 0x02	; 2
    194e:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__TEXT_REGION_LENGTH__+0x7e006f>
	
	// Set Counter to 65,536 clock cycles (MAX)
	OCR1A = 0xff;
    1952:	8f ef       	ldi	r24, 0xFF	; 255
    1954:	90 e0       	ldi	r25, 0x00	; 0
    1956:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
    195a:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
	
	// Set clock to 0
	TCNT1 = 0x0000;
    195e:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
    1962:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
    1966:	08 95       	ret

00001968 <UART0_init>:
/*========================================================================================*/

void UART0_init(){
	
	// Using the values from set baud tool
	UBRR0H = UBRRH_VALUE;
    1968:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
	UBRR0L = UBRRL_VALUE;
    196c:	8c e0       	ldi	r24, 0x0C	; 12
    196e:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
	
	// Enable TX & RX and Enable RX complete interrupt
	UCSR0B = 0x98; // enabling bits 4 & 3 (RX & TX) ****** RE-ENABLE INTERRUPT!!!!!!!
    1972:	88 e9       	ldi	r24, 0x98	; 152
    1974:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
	
	
	// Set up the format 8bit no parity
	UCSR0C = 0x06; // enable 8 bit chars
    1978:	86 e0       	ldi	r24, 0x06	; 6
    197a:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7e00c2>
    197e:	08 95       	ret

00001980 <WD_init>:
/*========================================================================================*/

void WD_init(){
	
	// Reset the MCU reset flag
	MCUSR &= 0xf7; // changes bit 3 to 0
    1980:	84 b7       	in	r24, 0x34	; 52
    1982:	87 7f       	andi	r24, 0xF7	; 247
    1984:	84 bf       	out	0x34, r24	; 52
	
	// Enable the interrupt/system reset mode
	wdt_enable(INTERRUPT_SYSTEM_RESET_MODE);
    1986:	82 e0       	ldi	r24, 0x02	; 2
    1988:	5f d0       	rcall	.+190    	; 0x1a48 <wdt_enable>
	
	// Set pre-scaler to 8s
	wdt_set_timeout_period(WDT_TIMEOUT_PERIOD_1024KCLK);
    198a:	89 e0       	ldi	r24, 0x09	; 9
    198c:	39 c0       	rjmp	.+114    	; 0x1a00 <wdt_set_timeout_period>
    198e:	08 95       	ret

00001990 <ALL_init>:
/*========================================================================================*/

void ALL_init(){
	
	// Initialize GPIO
	GPIO_init();
    1990:	bd df       	rcall	.-134    	; 0x190c <GPIO_init>
	
	// Initialize the ADC
	ADC_init();
    1992:	d2 df       	rcall	.-92     	; 0x1938 <ADC_init>
	
	// Initialize UART
	UART0_init();
    1994:	e9 df       	rcall	.-46     	; 0x1968 <UART0_init>
	
	// Initialize Timer (CLK) *** NOT during testing ***
	CLK_init();
    1996:	d7 df       	rcall	.-82     	; 0x1946 <CLK_init>
    1998:	f3 cf       	rjmp	.-26     	; 0x1980 <WD_init>
	
	// Initialize Watchdog Timer
	WD_init();
    199a:	08 95       	ret

0000199c <UART0_putchar>:
    199c:	e0 ec       	ldi	r30, 0xC0	; 192
    199e:	f0 e0       	ldi	r31, 0x00	; 0
/*========================================================================================*/

void UART0_putchar(char h){
	
	// wait for transmit buffer to be empty
	while(! (UCSR0A & (1 << UDRE0)));
    19a0:	90 81       	ld	r25, Z
    19a2:	95 ff       	sbrs	r25, 5
    19a4:	fd cf       	rjmp	.-6      	; 0x19a0 <UART0_putchar+0x4>
	
	// Put data to be transmitted into buffer
	UDR0 = h; // write to the data register
    19a6:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
    19aa:	08 95       	ret

000019ac <UART0_getchar>:
/*========================================================================================*/

char UART0_getchar(){
	
	// wait for data to be received
	while (!( UCSR0A & (1 << RXC0)));
    19ac:	e0 ec       	ldi	r30, 0xC0	; 192
    19ae:	f0 e0       	ldi	r31, 0x00	; 0
    19b0:	80 81       	ld	r24, Z
    19b2:	88 23       	and	r24, r24
    19b4:	ec f7       	brge	.-6      	; 0x19b0 <UART0_getchar+0x4>
	
	// return the received character
	return UDR0;
    19b6:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
	
}
    19ba:	08 95       	ret

000019bc <UART0_putstring>:
// Author: Chris Thomas
// Date: 2019-03-13
// Description: Writes strings via UART0 using putchar.
/*========================================================================================*/

void UART0_putstring(char *string){
    19bc:	cf 93       	push	r28
    19be:	df 93       	push	r29
    19c0:	ec 01       	movw	r28, r24
	while(*string){
    19c2:	88 81       	ld	r24, Y
    19c4:	88 23       	and	r24, r24
    19c6:	29 f0       	breq	.+10     	; 0x19d2 <UART0_putstring+0x16>
    19c8:	21 96       	adiw	r28, 0x01	; 1
		UART0_putchar(*string++);
    19ca:	e8 df       	rcall	.-48     	; 0x199c <UART0_putchar>
// Date: 2019-03-13
// Description: Writes strings via UART0 using putchar.
/*========================================================================================*/

void UART0_putstring(char *string){
	while(*string){
    19cc:	89 91       	ld	r24, Y+
    19ce:	81 11       	cpse	r24, r1
    19d0:	fc cf       	rjmp	.-8      	; 0x19ca <UART0_putstring+0xe>
		UART0_putchar(*string++);
	}
}
    19d2:	df 91       	pop	r29
    19d4:	cf 91       	pop	r28
    19d6:	08 95       	ret

000019d8 <UART0_getstring>:
// Date: 2019-03-13
// Description: Reads strings via UART0 using getchar.
/*========================================================================================*/


void UART0_getstring(char* message){
    19d8:	0f 93       	push	r16
    19da:	1f 93       	push	r17
    19dc:	cf 93       	push	r28
    19de:	df 93       	push	r29
    19e0:	08 2f       	mov	r16, r24
    19e2:	19 2f       	mov	r17, r25
	char prev;
	int i = 0;
	
	// Check the first value for the terminator ' ' (SPACE)
	prev = UART0_getchar();
    19e4:	e3 df       	rcall	.-58     	; 0x19ac <UART0_getchar>
	
	// Check previous value for terminator (SPACE)
	while(prev != ' '){
    19e6:	80 32       	cpi	r24, 0x20	; 32
    19e8:	31 f0       	breq	.+12     	; 0x19f6 <UART0_getstring+0x1e>
    19ea:	c0 2f       	mov	r28, r16
    19ec:	d1 2f       	mov	r29, r17
		message[i] = prev; // save the char if it isn't the terminator
		i++;
		prev = UART0_getchar();
    19ee:	89 93       	st	Y+, r24
    19f0:	dd df       	rcall	.-70     	; 0x19ac <UART0_getchar>
	
	// Check the first value for the terminator ' ' (SPACE)
	prev = UART0_getchar();
	
	// Check previous value for terminator (SPACE)
	while(prev != ' '){
    19f2:	80 32       	cpi	r24, 0x20	; 32
    19f4:	e1 f7       	brne	.-8      	; 0x19ee <UART0_getstring+0x16>
		message[i] = prev; // save the char if it isn't the terminator
		i++;
		prev = UART0_getchar();
	}
    19f6:	df 91       	pop	r29
    19f8:	cf 91       	pop	r28
    19fa:	1f 91       	pop	r17
    19fc:	0f 91       	pop	r16
    19fe:	08 95       	ret

00001a00 <wdt_set_timeout_period>:
 *  This function is written in asm where ever the time is critical
 *
 *  \param  to_period  WDT timeout period
 */
void wdt_set_timeout_period(enum wdt_timeout_period to_period)
{
    1a00:	cf 93       	push	r28
    1a02:	df 93       	push	r29
    1a04:	1f 92       	push	r1
    1a06:	cd b7       	in	r28, 0x3d	; 61
    1a08:	de b7       	in	r29, 0x3e	; 62
	/* Store the prescale value to temp register */
#if defined (__GNUC__)
	asm ("MOV R19,R24");
    1a0a:	38 2f       	mov	r19, r24
#else
#error Unsupported compiler.
#endif

	/* Mask for WDP3 */
	if (to_period & MASK_PRESCALE_WPD3) {
    1a0c:	83 ff       	sbrs	r24, 3
    1a0e:	02 c0       	rjmp	.+4      	; 0x1a14 <wdt_set_timeout_period+0x14>
		asm ("LDI R21,0x20");
    1a10:	50 e2       	ldi	r21, 0x20	; 32
    1a12:	01 c0       	rjmp	.+2      	; 0x1a16 <wdt_set_timeout_period+0x16>
	} else {
		asm ("LDI R21,0x00");
    1a14:	50 e0       	ldi	r21, 0x00	; 0

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    1a16:	8f b7       	in	r24, 0x3f	; 63
    1a18:	89 83       	std	Y+1, r24	; 0x01
	cpu_irq_disable();
    1a1a:	f8 94       	cli
	return flags;
    1a1c:	89 81       	ldd	r24, Y+1	; 0x01

	/* Disable Global interrupt */
	uint8_t sreg = cpu_irq_save();

	/* Reset Watchdog timer */
	wdt_reset();
    1a1e:	a8 95       	wdr

	asm ("LDI R17,0xD8");
    1a20:	18 ed       	ldi	r17, 0xD8	; 216
	asm ("LDS R18,0x60");   /* WDTCSR Address = 0x60 */
    1a22:	20 91 60 00 	lds	r18, 0x0060	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
	asm ("AND R17,R18");
    1a26:	12 23       	and	r17, r18
	asm ("STS 0x60,R17");   /* WDTCSR Address = 0x60 */
    1a28:	10 93 60 00 	sts	0x0060, r17	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
	/* Load the new prescale value */
	asm ("LDI R20,0x18");
    1a2c:	48 e1       	ldi	r20, 0x18	; 24
	asm ("LDI R18,0x07");
    1a2e:	27 e0       	ldi	r18, 0x07	; 7
	asm ("AND R19,R18");
    1a30:	32 23       	and	r19, r18
	asm ("OR R19,R21");
    1a32:	35 2b       	or	r19, r21
	asm ("OR R19,R17");
    1a34:	31 2b       	or	r19, r17
	/* Write logical one to WDCE and WDE */
	asm ("STS 0x60,R20");   /* WDTCSR Address = 0x60 */
    1a36:	40 93 60 00 	sts	0x0060, r20	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
	/* Write new prescale setting */
	asm ("STS 0x60,R19");   /* WDTCSR Address = 0x60 */
    1a3a:	30 93 60 00 	sts	0x0060, r19	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    1a3e:	8f bf       	out	0x3f, r24	; 63

	/* Restore Global interrupt */
	cpu_irq_restore(sreg);
}
    1a40:	0f 90       	pop	r0
    1a42:	df 91       	pop	r29
    1a44:	cf 91       	pop	r28
    1a46:	08 95       	ret

00001a48 <wdt_enable>:
 * This function is written in asm where ever the time is critical
 *
 * \param mode WDT timer mode selection
 */
void wdt_enable(enum wdt_mode_select mode)
{
    1a48:	cf 93       	push	r28
    1a4a:	df 93       	push	r29
    1a4c:	1f 92       	push	r1
    1a4e:	cd b7       	in	r28, 0x3d	; 61
    1a50:	de b7       	in	r29, 0x3e	; 62

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    1a52:	9f b7       	in	r25, 0x3f	; 63
    1a54:	99 83       	std	Y+1, r25	; 0x01
	cpu_irq_disable();
    1a56:	f8 94       	cli
	return flags;
    1a58:	29 81       	ldd	r18, Y+1	; 0x01
	/* Disable Global interrupt */
	uint8_t sreg = cpu_irq_save();

	/* Reset Watchdog timer */
	wdt_reset();
    1a5a:	a8 95       	wdr
 ***\param  none
 */
static inline void wdt_reset_flag_clear(void)
{
	/* Clear WDRF flag in MCUSR */
	MCUSR &= ~WDRF_bm;
    1a5c:	94 b7       	in	r25, 0x34	; 52
    1a5e:	97 7f       	andi	r25, 0xF7	; 247
    1a60:	94 bf       	out	0x34, r25	; 52

	/* Clear WDRF flag in MCUSR */
	wdt_reset_flag_clear();

	/*System reset mode */
	if (mode == SYSTEM_RESET_MODE) {
    1a62:	81 30       	cpi	r24, 0x01	; 1
    1a64:	59 f4       	brne	.+22     	; 0x1a7c <wdt_enable+0x34>
		/* Write logical zero to WDIE */
		asm ("LDI R17,0xBF");
    1a66:	1f eb       	ldi	r17, 0xBF	; 191
		asm ("LDS R18,0x60"); /* WDTCSR Address = 0x60 */
    1a68:	20 91 60 00 	lds	r18, 0x0060	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
		asm ("AND R17,R18");
    1a6c:	12 23       	and	r17, r18
		asm ("STS 0x60,R17"); /* WDTCSR Address = 0x60 */
    1a6e:	10 93 60 00 	sts	0x0060, r17	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
		/* Write WDIF,WDE and WDCE to logical one */
		asm ("LDI R18,0x98");
    1a72:	28 e9       	ldi	r18, 0x98	; 152
		asm ("OR R18,R17");
    1a74:	21 2b       	or	r18, r17
		asm ("STS 0x60,R18"); /* WDTCSR Address = 0x60 */
    1a76:	20 93 60 00 	sts	0x0060, r18	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
    1a7a:	1c c0       	rjmp	.+56     	; 0x1ab4 <wdt_enable+0x6c>
	}
	/* Interrupt mode */
	else if (mode == INTERRUPT_MODE) {
    1a7c:	81 11       	cpse	r24, r1
    1a7e:	0e c0       	rjmp	.+28     	; 0x1a9c <wdt_enable+0x54>
		/* Write logical zero to WDE */
		asm ("LDI R17,0xF7");
    1a80:	17 ef       	ldi	r17, 0xF7	; 247
		asm ("LDS R18,0x60"); /* WDTCSR Address = 0x60 */
    1a82:	20 91 60 00 	lds	r18, 0x0060	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
		asm ("AND R17,R18");
    1a86:	12 23       	and	r17, r18
		asm ("STS 0x60,R17"); /* WDTCSR Address = 0x60 */
    1a88:	10 93 60 00 	sts	0x0060, r17	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
		asm ("LDI R20,0x18");
    1a8c:	48 e1       	ldi	r20, 0x18	; 24
		asm ("LDI R19,0xD0");
    1a8e:	30 ed       	ldi	r19, 0xD0	; 208
		asm ("OR R19,R17");
    1a90:	31 2b       	or	r19, r17
		/* Write logical one to WDCE and WDE */
		asm ("STS 0x60,R20"); /* WDTCSR Address = 0x60 */
    1a92:	40 93 60 00 	sts	0x0060, r20	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
		/* Write WDIF,WDIE and WDCE to logical one */
		asm ("STS 0x60,R19"); /* WDTCSR Address = 0x60 */
    1a96:	30 93 60 00 	sts	0x0060, r19	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
    1a9a:	0c c0       	rjmp	.+24     	; 0x1ab4 <wdt_enable+0x6c>
	}
	/* Interrupt and System reset mode */
	else if (mode == INTERRUPT_SYSTEM_RESET_MODE) {
    1a9c:	82 30       	cpi	r24, 0x02	; 2
    1a9e:	51 f4       	brne	.+20     	; 0x1ab4 <wdt_enable+0x6c>
		/* Write logical zero to WDE */
		asm ("LDI R17,0xF7");
    1aa0:	17 ef       	ldi	r17, 0xF7	; 247
		asm ("LDS R18,0x60"); /* WDTCSR Address = 0x60 */
    1aa2:	20 91 60 00 	lds	r18, 0x0060	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
		asm ("AND R17,R18");
    1aa6:	12 23       	and	r17, r18
		asm ("STS 0x60,R17"); /* WDTCSR Address = 0x60 */
    1aa8:	10 93 60 00 	sts	0x0060, r17	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
		/* Write logical one to WDCE, WDIE,WDIF and WDE */
		asm ("LDI R18,0xD8");
    1aac:	28 ed       	ldi	r18, 0xD8	; 216
		asm ("OR R18,R17");
    1aae:	21 2b       	or	r18, r17
		asm ("STS 0x60,R18"); /* WDTCSR Address = 0x60 */
    1ab0:	20 93 60 00 	sts	0x0060, r18	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    1ab4:	2f bf       	out	0x3f, r18	; 63
	}

	/* Restore Global interrupt */
	cpu_irq_restore(sreg);
}
    1ab6:	0f 90       	pop	r0
    1ab8:	df 91       	pop	r29
    1aba:	cf 91       	pop	r28
    1abc:	08 95       	ret

00001abe <__vector_17>:
// Date: 2019-03-18
// Description: Interrupt occurs when timer register overflow flag is set, and
//				calls for telemetry data to be updated.
/*========================================================================================*/

ISR(TIMER1_COMPA_vect){
    1abe:	1f 92       	push	r1
    1ac0:	0f 92       	push	r0
    1ac2:	0f b6       	in	r0, 0x3f	; 63
    1ac4:	0f 92       	push	r0
    1ac6:	11 24       	eor	r1, r1
    1ac8:	2f 93       	push	r18
    1aca:	3f 93       	push	r19
    1acc:	4f 93       	push	r20
    1ace:	5f 93       	push	r21
    1ad0:	6f 93       	push	r22
    1ad2:	7f 93       	push	r23
    1ad4:	8f 93       	push	r24
    1ad6:	9f 93       	push	r25
    1ad8:	af 93       	push	r26
    1ada:	bf 93       	push	r27
    1adc:	ef 93       	push	r30
    1ade:	ff 93       	push	r31
	
	// Disable Interrupts
	cli();
    1ae0:	f8 94       	cli
	
	// Update Telemetry information
	Update_TELEM(telem, state);
    1ae2:	60 91 e6 03 	lds	r22, 0x03E6	; 0x8003e6 <state>
    1ae6:	8e e2       	ldi	r24, 0x2E	; 46
    1ae8:	94 e0       	ldi	r25, 0x04	; 4
    1aea:	6d dc       	rcall	.-1830   	; 0x13c6 <Update_TELEM>
	
	// Check Power State
	temp = telem[11];
    1aec:	ee e2       	ldi	r30, 0x2E	; 46
    1aee:	f4 e0       	ldi	r31, 0x04	; 4
    1af0:	84 a5       	ldd	r24, Z+44	; 0x2c
    1af2:	95 a5       	ldd	r25, Z+45	; 0x2d
    1af4:	a6 a5       	ldd	r26, Z+46	; 0x2e
    1af6:	b7 a5       	ldd	r27, Z+47	; 0x2f
    1af8:	80 93 ed 03 	sts	0x03ED, r24	; 0x8003ed <temp>
    1afc:	90 93 ee 03 	sts	0x03EE, r25	; 0x8003ee <temp+0x1>
    1b00:	a0 93 ef 03 	sts	0x03EF, r26	; 0x8003ef <temp+0x2>
    1b04:	b0 93 f0 03 	sts	0x03F0, r27	; 0x8003f0 <temp+0x3>
	soc = SoC_ADC(telem[10],telem[4]);
    1b08:	20 89       	ldd	r18, Z+16	; 0x10
    1b0a:	31 89       	ldd	r19, Z+17	; 0x11
    1b0c:	42 89       	ldd	r20, Z+18	; 0x12
    1b0e:	53 89       	ldd	r21, Z+19	; 0x13
    1b10:	60 a5       	ldd	r22, Z+40	; 0x28
    1b12:	71 a5       	ldd	r23, Z+41	; 0x29
    1b14:	82 a5       	ldd	r24, Z+42	; 0x2a
    1b16:	93 a5       	ldd	r25, Z+43	; 0x2b
    1b18:	0e 94 27 03 	call	0x64e	; 0x64e <SoC_ADC>
    1b1c:	60 93 f5 03 	sts	0x03F5, r22	; 0x8003f5 <soc>
    1b20:	70 93 f6 03 	sts	0x03F6, r23	; 0x8003f6 <soc+0x1>
    1b24:	80 93 f7 03 	sts	0x03F7, r24	; 0x8003f7 <soc+0x2>
    1b28:	90 93 f8 03 	sts	0x03F8, r25	; 0x8003f8 <soc+0x3>
	
	// Update power state
	if(mode){
    1b2c:	20 91 e4 03 	lds	r18, 0x03E4	; 0x8003e4 <__data_end>
    1b30:	22 23       	and	r18, r18
    1b32:	f9 f0       	breq	.+62     	; 0x1b72 <__vector_17+0xb4>
		state_num = PowerStateCheck(soc, temp);
    1b34:	20 91 ed 03 	lds	r18, 0x03ED	; 0x8003ed <temp>
    1b38:	30 91 ee 03 	lds	r19, 0x03EE	; 0x8003ee <temp+0x1>
    1b3c:	40 91 ef 03 	lds	r20, 0x03EF	; 0x8003ef <temp+0x2>
    1b40:	50 91 f0 03 	lds	r21, 0x03F0	; 0x8003f0 <temp+0x3>
    1b44:	28 d9       	rcall	.-3504   	; 0xd96 <PowerStateCheck>
    1b46:	90 93 e8 03 	sts	0x03E8, r25	; 0x8003e8 <state_num+0x1>
    1b4a:	80 93 e7 03 	sts	0x03E7, r24	; 0x8003e7 <state_num>
		state = pwrMat[state_num];
    1b4e:	fc 01       	movw	r30, r24
    1b50:	e3 5f       	subi	r30, 0xF3	; 243
    1b52:	fb 4f       	sbci	r31, 0xFB	; 251
    1b54:	60 81       	ld	r22, Z
    1b56:	60 93 e6 03 	sts	0x03E6, r22	; 0x8003e6 <state>
		// Update the state of the loads
		Update_STATE(power,state);
    1b5a:	86 e2       	ldi	r24, 0x26	; 38
    1b5c:	94 e0       	ldi	r25, 0x04	; 4
    1b5e:	37 db       	rcall	.-2450   	; 0x11ce <Update_STATE>
		Update_LOADS(state);
    1b60:	80 91 e6 03 	lds	r24, 0x03E6	; 0x8003e6 <state>
    1b64:	e1 d8       	rcall	.-3646   	; 0xd28 <Update_LOADS>
    1b66:	66 e2       	ldi	r22, 0x26	; 38
		Update_OBC(telem, power);
    1b68:	74 e0       	ldi	r23, 0x04	; 4
    1b6a:	8e e2       	ldi	r24, 0x2E	; 46
    1b6c:	94 e0       	ldi	r25, 0x04	; 4
    1b6e:	e9 dc       	rcall	.-1582   	; 0x1542 <Update_OBC>
    1b70:	0d c0       	rjmp	.+26     	; 0x1b8c <__vector_17+0xce>
	}
	else{
		Update_LOADS(state);
    1b72:	80 91 e6 03 	lds	r24, 0x03E6	; 0x8003e6 <state>
    1b76:	d8 d8       	rcall	.-3664   	; 0xd28 <Update_LOADS>
		Update_STATE(power,state);
    1b78:	60 91 e6 03 	lds	r22, 0x03E6	; 0x8003e6 <state>
    1b7c:	86 e2       	ldi	r24, 0x26	; 38
    1b7e:	94 e0       	ldi	r25, 0x04	; 4
    1b80:	26 db       	rcall	.-2484   	; 0x11ce <Update_STATE>
		Update_OBC(telem, power);
    1b82:	66 e2       	ldi	r22, 0x26	; 38
    1b84:	74 e0       	ldi	r23, 0x04	; 4
    1b86:	8e e2       	ldi	r24, 0x2E	; 46
    1b88:	94 e0       	ldi	r25, 0x04	; 4
    1b8a:	db dc       	rcall	.-1610   	; 0x1542 <Update_OBC>
    1b8c:	80 91 e6 03 	lds	r24, 0x03E6	; 0x8003e6 <state>
	
	// Print the state of charge and power matrix index
	
	
	// Save previous states for less computation
	prev_state = state;
    1b90:	80 93 e5 03 	sts	0x03E5, r24	; 0x8003e5 <prev_state>
    1b94:	80 91 ed 03 	lds	r24, 0x03ED	; 0x8003ed <temp>
	prev_temp  = temp;
    1b98:	90 91 ee 03 	lds	r25, 0x03EE	; 0x8003ee <temp+0x1>
    1b9c:	a0 91 ef 03 	lds	r26, 0x03EF	; 0x8003ef <temp+0x2>
    1ba0:	b0 91 f0 03 	lds	r27, 0x03F0	; 0x8003f0 <temp+0x3>
    1ba4:	80 93 e9 03 	sts	0x03E9, r24	; 0x8003e9 <prev_temp>
    1ba8:	90 93 ea 03 	sts	0x03EA, r25	; 0x8003ea <prev_temp+0x1>
    1bac:	a0 93 eb 03 	sts	0x03EB, r26	; 0x8003eb <prev_temp+0x2>
    1bb0:	b0 93 ec 03 	sts	0x03EC, r27	; 0x8003ec <prev_temp+0x3>
    1bb4:	80 91 f5 03 	lds	r24, 0x03F5	; 0x8003f5 <soc>
	prev_soc = soc;
    1bb8:	90 91 f6 03 	lds	r25, 0x03F6	; 0x8003f6 <soc+0x1>
    1bbc:	a0 91 f7 03 	lds	r26, 0x03F7	; 0x8003f7 <soc+0x2>
    1bc0:	b0 91 f8 03 	lds	r27, 0x03F8	; 0x8003f8 <soc+0x3>
    1bc4:	80 93 f1 03 	sts	0x03F1, r24	; 0x8003f1 <prev_soc>
    1bc8:	90 93 f2 03 	sts	0x03F2, r25	; 0x8003f2 <prev_soc+0x1>
    1bcc:	a0 93 f3 03 	sts	0x03F3, r26	; 0x8003f3 <prev_soc+0x2>
    1bd0:	b0 93 f4 03 	sts	0x03F4, r27	; 0x8003f4 <prev_soc+0x3>
    1bd4:	78 94       	sei
	
	// Re-enable interrupts
	sei();
    1bd6:	ff 91       	pop	r31
		
}
    1bd8:	ef 91       	pop	r30
    1bda:	bf 91       	pop	r27
    1bdc:	af 91       	pop	r26
    1bde:	9f 91       	pop	r25
    1be0:	8f 91       	pop	r24
    1be2:	7f 91       	pop	r23
    1be4:	6f 91       	pop	r22
    1be6:	5f 91       	pop	r21
    1be8:	4f 91       	pop	r20
    1bea:	3f 91       	pop	r19
    1bec:	2f 91       	pop	r18
    1bee:	0f 90       	pop	r0
    1bf0:	0f be       	out	0x3f, r0	; 63
    1bf2:	0f 90       	pop	r0
    1bf4:	1f 90       	pop	r1
    1bf6:	18 95       	reti

00001bf8 <__vector_25>:
    1bf8:	1f 92       	push	r1

ISR(USART0_RX_vect){
    1bfa:	0f 92       	push	r0
    1bfc:	0f b6       	in	r0, 0x3f	; 63
    1bfe:	0f 92       	push	r0
    1c00:	11 24       	eor	r1, r1
    1c02:	2f 93       	push	r18
    1c04:	3f 93       	push	r19
    1c06:	4f 93       	push	r20
    1c08:	5f 93       	push	r21
    1c0a:	6f 93       	push	r22
    1c0c:	7f 93       	push	r23
    1c0e:	8f 93       	push	r24
    1c10:	9f 93       	push	r25
    1c12:	af 93       	push	r26
    1c14:	bf 93       	push	r27
    1c16:	ef 93       	push	r30
    1c18:	ff 93       	push	r31
	
	cli();
    1c1a:	f8 94       	cli
	
	fake = UART0_getchar();
    1c1c:	c7 de       	rcall	.-626    	; 0x19ac <UART0_getchar>
    1c1e:	80 93 5e 04 	sts	0x045E, r24	; 0x80045e <fake>
	commandDecode(obc_command, telem, mode, state);
    1c22:	20 91 e6 03 	lds	r18, 0x03E6	; 0x8003e6 <state>
    1c26:	40 91 e4 03 	lds	r20, 0x03E4	; 0x8003e4 <__data_end>
    1c2a:	6e e2       	ldi	r22, 0x2E	; 46
    1c2c:	74 e0       	ldi	r23, 0x04	; 4
    1c2e:	89 ef       	ldi	r24, 0xF9	; 249
    1c30:	93 e0       	ldi	r25, 0x03	; 3
    1c32:	31 dc       	rcall	.-1950   	; 0x1496 <commandDecode>
		
	sei();
    1c34:	78 94       	sei
}
    1c36:	ff 91       	pop	r31
    1c38:	ef 91       	pop	r30
    1c3a:	bf 91       	pop	r27
    1c3c:	af 91       	pop	r26
    1c3e:	9f 91       	pop	r25
    1c40:	8f 91       	pop	r24
    1c42:	7f 91       	pop	r23
    1c44:	6f 91       	pop	r22
    1c46:	5f 91       	pop	r21
    1c48:	4f 91       	pop	r20
    1c4a:	3f 91       	pop	r19
    1c4c:	2f 91       	pop	r18
    1c4e:	0f 90       	pop	r0
    1c50:	0f be       	out	0x3f, r0	; 63
    1c52:	0f 90       	pop	r0
    1c54:	1f 90       	pop	r1
    1c56:	18 95       	reti

00001c58 <__vector_12>:

ISR(WDT_vect){
    1c58:	1f 92       	push	r1
    1c5a:	0f 92       	push	r0
    1c5c:	0f b6       	in	r0, 0x3f	; 63
    1c5e:	0f 92       	push	r0
    1c60:	11 24       	eor	r1, r1
    1c62:	2f 93       	push	r18
    1c64:	3f 93       	push	r19
    1c66:	4f 93       	push	r20
    1c68:	5f 93       	push	r21
    1c6a:	6f 93       	push	r22
    1c6c:	7f 93       	push	r23
    1c6e:	8f 93       	push	r24
    1c70:	9f 93       	push	r25
    1c72:	af 93       	push	r26
    1c74:	bf 93       	push	r27
    1c76:	ef 93       	push	r30
    1c78:	ff 93       	push	r31
	cli();
    1c7a:	f8 94       	cli
	WD_init();
    1c7c:	81 de       	rcall	.-766    	; 0x1980 <WD_init>
	sei();
    1c7e:	78 94       	sei
}
    1c80:	ff 91       	pop	r31
    1c82:	ef 91       	pop	r30
    1c84:	bf 91       	pop	r27
    1c86:	af 91       	pop	r26
    1c88:	9f 91       	pop	r25
    1c8a:	8f 91       	pop	r24
    1c8c:	7f 91       	pop	r23
    1c8e:	6f 91       	pop	r22
    1c90:	5f 91       	pop	r21
    1c92:	4f 91       	pop	r20
    1c94:	3f 91       	pop	r19
    1c96:	2f 91       	pop	r18
    1c98:	0f 90       	pop	r0
    1c9a:	0f be       	out	0x3f, r0	; 63
    1c9c:	0f 90       	pop	r0
    1c9e:	1f 90       	pop	r1
    1ca0:	18 95       	reti

00001ca2 <main>:

int main(void){
	
	ALL_init();
    1ca2:	76 de       	rcall	.-788    	; 0x1990 <ALL_init>
	
	// Disable Interrupts upon start
	cli();
    1ca4:	f8 94       	cli
	
	UART0_putstring("I have been reset");
    1ca6:	81 ed       	ldi	r24, 0xD1	; 209
    1ca8:	93 e0       	ldi	r25, 0x03	; 3
    1caa:	88 de       	rcall	.-752    	; 0x19bc <UART0_putstring>
	
	launch_state();
    1cac:	0e 94 90 05 	call	0xb20	; 0xb20 <launch_state>
	
	// Update power state matrix
	pwrMatInit(pwrMat);
    1cb0:	8d e0       	ldi	r24, 0x0D	; 13
    1cb2:	94 e0       	ldi	r25, 0x04	; 4
    1cb4:	48 d8       	rcall	.-3952   	; 0xd46 <pwrMatInit>
	
	//****** RE-Enable ******//
	sei();
    1cb6:	78 94       	sei
    1cb8:	ff cf       	rjmp	.-2      	; 0x1cb8 <main+0x16>

00001cba <__subsf3>:
    1cba:	50 58       	subi	r21, 0x80	; 128

00001cbc <__addsf3>:
    1cbc:	bb 27       	eor	r27, r27
    1cbe:	aa 27       	eor	r26, r26
    1cc0:	0e d0       	rcall	.+28     	; 0x1cde <__addsf3x>
    1cc2:	44 c1       	rjmp	.+648    	; 0x1f4c <__fp_round>
    1cc4:	35 d1       	rcall	.+618    	; 0x1f30 <__fp_pscA>
    1cc6:	30 f0       	brcs	.+12     	; 0x1cd4 <__addsf3+0x18>
    1cc8:	3a d1       	rcall	.+628    	; 0x1f3e <__fp_pscB>
    1cca:	20 f0       	brcs	.+8      	; 0x1cd4 <__addsf3+0x18>
    1ccc:	31 f4       	brne	.+12     	; 0x1cda <__addsf3+0x1e>
    1cce:	9f 3f       	cpi	r25, 0xFF	; 255
    1cd0:	11 f4       	brne	.+4      	; 0x1cd6 <__addsf3+0x1a>
    1cd2:	1e f4       	brtc	.+6      	; 0x1cda <__addsf3+0x1e>
    1cd4:	2a c1       	rjmp	.+596    	; 0x1f2a <__fp_nan>
    1cd6:	0e f4       	brtc	.+2      	; 0x1cda <__addsf3+0x1e>
    1cd8:	e0 95       	com	r30
    1cda:	e7 fb       	bst	r30, 7
    1cdc:	20 c1       	rjmp	.+576    	; 0x1f1e <__fp_inf>

00001cde <__addsf3x>:
    1cde:	e9 2f       	mov	r30, r25
    1ce0:	46 d1       	rcall	.+652    	; 0x1f6e <__fp_split3>
    1ce2:	80 f3       	brcs	.-32     	; 0x1cc4 <__addsf3+0x8>
    1ce4:	ba 17       	cp	r27, r26
    1ce6:	62 07       	cpc	r22, r18
    1ce8:	73 07       	cpc	r23, r19
    1cea:	84 07       	cpc	r24, r20
    1cec:	95 07       	cpc	r25, r21
    1cee:	18 f0       	brcs	.+6      	; 0x1cf6 <__addsf3x+0x18>
    1cf0:	71 f4       	brne	.+28     	; 0x1d0e <__addsf3x+0x30>
    1cf2:	9e f5       	brtc	.+102    	; 0x1d5a <__addsf3x+0x7c>
    1cf4:	5e c1       	rjmp	.+700    	; 0x1fb2 <__fp_zero>
    1cf6:	0e f4       	brtc	.+2      	; 0x1cfa <__addsf3x+0x1c>
    1cf8:	e0 95       	com	r30
    1cfa:	0b 2e       	mov	r0, r27
    1cfc:	ba 2f       	mov	r27, r26
    1cfe:	a0 2d       	mov	r26, r0
    1d00:	0b 01       	movw	r0, r22
    1d02:	b9 01       	movw	r22, r18
    1d04:	90 01       	movw	r18, r0
    1d06:	0c 01       	movw	r0, r24
    1d08:	ca 01       	movw	r24, r20
    1d0a:	a0 01       	movw	r20, r0
    1d0c:	11 24       	eor	r1, r1
    1d0e:	ff 27       	eor	r31, r31
    1d10:	59 1b       	sub	r21, r25
    1d12:	99 f0       	breq	.+38     	; 0x1d3a <__addsf3x+0x5c>
    1d14:	59 3f       	cpi	r21, 0xF9	; 249
    1d16:	50 f4       	brcc	.+20     	; 0x1d2c <__addsf3x+0x4e>
    1d18:	50 3e       	cpi	r21, 0xE0	; 224
    1d1a:	68 f1       	brcs	.+90     	; 0x1d76 <__addsf3x+0x98>
    1d1c:	1a 16       	cp	r1, r26
    1d1e:	f0 40       	sbci	r31, 0x00	; 0
    1d20:	a2 2f       	mov	r26, r18
    1d22:	23 2f       	mov	r18, r19
    1d24:	34 2f       	mov	r19, r20
    1d26:	44 27       	eor	r20, r20
    1d28:	58 5f       	subi	r21, 0xF8	; 248
    1d2a:	f3 cf       	rjmp	.-26     	; 0x1d12 <__addsf3x+0x34>
    1d2c:	46 95       	lsr	r20
    1d2e:	37 95       	ror	r19
    1d30:	27 95       	ror	r18
    1d32:	a7 95       	ror	r26
    1d34:	f0 40       	sbci	r31, 0x00	; 0
    1d36:	53 95       	inc	r21
    1d38:	c9 f7       	brne	.-14     	; 0x1d2c <__addsf3x+0x4e>
    1d3a:	7e f4       	brtc	.+30     	; 0x1d5a <__addsf3x+0x7c>
    1d3c:	1f 16       	cp	r1, r31
    1d3e:	ba 0b       	sbc	r27, r26
    1d40:	62 0b       	sbc	r22, r18
    1d42:	73 0b       	sbc	r23, r19
    1d44:	84 0b       	sbc	r24, r20
    1d46:	ba f0       	brmi	.+46     	; 0x1d76 <__addsf3x+0x98>
    1d48:	91 50       	subi	r25, 0x01	; 1
    1d4a:	a1 f0       	breq	.+40     	; 0x1d74 <__addsf3x+0x96>
    1d4c:	ff 0f       	add	r31, r31
    1d4e:	bb 1f       	adc	r27, r27
    1d50:	66 1f       	adc	r22, r22
    1d52:	77 1f       	adc	r23, r23
    1d54:	88 1f       	adc	r24, r24
    1d56:	c2 f7       	brpl	.-16     	; 0x1d48 <__addsf3x+0x6a>
    1d58:	0e c0       	rjmp	.+28     	; 0x1d76 <__addsf3x+0x98>
    1d5a:	ba 0f       	add	r27, r26
    1d5c:	62 1f       	adc	r22, r18
    1d5e:	73 1f       	adc	r23, r19
    1d60:	84 1f       	adc	r24, r20
    1d62:	48 f4       	brcc	.+18     	; 0x1d76 <__addsf3x+0x98>
    1d64:	87 95       	ror	r24
    1d66:	77 95       	ror	r23
    1d68:	67 95       	ror	r22
    1d6a:	b7 95       	ror	r27
    1d6c:	f7 95       	ror	r31
    1d6e:	9e 3f       	cpi	r25, 0xFE	; 254
    1d70:	08 f0       	brcs	.+2      	; 0x1d74 <__addsf3x+0x96>
    1d72:	b3 cf       	rjmp	.-154    	; 0x1cda <__addsf3+0x1e>
    1d74:	93 95       	inc	r25
    1d76:	88 0f       	add	r24, r24
    1d78:	08 f0       	brcs	.+2      	; 0x1d7c <__addsf3x+0x9e>
    1d7a:	99 27       	eor	r25, r25
    1d7c:	ee 0f       	add	r30, r30
    1d7e:	97 95       	ror	r25
    1d80:	87 95       	ror	r24
    1d82:	08 95       	ret

00001d84 <__cmpsf2>:
    1d84:	a8 d0       	rcall	.+336    	; 0x1ed6 <__fp_cmp>
    1d86:	08 f4       	brcc	.+2      	; 0x1d8a <__cmpsf2+0x6>
    1d88:	81 e0       	ldi	r24, 0x01	; 1
    1d8a:	08 95       	ret

00001d8c <__divsf3>:
    1d8c:	0c d0       	rcall	.+24     	; 0x1da6 <__divsf3x>
    1d8e:	de c0       	rjmp	.+444    	; 0x1f4c <__fp_round>
    1d90:	d6 d0       	rcall	.+428    	; 0x1f3e <__fp_pscB>
    1d92:	40 f0       	brcs	.+16     	; 0x1da4 <__divsf3+0x18>
    1d94:	cd d0       	rcall	.+410    	; 0x1f30 <__fp_pscA>
    1d96:	30 f0       	brcs	.+12     	; 0x1da4 <__divsf3+0x18>
    1d98:	21 f4       	brne	.+8      	; 0x1da2 <__divsf3+0x16>
    1d9a:	5f 3f       	cpi	r21, 0xFF	; 255
    1d9c:	19 f0       	breq	.+6      	; 0x1da4 <__divsf3+0x18>
    1d9e:	bf c0       	rjmp	.+382    	; 0x1f1e <__fp_inf>
    1da0:	51 11       	cpse	r21, r1
    1da2:	08 c1       	rjmp	.+528    	; 0x1fb4 <__fp_szero>
    1da4:	c2 c0       	rjmp	.+388    	; 0x1f2a <__fp_nan>

00001da6 <__divsf3x>:
    1da6:	e3 d0       	rcall	.+454    	; 0x1f6e <__fp_split3>
    1da8:	98 f3       	brcs	.-26     	; 0x1d90 <__divsf3+0x4>

00001daa <__divsf3_pse>:
    1daa:	99 23       	and	r25, r25
    1dac:	c9 f3       	breq	.-14     	; 0x1da0 <__divsf3+0x14>
    1dae:	55 23       	and	r21, r21
    1db0:	b1 f3       	breq	.-20     	; 0x1d9e <__divsf3+0x12>
    1db2:	95 1b       	sub	r25, r21
    1db4:	55 0b       	sbc	r21, r21
    1db6:	bb 27       	eor	r27, r27
    1db8:	aa 27       	eor	r26, r26
    1dba:	62 17       	cp	r22, r18
    1dbc:	73 07       	cpc	r23, r19
    1dbe:	84 07       	cpc	r24, r20
    1dc0:	38 f0       	brcs	.+14     	; 0x1dd0 <__divsf3_pse+0x26>
    1dc2:	9f 5f       	subi	r25, 0xFF	; 255
    1dc4:	5f 4f       	sbci	r21, 0xFF	; 255
    1dc6:	22 0f       	add	r18, r18
    1dc8:	33 1f       	adc	r19, r19
    1dca:	44 1f       	adc	r20, r20
    1dcc:	aa 1f       	adc	r26, r26
    1dce:	a9 f3       	breq	.-22     	; 0x1dba <__divsf3_pse+0x10>
    1dd0:	33 d0       	rcall	.+102    	; 0x1e38 <__divsf3_pse+0x8e>
    1dd2:	0e 2e       	mov	r0, r30
    1dd4:	3a f0       	brmi	.+14     	; 0x1de4 <__divsf3_pse+0x3a>
    1dd6:	e0 e8       	ldi	r30, 0x80	; 128
    1dd8:	30 d0       	rcall	.+96     	; 0x1e3a <__divsf3_pse+0x90>
    1dda:	91 50       	subi	r25, 0x01	; 1
    1ddc:	50 40       	sbci	r21, 0x00	; 0
    1dde:	e6 95       	lsr	r30
    1de0:	00 1c       	adc	r0, r0
    1de2:	ca f7       	brpl	.-14     	; 0x1dd6 <__divsf3_pse+0x2c>
    1de4:	29 d0       	rcall	.+82     	; 0x1e38 <__divsf3_pse+0x8e>
    1de6:	fe 2f       	mov	r31, r30
    1de8:	27 d0       	rcall	.+78     	; 0x1e38 <__divsf3_pse+0x8e>
    1dea:	66 0f       	add	r22, r22
    1dec:	77 1f       	adc	r23, r23
    1dee:	88 1f       	adc	r24, r24
    1df0:	bb 1f       	adc	r27, r27
    1df2:	26 17       	cp	r18, r22
    1df4:	37 07       	cpc	r19, r23
    1df6:	48 07       	cpc	r20, r24
    1df8:	ab 07       	cpc	r26, r27
    1dfa:	b0 e8       	ldi	r27, 0x80	; 128
    1dfc:	09 f0       	breq	.+2      	; 0x1e00 <__divsf3_pse+0x56>
    1dfe:	bb 0b       	sbc	r27, r27
    1e00:	80 2d       	mov	r24, r0
    1e02:	bf 01       	movw	r22, r30
    1e04:	ff 27       	eor	r31, r31
    1e06:	93 58       	subi	r25, 0x83	; 131
    1e08:	5f 4f       	sbci	r21, 0xFF	; 255
    1e0a:	2a f0       	brmi	.+10     	; 0x1e16 <__divsf3_pse+0x6c>
    1e0c:	9e 3f       	cpi	r25, 0xFE	; 254
    1e0e:	51 05       	cpc	r21, r1
    1e10:	68 f0       	brcs	.+26     	; 0x1e2c <__divsf3_pse+0x82>
    1e12:	85 c0       	rjmp	.+266    	; 0x1f1e <__fp_inf>
    1e14:	cf c0       	rjmp	.+414    	; 0x1fb4 <__fp_szero>
    1e16:	5f 3f       	cpi	r21, 0xFF	; 255
    1e18:	ec f3       	brlt	.-6      	; 0x1e14 <__divsf3_pse+0x6a>
    1e1a:	98 3e       	cpi	r25, 0xE8	; 232
    1e1c:	dc f3       	brlt	.-10     	; 0x1e14 <__divsf3_pse+0x6a>
    1e1e:	86 95       	lsr	r24
    1e20:	77 95       	ror	r23
    1e22:	67 95       	ror	r22
    1e24:	b7 95       	ror	r27
    1e26:	f7 95       	ror	r31
    1e28:	9f 5f       	subi	r25, 0xFF	; 255
    1e2a:	c9 f7       	brne	.-14     	; 0x1e1e <__divsf3_pse+0x74>
    1e2c:	88 0f       	add	r24, r24
    1e2e:	91 1d       	adc	r25, r1
    1e30:	96 95       	lsr	r25
    1e32:	87 95       	ror	r24
    1e34:	97 f9       	bld	r25, 7
    1e36:	08 95       	ret
    1e38:	e1 e0       	ldi	r30, 0x01	; 1
    1e3a:	66 0f       	add	r22, r22
    1e3c:	77 1f       	adc	r23, r23
    1e3e:	88 1f       	adc	r24, r24
    1e40:	bb 1f       	adc	r27, r27
    1e42:	62 17       	cp	r22, r18
    1e44:	73 07       	cpc	r23, r19
    1e46:	84 07       	cpc	r24, r20
    1e48:	ba 07       	cpc	r27, r26
    1e4a:	20 f0       	brcs	.+8      	; 0x1e54 <__divsf3_pse+0xaa>
    1e4c:	62 1b       	sub	r22, r18
    1e4e:	73 0b       	sbc	r23, r19
    1e50:	84 0b       	sbc	r24, r20
    1e52:	ba 0b       	sbc	r27, r26
    1e54:	ee 1f       	adc	r30, r30
    1e56:	88 f7       	brcc	.-30     	; 0x1e3a <__divsf3_pse+0x90>
    1e58:	e0 95       	com	r30
    1e5a:	08 95       	ret

00001e5c <__floatunsisf>:
    1e5c:	e8 94       	clt
    1e5e:	09 c0       	rjmp	.+18     	; 0x1e72 <__floatsisf+0x12>

00001e60 <__floatsisf>:
    1e60:	97 fb       	bst	r25, 7
    1e62:	3e f4       	brtc	.+14     	; 0x1e72 <__floatsisf+0x12>
    1e64:	90 95       	com	r25
    1e66:	80 95       	com	r24
    1e68:	70 95       	com	r23
    1e6a:	61 95       	neg	r22
    1e6c:	7f 4f       	sbci	r23, 0xFF	; 255
    1e6e:	8f 4f       	sbci	r24, 0xFF	; 255
    1e70:	9f 4f       	sbci	r25, 0xFF	; 255
    1e72:	99 23       	and	r25, r25
    1e74:	a9 f0       	breq	.+42     	; 0x1ea0 <__floatsisf+0x40>
    1e76:	f9 2f       	mov	r31, r25
    1e78:	96 e9       	ldi	r25, 0x96	; 150
    1e7a:	bb 27       	eor	r27, r27
    1e7c:	93 95       	inc	r25
    1e7e:	f6 95       	lsr	r31
    1e80:	87 95       	ror	r24
    1e82:	77 95       	ror	r23
    1e84:	67 95       	ror	r22
    1e86:	b7 95       	ror	r27
    1e88:	f1 11       	cpse	r31, r1
    1e8a:	f8 cf       	rjmp	.-16     	; 0x1e7c <__floatsisf+0x1c>
    1e8c:	fa f4       	brpl	.+62     	; 0x1ecc <__floatsisf+0x6c>
    1e8e:	bb 0f       	add	r27, r27
    1e90:	11 f4       	brne	.+4      	; 0x1e96 <__floatsisf+0x36>
    1e92:	60 ff       	sbrs	r22, 0
    1e94:	1b c0       	rjmp	.+54     	; 0x1ecc <__floatsisf+0x6c>
    1e96:	6f 5f       	subi	r22, 0xFF	; 255
    1e98:	7f 4f       	sbci	r23, 0xFF	; 255
    1e9a:	8f 4f       	sbci	r24, 0xFF	; 255
    1e9c:	9f 4f       	sbci	r25, 0xFF	; 255
    1e9e:	16 c0       	rjmp	.+44     	; 0x1ecc <__floatsisf+0x6c>
    1ea0:	88 23       	and	r24, r24
    1ea2:	11 f0       	breq	.+4      	; 0x1ea8 <__floatsisf+0x48>
    1ea4:	96 e9       	ldi	r25, 0x96	; 150
    1ea6:	11 c0       	rjmp	.+34     	; 0x1eca <__floatsisf+0x6a>
    1ea8:	77 23       	and	r23, r23
    1eaa:	21 f0       	breq	.+8      	; 0x1eb4 <__floatsisf+0x54>
    1eac:	9e e8       	ldi	r25, 0x8E	; 142
    1eae:	87 2f       	mov	r24, r23
    1eb0:	76 2f       	mov	r23, r22
    1eb2:	05 c0       	rjmp	.+10     	; 0x1ebe <__floatsisf+0x5e>
    1eb4:	66 23       	and	r22, r22
    1eb6:	71 f0       	breq	.+28     	; 0x1ed4 <__floatsisf+0x74>
    1eb8:	96 e8       	ldi	r25, 0x86	; 134
    1eba:	86 2f       	mov	r24, r22
    1ebc:	70 e0       	ldi	r23, 0x00	; 0
    1ebe:	60 e0       	ldi	r22, 0x00	; 0
    1ec0:	2a f0       	brmi	.+10     	; 0x1ecc <__floatsisf+0x6c>
    1ec2:	9a 95       	dec	r25
    1ec4:	66 0f       	add	r22, r22
    1ec6:	77 1f       	adc	r23, r23
    1ec8:	88 1f       	adc	r24, r24
    1eca:	da f7       	brpl	.-10     	; 0x1ec2 <__floatsisf+0x62>
    1ecc:	88 0f       	add	r24, r24
    1ece:	96 95       	lsr	r25
    1ed0:	87 95       	ror	r24
    1ed2:	97 f9       	bld	r25, 7
    1ed4:	08 95       	ret

00001ed6 <__fp_cmp>:
    1ed6:	99 0f       	add	r25, r25
    1ed8:	00 08       	sbc	r0, r0
    1eda:	55 0f       	add	r21, r21
    1edc:	aa 0b       	sbc	r26, r26
    1ede:	e0 e8       	ldi	r30, 0x80	; 128
    1ee0:	fe ef       	ldi	r31, 0xFE	; 254
    1ee2:	16 16       	cp	r1, r22
    1ee4:	17 06       	cpc	r1, r23
    1ee6:	e8 07       	cpc	r30, r24
    1ee8:	f9 07       	cpc	r31, r25
    1eea:	c0 f0       	brcs	.+48     	; 0x1f1c <__fp_cmp+0x46>
    1eec:	12 16       	cp	r1, r18
    1eee:	13 06       	cpc	r1, r19
    1ef0:	e4 07       	cpc	r30, r20
    1ef2:	f5 07       	cpc	r31, r21
    1ef4:	98 f0       	brcs	.+38     	; 0x1f1c <__fp_cmp+0x46>
    1ef6:	62 1b       	sub	r22, r18
    1ef8:	73 0b       	sbc	r23, r19
    1efa:	84 0b       	sbc	r24, r20
    1efc:	95 0b       	sbc	r25, r21
    1efe:	39 f4       	brne	.+14     	; 0x1f0e <__fp_cmp+0x38>
    1f00:	0a 26       	eor	r0, r26
    1f02:	61 f0       	breq	.+24     	; 0x1f1c <__fp_cmp+0x46>
    1f04:	23 2b       	or	r18, r19
    1f06:	24 2b       	or	r18, r20
    1f08:	25 2b       	or	r18, r21
    1f0a:	21 f4       	brne	.+8      	; 0x1f14 <__fp_cmp+0x3e>
    1f0c:	08 95       	ret
    1f0e:	0a 26       	eor	r0, r26
    1f10:	09 f4       	brne	.+2      	; 0x1f14 <__fp_cmp+0x3e>
    1f12:	a1 40       	sbci	r26, 0x01	; 1
    1f14:	a6 95       	lsr	r26
    1f16:	8f ef       	ldi	r24, 0xFF	; 255
    1f18:	81 1d       	adc	r24, r1
    1f1a:	81 1d       	adc	r24, r1
    1f1c:	08 95       	ret

00001f1e <__fp_inf>:
    1f1e:	97 f9       	bld	r25, 7
    1f20:	9f 67       	ori	r25, 0x7F	; 127
    1f22:	80 e8       	ldi	r24, 0x80	; 128
    1f24:	70 e0       	ldi	r23, 0x00	; 0
    1f26:	60 e0       	ldi	r22, 0x00	; 0
    1f28:	08 95       	ret

00001f2a <__fp_nan>:
    1f2a:	9f ef       	ldi	r25, 0xFF	; 255
    1f2c:	80 ec       	ldi	r24, 0xC0	; 192
    1f2e:	08 95       	ret

00001f30 <__fp_pscA>:
    1f30:	00 24       	eor	r0, r0
    1f32:	0a 94       	dec	r0
    1f34:	16 16       	cp	r1, r22
    1f36:	17 06       	cpc	r1, r23
    1f38:	18 06       	cpc	r1, r24
    1f3a:	09 06       	cpc	r0, r25
    1f3c:	08 95       	ret

00001f3e <__fp_pscB>:
    1f3e:	00 24       	eor	r0, r0
    1f40:	0a 94       	dec	r0
    1f42:	12 16       	cp	r1, r18
    1f44:	13 06       	cpc	r1, r19
    1f46:	14 06       	cpc	r1, r20
    1f48:	05 06       	cpc	r0, r21
    1f4a:	08 95       	ret

00001f4c <__fp_round>:
    1f4c:	09 2e       	mov	r0, r25
    1f4e:	03 94       	inc	r0
    1f50:	00 0c       	add	r0, r0
    1f52:	11 f4       	brne	.+4      	; 0x1f58 <__fp_round+0xc>
    1f54:	88 23       	and	r24, r24
    1f56:	52 f0       	brmi	.+20     	; 0x1f6c <__fp_round+0x20>
    1f58:	bb 0f       	add	r27, r27
    1f5a:	40 f4       	brcc	.+16     	; 0x1f6c <__fp_round+0x20>
    1f5c:	bf 2b       	or	r27, r31
    1f5e:	11 f4       	brne	.+4      	; 0x1f64 <__fp_round+0x18>
    1f60:	60 ff       	sbrs	r22, 0
    1f62:	04 c0       	rjmp	.+8      	; 0x1f6c <__fp_round+0x20>
    1f64:	6f 5f       	subi	r22, 0xFF	; 255
    1f66:	7f 4f       	sbci	r23, 0xFF	; 255
    1f68:	8f 4f       	sbci	r24, 0xFF	; 255
    1f6a:	9f 4f       	sbci	r25, 0xFF	; 255
    1f6c:	08 95       	ret

00001f6e <__fp_split3>:
    1f6e:	57 fd       	sbrc	r21, 7
    1f70:	90 58       	subi	r25, 0x80	; 128
    1f72:	44 0f       	add	r20, r20
    1f74:	55 1f       	adc	r21, r21
    1f76:	59 f0       	breq	.+22     	; 0x1f8e <__fp_splitA+0x10>
    1f78:	5f 3f       	cpi	r21, 0xFF	; 255
    1f7a:	71 f0       	breq	.+28     	; 0x1f98 <__fp_splitA+0x1a>
    1f7c:	47 95       	ror	r20

00001f7e <__fp_splitA>:
    1f7e:	88 0f       	add	r24, r24
    1f80:	97 fb       	bst	r25, 7
    1f82:	99 1f       	adc	r25, r25
    1f84:	61 f0       	breq	.+24     	; 0x1f9e <__fp_splitA+0x20>
    1f86:	9f 3f       	cpi	r25, 0xFF	; 255
    1f88:	79 f0       	breq	.+30     	; 0x1fa8 <__fp_splitA+0x2a>
    1f8a:	87 95       	ror	r24
    1f8c:	08 95       	ret
    1f8e:	12 16       	cp	r1, r18
    1f90:	13 06       	cpc	r1, r19
    1f92:	14 06       	cpc	r1, r20
    1f94:	55 1f       	adc	r21, r21
    1f96:	f2 cf       	rjmp	.-28     	; 0x1f7c <__fp_split3+0xe>
    1f98:	46 95       	lsr	r20
    1f9a:	f1 df       	rcall	.-30     	; 0x1f7e <__fp_splitA>
    1f9c:	08 c0       	rjmp	.+16     	; 0x1fae <__fp_splitA+0x30>
    1f9e:	16 16       	cp	r1, r22
    1fa0:	17 06       	cpc	r1, r23
    1fa2:	18 06       	cpc	r1, r24
    1fa4:	99 1f       	adc	r25, r25
    1fa6:	f1 cf       	rjmp	.-30     	; 0x1f8a <__fp_splitA+0xc>
    1fa8:	86 95       	lsr	r24
    1faa:	71 05       	cpc	r23, r1
    1fac:	61 05       	cpc	r22, r1
    1fae:	08 94       	sec
    1fb0:	08 95       	ret

00001fb2 <__fp_zero>:
    1fb2:	e8 94       	clt

00001fb4 <__fp_szero>:
    1fb4:	bb 27       	eor	r27, r27
    1fb6:	66 27       	eor	r22, r22
    1fb8:	77 27       	eor	r23, r23
    1fba:	cb 01       	movw	r24, r22
    1fbc:	97 f9       	bld	r25, 7
    1fbe:	08 95       	ret

00001fc0 <__gesf2>:
    1fc0:	8a df       	rcall	.-236    	; 0x1ed6 <__fp_cmp>
    1fc2:	08 f4       	brcc	.+2      	; 0x1fc6 <__gesf2+0x6>
    1fc4:	8f ef       	ldi	r24, 0xFF	; 255
    1fc6:	08 95       	ret

00001fc8 <__mulsf3>:
    1fc8:	0b d0       	rcall	.+22     	; 0x1fe0 <__mulsf3x>
    1fca:	c0 cf       	rjmp	.-128    	; 0x1f4c <__fp_round>
    1fcc:	b1 df       	rcall	.-158    	; 0x1f30 <__fp_pscA>
    1fce:	28 f0       	brcs	.+10     	; 0x1fda <__mulsf3+0x12>
    1fd0:	b6 df       	rcall	.-148    	; 0x1f3e <__fp_pscB>
    1fd2:	18 f0       	brcs	.+6      	; 0x1fda <__mulsf3+0x12>
    1fd4:	95 23       	and	r25, r21
    1fd6:	09 f0       	breq	.+2      	; 0x1fda <__mulsf3+0x12>
    1fd8:	a2 cf       	rjmp	.-188    	; 0x1f1e <__fp_inf>
    1fda:	a7 cf       	rjmp	.-178    	; 0x1f2a <__fp_nan>
    1fdc:	11 24       	eor	r1, r1
    1fde:	ea cf       	rjmp	.-44     	; 0x1fb4 <__fp_szero>

00001fe0 <__mulsf3x>:
    1fe0:	c6 df       	rcall	.-116    	; 0x1f6e <__fp_split3>
    1fe2:	a0 f3       	brcs	.-24     	; 0x1fcc <__mulsf3+0x4>

00001fe4 <__mulsf3_pse>:
    1fe4:	95 9f       	mul	r25, r21
    1fe6:	d1 f3       	breq	.-12     	; 0x1fdc <__mulsf3+0x14>
    1fe8:	95 0f       	add	r25, r21
    1fea:	50 e0       	ldi	r21, 0x00	; 0
    1fec:	55 1f       	adc	r21, r21
    1fee:	62 9f       	mul	r22, r18
    1ff0:	f0 01       	movw	r30, r0
    1ff2:	72 9f       	mul	r23, r18
    1ff4:	bb 27       	eor	r27, r27
    1ff6:	f0 0d       	add	r31, r0
    1ff8:	b1 1d       	adc	r27, r1
    1ffa:	63 9f       	mul	r22, r19
    1ffc:	aa 27       	eor	r26, r26
    1ffe:	f0 0d       	add	r31, r0
    2000:	b1 1d       	adc	r27, r1
    2002:	aa 1f       	adc	r26, r26
    2004:	64 9f       	mul	r22, r20
    2006:	66 27       	eor	r22, r22
    2008:	b0 0d       	add	r27, r0
    200a:	a1 1d       	adc	r26, r1
    200c:	66 1f       	adc	r22, r22
    200e:	82 9f       	mul	r24, r18
    2010:	22 27       	eor	r18, r18
    2012:	b0 0d       	add	r27, r0
    2014:	a1 1d       	adc	r26, r1
    2016:	62 1f       	adc	r22, r18
    2018:	73 9f       	mul	r23, r19
    201a:	b0 0d       	add	r27, r0
    201c:	a1 1d       	adc	r26, r1
    201e:	62 1f       	adc	r22, r18
    2020:	83 9f       	mul	r24, r19
    2022:	a0 0d       	add	r26, r0
    2024:	61 1d       	adc	r22, r1
    2026:	22 1f       	adc	r18, r18
    2028:	74 9f       	mul	r23, r20
    202a:	33 27       	eor	r19, r19
    202c:	a0 0d       	add	r26, r0
    202e:	61 1d       	adc	r22, r1
    2030:	23 1f       	adc	r18, r19
    2032:	84 9f       	mul	r24, r20
    2034:	60 0d       	add	r22, r0
    2036:	21 1d       	adc	r18, r1
    2038:	82 2f       	mov	r24, r18
    203a:	76 2f       	mov	r23, r22
    203c:	6a 2f       	mov	r22, r26
    203e:	11 24       	eor	r1, r1
    2040:	9f 57       	subi	r25, 0x7F	; 127
    2042:	50 40       	sbci	r21, 0x00	; 0
    2044:	8a f0       	brmi	.+34     	; 0x2068 <__mulsf3_pse+0x84>
    2046:	e1 f0       	breq	.+56     	; 0x2080 <__mulsf3_pse+0x9c>
    2048:	88 23       	and	r24, r24
    204a:	4a f0       	brmi	.+18     	; 0x205e <__mulsf3_pse+0x7a>
    204c:	ee 0f       	add	r30, r30
    204e:	ff 1f       	adc	r31, r31
    2050:	bb 1f       	adc	r27, r27
    2052:	66 1f       	adc	r22, r22
    2054:	77 1f       	adc	r23, r23
    2056:	88 1f       	adc	r24, r24
    2058:	91 50       	subi	r25, 0x01	; 1
    205a:	50 40       	sbci	r21, 0x00	; 0
    205c:	a9 f7       	brne	.-22     	; 0x2048 <__mulsf3_pse+0x64>
    205e:	9e 3f       	cpi	r25, 0xFE	; 254
    2060:	51 05       	cpc	r21, r1
    2062:	70 f0       	brcs	.+28     	; 0x2080 <__mulsf3_pse+0x9c>
    2064:	5c cf       	rjmp	.-328    	; 0x1f1e <__fp_inf>
    2066:	a6 cf       	rjmp	.-180    	; 0x1fb4 <__fp_szero>
    2068:	5f 3f       	cpi	r21, 0xFF	; 255
    206a:	ec f3       	brlt	.-6      	; 0x2066 <__mulsf3_pse+0x82>
    206c:	98 3e       	cpi	r25, 0xE8	; 232
    206e:	dc f3       	brlt	.-10     	; 0x2066 <__mulsf3_pse+0x82>
    2070:	86 95       	lsr	r24
    2072:	77 95       	ror	r23
    2074:	67 95       	ror	r22
    2076:	b7 95       	ror	r27
    2078:	f7 95       	ror	r31
    207a:	e7 95       	ror	r30
    207c:	9f 5f       	subi	r25, 0xFF	; 255
    207e:	c1 f7       	brne	.-16     	; 0x2070 <__mulsf3_pse+0x8c>
    2080:	fe 2b       	or	r31, r30
    2082:	88 0f       	add	r24, r24
    2084:	91 1d       	adc	r25, r1
    2086:	96 95       	lsr	r25
    2088:	87 95       	ror	r24
    208a:	97 f9       	bld	r25, 7
    208c:	08 95       	ret

0000208e <vfprintf>:
    208e:	a0 e1       	ldi	r26, 0x10	; 16
    2090:	b0 e0       	ldi	r27, 0x00	; 0
    2092:	ec e4       	ldi	r30, 0x4C	; 76
    2094:	f0 e1       	ldi	r31, 0x10	; 16
    2096:	59 c3       	rjmp	.+1714   	; 0x274a <__prologue_saves__>
    2098:	7c 01       	movw	r14, r24
    209a:	1b 01       	movw	r2, r22
    209c:	6a 01       	movw	r12, r20
    209e:	fc 01       	movw	r30, r24
    20a0:	17 82       	std	Z+7, r1	; 0x07
    20a2:	16 82       	std	Z+6, r1	; 0x06
    20a4:	83 81       	ldd	r24, Z+3	; 0x03
    20a6:	81 ff       	sbrs	r24, 1
    20a8:	2a c3       	rjmp	.+1620   	; 0x26fe <__stack+0x4ff>
    20aa:	9e 01       	movw	r18, r28
    20ac:	2f 5f       	subi	r18, 0xFF	; 255
    20ae:	3f 4f       	sbci	r19, 0xFF	; 255
    20b0:	39 01       	movw	r6, r18
    20b2:	f7 01       	movw	r30, r14
    20b4:	93 81       	ldd	r25, Z+3	; 0x03
    20b6:	f1 01       	movw	r30, r2
    20b8:	93 fd       	sbrc	r25, 3
    20ba:	85 91       	lpm	r24, Z+
    20bc:	93 ff       	sbrs	r25, 3
    20be:	81 91       	ld	r24, Z+
    20c0:	1f 01       	movw	r2, r30
    20c2:	88 23       	and	r24, r24
    20c4:	09 f4       	brne	.+2      	; 0x20c8 <vfprintf+0x3a>
    20c6:	17 c3       	rjmp	.+1582   	; 0x26f6 <__stack+0x4f7>
    20c8:	85 32       	cpi	r24, 0x25	; 37
    20ca:	39 f4       	brne	.+14     	; 0x20da <vfprintf+0x4c>
    20cc:	93 fd       	sbrc	r25, 3
    20ce:	85 91       	lpm	r24, Z+
    20d0:	93 ff       	sbrs	r25, 3
    20d2:	81 91       	ld	r24, Z+
    20d4:	1f 01       	movw	r2, r30
    20d6:	85 32       	cpi	r24, 0x25	; 37
    20d8:	31 f4       	brne	.+12     	; 0x20e6 <vfprintf+0x58>
    20da:	b7 01       	movw	r22, r14
    20dc:	90 e0       	ldi	r25, 0x00	; 0
    20de:	6e d4       	rcall	.+2268   	; 0x29bc <fputc>
    20e0:	56 01       	movw	r10, r12
    20e2:	65 01       	movw	r12, r10
    20e4:	e6 cf       	rjmp	.-52     	; 0x20b2 <vfprintf+0x24>
    20e6:	10 e0       	ldi	r17, 0x00	; 0
    20e8:	51 2c       	mov	r5, r1
    20ea:	91 2c       	mov	r9, r1
    20ec:	ff e1       	ldi	r31, 0x1F	; 31
    20ee:	f9 15       	cp	r31, r9
    20f0:	d8 f0       	brcs	.+54     	; 0x2128 <vfprintf+0x9a>
    20f2:	8b 32       	cpi	r24, 0x2B	; 43
    20f4:	79 f0       	breq	.+30     	; 0x2114 <vfprintf+0x86>
    20f6:	38 f4       	brcc	.+14     	; 0x2106 <vfprintf+0x78>
    20f8:	80 32       	cpi	r24, 0x20	; 32
    20fa:	79 f0       	breq	.+30     	; 0x211a <vfprintf+0x8c>
    20fc:	83 32       	cpi	r24, 0x23	; 35
    20fe:	a1 f4       	brne	.+40     	; 0x2128 <vfprintf+0x9a>
    2100:	f9 2d       	mov	r31, r9
    2102:	f0 61       	ori	r31, 0x10	; 16
    2104:	2e c0       	rjmp	.+92     	; 0x2162 <vfprintf+0xd4>
    2106:	8d 32       	cpi	r24, 0x2D	; 45
    2108:	61 f0       	breq	.+24     	; 0x2122 <vfprintf+0x94>
    210a:	80 33       	cpi	r24, 0x30	; 48
    210c:	69 f4       	brne	.+26     	; 0x2128 <vfprintf+0x9a>
    210e:	29 2d       	mov	r18, r9
    2110:	21 60       	ori	r18, 0x01	; 1
    2112:	2d c0       	rjmp	.+90     	; 0x216e <vfprintf+0xe0>
    2114:	39 2d       	mov	r19, r9
    2116:	32 60       	ori	r19, 0x02	; 2
    2118:	93 2e       	mov	r9, r19
    211a:	89 2d       	mov	r24, r9
    211c:	84 60       	ori	r24, 0x04	; 4
    211e:	98 2e       	mov	r9, r24
    2120:	2a c0       	rjmp	.+84     	; 0x2176 <vfprintf+0xe8>
    2122:	e9 2d       	mov	r30, r9
    2124:	e8 60       	ori	r30, 0x08	; 8
    2126:	15 c0       	rjmp	.+42     	; 0x2152 <vfprintf+0xc4>
    2128:	97 fc       	sbrc	r9, 7
    212a:	2d c0       	rjmp	.+90     	; 0x2186 <vfprintf+0xf8>
    212c:	20 ed       	ldi	r18, 0xD0	; 208
    212e:	28 0f       	add	r18, r24
    2130:	2a 30       	cpi	r18, 0x0A	; 10
    2132:	88 f4       	brcc	.+34     	; 0x2156 <vfprintf+0xc8>
    2134:	96 fe       	sbrs	r9, 6
    2136:	06 c0       	rjmp	.+12     	; 0x2144 <vfprintf+0xb6>
    2138:	3a e0       	ldi	r19, 0x0A	; 10
    213a:	13 9f       	mul	r17, r19
    213c:	20 0d       	add	r18, r0
    213e:	11 24       	eor	r1, r1
    2140:	12 2f       	mov	r17, r18
    2142:	19 c0       	rjmp	.+50     	; 0x2176 <vfprintf+0xe8>
    2144:	8a e0       	ldi	r24, 0x0A	; 10
    2146:	58 9e       	mul	r5, r24
    2148:	20 0d       	add	r18, r0
    214a:	11 24       	eor	r1, r1
    214c:	52 2e       	mov	r5, r18
    214e:	e9 2d       	mov	r30, r9
    2150:	e0 62       	ori	r30, 0x20	; 32
    2152:	9e 2e       	mov	r9, r30
    2154:	10 c0       	rjmp	.+32     	; 0x2176 <vfprintf+0xe8>
    2156:	8e 32       	cpi	r24, 0x2E	; 46
    2158:	31 f4       	brne	.+12     	; 0x2166 <vfprintf+0xd8>
    215a:	96 fc       	sbrc	r9, 6
    215c:	cc c2       	rjmp	.+1432   	; 0x26f6 <__stack+0x4f7>
    215e:	f9 2d       	mov	r31, r9
    2160:	f0 64       	ori	r31, 0x40	; 64
    2162:	9f 2e       	mov	r9, r31
    2164:	08 c0       	rjmp	.+16     	; 0x2176 <vfprintf+0xe8>
    2166:	8c 36       	cpi	r24, 0x6C	; 108
    2168:	21 f4       	brne	.+8      	; 0x2172 <vfprintf+0xe4>
    216a:	29 2d       	mov	r18, r9
    216c:	20 68       	ori	r18, 0x80	; 128
    216e:	92 2e       	mov	r9, r18
    2170:	02 c0       	rjmp	.+4      	; 0x2176 <vfprintf+0xe8>
    2172:	88 36       	cpi	r24, 0x68	; 104
    2174:	41 f4       	brne	.+16     	; 0x2186 <vfprintf+0xf8>
    2176:	f1 01       	movw	r30, r2
    2178:	93 fd       	sbrc	r25, 3
    217a:	85 91       	lpm	r24, Z+
    217c:	93 ff       	sbrs	r25, 3
    217e:	81 91       	ld	r24, Z+
    2180:	1f 01       	movw	r2, r30
    2182:	81 11       	cpse	r24, r1
    2184:	b3 cf       	rjmp	.-154    	; 0x20ec <vfprintf+0x5e>
    2186:	9b eb       	ldi	r25, 0xBB	; 187
    2188:	98 0f       	add	r25, r24
    218a:	93 30       	cpi	r25, 0x03	; 3
    218c:	20 f4       	brcc	.+8      	; 0x2196 <vfprintf+0x108>
    218e:	99 2d       	mov	r25, r9
    2190:	90 61       	ori	r25, 0x10	; 16
    2192:	80 5e       	subi	r24, 0xE0	; 224
    2194:	07 c0       	rjmp	.+14     	; 0x21a4 <vfprintf+0x116>
    2196:	9b e9       	ldi	r25, 0x9B	; 155
    2198:	98 0f       	add	r25, r24
    219a:	93 30       	cpi	r25, 0x03	; 3
    219c:	08 f0       	brcs	.+2      	; 0x21a0 <vfprintf+0x112>
    219e:	59 c1       	rjmp	.+690    	; 0x2452 <__stack+0x253>
    21a0:	99 2d       	mov	r25, r9
    21a2:	9f 7e       	andi	r25, 0xEF	; 239
    21a4:	96 ff       	sbrs	r25, 6
    21a6:	16 e0       	ldi	r17, 0x06	; 6
    21a8:	9f 73       	andi	r25, 0x3F	; 63
    21aa:	99 2e       	mov	r9, r25
    21ac:	85 36       	cpi	r24, 0x65	; 101
    21ae:	19 f4       	brne	.+6      	; 0x21b6 <vfprintf+0x128>
    21b0:	90 64       	ori	r25, 0x40	; 64
    21b2:	99 2e       	mov	r9, r25
    21b4:	08 c0       	rjmp	.+16     	; 0x21c6 <vfprintf+0x138>
    21b6:	86 36       	cpi	r24, 0x66	; 102
    21b8:	21 f4       	brne	.+8      	; 0x21c2 <vfprintf+0x134>
    21ba:	39 2f       	mov	r19, r25
    21bc:	30 68       	ori	r19, 0x80	; 128
    21be:	93 2e       	mov	r9, r19
    21c0:	02 c0       	rjmp	.+4      	; 0x21c6 <vfprintf+0x138>
    21c2:	11 11       	cpse	r17, r1
    21c4:	11 50       	subi	r17, 0x01	; 1
    21c6:	97 fe       	sbrs	r9, 7
    21c8:	07 c0       	rjmp	.+14     	; 0x21d8 <vfprintf+0x14a>
    21ca:	1c 33       	cpi	r17, 0x3C	; 60
    21cc:	50 f4       	brcc	.+20     	; 0x21e2 <vfprintf+0x154>
    21ce:	44 24       	eor	r4, r4
    21d0:	43 94       	inc	r4
    21d2:	41 0e       	add	r4, r17
    21d4:	27 e0       	ldi	r18, 0x07	; 7
    21d6:	0b c0       	rjmp	.+22     	; 0x21ee <vfprintf+0x160>
    21d8:	18 30       	cpi	r17, 0x08	; 8
    21da:	38 f0       	brcs	.+14     	; 0x21ea <vfprintf+0x15c>
    21dc:	27 e0       	ldi	r18, 0x07	; 7
    21de:	17 e0       	ldi	r17, 0x07	; 7
    21e0:	05 c0       	rjmp	.+10     	; 0x21ec <vfprintf+0x15e>
    21e2:	27 e0       	ldi	r18, 0x07	; 7
    21e4:	9c e3       	ldi	r25, 0x3C	; 60
    21e6:	49 2e       	mov	r4, r25
    21e8:	02 c0       	rjmp	.+4      	; 0x21ee <vfprintf+0x160>
    21ea:	21 2f       	mov	r18, r17
    21ec:	41 2c       	mov	r4, r1
    21ee:	56 01       	movw	r10, r12
    21f0:	84 e0       	ldi	r24, 0x04	; 4
    21f2:	a8 0e       	add	r10, r24
    21f4:	b1 1c       	adc	r11, r1
    21f6:	f6 01       	movw	r30, r12
    21f8:	60 81       	ld	r22, Z
    21fa:	71 81       	ldd	r23, Z+1	; 0x01
    21fc:	82 81       	ldd	r24, Z+2	; 0x02
    21fe:	93 81       	ldd	r25, Z+3	; 0x03
    2200:	04 2d       	mov	r16, r4
    2202:	a3 01       	movw	r20, r6
    2204:	d9 d2       	rcall	.+1458   	; 0x27b8 <__ftoa_engine>
    2206:	6c 01       	movw	r12, r24
    2208:	f9 81       	ldd	r31, Y+1	; 0x01
    220a:	fc 87       	std	Y+12, r31	; 0x0c
    220c:	f0 ff       	sbrs	r31, 0
    220e:	02 c0       	rjmp	.+4      	; 0x2214 <__stack+0x15>
    2210:	f3 ff       	sbrs	r31, 3
    2212:	06 c0       	rjmp	.+12     	; 0x2220 <__stack+0x21>
    2214:	91 fc       	sbrc	r9, 1
    2216:	06 c0       	rjmp	.+12     	; 0x2224 <__stack+0x25>
    2218:	92 fe       	sbrs	r9, 2
    221a:	06 c0       	rjmp	.+12     	; 0x2228 <__stack+0x29>
    221c:	00 e2       	ldi	r16, 0x20	; 32
    221e:	05 c0       	rjmp	.+10     	; 0x222a <__stack+0x2b>
    2220:	0d e2       	ldi	r16, 0x2D	; 45
    2222:	03 c0       	rjmp	.+6      	; 0x222a <__stack+0x2b>
    2224:	0b e2       	ldi	r16, 0x2B	; 43
    2226:	01 c0       	rjmp	.+2      	; 0x222a <__stack+0x2b>
    2228:	00 e0       	ldi	r16, 0x00	; 0
    222a:	8c 85       	ldd	r24, Y+12	; 0x0c
    222c:	8c 70       	andi	r24, 0x0C	; 12
    222e:	19 f0       	breq	.+6      	; 0x2236 <__stack+0x37>
    2230:	01 11       	cpse	r16, r1
    2232:	43 c2       	rjmp	.+1158   	; 0x26ba <__stack+0x4bb>
    2234:	80 c2       	rjmp	.+1280   	; 0x2736 <__stack+0x537>
    2236:	97 fe       	sbrs	r9, 7
    2238:	10 c0       	rjmp	.+32     	; 0x225a <__stack+0x5b>
    223a:	4c 0c       	add	r4, r12
    223c:	fc 85       	ldd	r31, Y+12	; 0x0c
    223e:	f4 ff       	sbrs	r31, 4
    2240:	04 c0       	rjmp	.+8      	; 0x224a <__stack+0x4b>
    2242:	8a 81       	ldd	r24, Y+2	; 0x02
    2244:	81 33       	cpi	r24, 0x31	; 49
    2246:	09 f4       	brne	.+2      	; 0x224a <__stack+0x4b>
    2248:	4a 94       	dec	r4
    224a:	14 14       	cp	r1, r4
    224c:	74 f5       	brge	.+92     	; 0x22aa <__stack+0xab>
    224e:	28 e0       	ldi	r18, 0x08	; 8
    2250:	24 15       	cp	r18, r4
    2252:	78 f5       	brcc	.+94     	; 0x22b2 <__stack+0xb3>
    2254:	88 e0       	ldi	r24, 0x08	; 8
    2256:	48 2e       	mov	r4, r24
    2258:	2c c0       	rjmp	.+88     	; 0x22b2 <__stack+0xb3>
    225a:	96 fc       	sbrc	r9, 6
    225c:	2a c0       	rjmp	.+84     	; 0x22b2 <__stack+0xb3>
    225e:	81 2f       	mov	r24, r17
    2260:	90 e0       	ldi	r25, 0x00	; 0
    2262:	8c 15       	cp	r24, r12
    2264:	9d 05       	cpc	r25, r13
    2266:	9c f0       	brlt	.+38     	; 0x228e <__stack+0x8f>
    2268:	3c ef       	ldi	r19, 0xFC	; 252
    226a:	c3 16       	cp	r12, r19
    226c:	3f ef       	ldi	r19, 0xFF	; 255
    226e:	d3 06       	cpc	r13, r19
    2270:	74 f0       	brlt	.+28     	; 0x228e <__stack+0x8f>
    2272:	89 2d       	mov	r24, r9
    2274:	80 68       	ori	r24, 0x80	; 128
    2276:	98 2e       	mov	r9, r24
    2278:	0a c0       	rjmp	.+20     	; 0x228e <__stack+0x8f>
    227a:	e2 e0       	ldi	r30, 0x02	; 2
    227c:	f0 e0       	ldi	r31, 0x00	; 0
    227e:	ec 0f       	add	r30, r28
    2280:	fd 1f       	adc	r31, r29
    2282:	e1 0f       	add	r30, r17
    2284:	f1 1d       	adc	r31, r1
    2286:	80 81       	ld	r24, Z
    2288:	80 33       	cpi	r24, 0x30	; 48
    228a:	19 f4       	brne	.+6      	; 0x2292 <__stack+0x93>
    228c:	11 50       	subi	r17, 0x01	; 1
    228e:	11 11       	cpse	r17, r1
    2290:	f4 cf       	rjmp	.-24     	; 0x227a <__stack+0x7b>
    2292:	97 fe       	sbrs	r9, 7
    2294:	0e c0       	rjmp	.+28     	; 0x22b2 <__stack+0xb3>
    2296:	44 24       	eor	r4, r4
    2298:	43 94       	inc	r4
    229a:	41 0e       	add	r4, r17
    229c:	81 2f       	mov	r24, r17
    229e:	90 e0       	ldi	r25, 0x00	; 0
    22a0:	c8 16       	cp	r12, r24
    22a2:	d9 06       	cpc	r13, r25
    22a4:	2c f4       	brge	.+10     	; 0x22b0 <__stack+0xb1>
    22a6:	1c 19       	sub	r17, r12
    22a8:	04 c0       	rjmp	.+8      	; 0x22b2 <__stack+0xb3>
    22aa:	44 24       	eor	r4, r4
    22ac:	43 94       	inc	r4
    22ae:	01 c0       	rjmp	.+2      	; 0x22b2 <__stack+0xb3>
    22b0:	10 e0       	ldi	r17, 0x00	; 0
    22b2:	97 fe       	sbrs	r9, 7
    22b4:	06 c0       	rjmp	.+12     	; 0x22c2 <__stack+0xc3>
    22b6:	1c 14       	cp	r1, r12
    22b8:	1d 04       	cpc	r1, r13
    22ba:	34 f4       	brge	.+12     	; 0x22c8 <__stack+0xc9>
    22bc:	c6 01       	movw	r24, r12
    22be:	01 96       	adiw	r24, 0x01	; 1
    22c0:	05 c0       	rjmp	.+10     	; 0x22cc <__stack+0xcd>
    22c2:	85 e0       	ldi	r24, 0x05	; 5
    22c4:	90 e0       	ldi	r25, 0x00	; 0
    22c6:	02 c0       	rjmp	.+4      	; 0x22cc <__stack+0xcd>
    22c8:	81 e0       	ldi	r24, 0x01	; 1
    22ca:	90 e0       	ldi	r25, 0x00	; 0
    22cc:	01 11       	cpse	r16, r1
    22ce:	01 96       	adiw	r24, 0x01	; 1
    22d0:	11 23       	and	r17, r17
    22d2:	31 f0       	breq	.+12     	; 0x22e0 <__stack+0xe1>
    22d4:	21 2f       	mov	r18, r17
    22d6:	30 e0       	ldi	r19, 0x00	; 0
    22d8:	2f 5f       	subi	r18, 0xFF	; 255
    22da:	3f 4f       	sbci	r19, 0xFF	; 255
    22dc:	82 0f       	add	r24, r18
    22de:	93 1f       	adc	r25, r19
    22e0:	25 2d       	mov	r18, r5
    22e2:	30 e0       	ldi	r19, 0x00	; 0
    22e4:	82 17       	cp	r24, r18
    22e6:	93 07       	cpc	r25, r19
    22e8:	14 f4       	brge	.+4      	; 0x22ee <__stack+0xef>
    22ea:	58 1a       	sub	r5, r24
    22ec:	01 c0       	rjmp	.+2      	; 0x22f0 <__stack+0xf1>
    22ee:	51 2c       	mov	r5, r1
    22f0:	89 2d       	mov	r24, r9
    22f2:	89 70       	andi	r24, 0x09	; 9
    22f4:	41 f4       	brne	.+16     	; 0x2306 <__stack+0x107>
    22f6:	55 20       	and	r5, r5
    22f8:	31 f0       	breq	.+12     	; 0x2306 <__stack+0x107>
    22fa:	b7 01       	movw	r22, r14
    22fc:	80 e2       	ldi	r24, 0x20	; 32
    22fe:	90 e0       	ldi	r25, 0x00	; 0
    2300:	5d d3       	rcall	.+1722   	; 0x29bc <fputc>
    2302:	5a 94       	dec	r5
    2304:	f8 cf       	rjmp	.-16     	; 0x22f6 <__stack+0xf7>
    2306:	00 23       	and	r16, r16
    2308:	21 f0       	breq	.+8      	; 0x2312 <__stack+0x113>
    230a:	b7 01       	movw	r22, r14
    230c:	80 2f       	mov	r24, r16
    230e:	90 e0       	ldi	r25, 0x00	; 0
    2310:	55 d3       	rcall	.+1706   	; 0x29bc <fputc>
    2312:	93 fc       	sbrc	r9, 3
    2314:	08 c0       	rjmp	.+16     	; 0x2326 <__stack+0x127>
    2316:	55 20       	and	r5, r5
    2318:	31 f0       	breq	.+12     	; 0x2326 <__stack+0x127>
    231a:	b7 01       	movw	r22, r14
    231c:	80 e3       	ldi	r24, 0x30	; 48
    231e:	90 e0       	ldi	r25, 0x00	; 0
    2320:	4d d3       	rcall	.+1690   	; 0x29bc <fputc>
    2322:	5a 94       	dec	r5
    2324:	f8 cf       	rjmp	.-16     	; 0x2316 <__stack+0x117>
    2326:	97 fe       	sbrs	r9, 7
    2328:	4a c0       	rjmp	.+148    	; 0x23be <__stack+0x1bf>
    232a:	46 01       	movw	r8, r12
    232c:	d7 fe       	sbrs	r13, 7
    232e:	02 c0       	rjmp	.+4      	; 0x2334 <__stack+0x135>
    2330:	81 2c       	mov	r8, r1
    2332:	91 2c       	mov	r9, r1
    2334:	c6 01       	movw	r24, r12
    2336:	88 19       	sub	r24, r8
    2338:	99 09       	sbc	r25, r9
    233a:	f3 01       	movw	r30, r6
    233c:	e8 0f       	add	r30, r24
    233e:	f9 1f       	adc	r31, r25
    2340:	fe 87       	std	Y+14, r31	; 0x0e
    2342:	ed 87       	std	Y+13, r30	; 0x0d
    2344:	96 01       	movw	r18, r12
    2346:	24 19       	sub	r18, r4
    2348:	31 09       	sbc	r19, r1
    234a:	38 8b       	std	Y+16, r19	; 0x10
    234c:	2f 87       	std	Y+15, r18	; 0x0f
    234e:	01 2f       	mov	r16, r17
    2350:	10 e0       	ldi	r17, 0x00	; 0
    2352:	11 95       	neg	r17
    2354:	01 95       	neg	r16
    2356:	11 09       	sbc	r17, r1
    2358:	3f ef       	ldi	r19, 0xFF	; 255
    235a:	83 16       	cp	r8, r19
    235c:	93 06       	cpc	r9, r19
    235e:	21 f4       	brne	.+8      	; 0x2368 <__stack+0x169>
    2360:	b7 01       	movw	r22, r14
    2362:	8e e2       	ldi	r24, 0x2E	; 46
    2364:	90 e0       	ldi	r25, 0x00	; 0
    2366:	2a d3       	rcall	.+1620   	; 0x29bc <fputc>
    2368:	c8 14       	cp	r12, r8
    236a:	d9 04       	cpc	r13, r9
    236c:	4c f0       	brlt	.+18     	; 0x2380 <__stack+0x181>
    236e:	8f 85       	ldd	r24, Y+15	; 0x0f
    2370:	98 89       	ldd	r25, Y+16	; 0x10
    2372:	88 15       	cp	r24, r8
    2374:	99 05       	cpc	r25, r9
    2376:	24 f4       	brge	.+8      	; 0x2380 <__stack+0x181>
    2378:	ed 85       	ldd	r30, Y+13	; 0x0d
    237a:	fe 85       	ldd	r31, Y+14	; 0x0e
    237c:	81 81       	ldd	r24, Z+1	; 0x01
    237e:	01 c0       	rjmp	.+2      	; 0x2382 <__stack+0x183>
    2380:	80 e3       	ldi	r24, 0x30	; 48
    2382:	f1 e0       	ldi	r31, 0x01	; 1
    2384:	8f 1a       	sub	r8, r31
    2386:	91 08       	sbc	r9, r1
    2388:	2d 85       	ldd	r18, Y+13	; 0x0d
    238a:	3e 85       	ldd	r19, Y+14	; 0x0e
    238c:	2f 5f       	subi	r18, 0xFF	; 255
    238e:	3f 4f       	sbci	r19, 0xFF	; 255
    2390:	3e 87       	std	Y+14, r19	; 0x0e
    2392:	2d 87       	std	Y+13, r18	; 0x0d
    2394:	80 16       	cp	r8, r16
    2396:	91 06       	cpc	r9, r17
    2398:	24 f0       	brlt	.+8      	; 0x23a2 <__stack+0x1a3>
    239a:	b7 01       	movw	r22, r14
    239c:	90 e0       	ldi	r25, 0x00	; 0
    239e:	0e d3       	rcall	.+1564   	; 0x29bc <fputc>
    23a0:	db cf       	rjmp	.-74     	; 0x2358 <__stack+0x159>
    23a2:	c8 14       	cp	r12, r8
    23a4:	d9 04       	cpc	r13, r9
    23a6:	41 f4       	brne	.+16     	; 0x23b8 <__stack+0x1b9>
    23a8:	9a 81       	ldd	r25, Y+2	; 0x02
    23aa:	96 33       	cpi	r25, 0x36	; 54
    23ac:	20 f4       	brcc	.+8      	; 0x23b6 <__stack+0x1b7>
    23ae:	95 33       	cpi	r25, 0x35	; 53
    23b0:	19 f4       	brne	.+6      	; 0x23b8 <__stack+0x1b9>
    23b2:	3c 85       	ldd	r19, Y+12	; 0x0c
    23b4:	34 ff       	sbrs	r19, 4
    23b6:	81 e3       	ldi	r24, 0x31	; 49
    23b8:	b7 01       	movw	r22, r14
    23ba:	90 e0       	ldi	r25, 0x00	; 0
    23bc:	48 c0       	rjmp	.+144    	; 0x244e <__stack+0x24f>
    23be:	8a 81       	ldd	r24, Y+2	; 0x02
    23c0:	81 33       	cpi	r24, 0x31	; 49
    23c2:	19 f0       	breq	.+6      	; 0x23ca <__stack+0x1cb>
    23c4:	9c 85       	ldd	r25, Y+12	; 0x0c
    23c6:	9f 7e       	andi	r25, 0xEF	; 239
    23c8:	9c 87       	std	Y+12, r25	; 0x0c
    23ca:	b7 01       	movw	r22, r14
    23cc:	90 e0       	ldi	r25, 0x00	; 0
    23ce:	f6 d2       	rcall	.+1516   	; 0x29bc <fputc>
    23d0:	11 11       	cpse	r17, r1
    23d2:	05 c0       	rjmp	.+10     	; 0x23de <__stack+0x1df>
    23d4:	94 fc       	sbrc	r9, 4
    23d6:	16 c0       	rjmp	.+44     	; 0x2404 <__stack+0x205>
    23d8:	85 e6       	ldi	r24, 0x65	; 101
    23da:	90 e0       	ldi	r25, 0x00	; 0
    23dc:	15 c0       	rjmp	.+42     	; 0x2408 <__stack+0x209>
    23de:	b7 01       	movw	r22, r14
    23e0:	8e e2       	ldi	r24, 0x2E	; 46
    23e2:	90 e0       	ldi	r25, 0x00	; 0
    23e4:	eb d2       	rcall	.+1494   	; 0x29bc <fputc>
    23e6:	1e 5f       	subi	r17, 0xFE	; 254
    23e8:	82 e0       	ldi	r24, 0x02	; 2
    23ea:	01 e0       	ldi	r16, 0x01	; 1
    23ec:	08 0f       	add	r16, r24
    23ee:	f3 01       	movw	r30, r6
    23f0:	e8 0f       	add	r30, r24
    23f2:	f1 1d       	adc	r31, r1
    23f4:	80 81       	ld	r24, Z
    23f6:	b7 01       	movw	r22, r14
    23f8:	90 e0       	ldi	r25, 0x00	; 0
    23fa:	e0 d2       	rcall	.+1472   	; 0x29bc <fputc>
    23fc:	80 2f       	mov	r24, r16
    23fe:	01 13       	cpse	r16, r17
    2400:	f4 cf       	rjmp	.-24     	; 0x23ea <__stack+0x1eb>
    2402:	e8 cf       	rjmp	.-48     	; 0x23d4 <__stack+0x1d5>
    2404:	85 e4       	ldi	r24, 0x45	; 69
    2406:	90 e0       	ldi	r25, 0x00	; 0
    2408:	b7 01       	movw	r22, r14
    240a:	d8 d2       	rcall	.+1456   	; 0x29bc <fputc>
    240c:	d7 fc       	sbrc	r13, 7
    240e:	06 c0       	rjmp	.+12     	; 0x241c <__stack+0x21d>
    2410:	c1 14       	cp	r12, r1
    2412:	d1 04       	cpc	r13, r1
    2414:	41 f4       	brne	.+16     	; 0x2426 <__stack+0x227>
    2416:	ec 85       	ldd	r30, Y+12	; 0x0c
    2418:	e4 ff       	sbrs	r30, 4
    241a:	05 c0       	rjmp	.+10     	; 0x2426 <__stack+0x227>
    241c:	d1 94       	neg	r13
    241e:	c1 94       	neg	r12
    2420:	d1 08       	sbc	r13, r1
    2422:	8d e2       	ldi	r24, 0x2D	; 45
    2424:	01 c0       	rjmp	.+2      	; 0x2428 <__stack+0x229>
    2426:	8b e2       	ldi	r24, 0x2B	; 43
    2428:	b7 01       	movw	r22, r14
    242a:	90 e0       	ldi	r25, 0x00	; 0
    242c:	c7 d2       	rcall	.+1422   	; 0x29bc <fputc>
    242e:	80 e3       	ldi	r24, 0x30	; 48
    2430:	2a e0       	ldi	r18, 0x0A	; 10
    2432:	c2 16       	cp	r12, r18
    2434:	d1 04       	cpc	r13, r1
    2436:	2c f0       	brlt	.+10     	; 0x2442 <__stack+0x243>
    2438:	8f 5f       	subi	r24, 0xFF	; 255
    243a:	fa e0       	ldi	r31, 0x0A	; 10
    243c:	cf 1a       	sub	r12, r31
    243e:	d1 08       	sbc	r13, r1
    2440:	f7 cf       	rjmp	.-18     	; 0x2430 <__stack+0x231>
    2442:	b7 01       	movw	r22, r14
    2444:	90 e0       	ldi	r25, 0x00	; 0
    2446:	ba d2       	rcall	.+1396   	; 0x29bc <fputc>
    2448:	b7 01       	movw	r22, r14
    244a:	c6 01       	movw	r24, r12
    244c:	c0 96       	adiw	r24, 0x30	; 48
    244e:	b6 d2       	rcall	.+1388   	; 0x29bc <fputc>
    2450:	49 c1       	rjmp	.+658    	; 0x26e4 <__stack+0x4e5>
    2452:	83 36       	cpi	r24, 0x63	; 99
    2454:	31 f0       	breq	.+12     	; 0x2462 <__stack+0x263>
    2456:	83 37       	cpi	r24, 0x73	; 115
    2458:	79 f0       	breq	.+30     	; 0x2478 <__stack+0x279>
    245a:	83 35       	cpi	r24, 0x53	; 83
    245c:	09 f0       	breq	.+2      	; 0x2460 <__stack+0x261>
    245e:	52 c0       	rjmp	.+164    	; 0x2504 <__stack+0x305>
    2460:	1f c0       	rjmp	.+62     	; 0x24a0 <__stack+0x2a1>
    2462:	56 01       	movw	r10, r12
    2464:	32 e0       	ldi	r19, 0x02	; 2
    2466:	a3 0e       	add	r10, r19
    2468:	b1 1c       	adc	r11, r1
    246a:	f6 01       	movw	r30, r12
    246c:	80 81       	ld	r24, Z
    246e:	89 83       	std	Y+1, r24	; 0x01
    2470:	01 e0       	ldi	r16, 0x01	; 1
    2472:	10 e0       	ldi	r17, 0x00	; 0
    2474:	63 01       	movw	r12, r6
    2476:	11 c0       	rjmp	.+34     	; 0x249a <__stack+0x29b>
    2478:	56 01       	movw	r10, r12
    247a:	f2 e0       	ldi	r31, 0x02	; 2
    247c:	af 0e       	add	r10, r31
    247e:	b1 1c       	adc	r11, r1
    2480:	f6 01       	movw	r30, r12
    2482:	c0 80       	ld	r12, Z
    2484:	d1 80       	ldd	r13, Z+1	; 0x01
    2486:	96 fe       	sbrs	r9, 6
    2488:	03 c0       	rjmp	.+6      	; 0x2490 <__stack+0x291>
    248a:	61 2f       	mov	r22, r17
    248c:	70 e0       	ldi	r23, 0x00	; 0
    248e:	02 c0       	rjmp	.+4      	; 0x2494 <__stack+0x295>
    2490:	6f ef       	ldi	r22, 0xFF	; 255
    2492:	7f ef       	ldi	r23, 0xFF	; 255
    2494:	c6 01       	movw	r24, r12
    2496:	87 d2       	rcall	.+1294   	; 0x29a6 <strnlen>
    2498:	8c 01       	movw	r16, r24
    249a:	f9 2d       	mov	r31, r9
    249c:	ff 77       	andi	r31, 0x7F	; 127
    249e:	13 c0       	rjmp	.+38     	; 0x24c6 <__stack+0x2c7>
    24a0:	56 01       	movw	r10, r12
    24a2:	22 e0       	ldi	r18, 0x02	; 2
    24a4:	a2 0e       	add	r10, r18
    24a6:	b1 1c       	adc	r11, r1
    24a8:	f6 01       	movw	r30, r12
    24aa:	c0 80       	ld	r12, Z
    24ac:	d1 80       	ldd	r13, Z+1	; 0x01
    24ae:	96 fe       	sbrs	r9, 6
    24b0:	03 c0       	rjmp	.+6      	; 0x24b8 <__stack+0x2b9>
    24b2:	61 2f       	mov	r22, r17
    24b4:	70 e0       	ldi	r23, 0x00	; 0
    24b6:	02 c0       	rjmp	.+4      	; 0x24bc <__stack+0x2bd>
    24b8:	6f ef       	ldi	r22, 0xFF	; 255
    24ba:	7f ef       	ldi	r23, 0xFF	; 255
    24bc:	c6 01       	movw	r24, r12
    24be:	54 d2       	rcall	.+1192   	; 0x2968 <strnlen_P>
    24c0:	8c 01       	movw	r16, r24
    24c2:	f9 2d       	mov	r31, r9
    24c4:	f0 68       	ori	r31, 0x80	; 128
    24c6:	9f 2e       	mov	r9, r31
    24c8:	f3 fd       	sbrc	r31, 3
    24ca:	18 c0       	rjmp	.+48     	; 0x24fc <__stack+0x2fd>
    24cc:	85 2d       	mov	r24, r5
    24ce:	90 e0       	ldi	r25, 0x00	; 0
    24d0:	08 17       	cp	r16, r24
    24d2:	19 07       	cpc	r17, r25
    24d4:	98 f4       	brcc	.+38     	; 0x24fc <__stack+0x2fd>
    24d6:	b7 01       	movw	r22, r14
    24d8:	80 e2       	ldi	r24, 0x20	; 32
    24da:	90 e0       	ldi	r25, 0x00	; 0
    24dc:	6f d2       	rcall	.+1246   	; 0x29bc <fputc>
    24de:	5a 94       	dec	r5
    24e0:	f5 cf       	rjmp	.-22     	; 0x24cc <__stack+0x2cd>
    24e2:	f6 01       	movw	r30, r12
    24e4:	97 fc       	sbrc	r9, 7
    24e6:	85 91       	lpm	r24, Z+
    24e8:	97 fe       	sbrs	r9, 7
    24ea:	81 91       	ld	r24, Z+
    24ec:	6f 01       	movw	r12, r30
    24ee:	b7 01       	movw	r22, r14
    24f0:	90 e0       	ldi	r25, 0x00	; 0
    24f2:	64 d2       	rcall	.+1224   	; 0x29bc <fputc>
    24f4:	51 10       	cpse	r5, r1
    24f6:	5a 94       	dec	r5
    24f8:	01 50       	subi	r16, 0x01	; 1
    24fa:	11 09       	sbc	r17, r1
    24fc:	01 15       	cp	r16, r1
    24fe:	11 05       	cpc	r17, r1
    2500:	81 f7       	brne	.-32     	; 0x24e2 <__stack+0x2e3>
    2502:	f0 c0       	rjmp	.+480    	; 0x26e4 <__stack+0x4e5>
    2504:	84 36       	cpi	r24, 0x64	; 100
    2506:	11 f0       	breq	.+4      	; 0x250c <__stack+0x30d>
    2508:	89 36       	cpi	r24, 0x69	; 105
    250a:	59 f5       	brne	.+86     	; 0x2562 <__stack+0x363>
    250c:	56 01       	movw	r10, r12
    250e:	97 fe       	sbrs	r9, 7
    2510:	09 c0       	rjmp	.+18     	; 0x2524 <__stack+0x325>
    2512:	24 e0       	ldi	r18, 0x04	; 4
    2514:	a2 0e       	add	r10, r18
    2516:	b1 1c       	adc	r11, r1
    2518:	f6 01       	movw	r30, r12
    251a:	60 81       	ld	r22, Z
    251c:	71 81       	ldd	r23, Z+1	; 0x01
    251e:	82 81       	ldd	r24, Z+2	; 0x02
    2520:	93 81       	ldd	r25, Z+3	; 0x03
    2522:	0a c0       	rjmp	.+20     	; 0x2538 <__stack+0x339>
    2524:	f2 e0       	ldi	r31, 0x02	; 2
    2526:	af 0e       	add	r10, r31
    2528:	b1 1c       	adc	r11, r1
    252a:	f6 01       	movw	r30, r12
    252c:	60 81       	ld	r22, Z
    252e:	71 81       	ldd	r23, Z+1	; 0x01
    2530:	07 2e       	mov	r0, r23
    2532:	00 0c       	add	r0, r0
    2534:	88 0b       	sbc	r24, r24
    2536:	99 0b       	sbc	r25, r25
    2538:	f9 2d       	mov	r31, r9
    253a:	ff 76       	andi	r31, 0x6F	; 111
    253c:	9f 2e       	mov	r9, r31
    253e:	97 ff       	sbrs	r25, 7
    2540:	09 c0       	rjmp	.+18     	; 0x2554 <__stack+0x355>
    2542:	90 95       	com	r25
    2544:	80 95       	com	r24
    2546:	70 95       	com	r23
    2548:	61 95       	neg	r22
    254a:	7f 4f       	sbci	r23, 0xFF	; 255
    254c:	8f 4f       	sbci	r24, 0xFF	; 255
    254e:	9f 4f       	sbci	r25, 0xFF	; 255
    2550:	f0 68       	ori	r31, 0x80	; 128
    2552:	9f 2e       	mov	r9, r31
    2554:	2a e0       	ldi	r18, 0x0A	; 10
    2556:	30 e0       	ldi	r19, 0x00	; 0
    2558:	a3 01       	movw	r20, r6
    255a:	8b d2       	rcall	.+1302   	; 0x2a72 <__ultoa_invert>
    255c:	c8 2e       	mov	r12, r24
    255e:	c6 18       	sub	r12, r6
    2560:	3e c0       	rjmp	.+124    	; 0x25de <__stack+0x3df>
    2562:	09 2d       	mov	r16, r9
    2564:	85 37       	cpi	r24, 0x75	; 117
    2566:	21 f4       	brne	.+8      	; 0x2570 <__stack+0x371>
    2568:	0f 7e       	andi	r16, 0xEF	; 239
    256a:	2a e0       	ldi	r18, 0x0A	; 10
    256c:	30 e0       	ldi	r19, 0x00	; 0
    256e:	1d c0       	rjmp	.+58     	; 0x25aa <__stack+0x3ab>
    2570:	09 7f       	andi	r16, 0xF9	; 249
    2572:	8f 36       	cpi	r24, 0x6F	; 111
    2574:	91 f0       	breq	.+36     	; 0x259a <__stack+0x39b>
    2576:	18 f4       	brcc	.+6      	; 0x257e <__stack+0x37f>
    2578:	88 35       	cpi	r24, 0x58	; 88
    257a:	59 f0       	breq	.+22     	; 0x2592 <__stack+0x393>
    257c:	bc c0       	rjmp	.+376    	; 0x26f6 <__stack+0x4f7>
    257e:	80 37       	cpi	r24, 0x70	; 112
    2580:	19 f0       	breq	.+6      	; 0x2588 <__stack+0x389>
    2582:	88 37       	cpi	r24, 0x78	; 120
    2584:	11 f0       	breq	.+4      	; 0x258a <__stack+0x38b>
    2586:	b7 c0       	rjmp	.+366    	; 0x26f6 <__stack+0x4f7>
    2588:	00 61       	ori	r16, 0x10	; 16
    258a:	04 ff       	sbrs	r16, 4
    258c:	09 c0       	rjmp	.+18     	; 0x25a0 <__stack+0x3a1>
    258e:	04 60       	ori	r16, 0x04	; 4
    2590:	07 c0       	rjmp	.+14     	; 0x25a0 <__stack+0x3a1>
    2592:	94 fe       	sbrs	r9, 4
    2594:	08 c0       	rjmp	.+16     	; 0x25a6 <__stack+0x3a7>
    2596:	06 60       	ori	r16, 0x06	; 6
    2598:	06 c0       	rjmp	.+12     	; 0x25a6 <__stack+0x3a7>
    259a:	28 e0       	ldi	r18, 0x08	; 8
    259c:	30 e0       	ldi	r19, 0x00	; 0
    259e:	05 c0       	rjmp	.+10     	; 0x25aa <__stack+0x3ab>
    25a0:	20 e1       	ldi	r18, 0x10	; 16
    25a2:	30 e0       	ldi	r19, 0x00	; 0
    25a4:	02 c0       	rjmp	.+4      	; 0x25aa <__stack+0x3ab>
    25a6:	20 e1       	ldi	r18, 0x10	; 16
    25a8:	32 e0       	ldi	r19, 0x02	; 2
    25aa:	56 01       	movw	r10, r12
    25ac:	07 ff       	sbrs	r16, 7
    25ae:	09 c0       	rjmp	.+18     	; 0x25c2 <__stack+0x3c3>
    25b0:	84 e0       	ldi	r24, 0x04	; 4
    25b2:	a8 0e       	add	r10, r24
    25b4:	b1 1c       	adc	r11, r1
    25b6:	f6 01       	movw	r30, r12
    25b8:	60 81       	ld	r22, Z
    25ba:	71 81       	ldd	r23, Z+1	; 0x01
    25bc:	82 81       	ldd	r24, Z+2	; 0x02
    25be:	93 81       	ldd	r25, Z+3	; 0x03
    25c0:	08 c0       	rjmp	.+16     	; 0x25d2 <__stack+0x3d3>
    25c2:	f2 e0       	ldi	r31, 0x02	; 2
    25c4:	af 0e       	add	r10, r31
    25c6:	b1 1c       	adc	r11, r1
    25c8:	f6 01       	movw	r30, r12
    25ca:	60 81       	ld	r22, Z
    25cc:	71 81       	ldd	r23, Z+1	; 0x01
    25ce:	80 e0       	ldi	r24, 0x00	; 0
    25d0:	90 e0       	ldi	r25, 0x00	; 0
    25d2:	a3 01       	movw	r20, r6
    25d4:	4e d2       	rcall	.+1180   	; 0x2a72 <__ultoa_invert>
    25d6:	c8 2e       	mov	r12, r24
    25d8:	c6 18       	sub	r12, r6
    25da:	0f 77       	andi	r16, 0x7F	; 127
    25dc:	90 2e       	mov	r9, r16
    25de:	96 fe       	sbrs	r9, 6
    25e0:	0b c0       	rjmp	.+22     	; 0x25f8 <__stack+0x3f9>
    25e2:	09 2d       	mov	r16, r9
    25e4:	0e 7f       	andi	r16, 0xFE	; 254
    25e6:	c1 16       	cp	r12, r17
    25e8:	50 f4       	brcc	.+20     	; 0x25fe <__stack+0x3ff>
    25ea:	94 fe       	sbrs	r9, 4
    25ec:	0a c0       	rjmp	.+20     	; 0x2602 <__stack+0x403>
    25ee:	92 fc       	sbrc	r9, 2
    25f0:	08 c0       	rjmp	.+16     	; 0x2602 <__stack+0x403>
    25f2:	09 2d       	mov	r16, r9
    25f4:	0e 7e       	andi	r16, 0xEE	; 238
    25f6:	05 c0       	rjmp	.+10     	; 0x2602 <__stack+0x403>
    25f8:	dc 2c       	mov	r13, r12
    25fa:	09 2d       	mov	r16, r9
    25fc:	03 c0       	rjmp	.+6      	; 0x2604 <__stack+0x405>
    25fe:	dc 2c       	mov	r13, r12
    2600:	01 c0       	rjmp	.+2      	; 0x2604 <__stack+0x405>
    2602:	d1 2e       	mov	r13, r17
    2604:	04 ff       	sbrs	r16, 4
    2606:	0d c0       	rjmp	.+26     	; 0x2622 <__stack+0x423>
    2608:	fe 01       	movw	r30, r28
    260a:	ec 0d       	add	r30, r12
    260c:	f1 1d       	adc	r31, r1
    260e:	80 81       	ld	r24, Z
    2610:	80 33       	cpi	r24, 0x30	; 48
    2612:	11 f4       	brne	.+4      	; 0x2618 <__stack+0x419>
    2614:	09 7e       	andi	r16, 0xE9	; 233
    2616:	09 c0       	rjmp	.+18     	; 0x262a <__stack+0x42b>
    2618:	02 ff       	sbrs	r16, 2
    261a:	06 c0       	rjmp	.+12     	; 0x2628 <__stack+0x429>
    261c:	d3 94       	inc	r13
    261e:	d3 94       	inc	r13
    2620:	04 c0       	rjmp	.+8      	; 0x262a <__stack+0x42b>
    2622:	80 2f       	mov	r24, r16
    2624:	86 78       	andi	r24, 0x86	; 134
    2626:	09 f0       	breq	.+2      	; 0x262a <__stack+0x42b>
    2628:	d3 94       	inc	r13
    262a:	03 fd       	sbrc	r16, 3
    262c:	10 c0       	rjmp	.+32     	; 0x264e <__stack+0x44f>
    262e:	00 ff       	sbrs	r16, 0
    2630:	06 c0       	rjmp	.+12     	; 0x263e <__stack+0x43f>
    2632:	1c 2d       	mov	r17, r12
    2634:	d5 14       	cp	r13, r5
    2636:	78 f4       	brcc	.+30     	; 0x2656 <__stack+0x457>
    2638:	15 0d       	add	r17, r5
    263a:	1d 19       	sub	r17, r13
    263c:	0c c0       	rjmp	.+24     	; 0x2656 <__stack+0x457>
    263e:	d5 14       	cp	r13, r5
    2640:	50 f4       	brcc	.+20     	; 0x2656 <__stack+0x457>
    2642:	b7 01       	movw	r22, r14
    2644:	80 e2       	ldi	r24, 0x20	; 32
    2646:	90 e0       	ldi	r25, 0x00	; 0
    2648:	b9 d1       	rcall	.+882    	; 0x29bc <fputc>
    264a:	d3 94       	inc	r13
    264c:	f8 cf       	rjmp	.-16     	; 0x263e <__stack+0x43f>
    264e:	d5 14       	cp	r13, r5
    2650:	10 f4       	brcc	.+4      	; 0x2656 <__stack+0x457>
    2652:	5d 18       	sub	r5, r13
    2654:	01 c0       	rjmp	.+2      	; 0x2658 <__stack+0x459>
    2656:	51 2c       	mov	r5, r1
    2658:	04 ff       	sbrs	r16, 4
    265a:	0f c0       	rjmp	.+30     	; 0x267a <__stack+0x47b>
    265c:	b7 01       	movw	r22, r14
    265e:	80 e3       	ldi	r24, 0x30	; 48
    2660:	90 e0       	ldi	r25, 0x00	; 0
    2662:	ac d1       	rcall	.+856    	; 0x29bc <fputc>
    2664:	02 ff       	sbrs	r16, 2
    2666:	16 c0       	rjmp	.+44     	; 0x2694 <__stack+0x495>
    2668:	01 fd       	sbrc	r16, 1
    266a:	03 c0       	rjmp	.+6      	; 0x2672 <__stack+0x473>
    266c:	88 e7       	ldi	r24, 0x78	; 120
    266e:	90 e0       	ldi	r25, 0x00	; 0
    2670:	02 c0       	rjmp	.+4      	; 0x2676 <__stack+0x477>
    2672:	88 e5       	ldi	r24, 0x58	; 88
    2674:	90 e0       	ldi	r25, 0x00	; 0
    2676:	b7 01       	movw	r22, r14
    2678:	0c c0       	rjmp	.+24     	; 0x2692 <__stack+0x493>
    267a:	80 2f       	mov	r24, r16
    267c:	86 78       	andi	r24, 0x86	; 134
    267e:	51 f0       	breq	.+20     	; 0x2694 <__stack+0x495>
    2680:	01 ff       	sbrs	r16, 1
    2682:	02 c0       	rjmp	.+4      	; 0x2688 <__stack+0x489>
    2684:	8b e2       	ldi	r24, 0x2B	; 43
    2686:	01 c0       	rjmp	.+2      	; 0x268a <__stack+0x48b>
    2688:	80 e2       	ldi	r24, 0x20	; 32
    268a:	07 fd       	sbrc	r16, 7
    268c:	8d e2       	ldi	r24, 0x2D	; 45
    268e:	b7 01       	movw	r22, r14
    2690:	90 e0       	ldi	r25, 0x00	; 0
    2692:	94 d1       	rcall	.+808    	; 0x29bc <fputc>
    2694:	c1 16       	cp	r12, r17
    2696:	30 f4       	brcc	.+12     	; 0x26a4 <__stack+0x4a5>
    2698:	b7 01       	movw	r22, r14
    269a:	80 e3       	ldi	r24, 0x30	; 48
    269c:	90 e0       	ldi	r25, 0x00	; 0
    269e:	8e d1       	rcall	.+796    	; 0x29bc <fputc>
    26a0:	11 50       	subi	r17, 0x01	; 1
    26a2:	f8 cf       	rjmp	.-16     	; 0x2694 <__stack+0x495>
    26a4:	ca 94       	dec	r12
    26a6:	f3 01       	movw	r30, r6
    26a8:	ec 0d       	add	r30, r12
    26aa:	f1 1d       	adc	r31, r1
    26ac:	80 81       	ld	r24, Z
    26ae:	b7 01       	movw	r22, r14
    26b0:	90 e0       	ldi	r25, 0x00	; 0
    26b2:	84 d1       	rcall	.+776    	; 0x29bc <fputc>
    26b4:	c1 10       	cpse	r12, r1
    26b6:	f6 cf       	rjmp	.-20     	; 0x26a4 <__stack+0x4a5>
    26b8:	15 c0       	rjmp	.+42     	; 0x26e4 <__stack+0x4e5>
    26ba:	f4 e0       	ldi	r31, 0x04	; 4
    26bc:	f5 15       	cp	r31, r5
    26be:	50 f5       	brcc	.+84     	; 0x2714 <__stack+0x515>
    26c0:	84 e0       	ldi	r24, 0x04	; 4
    26c2:	58 1a       	sub	r5, r24
    26c4:	93 fe       	sbrs	r9, 3
    26c6:	1e c0       	rjmp	.+60     	; 0x2704 <__stack+0x505>
    26c8:	01 11       	cpse	r16, r1
    26ca:	25 c0       	rjmp	.+74     	; 0x2716 <__stack+0x517>
    26cc:	2c 85       	ldd	r18, Y+12	; 0x0c
    26ce:	23 ff       	sbrs	r18, 3
    26d0:	27 c0       	rjmp	.+78     	; 0x2720 <__stack+0x521>
    26d2:	04 ee       	ldi	r16, 0xE4	; 228
    26d4:	10 e0       	ldi	r17, 0x00	; 0
    26d6:	39 2d       	mov	r19, r9
    26d8:	30 71       	andi	r19, 0x10	; 16
    26da:	93 2e       	mov	r9, r19
    26dc:	f8 01       	movw	r30, r16
    26de:	84 91       	lpm	r24, Z
    26e0:	81 11       	cpse	r24, r1
    26e2:	21 c0       	rjmp	.+66     	; 0x2726 <__stack+0x527>
    26e4:	55 20       	and	r5, r5
    26e6:	09 f4       	brne	.+2      	; 0x26ea <__stack+0x4eb>
    26e8:	fc cc       	rjmp	.-1544   	; 0x20e2 <vfprintf+0x54>
    26ea:	b7 01       	movw	r22, r14
    26ec:	80 e2       	ldi	r24, 0x20	; 32
    26ee:	90 e0       	ldi	r25, 0x00	; 0
    26f0:	65 d1       	rcall	.+714    	; 0x29bc <fputc>
    26f2:	5a 94       	dec	r5
    26f4:	f7 cf       	rjmp	.-18     	; 0x26e4 <__stack+0x4e5>
    26f6:	f7 01       	movw	r30, r14
    26f8:	86 81       	ldd	r24, Z+6	; 0x06
    26fa:	97 81       	ldd	r25, Z+7	; 0x07
    26fc:	23 c0       	rjmp	.+70     	; 0x2744 <__stack+0x545>
    26fe:	8f ef       	ldi	r24, 0xFF	; 255
    2700:	9f ef       	ldi	r25, 0xFF	; 255
    2702:	20 c0       	rjmp	.+64     	; 0x2744 <__stack+0x545>
    2704:	b7 01       	movw	r22, r14
    2706:	80 e2       	ldi	r24, 0x20	; 32
    2708:	90 e0       	ldi	r25, 0x00	; 0
    270a:	58 d1       	rcall	.+688    	; 0x29bc <fputc>
    270c:	5a 94       	dec	r5
    270e:	51 10       	cpse	r5, r1
    2710:	f9 cf       	rjmp	.-14     	; 0x2704 <__stack+0x505>
    2712:	da cf       	rjmp	.-76     	; 0x26c8 <__stack+0x4c9>
    2714:	51 2c       	mov	r5, r1
    2716:	b7 01       	movw	r22, r14
    2718:	80 2f       	mov	r24, r16
    271a:	90 e0       	ldi	r25, 0x00	; 0
    271c:	4f d1       	rcall	.+670    	; 0x29bc <fputc>
    271e:	d6 cf       	rjmp	.-84     	; 0x26cc <__stack+0x4cd>
    2720:	08 ee       	ldi	r16, 0xE8	; 232
    2722:	10 e0       	ldi	r17, 0x00	; 0
    2724:	d8 cf       	rjmp	.-80     	; 0x26d6 <__stack+0x4d7>
    2726:	91 10       	cpse	r9, r1
    2728:	80 52       	subi	r24, 0x20	; 32
    272a:	b7 01       	movw	r22, r14
    272c:	90 e0       	ldi	r25, 0x00	; 0
    272e:	46 d1       	rcall	.+652    	; 0x29bc <fputc>
    2730:	0f 5f       	subi	r16, 0xFF	; 255
    2732:	1f 4f       	sbci	r17, 0xFF	; 255
    2734:	d3 cf       	rjmp	.-90     	; 0x26dc <__stack+0x4dd>
    2736:	23 e0       	ldi	r18, 0x03	; 3
    2738:	25 15       	cp	r18, r5
    273a:	10 f4       	brcc	.+4      	; 0x2740 <__stack+0x541>
    273c:	83 e0       	ldi	r24, 0x03	; 3
    273e:	c1 cf       	rjmp	.-126    	; 0x26c2 <__stack+0x4c3>
    2740:	51 2c       	mov	r5, r1
    2742:	c4 cf       	rjmp	.-120    	; 0x26cc <__stack+0x4cd>
    2744:	60 96       	adiw	r28, 0x10	; 16
    2746:	e2 e1       	ldi	r30, 0x12	; 18
    2748:	1c c0       	rjmp	.+56     	; 0x2782 <__epilogue_restores__>

0000274a <__prologue_saves__>:
    274a:	2f 92       	push	r2
    274c:	3f 92       	push	r3
    274e:	4f 92       	push	r4
    2750:	5f 92       	push	r5
    2752:	6f 92       	push	r6
    2754:	7f 92       	push	r7
    2756:	8f 92       	push	r8
    2758:	9f 92       	push	r9
    275a:	af 92       	push	r10
    275c:	bf 92       	push	r11
    275e:	cf 92       	push	r12
    2760:	df 92       	push	r13
    2762:	ef 92       	push	r14
    2764:	ff 92       	push	r15
    2766:	0f 93       	push	r16
    2768:	1f 93       	push	r17
    276a:	cf 93       	push	r28
    276c:	df 93       	push	r29
    276e:	cd b7       	in	r28, 0x3d	; 61
    2770:	de b7       	in	r29, 0x3e	; 62
    2772:	ca 1b       	sub	r28, r26
    2774:	db 0b       	sbc	r29, r27
    2776:	0f b6       	in	r0, 0x3f	; 63
    2778:	f8 94       	cli
    277a:	de bf       	out	0x3e, r29	; 62
    277c:	0f be       	out	0x3f, r0	; 63
    277e:	cd bf       	out	0x3d, r28	; 61
    2780:	09 94       	ijmp

00002782 <__epilogue_restores__>:
    2782:	2a 88       	ldd	r2, Y+18	; 0x12
    2784:	39 88       	ldd	r3, Y+17	; 0x11
    2786:	48 88       	ldd	r4, Y+16	; 0x10
    2788:	5f 84       	ldd	r5, Y+15	; 0x0f
    278a:	6e 84       	ldd	r6, Y+14	; 0x0e
    278c:	7d 84       	ldd	r7, Y+13	; 0x0d
    278e:	8c 84       	ldd	r8, Y+12	; 0x0c
    2790:	9b 84       	ldd	r9, Y+11	; 0x0b
    2792:	aa 84       	ldd	r10, Y+10	; 0x0a
    2794:	b9 84       	ldd	r11, Y+9	; 0x09
    2796:	c8 84       	ldd	r12, Y+8	; 0x08
    2798:	df 80       	ldd	r13, Y+7	; 0x07
    279a:	ee 80       	ldd	r14, Y+6	; 0x06
    279c:	fd 80       	ldd	r15, Y+5	; 0x05
    279e:	0c 81       	ldd	r16, Y+4	; 0x04
    27a0:	1b 81       	ldd	r17, Y+3	; 0x03
    27a2:	aa 81       	ldd	r26, Y+2	; 0x02
    27a4:	b9 81       	ldd	r27, Y+1	; 0x01
    27a6:	ce 0f       	add	r28, r30
    27a8:	d1 1d       	adc	r29, r1
    27aa:	0f b6       	in	r0, 0x3f	; 63
    27ac:	f8 94       	cli
    27ae:	de bf       	out	0x3e, r29	; 62
    27b0:	0f be       	out	0x3f, r0	; 63
    27b2:	cd bf       	out	0x3d, r28	; 61
    27b4:	ed 01       	movw	r28, r26
    27b6:	08 95       	ret

000027b8 <__ftoa_engine>:
    27b8:	28 30       	cpi	r18, 0x08	; 8
    27ba:	08 f0       	brcs	.+2      	; 0x27be <__ftoa_engine+0x6>
    27bc:	27 e0       	ldi	r18, 0x07	; 7
    27be:	33 27       	eor	r19, r19
    27c0:	da 01       	movw	r26, r20
    27c2:	99 0f       	add	r25, r25
    27c4:	31 1d       	adc	r19, r1
    27c6:	87 fd       	sbrc	r24, 7
    27c8:	91 60       	ori	r25, 0x01	; 1
    27ca:	00 96       	adiw	r24, 0x00	; 0
    27cc:	61 05       	cpc	r22, r1
    27ce:	71 05       	cpc	r23, r1
    27d0:	39 f4       	brne	.+14     	; 0x27e0 <__ftoa_engine+0x28>
    27d2:	32 60       	ori	r19, 0x02	; 2
    27d4:	2e 5f       	subi	r18, 0xFE	; 254
    27d6:	3d 93       	st	X+, r19
    27d8:	30 e3       	ldi	r19, 0x30	; 48
    27da:	2a 95       	dec	r18
    27dc:	e1 f7       	brne	.-8      	; 0x27d6 <__ftoa_engine+0x1e>
    27de:	08 95       	ret
    27e0:	9f 3f       	cpi	r25, 0xFF	; 255
    27e2:	30 f0       	brcs	.+12     	; 0x27f0 <__ftoa_engine+0x38>
    27e4:	80 38       	cpi	r24, 0x80	; 128
    27e6:	71 05       	cpc	r23, r1
    27e8:	61 05       	cpc	r22, r1
    27ea:	09 f0       	breq	.+2      	; 0x27ee <__ftoa_engine+0x36>
    27ec:	3c 5f       	subi	r19, 0xFC	; 252
    27ee:	3c 5f       	subi	r19, 0xFC	; 252
    27f0:	3d 93       	st	X+, r19
    27f2:	91 30       	cpi	r25, 0x01	; 1
    27f4:	08 f0       	brcs	.+2      	; 0x27f8 <__ftoa_engine+0x40>
    27f6:	80 68       	ori	r24, 0x80	; 128
    27f8:	91 1d       	adc	r25, r1
    27fa:	df 93       	push	r29
    27fc:	cf 93       	push	r28
    27fe:	1f 93       	push	r17
    2800:	0f 93       	push	r16
    2802:	ff 92       	push	r15
    2804:	ef 92       	push	r14
    2806:	19 2f       	mov	r17, r25
    2808:	98 7f       	andi	r25, 0xF8	; 248
    280a:	96 95       	lsr	r25
    280c:	e9 2f       	mov	r30, r25
    280e:	96 95       	lsr	r25
    2810:	96 95       	lsr	r25
    2812:	e9 0f       	add	r30, r25
    2814:	ff 27       	eor	r31, r31
    2816:	ea 5b       	subi	r30, 0xBA	; 186
    2818:	fe 4f       	sbci	r31, 0xFE	; 254
    281a:	99 27       	eor	r25, r25
    281c:	33 27       	eor	r19, r19
    281e:	ee 24       	eor	r14, r14
    2820:	ff 24       	eor	r15, r15
    2822:	a7 01       	movw	r20, r14
    2824:	e7 01       	movw	r28, r14
    2826:	05 90       	lpm	r0, Z+
    2828:	08 94       	sec
    282a:	07 94       	ror	r0
    282c:	28 f4       	brcc	.+10     	; 0x2838 <__ftoa_engine+0x80>
    282e:	36 0f       	add	r19, r22
    2830:	e7 1e       	adc	r14, r23
    2832:	f8 1e       	adc	r15, r24
    2834:	49 1f       	adc	r20, r25
    2836:	51 1d       	adc	r21, r1
    2838:	66 0f       	add	r22, r22
    283a:	77 1f       	adc	r23, r23
    283c:	88 1f       	adc	r24, r24
    283e:	99 1f       	adc	r25, r25
    2840:	06 94       	lsr	r0
    2842:	a1 f7       	brne	.-24     	; 0x282c <__ftoa_engine+0x74>
    2844:	05 90       	lpm	r0, Z+
    2846:	07 94       	ror	r0
    2848:	28 f4       	brcc	.+10     	; 0x2854 <__ftoa_engine+0x9c>
    284a:	e7 0e       	add	r14, r23
    284c:	f8 1e       	adc	r15, r24
    284e:	49 1f       	adc	r20, r25
    2850:	56 1f       	adc	r21, r22
    2852:	c1 1d       	adc	r28, r1
    2854:	77 0f       	add	r23, r23
    2856:	88 1f       	adc	r24, r24
    2858:	99 1f       	adc	r25, r25
    285a:	66 1f       	adc	r22, r22
    285c:	06 94       	lsr	r0
    285e:	a1 f7       	brne	.-24     	; 0x2848 <__ftoa_engine+0x90>
    2860:	05 90       	lpm	r0, Z+
    2862:	07 94       	ror	r0
    2864:	28 f4       	brcc	.+10     	; 0x2870 <__ftoa_engine+0xb8>
    2866:	f8 0e       	add	r15, r24
    2868:	49 1f       	adc	r20, r25
    286a:	56 1f       	adc	r21, r22
    286c:	c7 1f       	adc	r28, r23
    286e:	d1 1d       	adc	r29, r1
    2870:	88 0f       	add	r24, r24
    2872:	99 1f       	adc	r25, r25
    2874:	66 1f       	adc	r22, r22
    2876:	77 1f       	adc	r23, r23
    2878:	06 94       	lsr	r0
    287a:	a1 f7       	brne	.-24     	; 0x2864 <__ftoa_engine+0xac>
    287c:	05 90       	lpm	r0, Z+
    287e:	07 94       	ror	r0
    2880:	20 f4       	brcc	.+8      	; 0x288a <__ftoa_engine+0xd2>
    2882:	49 0f       	add	r20, r25
    2884:	56 1f       	adc	r21, r22
    2886:	c7 1f       	adc	r28, r23
    2888:	d8 1f       	adc	r29, r24
    288a:	99 0f       	add	r25, r25
    288c:	66 1f       	adc	r22, r22
    288e:	77 1f       	adc	r23, r23
    2890:	88 1f       	adc	r24, r24
    2892:	06 94       	lsr	r0
    2894:	a9 f7       	brne	.-22     	; 0x2880 <__ftoa_engine+0xc8>
    2896:	84 91       	lpm	r24, Z
    2898:	10 95       	com	r17
    289a:	17 70       	andi	r17, 0x07	; 7
    289c:	41 f0       	breq	.+16     	; 0x28ae <__ftoa_engine+0xf6>
    289e:	d6 95       	lsr	r29
    28a0:	c7 95       	ror	r28
    28a2:	57 95       	ror	r21
    28a4:	47 95       	ror	r20
    28a6:	f7 94       	ror	r15
    28a8:	e7 94       	ror	r14
    28aa:	1a 95       	dec	r17
    28ac:	c1 f7       	brne	.-16     	; 0x289e <__ftoa_engine+0xe6>
    28ae:	ec ee       	ldi	r30, 0xEC	; 236
    28b0:	f0 e0       	ldi	r31, 0x00	; 0
    28b2:	68 94       	set
    28b4:	15 90       	lpm	r1, Z+
    28b6:	15 91       	lpm	r17, Z+
    28b8:	35 91       	lpm	r19, Z+
    28ba:	65 91       	lpm	r22, Z+
    28bc:	95 91       	lpm	r25, Z+
    28be:	05 90       	lpm	r0, Z+
    28c0:	7f e2       	ldi	r23, 0x2F	; 47
    28c2:	73 95       	inc	r23
    28c4:	e1 18       	sub	r14, r1
    28c6:	f1 0a       	sbc	r15, r17
    28c8:	43 0b       	sbc	r20, r19
    28ca:	56 0b       	sbc	r21, r22
    28cc:	c9 0b       	sbc	r28, r25
    28ce:	d0 09       	sbc	r29, r0
    28d0:	c0 f7       	brcc	.-16     	; 0x28c2 <__ftoa_engine+0x10a>
    28d2:	e1 0c       	add	r14, r1
    28d4:	f1 1e       	adc	r15, r17
    28d6:	43 1f       	adc	r20, r19
    28d8:	56 1f       	adc	r21, r22
    28da:	c9 1f       	adc	r28, r25
    28dc:	d0 1d       	adc	r29, r0
    28de:	7e f4       	brtc	.+30     	; 0x28fe <__ftoa_engine+0x146>
    28e0:	70 33       	cpi	r23, 0x30	; 48
    28e2:	11 f4       	brne	.+4      	; 0x28e8 <__ftoa_engine+0x130>
    28e4:	8a 95       	dec	r24
    28e6:	e6 cf       	rjmp	.-52     	; 0x28b4 <__ftoa_engine+0xfc>
    28e8:	e8 94       	clt
    28ea:	01 50       	subi	r16, 0x01	; 1
    28ec:	30 f0       	brcs	.+12     	; 0x28fa <__ftoa_engine+0x142>
    28ee:	08 0f       	add	r16, r24
    28f0:	0a f4       	brpl	.+2      	; 0x28f4 <__ftoa_engine+0x13c>
    28f2:	00 27       	eor	r16, r16
    28f4:	02 17       	cp	r16, r18
    28f6:	08 f4       	brcc	.+2      	; 0x28fa <__ftoa_engine+0x142>
    28f8:	20 2f       	mov	r18, r16
    28fa:	23 95       	inc	r18
    28fc:	02 2f       	mov	r16, r18
    28fe:	7a 33       	cpi	r23, 0x3A	; 58
    2900:	28 f0       	brcs	.+10     	; 0x290c <__ftoa_engine+0x154>
    2902:	79 e3       	ldi	r23, 0x39	; 57
    2904:	7d 93       	st	X+, r23
    2906:	2a 95       	dec	r18
    2908:	e9 f7       	brne	.-6      	; 0x2904 <__ftoa_engine+0x14c>
    290a:	10 c0       	rjmp	.+32     	; 0x292c <__ftoa_engine+0x174>
    290c:	7d 93       	st	X+, r23
    290e:	2a 95       	dec	r18
    2910:	89 f6       	brne	.-94     	; 0x28b4 <__ftoa_engine+0xfc>
    2912:	06 94       	lsr	r0
    2914:	97 95       	ror	r25
    2916:	67 95       	ror	r22
    2918:	37 95       	ror	r19
    291a:	17 95       	ror	r17
    291c:	17 94       	ror	r1
    291e:	e1 18       	sub	r14, r1
    2920:	f1 0a       	sbc	r15, r17
    2922:	43 0b       	sbc	r20, r19
    2924:	56 0b       	sbc	r21, r22
    2926:	c9 0b       	sbc	r28, r25
    2928:	d0 09       	sbc	r29, r0
    292a:	98 f0       	brcs	.+38     	; 0x2952 <__ftoa_engine+0x19a>
    292c:	23 95       	inc	r18
    292e:	7e 91       	ld	r23, -X
    2930:	73 95       	inc	r23
    2932:	7a 33       	cpi	r23, 0x3A	; 58
    2934:	08 f0       	brcs	.+2      	; 0x2938 <__ftoa_engine+0x180>
    2936:	70 e3       	ldi	r23, 0x30	; 48
    2938:	7c 93       	st	X, r23
    293a:	20 13       	cpse	r18, r16
    293c:	b8 f7       	brcc	.-18     	; 0x292c <__ftoa_engine+0x174>
    293e:	7e 91       	ld	r23, -X
    2940:	70 61       	ori	r23, 0x10	; 16
    2942:	7d 93       	st	X+, r23
    2944:	30 f0       	brcs	.+12     	; 0x2952 <__ftoa_engine+0x19a>
    2946:	83 95       	inc	r24
    2948:	71 e3       	ldi	r23, 0x31	; 49
    294a:	7d 93       	st	X+, r23
    294c:	70 e3       	ldi	r23, 0x30	; 48
    294e:	2a 95       	dec	r18
    2950:	e1 f7       	brne	.-8      	; 0x294a <__ftoa_engine+0x192>
    2952:	11 24       	eor	r1, r1
    2954:	ef 90       	pop	r14
    2956:	ff 90       	pop	r15
    2958:	0f 91       	pop	r16
    295a:	1f 91       	pop	r17
    295c:	cf 91       	pop	r28
    295e:	df 91       	pop	r29
    2960:	99 27       	eor	r25, r25
    2962:	87 fd       	sbrc	r24, 7
    2964:	90 95       	com	r25
    2966:	08 95       	ret

00002968 <strnlen_P>:
    2968:	fc 01       	movw	r30, r24
    296a:	05 90       	lpm	r0, Z+
    296c:	61 50       	subi	r22, 0x01	; 1
    296e:	70 40       	sbci	r23, 0x00	; 0
    2970:	01 10       	cpse	r0, r1
    2972:	d8 f7       	brcc	.-10     	; 0x296a <strnlen_P+0x2>
    2974:	80 95       	com	r24
    2976:	90 95       	com	r25
    2978:	8e 0f       	add	r24, r30
    297a:	9f 1f       	adc	r25, r31
    297c:	08 95       	ret

0000297e <strcat>:
    297e:	fb 01       	movw	r30, r22
    2980:	dc 01       	movw	r26, r24
    2982:	0d 90       	ld	r0, X+
    2984:	00 20       	and	r0, r0
    2986:	e9 f7       	brne	.-6      	; 0x2982 <strcat+0x4>
    2988:	11 97       	sbiw	r26, 0x01	; 1
    298a:	01 90       	ld	r0, Z+
    298c:	0d 92       	st	X+, r0
    298e:	00 20       	and	r0, r0
    2990:	e1 f7       	brne	.-8      	; 0x298a <strcat+0xc>
    2992:	08 95       	ret

00002994 <strcmp>:
    2994:	fb 01       	movw	r30, r22
    2996:	dc 01       	movw	r26, r24
    2998:	8d 91       	ld	r24, X+
    299a:	01 90       	ld	r0, Z+
    299c:	80 19       	sub	r24, r0
    299e:	01 10       	cpse	r0, r1
    29a0:	d9 f3       	breq	.-10     	; 0x2998 <strcmp+0x4>
    29a2:	99 0b       	sbc	r25, r25
    29a4:	08 95       	ret

000029a6 <strnlen>:
    29a6:	fc 01       	movw	r30, r24
    29a8:	61 50       	subi	r22, 0x01	; 1
    29aa:	70 40       	sbci	r23, 0x00	; 0
    29ac:	01 90       	ld	r0, Z+
    29ae:	01 10       	cpse	r0, r1
    29b0:	d8 f7       	brcc	.-10     	; 0x29a8 <strnlen+0x2>
    29b2:	80 95       	com	r24
    29b4:	90 95       	com	r25
    29b6:	8e 0f       	add	r24, r30
    29b8:	9f 1f       	adc	r25, r31
    29ba:	08 95       	ret

000029bc <fputc>:
    29bc:	0f 93       	push	r16
    29be:	1f 93       	push	r17
    29c0:	cf 93       	push	r28
    29c2:	df 93       	push	r29
    29c4:	fb 01       	movw	r30, r22
    29c6:	23 81       	ldd	r18, Z+3	; 0x03
    29c8:	21 fd       	sbrc	r18, 1
    29ca:	03 c0       	rjmp	.+6      	; 0x29d2 <fputc+0x16>
    29cc:	8f ef       	ldi	r24, 0xFF	; 255
    29ce:	9f ef       	ldi	r25, 0xFF	; 255
    29d0:	2c c0       	rjmp	.+88     	; 0x2a2a <fputc+0x6e>
    29d2:	22 ff       	sbrs	r18, 2
    29d4:	16 c0       	rjmp	.+44     	; 0x2a02 <fputc+0x46>
    29d6:	46 81       	ldd	r20, Z+6	; 0x06
    29d8:	57 81       	ldd	r21, Z+7	; 0x07
    29da:	24 81       	ldd	r18, Z+4	; 0x04
    29dc:	35 81       	ldd	r19, Z+5	; 0x05
    29de:	42 17       	cp	r20, r18
    29e0:	53 07       	cpc	r21, r19
    29e2:	44 f4       	brge	.+16     	; 0x29f4 <fputc+0x38>
    29e4:	a0 81       	ld	r26, Z
    29e6:	b1 81       	ldd	r27, Z+1	; 0x01
    29e8:	9d 01       	movw	r18, r26
    29ea:	2f 5f       	subi	r18, 0xFF	; 255
    29ec:	3f 4f       	sbci	r19, 0xFF	; 255
    29ee:	31 83       	std	Z+1, r19	; 0x01
    29f0:	20 83       	st	Z, r18
    29f2:	8c 93       	st	X, r24
    29f4:	26 81       	ldd	r18, Z+6	; 0x06
    29f6:	37 81       	ldd	r19, Z+7	; 0x07
    29f8:	2f 5f       	subi	r18, 0xFF	; 255
    29fa:	3f 4f       	sbci	r19, 0xFF	; 255
    29fc:	37 83       	std	Z+7, r19	; 0x07
    29fe:	26 83       	std	Z+6, r18	; 0x06
    2a00:	14 c0       	rjmp	.+40     	; 0x2a2a <fputc+0x6e>
    2a02:	8b 01       	movw	r16, r22
    2a04:	ec 01       	movw	r28, r24
    2a06:	fb 01       	movw	r30, r22
    2a08:	00 84       	ldd	r0, Z+8	; 0x08
    2a0a:	f1 85       	ldd	r31, Z+9	; 0x09
    2a0c:	e0 2d       	mov	r30, r0
    2a0e:	09 95       	icall
    2a10:	89 2b       	or	r24, r25
    2a12:	e1 f6       	brne	.-72     	; 0x29cc <fputc+0x10>
    2a14:	d8 01       	movw	r26, r16
    2a16:	16 96       	adiw	r26, 0x06	; 6
    2a18:	8d 91       	ld	r24, X+
    2a1a:	9c 91       	ld	r25, X
    2a1c:	17 97       	sbiw	r26, 0x07	; 7
    2a1e:	01 96       	adiw	r24, 0x01	; 1
    2a20:	17 96       	adiw	r26, 0x07	; 7
    2a22:	9c 93       	st	X, r25
    2a24:	8e 93       	st	-X, r24
    2a26:	16 97       	sbiw	r26, 0x06	; 6
    2a28:	ce 01       	movw	r24, r28
    2a2a:	df 91       	pop	r29
    2a2c:	cf 91       	pop	r28
    2a2e:	1f 91       	pop	r17
    2a30:	0f 91       	pop	r16
    2a32:	08 95       	ret

00002a34 <sprintf>:
    2a34:	ae e0       	ldi	r26, 0x0E	; 14
    2a36:	b0 e0       	ldi	r27, 0x00	; 0
    2a38:	ef e1       	ldi	r30, 0x1F	; 31
    2a3a:	f5 e1       	ldi	r31, 0x15	; 21
    2a3c:	94 ce       	rjmp	.-728    	; 0x2766 <__prologue_saves__+0x1c>
    2a3e:	0d 89       	ldd	r16, Y+21	; 0x15
    2a40:	1e 89       	ldd	r17, Y+22	; 0x16
    2a42:	86 e0       	ldi	r24, 0x06	; 6
    2a44:	8c 83       	std	Y+4, r24	; 0x04
    2a46:	1a 83       	std	Y+2, r17	; 0x02
    2a48:	09 83       	std	Y+1, r16	; 0x01
    2a4a:	8f ef       	ldi	r24, 0xFF	; 255
    2a4c:	9f e7       	ldi	r25, 0x7F	; 127
    2a4e:	9e 83       	std	Y+6, r25	; 0x06
    2a50:	8d 83       	std	Y+5, r24	; 0x05
    2a52:	ae 01       	movw	r20, r28
    2a54:	47 5e       	subi	r20, 0xE7	; 231
    2a56:	5f 4f       	sbci	r21, 0xFF	; 255
    2a58:	6f 89       	ldd	r22, Y+23	; 0x17
    2a5a:	78 8d       	ldd	r23, Y+24	; 0x18
    2a5c:	ce 01       	movw	r24, r28
    2a5e:	01 96       	adiw	r24, 0x01	; 1
    2a60:	16 db       	rcall	.-2516   	; 0x208e <vfprintf>
    2a62:	ef 81       	ldd	r30, Y+7	; 0x07
    2a64:	f8 85       	ldd	r31, Y+8	; 0x08
    2a66:	e0 0f       	add	r30, r16
    2a68:	f1 1f       	adc	r31, r17
    2a6a:	10 82       	st	Z, r1
    2a6c:	2e 96       	adiw	r28, 0x0e	; 14
    2a6e:	e4 e0       	ldi	r30, 0x04	; 4
    2a70:	96 ce       	rjmp	.-724    	; 0x279e <__epilogue_restores__+0x1c>

00002a72 <__ultoa_invert>:
    2a72:	fa 01       	movw	r30, r20
    2a74:	aa 27       	eor	r26, r26
    2a76:	28 30       	cpi	r18, 0x08	; 8
    2a78:	51 f1       	breq	.+84     	; 0x2ace <__ultoa_invert+0x5c>
    2a7a:	20 31       	cpi	r18, 0x10	; 16
    2a7c:	81 f1       	breq	.+96     	; 0x2ade <__ultoa_invert+0x6c>
    2a7e:	e8 94       	clt
    2a80:	6f 93       	push	r22
    2a82:	6e 7f       	andi	r22, 0xFE	; 254
    2a84:	6e 5f       	subi	r22, 0xFE	; 254
    2a86:	7f 4f       	sbci	r23, 0xFF	; 255
    2a88:	8f 4f       	sbci	r24, 0xFF	; 255
    2a8a:	9f 4f       	sbci	r25, 0xFF	; 255
    2a8c:	af 4f       	sbci	r26, 0xFF	; 255
    2a8e:	b1 e0       	ldi	r27, 0x01	; 1
    2a90:	3e d0       	rcall	.+124    	; 0x2b0e <__ultoa_invert+0x9c>
    2a92:	b4 e0       	ldi	r27, 0x04	; 4
    2a94:	3c d0       	rcall	.+120    	; 0x2b0e <__ultoa_invert+0x9c>
    2a96:	67 0f       	add	r22, r23
    2a98:	78 1f       	adc	r23, r24
    2a9a:	89 1f       	adc	r24, r25
    2a9c:	9a 1f       	adc	r25, r26
    2a9e:	a1 1d       	adc	r26, r1
    2aa0:	68 0f       	add	r22, r24
    2aa2:	79 1f       	adc	r23, r25
    2aa4:	8a 1f       	adc	r24, r26
    2aa6:	91 1d       	adc	r25, r1
    2aa8:	a1 1d       	adc	r26, r1
    2aaa:	6a 0f       	add	r22, r26
    2aac:	71 1d       	adc	r23, r1
    2aae:	81 1d       	adc	r24, r1
    2ab0:	91 1d       	adc	r25, r1
    2ab2:	a1 1d       	adc	r26, r1
    2ab4:	20 d0       	rcall	.+64     	; 0x2af6 <__ultoa_invert+0x84>
    2ab6:	09 f4       	brne	.+2      	; 0x2aba <__ultoa_invert+0x48>
    2ab8:	68 94       	set
    2aba:	3f 91       	pop	r19
    2abc:	2a e0       	ldi	r18, 0x0A	; 10
    2abe:	26 9f       	mul	r18, r22
    2ac0:	11 24       	eor	r1, r1
    2ac2:	30 19       	sub	r19, r0
    2ac4:	30 5d       	subi	r19, 0xD0	; 208
    2ac6:	31 93       	st	Z+, r19
    2ac8:	de f6       	brtc	.-74     	; 0x2a80 <__ultoa_invert+0xe>
    2aca:	cf 01       	movw	r24, r30
    2acc:	08 95       	ret
    2ace:	46 2f       	mov	r20, r22
    2ad0:	47 70       	andi	r20, 0x07	; 7
    2ad2:	40 5d       	subi	r20, 0xD0	; 208
    2ad4:	41 93       	st	Z+, r20
    2ad6:	b3 e0       	ldi	r27, 0x03	; 3
    2ad8:	0f d0       	rcall	.+30     	; 0x2af8 <__ultoa_invert+0x86>
    2ada:	c9 f7       	brne	.-14     	; 0x2ace <__ultoa_invert+0x5c>
    2adc:	f6 cf       	rjmp	.-20     	; 0x2aca <__ultoa_invert+0x58>
    2ade:	46 2f       	mov	r20, r22
    2ae0:	4f 70       	andi	r20, 0x0F	; 15
    2ae2:	40 5d       	subi	r20, 0xD0	; 208
    2ae4:	4a 33       	cpi	r20, 0x3A	; 58
    2ae6:	18 f0       	brcs	.+6      	; 0x2aee <__ultoa_invert+0x7c>
    2ae8:	49 5d       	subi	r20, 0xD9	; 217
    2aea:	31 fd       	sbrc	r19, 1
    2aec:	40 52       	subi	r20, 0x20	; 32
    2aee:	41 93       	st	Z+, r20
    2af0:	02 d0       	rcall	.+4      	; 0x2af6 <__ultoa_invert+0x84>
    2af2:	a9 f7       	brne	.-22     	; 0x2ade <__ultoa_invert+0x6c>
    2af4:	ea cf       	rjmp	.-44     	; 0x2aca <__ultoa_invert+0x58>
    2af6:	b4 e0       	ldi	r27, 0x04	; 4
    2af8:	a6 95       	lsr	r26
    2afa:	97 95       	ror	r25
    2afc:	87 95       	ror	r24
    2afe:	77 95       	ror	r23
    2b00:	67 95       	ror	r22
    2b02:	ba 95       	dec	r27
    2b04:	c9 f7       	brne	.-14     	; 0x2af8 <__ultoa_invert+0x86>
    2b06:	00 97       	sbiw	r24, 0x00	; 0
    2b08:	61 05       	cpc	r22, r1
    2b0a:	71 05       	cpc	r23, r1
    2b0c:	08 95       	ret
    2b0e:	9b 01       	movw	r18, r22
    2b10:	ac 01       	movw	r20, r24
    2b12:	0a 2e       	mov	r0, r26
    2b14:	06 94       	lsr	r0
    2b16:	57 95       	ror	r21
    2b18:	47 95       	ror	r20
    2b1a:	37 95       	ror	r19
    2b1c:	27 95       	ror	r18
    2b1e:	ba 95       	dec	r27
    2b20:	c9 f7       	brne	.-14     	; 0x2b14 <__ultoa_invert+0xa2>
    2b22:	62 0f       	add	r22, r18
    2b24:	73 1f       	adc	r23, r19
    2b26:	84 1f       	adc	r24, r20
    2b28:	95 1f       	adc	r25, r21
    2b2a:	a0 1d       	adc	r26, r0
    2b2c:	08 95       	ret

00002b2e <_exit>:
    2b2e:	f8 94       	cli

00002b30 <__stop_program>:
    2b30:	ff cf       	rjmp	.-2      	; 0x2b30 <__stop_program>
