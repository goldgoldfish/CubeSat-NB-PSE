
MEGA_GPIO_EXAMPLE1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000006c4  00800200  0000369e  00003732  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000369e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000006a  008008c4  008008c4  00003df6  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00003df6  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00003e54  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000310  00000000  00000000  00003e90  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00004696  00000000  00000000  000041a0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000184a  00000000  00000000  00008836  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000040b2  00000000  00000000  0000a080  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000864  00000000  00000000  0000e134  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00014de9  00000000  00000000  0000e998  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000229f  00000000  00000000  00023781  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000250  00000000  00000000  00025a20  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  0000619b  00000000  00000000  00025c70  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	f2 c0       	rjmp	.+484    	; 0x1e6 <__ctors_end>
       2:	00 00       	nop
       4:	0d c1       	rjmp	.+538    	; 0x220 <__bad_interrupt>
       6:	00 00       	nop
       8:	0b c1       	rjmp	.+534    	; 0x220 <__bad_interrupt>
       a:	00 00       	nop
       c:	09 c1       	rjmp	.+530    	; 0x220 <__bad_interrupt>
       e:	00 00       	nop
      10:	07 c1       	rjmp	.+526    	; 0x220 <__bad_interrupt>
      12:	00 00       	nop
      14:	05 c1       	rjmp	.+522    	; 0x220 <__bad_interrupt>
      16:	00 00       	nop
      18:	03 c1       	rjmp	.+518    	; 0x220 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	01 c1       	rjmp	.+514    	; 0x220 <__bad_interrupt>
      1e:	00 00       	nop
      20:	ff c0       	rjmp	.+510    	; 0x220 <__bad_interrupt>
      22:	00 00       	nop
      24:	fd c0       	rjmp	.+506    	; 0x220 <__bad_interrupt>
      26:	00 00       	nop
      28:	fb c0       	rjmp	.+502    	; 0x220 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	f9 c0       	rjmp	.+498    	; 0x220 <__bad_interrupt>
      2e:	00 00       	nop
      30:	0c 94 ab 13 	jmp	0x2756	; 0x2756 <__vector_12>
      34:	f5 c0       	rjmp	.+490    	; 0x220 <__bad_interrupt>
      36:	00 00       	nop
      38:	f3 c0       	rjmp	.+486    	; 0x220 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	f1 c0       	rjmp	.+482    	; 0x220 <__bad_interrupt>
      3e:	00 00       	nop
      40:	ef c0       	rjmp	.+478    	; 0x220 <__bad_interrupt>
      42:	00 00       	nop
      44:	0c 94 d4 11 	jmp	0x23a8	; 0x23a8 <__vector_17>
      48:	eb c0       	rjmp	.+470    	; 0x220 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	e9 c0       	rjmp	.+466    	; 0x220 <__bad_interrupt>
      4e:	00 00       	nop
      50:	e7 c0       	rjmp	.+462    	; 0x220 <__bad_interrupt>
      52:	00 00       	nop
      54:	e5 c0       	rjmp	.+458    	; 0x220 <__bad_interrupt>
      56:	00 00       	nop
      58:	e3 c0       	rjmp	.+454    	; 0x220 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	e1 c0       	rjmp	.+450    	; 0x220 <__bad_interrupt>
      5e:	00 00       	nop
      60:	df c0       	rjmp	.+446    	; 0x220 <__bad_interrupt>
      62:	00 00       	nop
      64:	0c 94 4f 13 	jmp	0x269e	; 0x269e <__vector_25>
      68:	db c0       	rjmp	.+438    	; 0x220 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	d9 c0       	rjmp	.+434    	; 0x220 <__bad_interrupt>
      6e:	00 00       	nop
      70:	d7 c0       	rjmp	.+430    	; 0x220 <__bad_interrupt>
      72:	00 00       	nop
      74:	d5 c0       	rjmp	.+426    	; 0x220 <__bad_interrupt>
      76:	00 00       	nop
      78:	d3 c0       	rjmp	.+422    	; 0x220 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	d1 c0       	rjmp	.+418    	; 0x220 <__bad_interrupt>
      7e:	00 00       	nop
      80:	cf c0       	rjmp	.+414    	; 0x220 <__bad_interrupt>
      82:	00 00       	nop
      84:	cd c0       	rjmp	.+410    	; 0x220 <__bad_interrupt>
      86:	00 00       	nop
      88:	cb c0       	rjmp	.+406    	; 0x220 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	c9 c0       	rjmp	.+402    	; 0x220 <__bad_interrupt>
      8e:	00 00       	nop
      90:	c7 c0       	rjmp	.+398    	; 0x220 <__bad_interrupt>
      92:	00 00       	nop
      94:	c5 c0       	rjmp	.+394    	; 0x220 <__bad_interrupt>
      96:	00 00       	nop
      98:	c3 c0       	rjmp	.+390    	; 0x220 <__bad_interrupt>
      9a:	00 00       	nop
      9c:	c1 c0       	rjmp	.+386    	; 0x220 <__bad_interrupt>
      9e:	00 00       	nop
      a0:	bf c0       	rjmp	.+382    	; 0x220 <__bad_interrupt>
      a2:	00 00       	nop
      a4:	bd c0       	rjmp	.+378    	; 0x220 <__bad_interrupt>
      a6:	00 00       	nop
      a8:	bb c0       	rjmp	.+374    	; 0x220 <__bad_interrupt>
      aa:	00 00       	nop
      ac:	b9 c0       	rjmp	.+370    	; 0x220 <__bad_interrupt>
      ae:	00 00       	nop
      b0:	b7 c0       	rjmp	.+366    	; 0x220 <__bad_interrupt>
      b2:	00 00       	nop
      b4:	b5 c0       	rjmp	.+362    	; 0x220 <__bad_interrupt>
      b6:	00 00       	nop
      b8:	b3 c0       	rjmp	.+358    	; 0x220 <__bad_interrupt>
      ba:	00 00       	nop
      bc:	b1 c0       	rjmp	.+354    	; 0x220 <__bad_interrupt>
      be:	00 00       	nop
      c0:	af c0       	rjmp	.+350    	; 0x220 <__bad_interrupt>
      c2:	00 00       	nop
      c4:	ad c0       	rjmp	.+346    	; 0x220 <__bad_interrupt>
      c6:	00 00       	nop
      c8:	ab c0       	rjmp	.+342    	; 0x220 <__bad_interrupt>
      ca:	00 00       	nop
      cc:	a9 c0       	rjmp	.+338    	; 0x220 <__bad_interrupt>
      ce:	00 00       	nop
      d0:	a7 c0       	rjmp	.+334    	; 0x220 <__bad_interrupt>
      d2:	00 00       	nop
      d4:	a5 c0       	rjmp	.+330    	; 0x220 <__bad_interrupt>
      d6:	00 00       	nop
      d8:	a3 c0       	rjmp	.+326    	; 0x220 <__bad_interrupt>
      da:	00 00       	nop
      dc:	a1 c0       	rjmp	.+322    	; 0x220 <__bad_interrupt>
      de:	00 00       	nop
      e0:	9f c0       	rjmp	.+318    	; 0x220 <__bad_interrupt>
	...

000000e4 <__trampolines_end>:
      e4:	6e 61       	ori	r22, 0x1E	; 30
      e6:	6e 00       	.word	0x006e	; ????

000000e8 <__c.2332>:
      e8:	69 6e 66 00 00 40 7a 10 f3 5a 00 a0 72 4e 18 09     inf..@z..Z..rN..
      f8:	00 10 a5 d4 e8 00 00 e8 76 48 17 00 00 e4 0b 54     ........vH.....T
     108:	02 00 00 ca 9a 3b 00 00 00 e1 f5 05 00 00 80 96     .....;..........
     118:	98 00 00 00 40 42 0f 00 00 00 a0 86 01 00 00 00     ....@B..........
     128:	10 27 00 00 00 00 e8 03 00 00 00 00 64 00 00 00     .'..........d...
     138:	00 00 0a 00 00 00 00 00 01 00 00 00 00 00 2c 76     ..............,v
     148:	d8 88 dc 67 4f 08 23 df c1 df ae 59 e1 b1 b7 96     ...gO.#....Y....
     158:	e5 e3 e4 53 c6 3a e6 51 99 76 96 e8 e6 c2 84 26     ...S.:.Q.v.....&
     168:	eb 89 8c 9b 62 ed 40 7c 6f fc ef bc 9c 9f 40 f2     ....b.@|o.....@.
     178:	ba a5 6f a5 f4 90 05 5a 2a f7 5c 93 6b 6c f9 67     ..o....Z*.\.kl.g
     188:	6d c1 1b fc e0 e4 0d 47 fe f5 20 e6 b5 00 d0 ed     m......G.. .....
     198:	90 2e 03 00 94 35 77 05 00 80 84 1e 08 00 00 20     .....5w........ 
     1a8:	4e 0a 00 00 00 c8 0c 33 33 33 33 0f 98 6e 12 83     N......3333..n..
     1b8:	11 41 ef 8d 21 14 89 3b e6 55 16 cf fe e6 db 18     .A..!..;.U......
     1c8:	d1 84 4b 38 1b f7 7c 1d 90 1d a4 bb e4 24 20 32     ..K8..|......$ 2
     1d8:	84 72 5e 22 81 00 c9 f1 24 ec a1 e5 3d 27           .r^"....$...='

000001e6 <__ctors_end>:
     1e6:	11 24       	eor	r1, r1
     1e8:	1f be       	out	0x3f, r1	; 63
     1ea:	cf ef       	ldi	r28, 0xFF	; 255
     1ec:	d1 e2       	ldi	r29, 0x21	; 33
     1ee:	de bf       	out	0x3e, r29	; 62
     1f0:	cd bf       	out	0x3d, r28	; 61

000001f2 <__do_copy_data>:
     1f2:	18 e0       	ldi	r17, 0x08	; 8
     1f4:	a0 e0       	ldi	r26, 0x00	; 0
     1f6:	b2 e0       	ldi	r27, 0x02	; 2
     1f8:	ee e9       	ldi	r30, 0x9E	; 158
     1fa:	f6 e3       	ldi	r31, 0x36	; 54
     1fc:	02 c0       	rjmp	.+4      	; 0x202 <__do_copy_data+0x10>
     1fe:	05 90       	lpm	r0, Z+
     200:	0d 92       	st	X+, r0
     202:	a4 3c       	cpi	r26, 0xC4	; 196
     204:	b1 07       	cpc	r27, r17
     206:	d9 f7       	brne	.-10     	; 0x1fe <__do_copy_data+0xc>

00000208 <__do_clear_bss>:
     208:	29 e0       	ldi	r18, 0x09	; 9
     20a:	a4 ec       	ldi	r26, 0xC4	; 196
     20c:	b8 e0       	ldi	r27, 0x08	; 8
     20e:	01 c0       	rjmp	.+2      	; 0x212 <.do_clear_bss_start>

00000210 <.do_clear_bss_loop>:
     210:	1d 92       	st	X+, r1

00000212 <.do_clear_bss_start>:
     212:	ae 32       	cpi	r26, 0x2E	; 46
     214:	b2 07       	cpc	r27, r18
     216:	e1 f7       	brne	.-8      	; 0x210 <.do_clear_bss_loop>
     218:	0e 94 d0 13 	call	0x27a0	; 0x27a0 <main>
     21c:	0c 94 4d 1b 	jmp	0x369a	; 0x369a <_exit>

00000220 <__bad_interrupt>:
     220:	ef ce       	rjmp	.-546    	; 0x0 <__vectors>

00000222 <Change_ADC>:
// Date: 2019-01-15
// Description: Change ADC_MUX to read next value
/*========================================================================================*/

void Change_ADC(int i){
	if (i < 4){
     222:	84 30       	cpi	r24, 0x04	; 4
     224:	91 05       	cpc	r25, r1
     226:	44 f4       	brge	.+16     	; 0x238 <Change_ADC+0x16>
		ADCSRB &= 0xf7;
     228:	eb e7       	ldi	r30, 0x7B	; 123
     22a:	f0 e0       	ldi	r31, 0x00	; 0
     22c:	90 81       	ld	r25, Z
     22e:	97 7f       	andi	r25, 0xF7	; 247
     230:	90 83       	st	Z, r25
		ADMUX = 0x00 + i;
     232:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>
     236:	08 95       	ret
	}
	else{
		ADCSRB = 0x08;
     238:	98 e0       	ldi	r25, 0x08	; 8
     23a:	90 93 7b 00 	sts	0x007B, r25	; 0x80007b <__TEXT_REGION_LENGTH__+0x7e007b>
		ADMUX = 0x00 + (i - 4);
     23e:	84 50       	subi	r24, 0x04	; 4
     240:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>
     244:	08 95       	ret

00000246 <Read_ADC>:
/*========================================================================================*/

uint16_t Read_ADC(){
	
	// start conversion
	ADCSRA |= 0x40;
     246:	ea e7       	ldi	r30, 0x7A	; 122
     248:	f0 e0       	ldi	r31, 0x00	; 0
     24a:	80 81       	ld	r24, Z
     24c:	80 64       	ori	r24, 0x40	; 64
     24e:	80 83       	st	Z, r24
	
	// Wait until conversion is done
	while(ADCSRA & 0x40);
     250:	80 81       	ld	r24, Z
     252:	86 fd       	sbrc	r24, 6
     254:	fd cf       	rjmp	.-6      	; 0x250 <Read_ADC+0xa>
	
	return ADC;
     256:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
     25a:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
}
     25e:	08 95       	ret

00000260 <Check_ADC>:
/*========================================================================================*/

float Check_ADC(int i){
	
	// Choose the correct ADC channel to read from
	Change_ADC(i);
     260:	e0 df       	rcall	.-64     	; 0x222 <Change_ADC>
	
	// Get the read value from the ADC
	return Read_ADC();	
     262:	f1 df       	rcall	.-30     	; 0x246 <Read_ADC>
     264:	bc 01       	movw	r22, r24
     266:	80 e0       	ldi	r24, 0x00	; 0
     268:	90 e0       	ldi	r25, 0x00	; 0
     26a:	0c 94 e4 14 	jmp	0x29c8	; 0x29c8 <__floatunsisf>
     26e:	08 95       	ret

00000270 <Volt_ADC>:
	
}
     270:	9c 01       	movw	r18, r24
// Date: 2019-03-06
// Description: Voltage Measurements via ADC.
/*========================================================================================*/

float Volt_ADC(int Volt_num){
	int ADC_num = Volt_num + 4; // ADC_num is the value needed for Change_ADC
     272:	2c 5f       	subi	r18, 0xFC	; 252
     274:	3f 4f       	sbci	r19, 0xFF	; 255
	
	// Explained
	// voltage = (ADC_value / total resolution)
	
	// 3V3-1 & 3V3-2 rails
	if(ADC_num == 4 || ADC_num == 5){
     276:	02 97       	sbiw	r24, 0x02	; 2
     278:	a8 f4       	brcc	.+42     	; 0x2a4 <Volt_ADC+0x34>
		val = ((Check_ADC(ADC_num) / 1024) * 3.3) / 0.9090;
     27a:	c9 01       	movw	r24, r18
     27c:	f1 df       	rcall	.-30     	; 0x260 <Check_ADC>
     27e:	20 e0       	ldi	r18, 0x00	; 0
     280:	30 e0       	ldi	r19, 0x00	; 0
     282:	40 e8       	ldi	r20, 0x80	; 128
     284:	5a e3       	ldi	r21, 0x3A	; 58
     286:	0e 94 9a 15 	call	0x2b34	; 0x2b34 <__mulsf3>
     28a:	23 e3       	ldi	r18, 0x33	; 51
     28c:	33 e3       	ldi	r19, 0x33	; 51
     28e:	43 e5       	ldi	r20, 0x53	; 83
     290:	50 e4       	ldi	r21, 0x40	; 64
     292:	0e 94 9a 15 	call	0x2b34	; 0x2b34 <__mulsf3>
     296:	29 e3       	ldi	r18, 0x39	; 57
     298:	34 eb       	ldi	r19, 0xB4	; 180
     29a:	48 e6       	ldi	r20, 0x68	; 104
     29c:	5f e3       	ldi	r21, 0x3F	; 63
     29e:	0c 94 4b 14 	jmp	0x2896	; 0x2896 <__divsf3>
     2a2:	08 95       	ret
	}
	// 5V rail
	else if(ADC_num == 6){
     2a4:	26 30       	cpi	r18, 0x06	; 6
     2a6:	31 05       	cpc	r19, r1
     2a8:	b1 f4       	brne	.+44     	; 0x2d6 <Volt_ADC+0x66>
		val = ((Check_ADC(ADC_num) / 1024) * 3.3) / 0.5997;
     2aa:	86 e0       	ldi	r24, 0x06	; 6
     2ac:	90 e0       	ldi	r25, 0x00	; 0
     2ae:	d8 df       	rcall	.-80     	; 0x260 <Check_ADC>
     2b0:	20 e0       	ldi	r18, 0x00	; 0
     2b2:	30 e0       	ldi	r19, 0x00	; 0
     2b4:	40 e8       	ldi	r20, 0x80	; 128
     2b6:	5a e3       	ldi	r21, 0x3A	; 58
     2b8:	0e 94 9a 15 	call	0x2b34	; 0x2b34 <__mulsf3>
     2bc:	23 e3       	ldi	r18, 0x33	; 51
     2be:	33 e3       	ldi	r19, 0x33	; 51
     2c0:	43 e5       	ldi	r20, 0x53	; 83
     2c2:	50 e4       	ldi	r21, 0x40	; 64
     2c4:	0e 94 9a 15 	call	0x2b34	; 0x2b34 <__mulsf3>
     2c8:	20 ef       	ldi	r18, 0xF0	; 240
     2ca:	35 e8       	ldi	r19, 0x85	; 133
     2cc:	49 e1       	ldi	r20, 0x19	; 25
     2ce:	5f e3       	ldi	r21, 0x3F	; 63
     2d0:	0c 94 4b 14 	jmp	0x2896	; 0x2896 <__divsf3>
     2d4:	08 95       	ret
		// Correction factor (through testing)
		// 69 (mV) offset
	}
	// 8V rail
	else if(ADC_num == 7){
     2d6:	27 30       	cpi	r18, 0x07	; 7
     2d8:	31 05       	cpc	r19, r1
     2da:	b1 f4       	brne	.+44     	; 0x308 <Volt_ADC+0x98>
		val = ((Check_ADC(ADC_num) / 1024) * 3.3) / 0.3597;
     2dc:	87 e0       	ldi	r24, 0x07	; 7
     2de:	90 e0       	ldi	r25, 0x00	; 0
     2e0:	bf df       	rcall	.-130    	; 0x260 <Check_ADC>
     2e2:	20 e0       	ldi	r18, 0x00	; 0
     2e4:	30 e0       	ldi	r19, 0x00	; 0
     2e6:	40 e8       	ldi	r20, 0x80	; 128
     2e8:	5a e3       	ldi	r21, 0x3A	; 58
     2ea:	0e 94 9a 15 	call	0x2b34	; 0x2b34 <__mulsf3>
     2ee:	23 e3       	ldi	r18, 0x33	; 51
     2f0:	33 e3       	ldi	r19, 0x33	; 51
     2f2:	43 e5       	ldi	r20, 0x53	; 83
     2f4:	50 e4       	ldi	r21, 0x40	; 64
     2f6:	0e 94 9a 15 	call	0x2b34	; 0x2b34 <__mulsf3>
     2fa:	29 e9       	ldi	r18, 0x99	; 153
     2fc:	3a e2       	ldi	r19, 0x2A	; 42
     2fe:	48 eb       	ldi	r20, 0xB8	; 184
     300:	5e e3       	ldi	r21, 0x3E	; 62
     302:	0c 94 4b 14 	jmp	0x2896	; 0x2896 <__divsf3>
     306:	08 95       	ret
	}
	// VBatt rail
	else if(ADC_num == 8){
     308:	28 30       	cpi	r18, 0x08	; 8
     30a:	31 05       	cpc	r19, r1
		val = ((Check_ADC(ADC_num) / 1024) * 3.3) / 0.7141;
     30c:	b1 f4       	brne	.+44     	; 0x33a <Volt_ADC+0xca>
     30e:	88 e0       	ldi	r24, 0x08	; 8
     310:	90 e0       	ldi	r25, 0x00	; 0
     312:	a6 df       	rcall	.-180    	; 0x260 <Check_ADC>
     314:	20 e0       	ldi	r18, 0x00	; 0
     316:	30 e0       	ldi	r19, 0x00	; 0
     318:	40 e8       	ldi	r20, 0x80	; 128
     31a:	5a e3       	ldi	r21, 0x3A	; 58
     31c:	0e 94 9a 15 	call	0x2b34	; 0x2b34 <__mulsf3>
     320:	23 e3       	ldi	r18, 0x33	; 51
     322:	33 e3       	ldi	r19, 0x33	; 51
     324:	43 e5       	ldi	r20, 0x53	; 83
     326:	50 e4       	ldi	r21, 0x40	; 64
     328:	0e 94 9a 15 	call	0x2b34	; 0x2b34 <__mulsf3>
     32c:	22 e4       	ldi	r18, 0x42	; 66
     32e:	3f ec       	ldi	r19, 0xCF	; 207
     330:	46 e3       	ldi	r20, 0x36	; 54
     332:	5f e3       	ldi	r21, 0x3F	; 63
     334:	0c 94 4b 14 	jmp	0x2896	; 0x2896 <__divsf3>
     338:	08 95       	ret
// Description: Voltage Measurements via ADC.
/*========================================================================================*/

float Volt_ADC(int Volt_num){
	int ADC_num = Volt_num + 4; // ADC_num is the value needed for Change_ADC
	float val = 0;
     33a:	60 e0       	ldi	r22, 0x00	; 0
     33c:	70 e0       	ldi	r23, 0x00	; 0
     33e:	cb 01       	movw	r24, r22
	}
	else{
		// do nothing
	}
	return val;
}
     340:	08 95       	ret

00000342 <Amp_ADC>:
// Author: Chris Thomas
// Date: 2019-03-06
// Description: Ammeter measurements via ADC.
/*========================================================================================*/

float Amp_ADC(int Amp_num){
     342:	4f 92       	push	r4
     344:	5f 92       	push	r5
     346:	6f 92       	push	r6
     348:	7f 92       	push	r7
     34a:	8f 92       	push	r8
     34c:	9f 92       	push	r9
     34e:	af 92       	push	r10
     350:	bf 92       	push	r11
     352:	cf 92       	push	r12
     354:	df 92       	push	r13
     356:	ef 92       	push	r14
     358:	ff 92       	push	r15
     35a:	0f 93       	push	r16
     35c:	1f 93       	push	r17
     35e:	cf 93       	push	r28
     360:	df 93       	push	r29
     362:	cd b7       	in	r28, 0x3d	; 61
     364:	de b7       	in	r29, 0x3e	; 62
     366:	68 97       	sbiw	r28, 0x18	; 24
     368:	0f b6       	in	r0, 0x3f	; 63
     36a:	f8 94       	cli
     36c:	de bf       	out	0x3e, r29	; 62
     36e:	0f be       	out	0x3f, r0	; 63
     370:	cd bf       	out	0x3d, r28	; 61
     372:	5c 01       	movw	r10, r24
	int ADC_num = 0; // initialize ADC number to check
	float val = 0; // initialize the voltage value to 0 V
	float zero[6] = {0.515, 0.542, 0.523, 0.505, 0.508, 0.530};
     374:	88 e1       	ldi	r24, 0x18	; 24
     376:	e2 e0       	ldi	r30, 0x02	; 2
     378:	f2 e0       	ldi	r31, 0x02	; 2
     37a:	de 01       	movw	r26, r28
     37c:	11 96       	adiw	r26, 0x01	; 1
     37e:	01 90       	ld	r0, Z+
     380:	0d 92       	st	X+, r0
     382:	8a 95       	dec	r24
     384:	e1 f7       	brne	.-8      	; 0x37e <Amp_ADC+0x3c>
	int i = 0;
	
	// Voltage rail current 8V, 5V, 3V3-1, 3V3-2 respectively
	if(Amp_num < 4){
     386:	84 e0       	ldi	r24, 0x04	; 4
     388:	a8 16       	cp	r10, r24
     38a:	b1 04       	cpc	r11, r1
     38c:	0c f0       	brlt	.+2      	; 0x390 <Amp_ADC+0x4e>
     38e:	3d c0       	rjmp	.+122    	; 0x40a <__LOCK_REGION_LENGTH__+0xa>
     390:	09 e1       	ldi	r16, 0x19	; 25
     392:	10 e0       	ldi	r17, 0x00	; 0
     394:	c1 2c       	mov	r12, r1
     396:	d1 2c       	mov	r13, r1
     398:	76 01       	movw	r14, r12
		ADC_num = Amp_num;
		while(i < 25){
			val += (((Check_ADC(ADC_num) / 1024) * 3.3) - zero[Amp_num]) / 0.4;
     39a:	45 01       	movw	r8, r10
     39c:	88 0c       	add	r8, r8
     39e:	99 1c       	adc	r9, r9
     3a0:	88 0c       	add	r8, r8
     3a2:	99 1c       	adc	r9, r9
     3a4:	e1 e0       	ldi	r30, 0x01	; 1
     3a6:	f0 e0       	ldi	r31, 0x00	; 0
     3a8:	ec 0f       	add	r30, r28
     3aa:	fd 1f       	adc	r31, r29
     3ac:	8e 0e       	add	r8, r30
     3ae:	9f 1e       	adc	r9, r31
     3b0:	c5 01       	movw	r24, r10
     3b2:	56 df       	rcall	.-340    	; 0x260 <Check_ADC>
     3b4:	20 e0       	ldi	r18, 0x00	; 0
     3b6:	30 e0       	ldi	r19, 0x00	; 0
     3b8:	40 e8       	ldi	r20, 0x80	; 128
     3ba:	5a e3       	ldi	r21, 0x3A	; 58
     3bc:	0e 94 9a 15 	call	0x2b34	; 0x2b34 <__mulsf3>
     3c0:	23 e3       	ldi	r18, 0x33	; 51
     3c2:	33 e3       	ldi	r19, 0x33	; 51
     3c4:	43 e5       	ldi	r20, 0x53	; 83
     3c6:	50 e4       	ldi	r21, 0x40	; 64
     3c8:	0e 94 9a 15 	call	0x2b34	; 0x2b34 <__mulsf3>
     3cc:	f4 01       	movw	r30, r8
     3ce:	20 81       	ld	r18, Z
     3d0:	31 81       	ldd	r19, Z+1	; 0x01
     3d2:	42 81       	ldd	r20, Z+2	; 0x02
     3d4:	53 81       	ldd	r21, Z+3	; 0x03
     3d6:	0e 94 e2 13 	call	0x27c4	; 0x27c4 <__subsf3>
     3da:	2d ec       	ldi	r18, 0xCD	; 205
     3dc:	3c ec       	ldi	r19, 0xCC	; 204
     3de:	4c ec       	ldi	r20, 0xCC	; 204
     3e0:	5e e3       	ldi	r21, 0x3E	; 62
     3e2:	0e 94 4b 14 	call	0x2896	; 0x2896 <__divsf3>
     3e6:	9b 01       	movw	r18, r22
     3e8:	ac 01       	movw	r20, r24
     3ea:	c7 01       	movw	r24, r14
     3ec:	b6 01       	movw	r22, r12
     3ee:	0e 94 e3 13 	call	0x27c6	; 0x27c6 <__addsf3>
     3f2:	6b 01       	movw	r12, r22
     3f4:	7c 01       	movw	r14, r24
     3f6:	01 50       	subi	r16, 0x01	; 1
     3f8:	11 09       	sbc	r17, r1
	int i = 0;
	
	// Voltage rail current 8V, 5V, 3V3-1, 3V3-2 respectively
	if(Amp_num < 4){
		ADC_num = Amp_num;
		while(i < 25){
     3fa:	d1 f6       	brne	.-76     	; 0x3b0 <Amp_ADC+0x6e>
			val += (((Check_ADC(ADC_num) / 1024) * 3.3) - zero[Amp_num]) / 0.4;
			i++;
		}
		val = val/25;
     3fc:	20 e0       	ldi	r18, 0x00	; 0
     3fe:	30 e0       	ldi	r19, 0x00	; 0
     400:	48 ec       	ldi	r20, 0xC8	; 200
     402:	51 e4       	ldi	r21, 0x41	; 65
     404:	0e 94 4b 14 	call	0x2896	; 0x2896 <__divsf3>
     408:	48 c0       	rjmp	.+144    	; 0x49a <__LOCK_REGION_LENGTH__+0x9a>
	}
	// Solar current and Battery current, respectively
	else if(Amp_num == 4 || Amp_num == 5){
     40a:	c5 01       	movw	r24, r10
     40c:	04 97       	sbiw	r24, 0x04	; 4
     40e:	02 97       	sbiw	r24, 0x02	; 2
     410:	08 f0       	brcs	.+2      	; 0x414 <__LOCK_REGION_LENGTH__+0x14>
     412:	40 c0       	rjmp	.+128    	; 0x494 <__LOCK_REGION_LENGTH__+0x94>
		ADC_num = Amp_num + 5;
     414:	75 01       	movw	r14, r10
     416:	f5 e0       	ldi	r31, 0x05	; 5
     418:	ef 0e       	add	r14, r31
     41a:	f1 1c       	adc	r15, r1
     41c:	09 e1       	ldi	r16, 0x19	; 25
     41e:	10 e0       	ldi	r17, 0x00	; 0
// Description: Ammeter measurements via ADC.
/*========================================================================================*/

float Amp_ADC(int Amp_num){
	int ADC_num = 0; // initialize ADC number to check
	float val = 0; // initialize the voltage value to 0 V
     420:	41 2c       	mov	r4, r1
     422:	51 2c       	mov	r5, r1
     424:	32 01       	movw	r6, r4
	}
	// Solar current and Battery current, respectively
	else if(Amp_num == 4 || Amp_num == 5){
		ADC_num = Amp_num + 5;
		while(i < 25){
			val += (((Check_ADC(ADC_num) / 1024) * 3.3) - zero[Amp_num]) / 0.4;
     426:	aa 0c       	add	r10, r10
     428:	bb 1c       	adc	r11, r11
     42a:	aa 0c       	add	r10, r10
     42c:	bb 1c       	adc	r11, r11
     42e:	81 e0       	ldi	r24, 0x01	; 1
     430:	90 e0       	ldi	r25, 0x00	; 0
     432:	8c 0f       	add	r24, r28
     434:	9d 1f       	adc	r25, r29
     436:	a8 0e       	add	r10, r24
     438:	b9 1e       	adc	r11, r25
     43a:	c7 01       	movw	r24, r14
     43c:	11 df       	rcall	.-478    	; 0x260 <Check_ADC>
     43e:	20 e0       	ldi	r18, 0x00	; 0
     440:	30 e0       	ldi	r19, 0x00	; 0
     442:	40 e8       	ldi	r20, 0x80	; 128
     444:	5a e3       	ldi	r21, 0x3A	; 58
     446:	0e 94 9a 15 	call	0x2b34	; 0x2b34 <__mulsf3>
     44a:	23 e3       	ldi	r18, 0x33	; 51
     44c:	33 e3       	ldi	r19, 0x33	; 51
     44e:	43 e5       	ldi	r20, 0x53	; 83
     450:	50 e4       	ldi	r21, 0x40	; 64
     452:	0e 94 9a 15 	call	0x2b34	; 0x2b34 <__mulsf3>
     456:	f5 01       	movw	r30, r10
     458:	20 81       	ld	r18, Z
     45a:	31 81       	ldd	r19, Z+1	; 0x01
     45c:	42 81       	ldd	r20, Z+2	; 0x02
     45e:	53 81       	ldd	r21, Z+3	; 0x03
     460:	0e 94 e2 13 	call	0x27c4	; 0x27c4 <__subsf3>
     464:	2d ec       	ldi	r18, 0xCD	; 205
     466:	3c ec       	ldi	r19, 0xCC	; 204
     468:	4c ec       	ldi	r20, 0xCC	; 204
     46a:	5e e3       	ldi	r21, 0x3E	; 62
     46c:	0e 94 4b 14 	call	0x2896	; 0x2896 <__divsf3>
     470:	9b 01       	movw	r18, r22
     472:	ac 01       	movw	r20, r24
     474:	c3 01       	movw	r24, r6
     476:	b2 01       	movw	r22, r4
     478:	0e 94 e3 13 	call	0x27c6	; 0x27c6 <__addsf3>
     47c:	2b 01       	movw	r4, r22
     47e:	3c 01       	movw	r6, r24
     480:	01 50       	subi	r16, 0x01	; 1
     482:	11 09       	sbc	r17, r1
		val = val/25;
	}
	// Solar current and Battery current, respectively
	else if(Amp_num == 4 || Amp_num == 5){
		ADC_num = Amp_num + 5;
		while(i < 25){
     484:	d1 f6       	brne	.-76     	; 0x43a <__LOCK_REGION_LENGTH__+0x3a>
			val += (((Check_ADC(ADC_num) / 1024) * 3.3) - zero[Amp_num]) / 0.4;
			i++;
		}
		val = val/25;
     486:	20 e0       	ldi	r18, 0x00	; 0
     488:	30 e0       	ldi	r19, 0x00	; 0
     48a:	48 ec       	ldi	r20, 0xC8	; 200
     48c:	51 e4       	ldi	r21, 0x41	; 65
     48e:	0e 94 4b 14 	call	0x2896	; 0x2896 <__divsf3>
     492:	03 c0       	rjmp	.+6      	; 0x49a <__LOCK_REGION_LENGTH__+0x9a>
// Description: Ammeter measurements via ADC.
/*========================================================================================*/

float Amp_ADC(int Amp_num){
	int ADC_num = 0; // initialize ADC number to check
	float val = 0; // initialize the voltage value to 0 V
     494:	60 e0       	ldi	r22, 0x00	; 0
     496:	70 e0       	ldi	r23, 0x00	; 0
     498:	cb 01       	movw	r24, r22
			i++;
		}
		val = val/25;
	}
	return val;
}
     49a:	68 96       	adiw	r28, 0x18	; 24
     49c:	0f b6       	in	r0, 0x3f	; 63
     49e:	f8 94       	cli
     4a0:	de bf       	out	0x3e, r29	; 62
     4a2:	0f be       	out	0x3f, r0	; 63
     4a4:	cd bf       	out	0x3d, r28	; 61
     4a6:	df 91       	pop	r29
     4a8:	cf 91       	pop	r28
     4aa:	1f 91       	pop	r17
     4ac:	0f 91       	pop	r16
     4ae:	ff 90       	pop	r15
     4b0:	ef 90       	pop	r14
     4b2:	df 90       	pop	r13
     4b4:	cf 90       	pop	r12
     4b6:	bf 90       	pop	r11
     4b8:	af 90       	pop	r10
     4ba:	9f 90       	pop	r9
     4bc:	8f 90       	pop	r8
     4be:	7f 90       	pop	r7
     4c0:	6f 90       	pop	r6
     4c2:	5f 90       	pop	r5
     4c4:	4f 90       	pop	r4
     4c6:	08 95       	ret

000004c8 <Temp_ADC>:
// Author: Chris Thomas
// Date: 2019-03-17
// Description: Temperature measurement via ADC.
/*========================================================================================*/

float Temp_ADC(){
     4c8:	af 92       	push	r10
     4ca:	bf 92       	push	r11
     4cc:	cf 92       	push	r12
     4ce:	df 92       	push	r13
     4d0:	ef 92       	push	r14
     4d2:	ff 92       	push	r15
     4d4:	0f 93       	push	r16
     4d6:	1f 93       	push	r17
     4d8:	cf 93       	push	r28
     4da:	df 93       	push	r29
     4dc:	cd b7       	in	r28, 0x3d	; 61
     4de:	de b7       	in	r29, 0x3e	; 62
     4e0:	2c 97       	sbiw	r28, 0x0c	; 12
     4e2:	0f b6       	in	r0, 0x3f	; 63
     4e4:	f8 94       	cli
     4e6:	de bf       	out	0x3e, r29	; 62
     4e8:	0f be       	out	0x3f, r0	; 63
     4ea:	cd bf       	out	0x3d, r28	; 61
	int i = 0;
	float temp[3];
	float high; // return the highest temperature for symposium demo
	
	// Enable temperature sensor
	Clear_GPIO(1);
     4ec:	81 e0       	ldi	r24, 0x01	; 1
     4ee:	90 e0       	ldi	r25, 0x00	; 0
     4f0:	0e 94 07 0b 	call	0x160e	; 0x160e <Clear_GPIO>
     4f4:	ee 24       	eor	r14, r14
     4f6:	e3 94       	inc	r14
     4f8:	f1 2c       	mov	r15, r1
     4fa:	00 e0       	ldi	r16, 0x00	; 0
     4fc:	10 e0       	ldi	r17, 0x00	; 0
     4fe:	05 c0       	rjmp	.+10     	; 0x50a <Temp_ADC+0x42>
     500:	0f 5f       	subi	r16, 0xFF	; 255
     502:	1f 4f       	sbci	r17, 0xFF	; 255
     504:	8f ef       	ldi	r24, 0xFF	; 255
     506:	e8 1a       	sub	r14, r24
     508:	f8 0a       	sbc	r15, r24
	
	 // 3 Temperature sensors on battery
	while(i < 3){
		if (i == 0){
     50a:	01 15       	cp	r16, r1
     50c:	11 05       	cpc	r17, r1
     50e:	61 f5       	brne	.+88     	; 0x568 <Temp_ADC+0xa0>
			Clear_GPIO(4);
     510:	84 e0       	ldi	r24, 0x04	; 4
     512:	90 e0       	ldi	r25, 0x00	; 0
     514:	0e 94 07 0b 	call	0x160e	; 0x160e <Clear_GPIO>
			Set_GPIO(5);
     518:	85 e0       	ldi	r24, 0x05	; 5
     51a:	90 e0       	ldi	r25, 0x00	; 0
     51c:	0e 94 a1 0a 	call	0x1542	; 0x1542 <Set_GPIO>
			Set_GPIO(6);
     520:	86 e0       	ldi	r24, 0x06	; 6
     522:	90 e0       	ldi	r25, 0x00	; 0
     524:	0e 94 a1 0a 	call	0x1542	; 0x1542 <Set_GPIO>
			temp[0] = (((Check_ADC(11) / 1024) * 3.3) - 0.6972) / 0.0328;
     528:	8b e0       	ldi	r24, 0x0B	; 11
     52a:	90 e0       	ldi	r25, 0x00	; 0
     52c:	99 de       	rcall	.-718    	; 0x260 <Check_ADC>
     52e:	20 e0       	ldi	r18, 0x00	; 0
     530:	30 e0       	ldi	r19, 0x00	; 0
     532:	40 e8       	ldi	r20, 0x80	; 128
     534:	5a e3       	ldi	r21, 0x3A	; 58
     536:	0e 94 9a 15 	call	0x2b34	; 0x2b34 <__mulsf3>
     53a:	23 e3       	ldi	r18, 0x33	; 51
     53c:	33 e3       	ldi	r19, 0x33	; 51
     53e:	43 e5       	ldi	r20, 0x53	; 83
     540:	50 e4       	ldi	r21, 0x40	; 64
     542:	0e 94 9a 15 	call	0x2b34	; 0x2b34 <__mulsf3>
     546:	23 eb       	ldi	r18, 0xB3	; 179
     548:	3b e7       	ldi	r19, 0x7B	; 123
     54a:	42 e3       	ldi	r20, 0x32	; 50
     54c:	5f e3       	ldi	r21, 0x3F	; 63
     54e:	0e 94 e2 13 	call	0x27c4	; 0x27c4 <__subsf3>
     552:	2b e4       	ldi	r18, 0x4B	; 75
     554:	39 e5       	ldi	r19, 0x59	; 89
     556:	46 e0       	ldi	r20, 0x06	; 6
     558:	5d e3       	ldi	r21, 0x3D	; 61
     55a:	0e 94 4b 14 	call	0x2896	; 0x2896 <__divsf3>
     55e:	69 83       	std	Y+1, r22	; 0x01
     560:	7a 83       	std	Y+2, r23	; 0x02
     562:	8b 83       	std	Y+3, r24	; 0x03
     564:	9c 83       	std	Y+4, r25	; 0x04
     566:	cc cf       	rjmp	.-104    	; 0x500 <Temp_ADC+0x38>
		}
		else if(i == 1){
     568:	01 30       	cpi	r16, 0x01	; 1
     56a:	11 05       	cpc	r17, r1
     56c:	51 f5       	brne	.+84     	; 0x5c2 <Temp_ADC+0xfa>
			Set_GPIO(4);
     56e:	84 e0       	ldi	r24, 0x04	; 4
     570:	90 e0       	ldi	r25, 0x00	; 0
     572:	e7 d7       	rcall	.+4046   	; 0x1542 <Set_GPIO>
			Set_GPIO(5);
     574:	85 e0       	ldi	r24, 0x05	; 5
     576:	90 e0       	ldi	r25, 0x00	; 0
     578:	e4 d7       	rcall	.+4040   	; 0x1542 <Set_GPIO>
			Clear_GPIO(6);
     57a:	86 e0       	ldi	r24, 0x06	; 6
     57c:	90 e0       	ldi	r25, 0x00	; 0
     57e:	0e 94 07 0b 	call	0x160e	; 0x160e <Clear_GPIO>
			temp[1] = (((Check_ADC(11) / 1024) * 3.3) - 0.6972) / 0.0328;
     582:	8b e0       	ldi	r24, 0x0B	; 11
     584:	90 e0       	ldi	r25, 0x00	; 0
     586:	6c de       	rcall	.-808    	; 0x260 <Check_ADC>
     588:	20 e0       	ldi	r18, 0x00	; 0
     58a:	30 e0       	ldi	r19, 0x00	; 0
     58c:	40 e8       	ldi	r20, 0x80	; 128
     58e:	5a e3       	ldi	r21, 0x3A	; 58
     590:	0e 94 9a 15 	call	0x2b34	; 0x2b34 <__mulsf3>
     594:	23 e3       	ldi	r18, 0x33	; 51
     596:	33 e3       	ldi	r19, 0x33	; 51
     598:	43 e5       	ldi	r20, 0x53	; 83
     59a:	50 e4       	ldi	r21, 0x40	; 64
     59c:	0e 94 9a 15 	call	0x2b34	; 0x2b34 <__mulsf3>
     5a0:	23 eb       	ldi	r18, 0xB3	; 179
     5a2:	3b e7       	ldi	r19, 0x7B	; 123
     5a4:	42 e3       	ldi	r20, 0x32	; 50
     5a6:	5f e3       	ldi	r21, 0x3F	; 63
     5a8:	0e 94 e2 13 	call	0x27c4	; 0x27c4 <__subsf3>
     5ac:	2b e4       	ldi	r18, 0x4B	; 75
     5ae:	39 e5       	ldi	r19, 0x59	; 89
     5b0:	46 e0       	ldi	r20, 0x06	; 6
     5b2:	5d e3       	ldi	r21, 0x3D	; 61
     5b4:	0e 94 4b 14 	call	0x2896	; 0x2896 <__divsf3>
     5b8:	6d 83       	std	Y+5, r22	; 0x05
     5ba:	7e 83       	std	Y+6, r23	; 0x06
     5bc:	8f 83       	std	Y+7, r24	; 0x07
     5be:	98 87       	std	Y+8, r25	; 0x08
     5c0:	9f cf       	rjmp	.-194    	; 0x500 <Temp_ADC+0x38>
		}
		else if (i == 2){
     5c2:	02 30       	cpi	r16, 0x02	; 2
     5c4:	11 05       	cpc	r17, r1
			Set_GPIO(4);
     5c6:	49 f5       	brne	.+82     	; 0x61a <Temp_ADC+0x152>
     5c8:	84 e0       	ldi	r24, 0x04	; 4
     5ca:	90 e0       	ldi	r25, 0x00	; 0
			Set_GPIO(5);
     5cc:	ba d7       	rcall	.+3956   	; 0x1542 <Set_GPIO>
     5ce:	85 e0       	ldi	r24, 0x05	; 5
     5d0:	90 e0       	ldi	r25, 0x00	; 0
			Set_GPIO(6);
     5d2:	b7 d7       	rcall	.+3950   	; 0x1542 <Set_GPIO>
     5d4:	86 e0       	ldi	r24, 0x06	; 6
     5d6:	90 e0       	ldi	r25, 0x00	; 0
     5d8:	b4 d7       	rcall	.+3944   	; 0x1542 <Set_GPIO>
			temp[2] = (((Check_ADC(11) / 1024) * 3.3) - 0.6972) / 0.0328;
     5da:	8b e0       	ldi	r24, 0x0B	; 11
     5dc:	90 e0       	ldi	r25, 0x00	; 0
     5de:	40 de       	rcall	.-896    	; 0x260 <Check_ADC>
     5e0:	20 e0       	ldi	r18, 0x00	; 0
     5e2:	30 e0       	ldi	r19, 0x00	; 0
     5e4:	40 e8       	ldi	r20, 0x80	; 128
     5e6:	5a e3       	ldi	r21, 0x3A	; 58
     5e8:	0e 94 9a 15 	call	0x2b34	; 0x2b34 <__mulsf3>
     5ec:	23 e3       	ldi	r18, 0x33	; 51
     5ee:	33 e3       	ldi	r19, 0x33	; 51
     5f0:	43 e5       	ldi	r20, 0x53	; 83
     5f2:	50 e4       	ldi	r21, 0x40	; 64
     5f4:	0e 94 9a 15 	call	0x2b34	; 0x2b34 <__mulsf3>
     5f8:	23 eb       	ldi	r18, 0xB3	; 179
     5fa:	3b e7       	ldi	r19, 0x7B	; 123
     5fc:	42 e3       	ldi	r20, 0x32	; 50
     5fe:	5f e3       	ldi	r21, 0x3F	; 63
     600:	0e 94 e2 13 	call	0x27c4	; 0x27c4 <__subsf3>
     604:	2b e4       	ldi	r18, 0x4B	; 75
     606:	39 e5       	ldi	r19, 0x59	; 89
     608:	46 e0       	ldi	r20, 0x06	; 6
     60a:	5d e3       	ldi	r21, 0x3D	; 61
     60c:	0e 94 4b 14 	call	0x2896	; 0x2896 <__divsf3>
     610:	69 87       	std	Y+9, r22	; 0x09
     612:	7a 87       	std	Y+10, r23	; 0x0a
     614:	8b 87       	std	Y+11, r24	; 0x0b
     616:	9c 87       	std	Y+12, r25	; 0x0c
     618:	05 c0       	rjmp	.+10     	; 0x624 <Temp_ADC+0x15c>
	
	// Enable temperature sensor
	Clear_GPIO(1);
	
	 // 3 Temperature sensors on battery
	while(i < 3){
     61a:	83 e0       	ldi	r24, 0x03	; 3
     61c:	e8 16       	cp	r14, r24
     61e:	f1 04       	cpc	r15, r1
		}
		i++;
	}
	
	// Disable temperature Sensor
	Set_GPIO(1);
     620:	0c f4       	brge	.+2      	; 0x624 <Temp_ADC+0x15c>
     622:	6e cf       	rjmp	.-292    	; 0x500 <Temp_ADC+0x38>
     624:	81 e0       	ldi	r24, 0x01	; 1
	
	// Pull GPIO 4,5 & 6 low
	Clear_GPIO(4);
     626:	90 e0       	ldi	r25, 0x00	; 0
     628:	8c d7       	rcall	.+3864   	; 0x1542 <Set_GPIO>
     62a:	84 e0       	ldi	r24, 0x04	; 4
     62c:	90 e0       	ldi	r25, 0x00	; 0
	Clear_GPIO(5);
     62e:	ef d7       	rcall	.+4062   	; 0x160e <Clear_GPIO>
     630:	85 e0       	ldi	r24, 0x05	; 5
     632:	90 e0       	ldi	r25, 0x00	; 0
     634:	ec d7       	rcall	.+4056   	; 0x160e <Clear_GPIO>
	Clear_GPIO(6);
     636:	86 e0       	ldi	r24, 0x06	; 6
     638:	90 e0       	ldi	r25, 0x00	; 0
     63a:	e9 d7       	rcall	.+4050   	; 0x160e <Clear_GPIO>
     63c:	f9 80       	ldd	r15, Y+1	; 0x01
	
	i = 1; // start at the second index
	high = temp[0]; // initialize the highest temperature to the first index
     63e:	0a 81       	ldd	r16, Y+2	; 0x02
     640:	1b 81       	ldd	r17, Y+3	; 0x03
     642:	ec 80       	ldd	r14, Y+4	; 0x04
     644:	ad 80       	ldd	r10, Y+5	; 0x05
	while(i < 3){
		if(temp[i] > high){
     646:	be 80       	ldd	r11, Y+6	; 0x06
     648:	cf 80       	ldd	r12, Y+7	; 0x07
     64a:	d8 84       	ldd	r13, Y+8	; 0x08
     64c:	2a 2d       	mov	r18, r10
     64e:	3b 2d       	mov	r19, r11
     650:	4c 2d       	mov	r20, r12
     652:	5d 2d       	mov	r21, r13
     654:	6f 2d       	mov	r22, r15
     656:	70 2f       	mov	r23, r16
     658:	81 2f       	mov	r24, r17
     65a:	9e 2d       	mov	r25, r14
     65c:	0e 94 47 14 	call	0x288e	; 0x288e <__cmpsf2>
     660:	88 23       	and	r24, r24
     662:	24 f4       	brge	.+8      	; 0x66c <Temp_ADC+0x1a4>
     664:	fa 2c       	mov	r15, r10
     666:	0b 2d       	mov	r16, r11
     668:	1c 2d       	mov	r17, r12
     66a:	ed 2c       	mov	r14, r13
     66c:	a9 84       	ldd	r10, Y+9	; 0x09
     66e:	ba 84       	ldd	r11, Y+10	; 0x0a
     670:	cb 84       	ldd	r12, Y+11	; 0x0b
     672:	dc 84       	ldd	r13, Y+12	; 0x0c
     674:	2f 2d       	mov	r18, r15
     676:	30 2f       	mov	r19, r16
     678:	41 2f       	mov	r20, r17
     67a:	5e 2d       	mov	r21, r14
     67c:	6a 2d       	mov	r22, r10
     67e:	7b 2d       	mov	r23, r11
     680:	8c 2d       	mov	r24, r12
     682:	9d 2d       	mov	r25, r13
     684:	0e 94 96 15 	call	0x2b2c	; 0x2b2c <__gesf2>
     688:	18 16       	cp	r1, r24
     68a:	24 f4       	brge	.+8      	; 0x694 <Temp_ADC+0x1cc>
     68c:	fa 2c       	mov	r15, r10
     68e:	0b 2d       	mov	r16, r11
     690:	1c 2d       	mov	r17, r12
     692:	ed 2c       	mov	r14, r13
     694:	6f 2d       	mov	r22, r15
		i++;
	}
	
	// Divide temperature measurements by 3 to get an average (To be discussed)
	return high;
}
     696:	70 2f       	mov	r23, r16
     698:	81 2f       	mov	r24, r17
     69a:	9e 2d       	mov	r25, r14
     69c:	2c 96       	adiw	r28, 0x0c	; 12
     69e:	0f b6       	in	r0, 0x3f	; 63
     6a0:	f8 94       	cli
     6a2:	de bf       	out	0x3e, r29	; 62
     6a4:	0f be       	out	0x3f, r0	; 63
     6a6:	cd bf       	out	0x3d, r28	; 61
     6a8:	df 91       	pop	r29
     6aa:	cf 91       	pop	r28
     6ac:	1f 91       	pop	r17
     6ae:	0f 91       	pop	r16
     6b0:	ff 90       	pop	r15
     6b2:	ef 90       	pop	r14
     6b4:	df 90       	pop	r13
     6b6:	cf 90       	pop	r12
     6b8:	bf 90       	pop	r11
     6ba:	af 90       	pop	r10
     6bc:	08 95       	ret

000006be <SoC_ADC>:
     6be:	8f 92       	push	r8
// Author: Chris Thomas
// Date: 2019-03-17
// Description: Temperature measurement via ADC.
/*========================================================================================*/

float SoC_ADC(float volt, float amp){
     6c0:	9f 92       	push	r9
     6c2:	af 92       	push	r10
     6c4:	bf 92       	push	r11
     6c6:	cf 92       	push	r12
     6c8:	df 92       	push	r13
     6ca:	ef 92       	push	r14
     6cc:	ff 92       	push	r15
     6ce:	6b 01       	movw	r12, r22
     6d0:	7c 01       	movw	r14, r24
     6d2:	49 01       	movw	r8, r18
     6d4:	5a 01       	movw	r10, r20
	
	// Check Battery voltage and current
	
	
	// Lookup table
	if (amp < 0.6){
     6d6:	2a e9       	ldi	r18, 0x9A	; 154
     6d8:	39 e9       	ldi	r19, 0x99	; 153
     6da:	49 e1       	ldi	r20, 0x19	; 25
     6dc:	5f e3       	ldi	r21, 0x3F	; 63
     6de:	c5 01       	movw	r24, r10
     6e0:	b4 01       	movw	r22, r8
     6e2:	0e 94 47 14 	call	0x288e	; 0x288e <__cmpsf2>
     6e6:	88 23       	and	r24, r24
     6e8:	0c f0       	brlt	.+2      	; 0x6ec <SoC_ADC+0x2e>
     6ea:	87 c0       	rjmp	.+270    	; 0x7fa <SoC_ADC+0x13c>
		if (volt > 4.00) {
     6ec:	20 e0       	ldi	r18, 0x00	; 0
     6ee:	30 e0       	ldi	r19, 0x00	; 0
     6f0:	40 e8       	ldi	r20, 0x80	; 128
     6f2:	50 e4       	ldi	r21, 0x40	; 64
     6f4:	c7 01       	movw	r24, r14
     6f6:	b6 01       	movw	r22, r12
     6f8:	0e 94 96 15 	call	0x2b2c	; 0x2b2c <__gesf2>
     6fc:	18 16       	cp	r1, r24
     6fe:	0c f4       	brge	.+2      	; 0x702 <SoC_ADC+0x44>
     700:	ab c1       	rjmp	.+854    	; 0xa58 <SoC_ADC+0x39a>
			soc = 80;
		} //end if
		else if (volt < 4.00 && volt > 3.80) {
     702:	20 e0       	ldi	r18, 0x00	; 0
     704:	30 e0       	ldi	r19, 0x00	; 0
     706:	40 e8       	ldi	r20, 0x80	; 128
     708:	50 e4       	ldi	r21, 0x40	; 64
     70a:	c7 01       	movw	r24, r14
     70c:	b6 01       	movw	r22, r12
     70e:	0e 94 47 14 	call	0x288e	; 0x288e <__cmpsf2>
     712:	88 23       	and	r24, r24
     714:	5c f4       	brge	.+22     	; 0x72c <SoC_ADC+0x6e>
     716:	23 e3       	ldi	r18, 0x33	; 51
     718:	33 e3       	ldi	r19, 0x33	; 51
     71a:	43 e7       	ldi	r20, 0x73	; 115
     71c:	50 e4       	ldi	r21, 0x40	; 64
     71e:	c7 01       	movw	r24, r14
     720:	b6 01       	movw	r22, r12
     722:	0e 94 96 15 	call	0x2b2c	; 0x2b2c <__gesf2>
     726:	18 16       	cp	r1, r24
     728:	0c f4       	brge	.+2      	; 0x72c <SoC_ADC+0x6e>
     72a:	9b c1       	rjmp	.+822    	; 0xa62 <SoC_ADC+0x3a4>
			soc = 70;
		} //end else if
		else if (volt < 3.80 && volt > 3.75) {
     72c:	23 e3       	ldi	r18, 0x33	; 51
     72e:	33 e3       	ldi	r19, 0x33	; 51
     730:	43 e7       	ldi	r20, 0x73	; 115
     732:	50 e4       	ldi	r21, 0x40	; 64
     734:	c7 01       	movw	r24, r14
     736:	b6 01       	movw	r22, r12
     738:	0e 94 47 14 	call	0x288e	; 0x288e <__cmpsf2>
     73c:	88 23       	and	r24, r24
     73e:	5c f4       	brge	.+22     	; 0x756 <SoC_ADC+0x98>
     740:	20 e0       	ldi	r18, 0x00	; 0
     742:	30 e0       	ldi	r19, 0x00	; 0
     744:	40 e7       	ldi	r20, 0x70	; 112
     746:	50 e4       	ldi	r21, 0x40	; 64
     748:	c7 01       	movw	r24, r14
     74a:	b6 01       	movw	r22, r12
     74c:	0e 94 96 15 	call	0x2b2c	; 0x2b2c <__gesf2>
     750:	18 16       	cp	r1, r24
     752:	0c f4       	brge	.+2      	; 0x756 <SoC_ADC+0x98>
     754:	8b c1       	rjmp	.+790    	; 0xa6c <SoC_ADC+0x3ae>
			soc = 60;
		} //end else if
		else if (volt < 3.75 && volt > 3.70) {
     756:	20 e0       	ldi	r18, 0x00	; 0
     758:	30 e0       	ldi	r19, 0x00	; 0
     75a:	40 e7       	ldi	r20, 0x70	; 112
     75c:	50 e4       	ldi	r21, 0x40	; 64
     75e:	c7 01       	movw	r24, r14
     760:	b6 01       	movw	r22, r12
     762:	0e 94 47 14 	call	0x288e	; 0x288e <__cmpsf2>
     766:	88 23       	and	r24, r24
     768:	5c f4       	brge	.+22     	; 0x780 <SoC_ADC+0xc2>
     76a:	2d ec       	ldi	r18, 0xCD	; 205
     76c:	3c ec       	ldi	r19, 0xCC	; 204
     76e:	4c e6       	ldi	r20, 0x6C	; 108
     770:	50 e4       	ldi	r21, 0x40	; 64
     772:	c7 01       	movw	r24, r14
     774:	b6 01       	movw	r22, r12
     776:	0e 94 96 15 	call	0x2b2c	; 0x2b2c <__gesf2>
     77a:	18 16       	cp	r1, r24
     77c:	0c f4       	brge	.+2      	; 0x780 <SoC_ADC+0xc2>
     77e:	7b c1       	rjmp	.+758    	; 0xa76 <SoC_ADC+0x3b8>
			soc = 50;
		} //end else if
		else if (volt < 3.70 && volt > 3.60) {
     780:	2d ec       	ldi	r18, 0xCD	; 205
     782:	3c ec       	ldi	r19, 0xCC	; 204
     784:	4c e6       	ldi	r20, 0x6C	; 108
     786:	50 e4       	ldi	r21, 0x40	; 64
     788:	c7 01       	movw	r24, r14
     78a:	b6 01       	movw	r22, r12
     78c:	0e 94 47 14 	call	0x288e	; 0x288e <__cmpsf2>
     790:	88 23       	and	r24, r24
     792:	5c f4       	brge	.+22     	; 0x7aa <SoC_ADC+0xec>
     794:	26 e6       	ldi	r18, 0x66	; 102
     796:	36 e6       	ldi	r19, 0x66	; 102
     798:	46 e6       	ldi	r20, 0x66	; 102
     79a:	50 e4       	ldi	r21, 0x40	; 64
     79c:	c7 01       	movw	r24, r14
     79e:	b6 01       	movw	r22, r12
     7a0:	0e 94 96 15 	call	0x2b2c	; 0x2b2c <__gesf2>
     7a4:	18 16       	cp	r1, r24
     7a6:	0c f4       	brge	.+2      	; 0x7aa <SoC_ADC+0xec>
     7a8:	6b c1       	rjmp	.+726    	; 0xa80 <SoC_ADC+0x3c2>
			soc = 40;
		} //end else if
		else if (volt < 3.60 && volt > 3.5) {
     7aa:	26 e6       	ldi	r18, 0x66	; 102
     7ac:	36 e6       	ldi	r19, 0x66	; 102
     7ae:	46 e6       	ldi	r20, 0x66	; 102
     7b0:	50 e4       	ldi	r21, 0x40	; 64
     7b2:	c7 01       	movw	r24, r14
     7b4:	b6 01       	movw	r22, r12
     7b6:	0e 94 47 14 	call	0x288e	; 0x288e <__cmpsf2>
     7ba:	88 23       	and	r24, r24
     7bc:	5c f4       	brge	.+22     	; 0x7d4 <SoC_ADC+0x116>
     7be:	20 e0       	ldi	r18, 0x00	; 0
     7c0:	30 e0       	ldi	r19, 0x00	; 0
     7c2:	40 e6       	ldi	r20, 0x60	; 96
     7c4:	50 e4       	ldi	r21, 0x40	; 64
     7c6:	c7 01       	movw	r24, r14
     7c8:	b6 01       	movw	r22, r12
     7ca:	0e 94 96 15 	call	0x2b2c	; 0x2b2c <__gesf2>
     7ce:	18 16       	cp	r1, r24
     7d0:	0c f4       	brge	.+2      	; 0x7d4 <SoC_ADC+0x116>
     7d2:	5b c1       	rjmp	.+694    	; 0xa8a <SoC_ADC+0x3cc>
			soc = 30;
		} //end else if
		else if (volt < 3.50) {
     7d4:	20 e0       	ldi	r18, 0x00	; 0
     7d6:	30 e0       	ldi	r19, 0x00	; 0
     7d8:	40 e6       	ldi	r20, 0x60	; 96
     7da:	50 e4       	ldi	r21, 0x40	; 64
     7dc:	c7 01       	movw	r24, r14
     7de:	b6 01       	movw	r22, r12
     7e0:	0e 94 47 14 	call	0x288e	; 0x288e <__cmpsf2>
     7e4:	88 23       	and	r24, r24
     7e6:	0c f4       	brge	.+2      	; 0x7ea <SoC_ADC+0x12c>
     7e8:	55 c1       	rjmp	.+682    	; 0xa94 <SoC_ADC+0x3d6>
			soc = 20;
		} //end else if
		else {
			UART0_putstring("Error Reading State of Charge \n\n\r");
     7ea:	84 e5       	ldi	r24, 0x54	; 84
     7ec:	95 e0       	ldi	r25, 0x05	; 5
     7ee:	0e 94 46 11 	call	0x228c	; 0x228c <UART0_putstring>
// Description: Temperature measurement via ADC.
/*========================================================================================*/

float SoC_ADC(float volt, float amp){
	// return value
	float soc = 0;
     7f2:	60 e0       	ldi	r22, 0x00	; 0
     7f4:	70 e0       	ldi	r23, 0x00	; 0
     7f6:	cb 01       	movw	r24, r22
     7f8:	9b c1       	rjmp	.+822    	; 0xb30 <SoC_ADC+0x472>
		} //end else if
		else {
			UART0_putstring("Error Reading State of Charge \n\n\r");
		} //end else
	}
	else if(amp > 0.6 && amp < 3){
     7fa:	2a e9       	ldi	r18, 0x9A	; 154
     7fc:	39 e9       	ldi	r19, 0x99	; 153
     7fe:	49 e1       	ldi	r20, 0x19	; 25
     800:	5f e3       	ldi	r21, 0x3F	; 63
     802:	c5 01       	movw	r24, r10
     804:	b4 01       	movw	r22, r8
     806:	0e 94 96 15 	call	0x2b2c	; 0x2b2c <__gesf2>
     80a:	18 16       	cp	r1, r24
     80c:	0c f0       	brlt	.+2      	; 0x810 <SoC_ADC+0x152>
     80e:	92 c0       	rjmp	.+292    	; 0x934 <SoC_ADC+0x276>
     810:	20 e0       	ldi	r18, 0x00	; 0
     812:	30 e0       	ldi	r19, 0x00	; 0
     814:	40 e4       	ldi	r20, 0x40	; 64
     816:	50 e4       	ldi	r21, 0x40	; 64
     818:	c5 01       	movw	r24, r10
     81a:	b4 01       	movw	r22, r8
     81c:	0e 94 47 14 	call	0x288e	; 0x288e <__cmpsf2>
     820:	88 23       	and	r24, r24
     822:	0c f0       	brlt	.+2      	; 0x826 <SoC_ADC+0x168>
     824:	87 c0       	rjmp	.+270    	; 0x934 <SoC_ADC+0x276>
		if (volt > 3.75) {
     826:	20 e0       	ldi	r18, 0x00	; 0
     828:	30 e0       	ldi	r19, 0x00	; 0
     82a:	40 e7       	ldi	r20, 0x70	; 112
     82c:	50 e4       	ldi	r21, 0x40	; 64
     82e:	c7 01       	movw	r24, r14
     830:	b6 01       	movw	r22, r12
     832:	0e 94 96 15 	call	0x2b2c	; 0x2b2c <__gesf2>
     836:	18 16       	cp	r1, r24
     838:	0c f4       	brge	.+2      	; 0x83c <SoC_ADC+0x17e>
     83a:	31 c1       	rjmp	.+610    	; 0xa9e <SoC_ADC+0x3e0>
			soc = 80;
		} //end if
		else if (volt < 3.75 && volt > 3.65) {
     83c:	20 e0       	ldi	r18, 0x00	; 0
     83e:	30 e0       	ldi	r19, 0x00	; 0
     840:	40 e7       	ldi	r20, 0x70	; 112
     842:	50 e4       	ldi	r21, 0x40	; 64
     844:	c7 01       	movw	r24, r14
     846:	b6 01       	movw	r22, r12
     848:	0e 94 47 14 	call	0x288e	; 0x288e <__cmpsf2>
     84c:	88 23       	and	r24, r24
     84e:	5c f4       	brge	.+22     	; 0x866 <SoC_ADC+0x1a8>
     850:	2a e9       	ldi	r18, 0x9A	; 154
     852:	39 e9       	ldi	r19, 0x99	; 153
     854:	49 e6       	ldi	r20, 0x69	; 105
     856:	50 e4       	ldi	r21, 0x40	; 64
     858:	c7 01       	movw	r24, r14
     85a:	b6 01       	movw	r22, r12
     85c:	0e 94 96 15 	call	0x2b2c	; 0x2b2c <__gesf2>
     860:	18 16       	cp	r1, r24
     862:	0c f4       	brge	.+2      	; 0x866 <SoC_ADC+0x1a8>
     864:	21 c1       	rjmp	.+578    	; 0xaa8 <SoC_ADC+0x3ea>
			soc = 70;
		} //end else if
		else if (volt < 3.65 && volt > 3.55) {
     866:	2a e9       	ldi	r18, 0x9A	; 154
     868:	39 e9       	ldi	r19, 0x99	; 153
     86a:	49 e6       	ldi	r20, 0x69	; 105
     86c:	50 e4       	ldi	r21, 0x40	; 64
     86e:	c7 01       	movw	r24, r14
     870:	b6 01       	movw	r22, r12
     872:	0e 94 47 14 	call	0x288e	; 0x288e <__cmpsf2>
     876:	88 23       	and	r24, r24
     878:	5c f4       	brge	.+22     	; 0x890 <SoC_ADC+0x1d2>
     87a:	23 e3       	ldi	r18, 0x33	; 51
     87c:	33 e3       	ldi	r19, 0x33	; 51
     87e:	43 e6       	ldi	r20, 0x63	; 99
     880:	50 e4       	ldi	r21, 0x40	; 64
     882:	c7 01       	movw	r24, r14
     884:	b6 01       	movw	r22, r12
     886:	0e 94 96 15 	call	0x2b2c	; 0x2b2c <__gesf2>
     88a:	18 16       	cp	r1, r24
     88c:	0c f4       	brge	.+2      	; 0x890 <SoC_ADC+0x1d2>
     88e:	11 c1       	rjmp	.+546    	; 0xab2 <SoC_ADC+0x3f4>
			soc = 60;
		} //end else if
		else if (volt < 3.55 && volt > 3.45) {
     890:	23 e3       	ldi	r18, 0x33	; 51
     892:	33 e3       	ldi	r19, 0x33	; 51
     894:	43 e6       	ldi	r20, 0x63	; 99
     896:	50 e4       	ldi	r21, 0x40	; 64
     898:	c7 01       	movw	r24, r14
     89a:	b6 01       	movw	r22, r12
     89c:	0e 94 47 14 	call	0x288e	; 0x288e <__cmpsf2>
     8a0:	88 23       	and	r24, r24
     8a2:	5c f4       	brge	.+22     	; 0x8ba <SoC_ADC+0x1fc>
     8a4:	2d ec       	ldi	r18, 0xCD	; 205
     8a6:	3c ec       	ldi	r19, 0xCC	; 204
     8a8:	4c e5       	ldi	r20, 0x5C	; 92
     8aa:	50 e4       	ldi	r21, 0x40	; 64
     8ac:	c7 01       	movw	r24, r14
     8ae:	b6 01       	movw	r22, r12
     8b0:	0e 94 96 15 	call	0x2b2c	; 0x2b2c <__gesf2>
     8b4:	18 16       	cp	r1, r24
     8b6:	0c f4       	brge	.+2      	; 0x8ba <SoC_ADC+0x1fc>
     8b8:	01 c1       	rjmp	.+514    	; 0xabc <SoC_ADC+0x3fe>
			soc = 50;
		} //end else if
 		else if (volt < 3.45 && volt > 3.35) {
     8ba:	2d ec       	ldi	r18, 0xCD	; 205
     8bc:	3c ec       	ldi	r19, 0xCC	; 204
     8be:	4c e5       	ldi	r20, 0x5C	; 92
     8c0:	50 e4       	ldi	r21, 0x40	; 64
     8c2:	c7 01       	movw	r24, r14
     8c4:	b6 01       	movw	r22, r12
     8c6:	0e 94 47 14 	call	0x288e	; 0x288e <__cmpsf2>
     8ca:	88 23       	and	r24, r24
     8cc:	5c f4       	brge	.+22     	; 0x8e4 <SoC_ADC+0x226>
     8ce:	26 e6       	ldi	r18, 0x66	; 102
     8d0:	36 e6       	ldi	r19, 0x66	; 102
     8d2:	46 e5       	ldi	r20, 0x56	; 86
     8d4:	50 e4       	ldi	r21, 0x40	; 64
     8d6:	c7 01       	movw	r24, r14
     8d8:	b6 01       	movw	r22, r12
     8da:	0e 94 96 15 	call	0x2b2c	; 0x2b2c <__gesf2>
     8de:	18 16       	cp	r1, r24
     8e0:	0c f4       	brge	.+2      	; 0x8e4 <SoC_ADC+0x226>
     8e2:	f1 c0       	rjmp	.+482    	; 0xac6 <SoC_ADC+0x408>
			soc = 40;
		 } //end else if
		else if (volt < 3.35 && volt > 3.30) {
     8e4:	26 e6       	ldi	r18, 0x66	; 102
     8e6:	36 e6       	ldi	r19, 0x66	; 102
     8e8:	46 e5       	ldi	r20, 0x56	; 86
     8ea:	50 e4       	ldi	r21, 0x40	; 64
     8ec:	c7 01       	movw	r24, r14
     8ee:	b6 01       	movw	r22, r12
     8f0:	0e 94 47 14 	call	0x288e	; 0x288e <__cmpsf2>
     8f4:	88 23       	and	r24, r24
     8f6:	5c f4       	brge	.+22     	; 0x90e <SoC_ADC+0x250>
     8f8:	23 e3       	ldi	r18, 0x33	; 51
     8fa:	33 e3       	ldi	r19, 0x33	; 51
     8fc:	43 e5       	ldi	r20, 0x53	; 83
     8fe:	50 e4       	ldi	r21, 0x40	; 64
     900:	c7 01       	movw	r24, r14
     902:	b6 01       	movw	r22, r12
     904:	0e 94 96 15 	call	0x2b2c	; 0x2b2c <__gesf2>
     908:	18 16       	cp	r1, r24
     90a:	0c f4       	brge	.+2      	; 0x90e <SoC_ADC+0x250>
     90c:	e1 c0       	rjmp	.+450    	; 0xad0 <SoC_ADC+0x412>
			soc = 30;
		 } //end else if
		else if (volt < 3.30) {
     90e:	23 e3       	ldi	r18, 0x33	; 51
     910:	33 e3       	ldi	r19, 0x33	; 51
     912:	43 e5       	ldi	r20, 0x53	; 83
     914:	50 e4       	ldi	r21, 0x40	; 64
     916:	c7 01       	movw	r24, r14
     918:	b6 01       	movw	r22, r12
     91a:	0e 94 47 14 	call	0x288e	; 0x288e <__cmpsf2>
     91e:	88 23       	and	r24, r24
     920:	0c f4       	brge	.+2      	; 0x924 <SoC_ADC+0x266>
     922:	db c0       	rjmp	.+438    	; 0xada <SoC_ADC+0x41c>
			soc = 20;
		}
		else {
			UART0_putstring("Error Reading State of Charge \n\n\r");
     924:	84 e5       	ldi	r24, 0x54	; 84
     926:	95 e0       	ldi	r25, 0x05	; 5
     928:	0e 94 46 11 	call	0x228c	; 0x228c <UART0_putstring>
// Description: Temperature measurement via ADC.
/*========================================================================================*/

float SoC_ADC(float volt, float amp){
	// return value
	float soc = 0;
     92c:	60 e0       	ldi	r22, 0x00	; 0
     92e:	70 e0       	ldi	r23, 0x00	; 0
     930:	cb 01       	movw	r24, r22
     932:	fe c0       	rjmp	.+508    	; 0xb30 <SoC_ADC+0x472>
		}
		else {
			UART0_putstring("Error Reading State of Charge \n\n\r");
		} //end else
	}
	else if(amp > 3){
     934:	20 e0       	ldi	r18, 0x00	; 0
     936:	30 e0       	ldi	r19, 0x00	; 0
     938:	40 e4       	ldi	r20, 0x40	; 64
     93a:	50 e4       	ldi	r21, 0x40	; 64
     93c:	c5 01       	movw	r24, r10
     93e:	b4 01       	movw	r22, r8
     940:	0e 94 96 15 	call	0x2b2c	; 0x2b2c <__gesf2>
     944:	18 16       	cp	r1, r24
     946:	0c f0       	brlt	.+2      	; 0x94a <SoC_ADC+0x28c>
     948:	cd c0       	rjmp	.+410    	; 0xae4 <SoC_ADC+0x426>
		if (volt > 3.80) {
     94a:	23 e3       	ldi	r18, 0x33	; 51
     94c:	33 e3       	ldi	r19, 0x33	; 51
     94e:	43 e7       	ldi	r20, 0x73	; 115
     950:	50 e4       	ldi	r21, 0x40	; 64
     952:	c7 01       	movw	r24, r14
     954:	b6 01       	movw	r22, r12
     956:	0e 94 96 15 	call	0x2b2c	; 0x2b2c <__gesf2>
     95a:	18 16       	cp	r1, r24
     95c:	0c f4       	brge	.+2      	; 0x960 <SoC_ADC+0x2a2>
     95e:	c6 c0       	rjmp	.+396    	; 0xaec <SoC_ADC+0x42e>
			soc = 80;
		} //end if
		else if (volt < 3.80 && volt > 3.75) {
     960:	23 e3       	ldi	r18, 0x33	; 51
     962:	33 e3       	ldi	r19, 0x33	; 51
     964:	43 e7       	ldi	r20, 0x73	; 115
     966:	50 e4       	ldi	r21, 0x40	; 64
     968:	c7 01       	movw	r24, r14
     96a:	b6 01       	movw	r22, r12
     96c:	0e 94 47 14 	call	0x288e	; 0x288e <__cmpsf2>
     970:	88 23       	and	r24, r24
     972:	5c f4       	brge	.+22     	; 0x98a <SoC_ADC+0x2cc>
     974:	20 e0       	ldi	r18, 0x00	; 0
     976:	30 e0       	ldi	r19, 0x00	; 0
     978:	40 e7       	ldi	r20, 0x70	; 112
     97a:	50 e4       	ldi	r21, 0x40	; 64
     97c:	c7 01       	movw	r24, r14
     97e:	b6 01       	movw	r22, r12
     980:	0e 94 96 15 	call	0x2b2c	; 0x2b2c <__gesf2>
     984:	18 16       	cp	r1, r24
     986:	0c f4       	brge	.+2      	; 0x98a <SoC_ADC+0x2cc>
     988:	b6 c0       	rjmp	.+364    	; 0xaf6 <SoC_ADC+0x438>
			soc = 70;
		} //end else if
		else if (volt < 3.75 && volt > 3.65) {
     98a:	20 e0       	ldi	r18, 0x00	; 0
     98c:	30 e0       	ldi	r19, 0x00	; 0
     98e:	40 e7       	ldi	r20, 0x70	; 112
     990:	50 e4       	ldi	r21, 0x40	; 64
     992:	c7 01       	movw	r24, r14
     994:	b6 01       	movw	r22, r12
     996:	0e 94 47 14 	call	0x288e	; 0x288e <__cmpsf2>
     99a:	88 23       	and	r24, r24
     99c:	5c f4       	brge	.+22     	; 0x9b4 <SoC_ADC+0x2f6>
     99e:	2a e9       	ldi	r18, 0x9A	; 154
     9a0:	39 e9       	ldi	r19, 0x99	; 153
     9a2:	49 e6       	ldi	r20, 0x69	; 105
     9a4:	50 e4       	ldi	r21, 0x40	; 64
     9a6:	c7 01       	movw	r24, r14
     9a8:	b6 01       	movw	r22, r12
     9aa:	0e 94 96 15 	call	0x2b2c	; 0x2b2c <__gesf2>
     9ae:	18 16       	cp	r1, r24
     9b0:	0c f4       	brge	.+2      	; 0x9b4 <SoC_ADC+0x2f6>
     9b2:	a6 c0       	rjmp	.+332    	; 0xb00 <SoC_ADC+0x442>
			soc = 60;
		} //end else if
		else if (volt < 3.65 && volt > 3.50) {
     9b4:	2a e9       	ldi	r18, 0x9A	; 154
     9b6:	39 e9       	ldi	r19, 0x99	; 153
     9b8:	49 e6       	ldi	r20, 0x69	; 105
     9ba:	50 e4       	ldi	r21, 0x40	; 64
     9bc:	c7 01       	movw	r24, r14
     9be:	b6 01       	movw	r22, r12
     9c0:	0e 94 47 14 	call	0x288e	; 0x288e <__cmpsf2>
     9c4:	88 23       	and	r24, r24
     9c6:	5c f4       	brge	.+22     	; 0x9de <SoC_ADC+0x320>
     9c8:	20 e0       	ldi	r18, 0x00	; 0
     9ca:	30 e0       	ldi	r19, 0x00	; 0
     9cc:	40 e6       	ldi	r20, 0x60	; 96
     9ce:	50 e4       	ldi	r21, 0x40	; 64
     9d0:	c7 01       	movw	r24, r14
     9d2:	b6 01       	movw	r22, r12
     9d4:	0e 94 96 15 	call	0x2b2c	; 0x2b2c <__gesf2>
     9d8:	18 16       	cp	r1, r24
     9da:	0c f4       	brge	.+2      	; 0x9de <SoC_ADC+0x320>
     9dc:	96 c0       	rjmp	.+300    	; 0xb0a <SoC_ADC+0x44c>
			soc = 50;
		} //end else if
		else if (volt < 3.50 && volt > 3.40) {
     9de:	20 e0       	ldi	r18, 0x00	; 0
     9e0:	30 e0       	ldi	r19, 0x00	; 0
     9e2:	40 e6       	ldi	r20, 0x60	; 96
     9e4:	50 e4       	ldi	r21, 0x40	; 64
     9e6:	c7 01       	movw	r24, r14
     9e8:	b6 01       	movw	r22, r12
     9ea:	0e 94 47 14 	call	0x288e	; 0x288e <__cmpsf2>
     9ee:	88 23       	and	r24, r24
     9f0:	5c f4       	brge	.+22     	; 0xa08 <SoC_ADC+0x34a>
     9f2:	2a e9       	ldi	r18, 0x9A	; 154
     9f4:	39 e9       	ldi	r19, 0x99	; 153
     9f6:	49 e5       	ldi	r20, 0x59	; 89
     9f8:	50 e4       	ldi	r21, 0x40	; 64
     9fa:	c7 01       	movw	r24, r14
     9fc:	b6 01       	movw	r22, r12
     9fe:	0e 94 96 15 	call	0x2b2c	; 0x2b2c <__gesf2>
     a02:	18 16       	cp	r1, r24
     a04:	0c f4       	brge	.+2      	; 0xa08 <SoC_ADC+0x34a>
     a06:	86 c0       	rjmp	.+268    	; 0xb14 <SoC_ADC+0x456>
			soc = 40;
		} //end else if
		else if (volt < 3.40 && volt > 3.25) {
     a08:	2a e9       	ldi	r18, 0x9A	; 154
     a0a:	39 e9       	ldi	r19, 0x99	; 153
     a0c:	49 e5       	ldi	r20, 0x59	; 89
     a0e:	50 e4       	ldi	r21, 0x40	; 64
     a10:	c7 01       	movw	r24, r14
     a12:	b6 01       	movw	r22, r12
     a14:	0e 94 47 14 	call	0x288e	; 0x288e <__cmpsf2>
     a18:	88 23       	and	r24, r24
     a1a:	5c f4       	brge	.+22     	; 0xa32 <SoC_ADC+0x374>
     a1c:	20 e0       	ldi	r18, 0x00	; 0
     a1e:	30 e0       	ldi	r19, 0x00	; 0
     a20:	40 e5       	ldi	r20, 0x50	; 80
     a22:	50 e4       	ldi	r21, 0x40	; 64
     a24:	c7 01       	movw	r24, r14
     a26:	b6 01       	movw	r22, r12
     a28:	0e 94 96 15 	call	0x2b2c	; 0x2b2c <__gesf2>
     a2c:	18 16       	cp	r1, r24
     a2e:	0c f4       	brge	.+2      	; 0xa32 <SoC_ADC+0x374>
     a30:	76 c0       	rjmp	.+236    	; 0xb1e <SoC_ADC+0x460>
			soc = 30;
		} //end else if
		else if (volt < 3.25) {
     a32:	20 e0       	ldi	r18, 0x00	; 0
     a34:	30 e0       	ldi	r19, 0x00	; 0
     a36:	40 e5       	ldi	r20, 0x50	; 80
     a38:	50 e4       	ldi	r21, 0x40	; 64
     a3a:	c7 01       	movw	r24, r14
     a3c:	b6 01       	movw	r22, r12
     a3e:	0e 94 47 14 	call	0x288e	; 0x288e <__cmpsf2>
     a42:	88 23       	and	r24, r24
     a44:	0c f4       	brge	.+2      	; 0xa48 <SoC_ADC+0x38a>
     a46:	70 c0       	rjmp	.+224    	; 0xb28 <SoC_ADC+0x46a>
			soc = 20;
		} //end else if
		else {
			UART0_putstring("Error Reading State of Charge \n\n\r");
     a48:	84 e5       	ldi	r24, 0x54	; 84
     a4a:	95 e0       	ldi	r25, 0x05	; 5
     a4c:	0e 94 46 11 	call	0x228c	; 0x228c <UART0_putstring>
// Description: Temperature measurement via ADC.
/*========================================================================================*/

float SoC_ADC(float volt, float amp){
	// return value
	float soc = 0;
     a50:	60 e0       	ldi	r22, 0x00	; 0
     a52:	70 e0       	ldi	r23, 0x00	; 0
     a54:	cb 01       	movw	r24, r22
     a56:	6c c0       	rjmp	.+216    	; 0xb30 <SoC_ADC+0x472>
	
	
	// Lookup table
	if (amp < 0.6){
		if (volt > 4.00) {
			soc = 80;
     a58:	60 e0       	ldi	r22, 0x00	; 0
     a5a:	70 e0       	ldi	r23, 0x00	; 0
     a5c:	80 ea       	ldi	r24, 0xA0	; 160
     a5e:	92 e4       	ldi	r25, 0x42	; 66
     a60:	67 c0       	rjmp	.+206    	; 0xb30 <SoC_ADC+0x472>
		} //end if
		else if (volt < 4.00 && volt > 3.80) {
			soc = 70;
     a62:	60 e0       	ldi	r22, 0x00	; 0
     a64:	70 e0       	ldi	r23, 0x00	; 0
     a66:	8c e8       	ldi	r24, 0x8C	; 140
     a68:	92 e4       	ldi	r25, 0x42	; 66
     a6a:	62 c0       	rjmp	.+196    	; 0xb30 <SoC_ADC+0x472>
		} //end else if
		else if (volt < 3.80 && volt > 3.75) {
			soc = 60;
     a6c:	60 e0       	ldi	r22, 0x00	; 0
     a6e:	70 e0       	ldi	r23, 0x00	; 0
     a70:	80 e7       	ldi	r24, 0x70	; 112
     a72:	92 e4       	ldi	r25, 0x42	; 66
     a74:	5d c0       	rjmp	.+186    	; 0xb30 <SoC_ADC+0x472>
		} //end else if
		else if (volt < 3.75 && volt > 3.70) {
			soc = 50;
     a76:	60 e0       	ldi	r22, 0x00	; 0
     a78:	70 e0       	ldi	r23, 0x00	; 0
     a7a:	88 e4       	ldi	r24, 0x48	; 72
     a7c:	92 e4       	ldi	r25, 0x42	; 66
     a7e:	58 c0       	rjmp	.+176    	; 0xb30 <SoC_ADC+0x472>
		} //end else if
		else if (volt < 3.70 && volt > 3.60) {
			soc = 40;
     a80:	60 e0       	ldi	r22, 0x00	; 0
     a82:	70 e0       	ldi	r23, 0x00	; 0
     a84:	80 e2       	ldi	r24, 0x20	; 32
     a86:	92 e4       	ldi	r25, 0x42	; 66
     a88:	53 c0       	rjmp	.+166    	; 0xb30 <SoC_ADC+0x472>
		} //end else if
		else if (volt < 3.60 && volt > 3.5) {
			soc = 30;
     a8a:	60 e0       	ldi	r22, 0x00	; 0
     a8c:	70 e0       	ldi	r23, 0x00	; 0
     a8e:	80 ef       	ldi	r24, 0xF0	; 240
     a90:	91 e4       	ldi	r25, 0x41	; 65
     a92:	4e c0       	rjmp	.+156    	; 0xb30 <SoC_ADC+0x472>
		} //end else if
		else if (volt < 3.50) {
			soc = 20;
     a94:	60 e0       	ldi	r22, 0x00	; 0
     a96:	70 e0       	ldi	r23, 0x00	; 0
     a98:	80 ea       	ldi	r24, 0xA0	; 160
     a9a:	91 e4       	ldi	r25, 0x41	; 65
     a9c:	49 c0       	rjmp	.+146    	; 0xb30 <SoC_ADC+0x472>
			UART0_putstring("Error Reading State of Charge \n\n\r");
		} //end else
	}
	else if(amp > 0.6 && amp < 3){
		if (volt > 3.75) {
			soc = 80;
     a9e:	60 e0       	ldi	r22, 0x00	; 0
     aa0:	70 e0       	ldi	r23, 0x00	; 0
     aa2:	80 ea       	ldi	r24, 0xA0	; 160
     aa4:	92 e4       	ldi	r25, 0x42	; 66
     aa6:	44 c0       	rjmp	.+136    	; 0xb30 <SoC_ADC+0x472>
		} //end if
		else if (volt < 3.75 && volt > 3.65) {
			soc = 70;
     aa8:	60 e0       	ldi	r22, 0x00	; 0
     aaa:	70 e0       	ldi	r23, 0x00	; 0
     aac:	8c e8       	ldi	r24, 0x8C	; 140
     aae:	92 e4       	ldi	r25, 0x42	; 66
     ab0:	3f c0       	rjmp	.+126    	; 0xb30 <SoC_ADC+0x472>
		} //end else if
		else if (volt < 3.65 && volt > 3.55) {
			soc = 60;
     ab2:	60 e0       	ldi	r22, 0x00	; 0
     ab4:	70 e0       	ldi	r23, 0x00	; 0
     ab6:	80 e7       	ldi	r24, 0x70	; 112
     ab8:	92 e4       	ldi	r25, 0x42	; 66
     aba:	3a c0       	rjmp	.+116    	; 0xb30 <SoC_ADC+0x472>
		} //end else if
		else if (volt < 3.55 && volt > 3.45) {
			soc = 50;
     abc:	60 e0       	ldi	r22, 0x00	; 0
     abe:	70 e0       	ldi	r23, 0x00	; 0
     ac0:	88 e4       	ldi	r24, 0x48	; 72
     ac2:	92 e4       	ldi	r25, 0x42	; 66
     ac4:	35 c0       	rjmp	.+106    	; 0xb30 <SoC_ADC+0x472>
		} //end else if
 		else if (volt < 3.45 && volt > 3.35) {
			soc = 40;
     ac6:	60 e0       	ldi	r22, 0x00	; 0
     ac8:	70 e0       	ldi	r23, 0x00	; 0
     aca:	80 e2       	ldi	r24, 0x20	; 32
     acc:	92 e4       	ldi	r25, 0x42	; 66
     ace:	30 c0       	rjmp	.+96     	; 0xb30 <SoC_ADC+0x472>
		 } //end else if
		else if (volt < 3.35 && volt > 3.30) {
			soc = 30;
     ad0:	60 e0       	ldi	r22, 0x00	; 0
     ad2:	70 e0       	ldi	r23, 0x00	; 0
     ad4:	80 ef       	ldi	r24, 0xF0	; 240
     ad6:	91 e4       	ldi	r25, 0x41	; 65
     ad8:	2b c0       	rjmp	.+86     	; 0xb30 <SoC_ADC+0x472>
		 } //end else if
		else if (volt < 3.30) {
			soc = 20;
     ada:	60 e0       	ldi	r22, 0x00	; 0
     adc:	70 e0       	ldi	r23, 0x00	; 0
     ade:	80 ea       	ldi	r24, 0xA0	; 160
     ae0:	91 e4       	ldi	r25, 0x41	; 65
     ae2:	26 c0       	rjmp	.+76     	; 0xb30 <SoC_ADC+0x472>
// Description: Temperature measurement via ADC.
/*========================================================================================*/

float SoC_ADC(float volt, float amp){
	// return value
	float soc = 0;
     ae4:	60 e0       	ldi	r22, 0x00	; 0
     ae6:	70 e0       	ldi	r23, 0x00	; 0
     ae8:	cb 01       	movw	r24, r22
     aea:	22 c0       	rjmp	.+68     	; 0xb30 <SoC_ADC+0x472>
			UART0_putstring("Error Reading State of Charge \n\n\r");
		} //end else
	}
	else if(amp > 3){
		if (volt > 3.80) {
			soc = 80;
     aec:	60 e0       	ldi	r22, 0x00	; 0
     aee:	70 e0       	ldi	r23, 0x00	; 0
     af0:	80 ea       	ldi	r24, 0xA0	; 160
     af2:	92 e4       	ldi	r25, 0x42	; 66
     af4:	1d c0       	rjmp	.+58     	; 0xb30 <SoC_ADC+0x472>
		} //end if
		else if (volt < 3.80 && volt > 3.75) {
			soc = 70;
     af6:	60 e0       	ldi	r22, 0x00	; 0
     af8:	70 e0       	ldi	r23, 0x00	; 0
     afa:	8c e8       	ldi	r24, 0x8C	; 140
     afc:	92 e4       	ldi	r25, 0x42	; 66
     afe:	18 c0       	rjmp	.+48     	; 0xb30 <SoC_ADC+0x472>
		} //end else if
		else if (volt < 3.75 && volt > 3.65) {
			soc = 60;
     b00:	60 e0       	ldi	r22, 0x00	; 0
     b02:	70 e0       	ldi	r23, 0x00	; 0
     b04:	80 e7       	ldi	r24, 0x70	; 112
     b06:	92 e4       	ldi	r25, 0x42	; 66
     b08:	13 c0       	rjmp	.+38     	; 0xb30 <SoC_ADC+0x472>
		} //end else if
		else if (volt < 3.65 && volt > 3.50) {
			soc = 50;
     b0a:	60 e0       	ldi	r22, 0x00	; 0
     b0c:	70 e0       	ldi	r23, 0x00	; 0
     b0e:	88 e4       	ldi	r24, 0x48	; 72
     b10:	92 e4       	ldi	r25, 0x42	; 66
     b12:	0e c0       	rjmp	.+28     	; 0xb30 <SoC_ADC+0x472>
		} //end else if
		else if (volt < 3.50 && volt > 3.40) {
			soc = 40;
     b14:	60 e0       	ldi	r22, 0x00	; 0
     b16:	70 e0       	ldi	r23, 0x00	; 0
     b18:	80 e2       	ldi	r24, 0x20	; 32
     b1a:	92 e4       	ldi	r25, 0x42	; 66
     b1c:	09 c0       	rjmp	.+18     	; 0xb30 <SoC_ADC+0x472>
		} //end else if
		else if (volt < 3.40 && volt > 3.25) {
			soc = 30;
     b1e:	60 e0       	ldi	r22, 0x00	; 0
     b20:	70 e0       	ldi	r23, 0x00	; 0
     b22:	80 ef       	ldi	r24, 0xF0	; 240
     b24:	91 e4       	ldi	r25, 0x41	; 65
     b26:	04 c0       	rjmp	.+8      	; 0xb30 <SoC_ADC+0x472>
		} //end else if
		else if (volt < 3.25) {
			soc = 20;
     b28:	60 e0       	ldi	r22, 0x00	; 0
     b2a:	70 e0       	ldi	r23, 0x00	; 0
     b2c:	80 ea       	ldi	r24, 0xA0	; 160
     b2e:	91 e4       	ldi	r25, 0x41	; 65
	}
	else{
		//UART0_putstring("Battery Charging");
	}
	return soc;
}
     b30:	ff 90       	pop	r15
     b32:	ef 90       	pop	r14
     b34:	df 90       	pop	r13
     b36:	cf 90       	pop	r12
     b38:	bf 90       	pop	r11
     b3a:	af 90       	pop	r10
     b3c:	9f 90       	pop	r9
     b3e:	8f 90       	pop	r8
     b40:	08 95       	ret

00000b42 <fault_check>:
#include <stdint.h>

void fault_check(uint8_t watchdog){
	
	// Check the Watchdog reset bit
	if(watchdog && EEPROM_Read(0x0001)){
     b42:	88 23       	and	r24, r24
     b44:	d1 f1       	breq	.+116    	; 0xbba <fault_check+0x78>
     b46:	81 e0       	ldi	r24, 0x01	; 1
     b48:	90 e0       	ldi	r25, 0x00	; 0
     b4a:	f3 d4       	rcall	.+2534   	; 0x1532 <EEPROM_Read>
     b4c:	88 23       	and	r24, r24
     b4e:	09 f4       	brne	.+2      	; 0xb52 <fault_check+0x10>
     b50:	53 c0       	rjmp	.+166    	; 0xbf8 <fault_check+0xb6>
		EEPROM_Write(0x00, 0x0001); // Reset the bits to 0
     b52:	61 e0       	ldi	r22, 0x01	; 1
     b54:	70 e0       	ldi	r23, 0x00	; 0
     b56:	80 e0       	ldi	r24, 0x00	; 0
     b58:	e2 d4       	rcall	.+2500   	; 0x151e <EEPROM_Write>
		UART0_putstring("A manual reset has occurred.");
     b5a:	86 e7       	ldi	r24, 0x76	; 118
     b5c:	95 e0       	ldi	r25, 0x05	; 5
     b5e:	0e 94 46 11 	call	0x228c	; 0x228c <UART0_putstring>
		UART0_putchar('\r');
     b62:	8d e0       	ldi	r24, 0x0D	; 13
     b64:	0e 94 36 11 	call	0x226c	; 0x226c <UART0_putchar>
		UART0_putchar('\n');
     b68:	8a e0       	ldi	r24, 0x0A	; 10
     b6a:	0e 94 36 11 	call	0x226c	; 0x226c <UART0_putchar>
		UART0_putchar('\n');
     b6e:	8a e0       	ldi	r24, 0x0A	; 10
     b70:	0c 94 36 11 	jmp	0x226c	; 0x226c <UART0_putchar>
     b74:	08 95       	ret
	}
	else if(watchdog && !EEPROM_Read(0x0000)){
		UART0_putstring("A launch reset occurred.");
     b76:	83 e9       	ldi	r24, 0x93	; 147
     b78:	95 e0       	ldi	r25, 0x05	; 5
     b7a:	0e 94 46 11 	call	0x228c	; 0x228c <UART0_putstring>
		UART0_putchar('\r');
     b7e:	8d e0       	ldi	r24, 0x0D	; 13
     b80:	0e 94 36 11 	call	0x226c	; 0x226c <UART0_putchar>
		UART0_putchar('\n');
     b84:	8a e0       	ldi	r24, 0x0A	; 10
     b86:	0e 94 36 11 	call	0x226c	; 0x226c <UART0_putchar>
		UART0_putchar('\n');
     b8a:	8a e0       	ldi	r24, 0x0A	; 10
     b8c:	0c 94 36 11 	jmp	0x226c	; 0x226c <UART0_putchar>
     b90:	08 95       	ret
	}
	// check the jtag reset bit
	else if(watchdog){
		UART0_putchar('\n');
     b92:	8a e0       	ldi	r24, 0x0A	; 10
     b94:	0e 94 36 11 	call	0x226c	; 0x226c <UART0_putchar>
		UART0_putchar('\r');
     b98:	8d e0       	ldi	r24, 0x0D	; 13
     b9a:	0e 94 36 11 	call	0x226c	; 0x226c <UART0_putchar>
		UART0_putstring("A Fault occurred.");
     b9e:	8c ea       	ldi	r24, 0xAC	; 172
     ba0:	95 e0       	ldi	r25, 0x05	; 5
     ba2:	0e 94 46 11 	call	0x228c	; 0x228c <UART0_putstring>
		UART0_putchar('\r');
     ba6:	8d e0       	ldi	r24, 0x0D	; 13
     ba8:	0e 94 36 11 	call	0x226c	; 0x226c <UART0_putchar>
		UART0_putchar('\n');
     bac:	8a e0       	ldi	r24, 0x0A	; 10
     bae:	0e 94 36 11 	call	0x226c	; 0x226c <UART0_putchar>
		UART0_putchar('\n');
     bb2:	8a e0       	ldi	r24, 0x0A	; 10
     bb4:	0c 94 36 11 	jmp	0x226c	; 0x226c <UART0_putchar>
     bb8:	08 95       	ret
	}
	else if(MCUSR & 0x10){
     bba:	04 b6       	in	r0, 0x34	; 52
     bbc:	04 fe       	sbrs	r0, 4
     bbe:	0e c0       	rjmp	.+28     	; 0xbdc <fault_check+0x9a>
		UART0_putstring("I have been reprogrammed.");
     bc0:	8e eb       	ldi	r24, 0xBE	; 190
     bc2:	95 e0       	ldi	r25, 0x05	; 5
     bc4:	0e 94 46 11 	call	0x228c	; 0x228c <UART0_putstring>
		UART0_putchar('\r');
     bc8:	8d e0       	ldi	r24, 0x0D	; 13
     bca:	0e 94 36 11 	call	0x226c	; 0x226c <UART0_putchar>
		UART0_putchar('\n');
     bce:	8a e0       	ldi	r24, 0x0A	; 10
     bd0:	0e 94 36 11 	call	0x226c	; 0x226c <UART0_putchar>
		UART0_putchar('\n');
     bd4:	8a e0       	ldi	r24, 0x0A	; 10
     bd6:	0c 94 36 11 	jmp	0x226c	; 0x226c <UART0_putchar>
     bda:	08 95       	ret
	}
	// assume a power reset if none of the other flags are found
	else{
		UART0_putstring("A power reset has occurred.");
     bdc:	88 ed       	ldi	r24, 0xD8	; 216
     bde:	95 e0       	ldi	r25, 0x05	; 5
     be0:	0e 94 46 11 	call	0x228c	; 0x228c <UART0_putstring>
		UART0_putchar('\r');
     be4:	8d e0       	ldi	r24, 0x0D	; 13
     be6:	0e 94 36 11 	call	0x226c	; 0x226c <UART0_putchar>
		UART0_putchar('\n');
     bea:	8a e0       	ldi	r24, 0x0A	; 10
     bec:	0e 94 36 11 	call	0x226c	; 0x226c <UART0_putchar>
		UART0_putchar('\n');
     bf0:	8a e0       	ldi	r24, 0x0A	; 10
     bf2:	0c 94 36 11 	jmp	0x226c	; 0x226c <UART0_putchar>
	}
     bf6:	08 95       	ret
		UART0_putstring("A manual reset has occurred.");
		UART0_putchar('\r');
		UART0_putchar('\n');
		UART0_putchar('\n');
	}
	else if(watchdog && !EEPROM_Read(0x0000)){
     bf8:	80 e0       	ldi	r24, 0x00	; 0
     bfa:	90 e0       	ldi	r25, 0x00	; 0
     bfc:	9a d4       	rcall	.+2356   	; 0x1532 <EEPROM_Read>
     bfe:	81 11       	cpse	r24, r1
     c00:	c8 cf       	rjmp	.-112    	; 0xb92 <fault_check+0x50>
     c02:	b9 cf       	rjmp	.-142    	; 0xb76 <fault_check+0x34>

00000c04 <launch_pre>:
// Date: 2019-03-25
// Description: Initializes the launch bits to zero (8 bits).
/*========================================================================================*/

void launch_pre(){
	EEPROM_Write(0x00,0x0000);
     c04:	60 e0       	ldi	r22, 0x00	; 0
     c06:	70 e0       	ldi	r23, 0x00	; 0
     c08:	80 e0       	ldi	r24, 0x00	; 0
     c0a:	89 c4       	rjmp	.+2322   	; 0x151e <EEPROM_Write>
     c0c:	08 95       	ret

00000c0e <launch_post>:
// Date: 2019-03-25
// Description: Sets the launch bits to 1 (8 bits).
/*========================================================================================*/

void launch_post(){
	EEPROM_Write(0xff,0x0000);
     c0e:	60 e0       	ldi	r22, 0x00	; 0
     c10:	70 e0       	ldi	r23, 0x00	; 0
     c12:	8f ef       	ldi	r24, 0xFF	; 255
     c14:	84 c4       	rjmp	.+2312   	; 0x151e <EEPROM_Write>
     c16:	08 95       	ret

00000c18 <launch_check>:
/*========================================================================================*/

uint8_t launch_check(){
	
	// Read from permanent memory
	uint8_t launch = EEPROM_Read(0x0000);
     c18:	80 e0       	ldi	r24, 0x00	; 0
     c1a:	90 e0       	ldi	r25, 0x00	; 0
     c1c:	8a d4       	rcall	.+2324   	; 0x1532 <EEPROM_Read>
	// Check mask
	uint8_t mask_check = 0x01;
	uint8_t sum = 0;
	int i = 0; // increment
	
	while(launch){
     c1e:	88 23       	and	r24, r24
     c20:	39 f0       	breq	.+14     	; 0xc30 <launch_check+0x18>
		launch = launch >> 1;
     c22:	86 95       	lsr	r24
	// Check mask
	uint8_t mask_check = 0x01;
	uint8_t sum = 0;
	int i = 0; // increment
	
	while(launch){
     c24:	39 f0       	breq	.+14     	; 0xc34 <launch_check+0x1c>
		launch = launch >> 1;
     c26:	86 95       	lsr	r24
	// Check mask
	uint8_t mask_check = 0x01;
	uint8_t sum = 0;
	int i = 0; // increment
	
	while(launch){
     c28:	39 f0       	breq	.+14     	; 0xc38 <launch_check+0x20>
     c2a:	86 95       	lsr	r24
     c2c:	39 f4       	brne	.+14     	; 0xc3c <launch_check+0x24>
     c2e:	08 95       	ret
		sum += 1;
		if(sum > 3){
			return sum;
		}
	}
	return 0;
     c30:	80 e0       	ldi	r24, 0x00	; 0
     c32:	08 95       	ret
     c34:	80 e0       	ldi	r24, 0x00	; 0
     c36:	08 95       	ret
     c38:	80 e0       	ldi	r24, 0x00	; 0
     c3a:	08 95       	ret
	uint8_t sum = 0;
	int i = 0; // increment
	
	while(launch){
		launch = launch >> 1;
		sum += 1;
     c3c:	84 e0       	ldi	r24, 0x04	; 4
		if(sum > 3){
			return sum;
		}
	}
	return 0;
}
     c3e:	08 95       	ret

00000c40 <launch_reset>:
/*========================================================================================*/

void launch_reset(){
	
	// Reset the launch bits to 0x00
	launch_pre();
     c40:	e1 df       	rcall	.-62     	; 0xc04 <launch_pre>
	/* Watchdog must be reset to ensure the clock starts at 0.
	/ This is especially important as we are shortening the timeout period
	*/
	
	// Watchdog reset
	wdt_reset(); 
     c42:	a8 95       	wdr
	
	// Set the watchdog to System Reset Mode
	wdt_enable(SYSTEM_RESET_MODE);
     c44:	81 e0       	ldi	r24, 0x01	; 1
     c46:	0e 94 99 11 	call	0x2332	; 0x2332 <wdt_enable>
	
	// Change the tiemout period to 16ms			 
	wdt_set_timeout_period(WDT_TIMEOUT_PERIOD_2KCLK); // timeout set from 1024k to 128k
     c4a:	80 e0       	ldi	r24, 0x00	; 0
     c4c:	0c 94 75 11 	jmp	0x22ea	; 0x22ea <wdt_set_timeout_period>
     c50:	08 95       	ret

00000c52 <launch_timer>:
// Date: 2019-03-26
// Description: Uses the util/delay.h library to create a delay simulating the delay
//				that will be needed once the nano satellite is in space.
/*========================================================================================*/

void launch_timer(){
     c52:	cf 93       	push	r28
	
	// Delay the start-up by 8 seconds
	int i = 9;
	UART0_putstring("Starting Launch Timer");
     c54:	84 ef       	ldi	r24, 0xF4	; 244
     c56:	95 e0       	ldi	r25, 0x05	; 5
     c58:	0e 94 46 11 	call	0x228c	; 0x228c <UART0_putstring>
	UART0_putchar('\n');
     c5c:	8a e0       	ldi	r24, 0x0A	; 10
     c5e:	0e 94 36 11 	call	0x226c	; 0x226c <UART0_putchar>
	UART0_putchar('\r');
     c62:	8d e0       	ldi	r24, 0x0D	; 13
     c64:	0e 94 36 11 	call	0x226c	; 0x226c <UART0_putchar>
     c68:	c9 e3       	ldi	r28, 0x39	; 57
	while(i > 0){
		UART0_putchar(i + 0x30); // prints the character value of
     c6a:	8c 2f       	mov	r24, r28
     c6c:	0e 94 36 11 	call	0x226c	; 0x226c <UART0_putchar>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     c70:	2f e3       	ldi	r18, 0x3F	; 63
     c72:	8d e0       	ldi	r24, 0x0D	; 13
     c74:	93 e0       	ldi	r25, 0x03	; 3
     c76:	21 50       	subi	r18, 0x01	; 1
     c78:	80 40       	sbci	r24, 0x00	; 0
     c7a:	90 40       	sbci	r25, 0x00	; 0
     c7c:	e1 f7       	brne	.-8      	; 0xc76 <launch_timer+0x24>
     c7e:	00 c0       	rjmp	.+0      	; 0xc80 <launch_timer+0x2e>
     c80:	00 00       	nop
		_delay_ms(1000);
		UART0_putchar('\n');
     c82:	8a e0       	ldi	r24, 0x0A	; 10
     c84:	0e 94 36 11 	call	0x226c	; 0x226c <UART0_putchar>
		UART0_putchar('\r');
     c88:	8d e0       	ldi	r24, 0x0D	; 13
     c8a:	0e 94 36 11 	call	0x226c	; 0x226c <UART0_putchar>
     c8e:	c1 50       	subi	r28, 0x01	; 1
	// Delay the start-up by 8 seconds
	int i = 9;
	UART0_putstring("Starting Launch Timer");
	UART0_putchar('\n');
	UART0_putchar('\r');
	while(i > 0){
     c90:	c0 33       	cpi	r28, 0x30	; 48
     c92:	59 f7       	brne	.-42     	; 0xc6a <launch_timer+0x18>
		_delay_ms(1000);
		UART0_putchar('\n');
		UART0_putchar('\r');
		i--; 
	}
	UART0_putstring("Timer complete. Entering normal operation.");
     c94:	8a e0       	ldi	r24, 0x0A	; 10
     c96:	96 e0       	ldi	r25, 0x06	; 6
     c98:	0e 94 46 11 	call	0x228c	; 0x228c <UART0_putstring>
	UART0_putchar('\n');
     c9c:	8a e0       	ldi	r24, 0x0A	; 10
     c9e:	0e 94 36 11 	call	0x226c	; 0x226c <UART0_putchar>
	UART0_putchar('\n');
     ca2:	8a e0       	ldi	r24, 0x0A	; 10
     ca4:	0e 94 36 11 	call	0x226c	; 0x226c <UART0_putchar>
	UART0_putchar('\r');
     ca8:	8d e0       	ldi	r24, 0x0D	; 13
     caa:	0e 94 36 11 	call	0x226c	; 0x226c <UART0_putchar>
}
     cae:	cf 91       	pop	r28
     cb0:	08 95       	ret

00000cb2 <launch_state>:
/*========================================================================================*/

void launch_state(){
	
	// Check if the satellite has been launched
	if(launch_check()){
     cb2:	b2 df       	rcall	.-156    	; 0xc18 <launch_check>
     cb4:	88 23       	and	r24, r24
     cb6:	c1 f0       	breq	.+48     	; 0xce8 <launch_state+0x36>
		UART0_putstring("I have already been launched.");
     cb8:	85 e3       	ldi	r24, 0x35	; 53
     cba:	96 e0       	ldi	r25, 0x06	; 6
     cbc:	0e 94 46 11 	call	0x228c	; 0x228c <UART0_putstring>
		UART0_putchar('\n');
     cc0:	8a e0       	ldi	r24, 0x0A	; 10
     cc2:	0e 94 36 11 	call	0x226c	; 0x226c <UART0_putchar>
		UART0_putchar('\r');
     cc6:	8d e0       	ldi	r24, 0x0D	; 13
     cc8:	0e 94 36 11 	call	0x226c	; 0x226c <UART0_putchar>
		UART0_putstring("Returning to normal operation...");
     ccc:	83 e5       	ldi	r24, 0x53	; 83
     cce:	96 e0       	ldi	r25, 0x06	; 6
     cd0:	0e 94 46 11 	call	0x228c	; 0x228c <UART0_putstring>
		UART0_putchar('\n');
     cd4:	8a e0       	ldi	r24, 0x0A	; 10
     cd6:	0e 94 36 11 	call	0x226c	; 0x226c <UART0_putchar>
		UART0_putchar('\n');
     cda:	8a e0       	ldi	r24, 0x0A	; 10
     cdc:	0e 94 36 11 	call	0x226c	; 0x226c <UART0_putchar>
		UART0_putchar('\r');
     ce0:	8d e0       	ldi	r24, 0x0D	; 13
     ce2:	0c 94 36 11 	jmp	0x226c	; 0x226c <UART0_putchar>
	}
	else{
		launch_timer();
     ce6:	08 95       	ret
		launch_post();
     ce8:	b4 df       	rcall	.-152    	; 0xc52 <launch_timer>
     cea:	91 cf       	rjmp	.-222    	; 0xc0e <launch_post>
     cec:	08 95       	ret

00000cee <Enable_3V3_1>:
// Description: Enables 3V3-1 rail power. Waits for transient to finish.
/*========================================================================================*/
void Enable_3V3_1(){

	// Set 5V rail for readings
	Set_GPIO(10);
     cee:	8a e0       	ldi	r24, 0x0A	; 10
     cf0:	90 e0       	ldi	r25, 0x00	; 0
     cf2:	27 d4       	rcall	.+2126   	; 0x1542 <Set_GPIO>

	while(Volt_ADC(0) < 3.1){
     cf4:	80 e0       	ldi	r24, 0x00	; 0
     cf6:	90 e0       	ldi	r25, 0x00	; 0
     cf8:	bb da       	rcall	.-2698   	; 0x270 <Volt_ADC>
     cfa:	26 e6       	ldi	r18, 0x66	; 102
     cfc:	36 e6       	ldi	r19, 0x66	; 102
     cfe:	46 e4       	ldi	r20, 0x46	; 70
     d00:	50 e4       	ldi	r21, 0x40	; 64
     d02:	0e 94 47 14 	call	0x288e	; 0x288e <__cmpsf2>
     d06:	88 23       	and	r24, r24
     d08:	ac f3       	brlt	.-22     	; 0xcf4 <Enable_3V3_1+0x6>
		// Wait until 3V3-1 rail transient is finished
	}
}
     d0a:	08 95       	ret

00000d0c <Enable_5V>:
// Description: Enables 5V rail power. Waits for transient to finish.
/*========================================================================================*/
void Enable_5V(){

	// Set 5V rail for readings
	Set_GPIO(11);
     d0c:	8b e0       	ldi	r24, 0x0B	; 11
     d0e:	90 e0       	ldi	r25, 0x00	; 0
     d10:	18 d4       	rcall	.+2096   	; 0x1542 <Set_GPIO>

	while(Volt_ADC(2) < 4.8){
     d12:	82 e0       	ldi	r24, 0x02	; 2
     d14:	90 e0       	ldi	r25, 0x00	; 0
     d16:	ac da       	rcall	.-2728   	; 0x270 <Volt_ADC>
     d18:	2a e9       	ldi	r18, 0x9A	; 154
     d1a:	39 e9       	ldi	r19, 0x99	; 153
     d1c:	49 e9       	ldi	r20, 0x99	; 153
     d1e:	50 e4       	ldi	r21, 0x40	; 64
     d20:	0e 94 47 14 	call	0x288e	; 0x288e <__cmpsf2>
     d24:	88 23       	and	r24, r24
     d26:	ac f3       	brlt	.-22     	; 0xd12 <Enable_5V+0x6>
		// Wait until 5V rail transient is finished
	}
}
     d28:	08 95       	ret

00000d2a <Enable_8V>:
// Description: Enables 8V rail power. Waits for transient to finish.
/*========================================================================================*/
void Enable_8V(){

	// Set 8V rail for readings
	Set_GPIO(16);
     d2a:	80 e1       	ldi	r24, 0x10	; 16
     d2c:	90 e0       	ldi	r25, 0x00	; 0
     d2e:	09 d4       	rcall	.+2066   	; 0x1542 <Set_GPIO>

	while(Volt_ADC(3) < 7.8){
     d30:	83 e0       	ldi	r24, 0x03	; 3
     d32:	90 e0       	ldi	r25, 0x00	; 0
     d34:	9d da       	rcall	.-2758   	; 0x270 <Volt_ADC>
     d36:	2a e9       	ldi	r18, 0x9A	; 154
     d38:	39 e9       	ldi	r19, 0x99	; 153
     d3a:	49 ef       	ldi	r20, 0xF9	; 249
     d3c:	50 e4       	ldi	r21, 0x40	; 64
     d3e:	0e 94 47 14 	call	0x288e	; 0x288e <__cmpsf2>
     d42:	88 23       	and	r24, r24
     d44:	ac f3       	brlt	.-22     	; 0xd30 <Enable_8V+0x6>
		// Wait until 8V rail transient is finished
	}
}
     d46:	08 95       	ret

00000d48 <Enable_VBatt>:
/*========================================================================================*/

void Enable_VBatt(){

	// Enable VBatt to Rails
	Set_GPIO(21);
     d48:	85 e1       	ldi	r24, 0x15	; 21
     d4a:	90 e0       	ldi	r25, 0x00	; 0
     d4c:	fa d3       	rcall	.+2036   	; 0x1542 <Set_GPIO>

	while(Volt_ADC(4) < 2.5){
     d4e:	84 e0       	ldi	r24, 0x04	; 4
     d50:	90 e0       	ldi	r25, 0x00	; 0
     d52:	8e da       	rcall	.-2788   	; 0x270 <Volt_ADC>
     d54:	20 e0       	ldi	r18, 0x00	; 0
     d56:	30 e0       	ldi	r19, 0x00	; 0
     d58:	40 e2       	ldi	r20, 0x20	; 32
     d5a:	50 e4       	ldi	r21, 0x40	; 64
     d5c:	0e 94 47 14 	call	0x288e	; 0x288e <__cmpsf2>
     d60:	88 23       	and	r24, r24
     d62:	ac f3       	brlt	.-22     	; 0xd4e <Enable_VBatt+0x6>
		// Wait until VBatt rail transient is finished
	}
}
     d64:	08 95       	ret

00000d66 <Disable_3V3_1>:
	
	// 3V3-1 rail subsystem mask
	uint8_t mask_3V3_1 = 0b00100000;

	// Check for subsystems using the 3V3-1 rail
	if(power_state & mask_3V3_1){
     d66:	85 fd       	sbrc	r24, 5
     d68:	03 c0       	rjmp	.+6      	; 0xd70 <Disable_3V3_1+0xa>
		// Do not turn off the rail
	}
	else{
		Clear_GPIO(10); // turn 3V3-1 rail off if nothing is using the rail.
     d6a:	8a e0       	ldi	r24, 0x0A	; 10
     d6c:	90 e0       	ldi	r25, 0x00	; 0
     d6e:	4f c4       	rjmp	.+2206   	; 0x160e <Clear_GPIO>
     d70:	08 95       	ret

00000d72 <Disable_5V>:
	
	// 5V rail subsystem mask
	uint8_t mask_5V = 0b00110010;
	
	// Check for subsystems using the 5V rail
	if(power_state & mask_5V){
     d72:	82 73       	andi	r24, 0x32	; 50
     d74:	19 f4       	brne	.+6      	; 0xd7c <Disable_5V+0xa>
		// do not turn the rail off
	}
	else{
		Clear_GPIO(11); // turn off the 5V rail if nothing is using the rail.
     d76:	8b e0       	ldi	r24, 0x0B	; 11
     d78:	90 e0       	ldi	r25, 0x00	; 0
     d7a:	49 c4       	rjmp	.+2194   	; 0x160e <Clear_GPIO>
     d7c:	08 95       	ret

00000d7e <Disable_8V>:
	
	// 5V rail subsystem mask
	uint8_t mask_8V = 0b11000100;
	
	// Check for subsystems using the 5V rail
	if(power_state & mask_8V){
     d7e:	84 7c       	andi	r24, 0xC4	; 196
     d80:	19 f4       	brne	.+6      	; 0xd88 <Disable_8V+0xa>
		// do not turn the rail off
	}
	else{
		Clear_GPIO(16); // turn off the 5V rail if nothing is using the rail.
     d82:	80 e1       	ldi	r24, 0x10	; 16
     d84:	90 e0       	ldi	r25, 0x00	; 0
     d86:	43 c4       	rjmp	.+2182   	; 0x160e <Clear_GPIO>
     d88:	08 95       	ret

00000d8a <Disable_VBatt>:
	
	// 5V rail subsystem mask
	uint8_t mask_VBatt = 0b00000001;
	
	// Check for subsystems using the 5V rail
	if(power_state & mask_VBatt){
     d8a:	80 fd       	sbrc	r24, 0
     d8c:	03 c0       	rjmp	.+6      	; 0xd94 <Disable_VBatt+0xa>
		// do not turn the rail off
	}
	else{
		Clear_GPIO(21); // turn off the 5V rail if nothing is using the rail.
     d8e:	85 e1       	ldi	r24, 0x15	; 21
     d90:	90 e0       	ldi	r25, 0x00	; 0
     d92:	3d c4       	rjmp	.+2170   	; 0x160e <Clear_GPIO>
     d94:	08 95       	ret

00000d96 <heater_SWITCH>:
// Description: Switches power to Heaters based on current power state. Only one heater
//				can be turned on at a time. If none or more than one heater is set to be
//				turned on, all heaters are turned off.
/*========================================================================================*/

void heater_SWITCH(uint8_t power_state, uint8_t* power_pointer){
     d96:	0f 93       	push	r16
     d98:	1f 93       	push	r17
     d9a:	cf 93       	push	r28
     d9c:	c8 2f       	mov	r28, r24
     d9e:	8b 01       	movw	r16, r22
	uint8_t mask_heater_8V = 0b00000100;
	
	// Check which of the heaters is turned on
	
	// Vbatt Heater
	if((power_state & mask_heater_VBatt) && !(power_state & (mask_heater_5V | mask_heater_8V))){
     da0:	80 ff       	sbrs	r24, 0
     da2:	11 c0       	rjmp	.+34     	; 0xdc6 <heater_SWITCH+0x30>
     da4:	86 70       	andi	r24, 0x06	; 6
     da6:	79 f4       	brne	.+30     	; 0xdc6 <heater_SWITCH+0x30>
		Disable_5V(power_state); // disable 5V rail if not needed
     da8:	8c 2f       	mov	r24, r28
     daa:	e3 df       	rcall	.-58     	; 0xd72 <Disable_5V>
		Disable_8V(power_state); // disable 8V rail if not needed
     dac:	8c 2f       	mov	r24, r28
     dae:	e7 df       	rcall	.-50     	; 0xd7e <Disable_8V>
		Clear_GPIO(3); // Turn off 5V heater
     db0:	83 e0       	ldi	r24, 0x03	; 3
     db2:	90 e0       	ldi	r25, 0x00	; 0
     db4:	2c d4       	rcall	.+2136   	; 0x160e <Clear_GPIO>
		Clear_GPIO(2); // Turn off 8V heater
     db6:	82 e0       	ldi	r24, 0x02	; 2
     db8:	90 e0       	ldi	r25, 0x00	; 0
     dba:	29 d4       	rcall	.+2130   	; 0x160e <Clear_GPIO>
		Enable_VBatt();
     dbc:	c5 df       	rcall	.-118    	; 0xd48 <Enable_VBatt>
     dbe:	80 e0       	ldi	r24, 0x00	; 0
		Set_GPIO(0);  // Enable VBatt heater
     dc0:	90 e0       	ldi	r25, 0x00	; 0
     dc2:	bf d3       	rcall	.+1918   	; 0x1542 <Set_GPIO>
     dc4:	3b c0       	rjmp	.+118    	; 0xe3c <heater_SWITCH+0xa6>
     dc6:	c1 ff       	sbrs	r28, 1
     dc8:	12 c0       	rjmp	.+36     	; 0xdee <heater_SWITCH+0x58>
	}
	
	// 5V Heater
	else if((power_state & mask_heater_5V) && !(power_state & (mask_heater_VBatt | mask_heater_8V))){
     dca:	8c 2f       	mov	r24, r28
     dcc:	85 70       	andi	r24, 0x05	; 5
     dce:	79 f4       	brne	.+30     	; 0xdee <heater_SWITCH+0x58>
		Disable_VBatt(power_state); // disable VBatt rail if not needed
     dd0:	8c 2f       	mov	r24, r28
     dd2:	db df       	rcall	.-74     	; 0xd8a <Disable_VBatt>
		Disable_8V(power_state); // disable 8V rail if not needed
     dd4:	8c 2f       	mov	r24, r28
		Clear_GPIO(0); // Turn off VBatt heater
     dd6:	d3 df       	rcall	.-90     	; 0xd7e <Disable_8V>
     dd8:	80 e0       	ldi	r24, 0x00	; 0
     dda:	90 e0       	ldi	r25, 0x00	; 0
		Clear_GPIO(2); // Turn off 8V heater
     ddc:	18 d4       	rcall	.+2096   	; 0x160e <Clear_GPIO>
     dde:	82 e0       	ldi	r24, 0x02	; 2
     de0:	90 e0       	ldi	r25, 0x00	; 0
     de2:	15 d4       	rcall	.+2090   	; 0x160e <Clear_GPIO>
		Enable_5V();
     de4:	93 df       	rcall	.-218    	; 0xd0c <Enable_5V>
		Set_GPIO(3); // Enable 5V heater
     de6:	83 e0       	ldi	r24, 0x03	; 3
     de8:	90 e0       	ldi	r25, 0x00	; 0
     dea:	ab d3       	rcall	.+1878   	; 0x1542 <Set_GPIO>
     dec:	27 c0       	rjmp	.+78     	; 0xe3c <heater_SWITCH+0xa6>
	}
	
	// 8V Heater
	else if((power_state & mask_heater_8V) && !(power_state & (mask_heater_VBatt | mask_heater_5V))){
     dee:	c2 ff       	sbrs	r28, 2
     df0:	12 c0       	rjmp	.+36     	; 0xe16 <heater_SWITCH+0x80>
     df2:	8c 2f       	mov	r24, r28
		Disable_VBatt(power_state); // disable VBatt rail if not needed
     df4:	83 70       	andi	r24, 0x03	; 3
     df6:	79 f4       	brne	.+30     	; 0xe16 <heater_SWITCH+0x80>
		Disable_5V(power_state); // disable 5V rail if not needed
     df8:	8c 2f       	mov	r24, r28
     dfa:	c7 df       	rcall	.-114    	; 0xd8a <Disable_VBatt>
		Clear_GPIO(0); // Turn off VBatt heater
     dfc:	8c 2f       	mov	r24, r28
     dfe:	b9 df       	rcall	.-142    	; 0xd72 <Disable_5V>
     e00:	80 e0       	ldi	r24, 0x00	; 0
		Clear_GPIO(3); // Turn off 5V heater
     e02:	90 e0       	ldi	r25, 0x00	; 0
     e04:	04 d4       	rcall	.+2056   	; 0x160e <Clear_GPIO>
     e06:	83 e0       	ldi	r24, 0x03	; 3
		Enable_8V();
     e08:	90 e0       	ldi	r25, 0x00	; 0
		Set_GPIO(2); // Enable 8V heater
     e0a:	01 d4       	rcall	.+2050   	; 0x160e <Clear_GPIO>
     e0c:	8e df       	rcall	.-228    	; 0xd2a <Enable_8V>
     e0e:	82 e0       	ldi	r24, 0x02	; 2
     e10:	90 e0       	ldi	r25, 0x00	; 0
	}
	else{
		// Turn off all heaters
		Clear_GPIO(0);
     e12:	97 d3       	rcall	.+1838   	; 0x1542 <Set_GPIO>
     e14:	13 c0       	rjmp	.+38     	; 0xe3c <heater_SWITCH+0xa6>
     e16:	80 e0       	ldi	r24, 0x00	; 0
     e18:	90 e0       	ldi	r25, 0x00	; 0
		Clear_GPIO(3);
     e1a:	f9 d3       	rcall	.+2034   	; 0x160e <Clear_GPIO>
     e1c:	83 e0       	ldi	r24, 0x03	; 3
     e1e:	90 e0       	ldi	r25, 0x00	; 0
     e20:	f6 d3       	rcall	.+2028   	; 0x160e <Clear_GPIO>
		Clear_GPIO(2);
     e22:	82 e0       	ldi	r24, 0x02	; 2
     e24:	90 e0       	ldi	r25, 0x00	; 0
     e26:	f3 d3       	rcall	.+2022   	; 0x160e <Clear_GPIO>
     e28:	8c 2f       	mov	r24, r28
		
		// Turn off associated rails (rail logic is taken care of in the function)
		Disable_VBatt(power_state);
     e2a:	af df       	rcall	.-162    	; 0xd8a <Disable_VBatt>
     e2c:	8c 2f       	mov	r24, r28
     e2e:	a1 df       	rcall	.-190    	; 0xd72 <Disable_5V>
		Disable_5V(power_state);
     e30:	8c 2f       	mov	r24, r28
     e32:	a5 df       	rcall	.-182    	; 0xd7e <Disable_8V>
     e34:	f8 01       	movw	r30, r16
		Disable_8V(power_state);
     e36:	80 81       	ld	r24, Z
     e38:	88 7f       	andi	r24, 0xF8	; 248
     e3a:	80 83       	st	Z, r24
		
		// Change power state as they are all turned off now
		power_pointer[0] &= 0b11111000;
     e3c:	cf 91       	pop	r28
     e3e:	1f 91       	pop	r17
     e40:	0f 91       	pop	r16
     e42:	08 95       	ret

00000e44 <obc_SWITCH>:
	}
}
     e44:	83 ff       	sbrs	r24, 3
     e46:	04 c0       	rjmp	.+8      	; 0xe50 <obc_SWITCH+0xc>
     e48:	88 e1       	ldi	r24, 0x18	; 24
     e4a:	90 e0       	ldi	r25, 0x00	; 0
	// OBC mask
	uint8_t mask_OBC = 0b00001000;
	
	// Turn on OBC if it is set to one
	if(power_state & mask_OBC){
		Set_GPIO(24); // turn on OBC
     e4c:	7a c3       	rjmp	.+1780   	; 0x1542 <Set_GPIO>
     e4e:	08 95       	ret
	}
	else{
		Clear_GPIO(24); // turn off OBC
     e50:	88 e1       	ldi	r24, 0x18	; 24
     e52:	90 e0       	ldi	r25, 0x00	; 0
     e54:	dc c3       	rjmp	.+1976   	; 0x160e <Clear_GPIO>
     e56:	08 95       	ret

00000e58 <imager_SWITCH>:
// Author: Chris Thomas
// Date: 2019-03-24
// Description: Switches power to Imager based on current power state.
/*========================================================================================*/

void imager_SWITCH(uint8_t power_state){
     e58:	cf 93       	push	r28
     e5a:	c8 2f       	mov	r28, r24
	
	// Imager Mask
	uint8_t mask_imager = 0b00010000;
	
	// Turn on Imager subcomponents if power state calls for it
	if(power_state & mask_imager){
     e5c:	84 ff       	sbrs	r24, 4
     e5e:	08 c0       	rjmp	.+16     	; 0xe70 <imager_SWITCH+0x18>
		Enable_5V();
     e60:	55 df       	rcall	.-342    	; 0xd0c <Enable_5V>
		Set_GPIO(23); // turn on imager beagle
     e62:	87 e1       	ldi	r24, 0x17	; 23
     e64:	90 e0       	ldi	r25, 0x00	; 0
     e66:	6d d3       	rcall	.+1754   	; 0x1542 <Set_GPIO>
		Set_GPIO(22); // turn on camera 
     e68:	86 e1       	ldi	r24, 0x16	; 22
     e6a:	90 e0       	ldi	r25, 0x00	; 0
     e6c:	6a d3       	rcall	.+1748   	; 0x1542 <Set_GPIO>
     e6e:	08 c0       	rjmp	.+16     	; 0xe80 <imager_SWITCH+0x28>
	}
	else{
		Clear_GPIO(22); // turn off camera
     e70:	86 e1       	ldi	r24, 0x16	; 22
     e72:	90 e0       	ldi	r25, 0x00	; 0
     e74:	cc d3       	rcall	.+1944   	; 0x160e <Clear_GPIO>
		Clear_GPIO(23); // turn off imager beagle
     e76:	87 e1       	ldi	r24, 0x17	; 23
     e78:	90 e0       	ldi	r25, 0x00	; 0
     e7a:	c9 d3       	rcall	.+1938   	; 0x160e <Clear_GPIO>
		Disable_5V(power_state); // turn off associated rail (5V)		
     e7c:	8c 2f       	mov	r24, r28
     e7e:	79 df       	rcall	.-270    	; 0xd72 <Disable_5V>
     e80:	cf 91       	pop	r28
	}
}
     e82:	08 95       	ret

00000e84 <grips_SWITCH>:
     e84:	cf 93       	push	r28
// Author: Chris Thomas
// Date: 2019-03-24
// Description: Switches power to GRIPS based on current power state.
/*========================================================================================*/

void grips_SWITCH(uint8_t power_state){
     e86:	c8 2f       	mov	r28, r24
	
	// GRIPS mask
	uint8_t grips_mask = 0b00100000;
	
	// Turn on Grips subcomponents if power state calls for it
	if(power_state & grips_mask){
     e88:	85 ff       	sbrs	r24, 5
     e8a:	09 c0       	rjmp	.+18     	; 0xe9e <grips_SWITCH+0x1a>
		Enable_5V();
     e8c:	3f df       	rcall	.-386    	; 0xd0c <Enable_5V>
		Enable_3V3_1();
     e8e:	2f df       	rcall	.-418    	; 0xcee <Enable_3V3_1>
     e90:	8b e1       	ldi	r24, 0x1B	; 27
		Set_GPIO(27); // turn on GNSS beagle
     e92:	90 e0       	ldi	r25, 0x00	; 0
     e94:	56 d3       	rcall	.+1708   	; 0x1542 <Set_GPIO>
     e96:	8c e1       	ldi	r24, 0x1C	; 28
		Set_GPIO(28); // turn on OEM719
     e98:	90 e0       	ldi	r25, 0x00	; 0
     e9a:	53 d3       	rcall	.+1702   	; 0x1542 <Set_GPIO>
     e9c:	0a c0       	rjmp	.+20     	; 0xeb2 <grips_SWITCH+0x2e>
     e9e:	8c e1       	ldi	r24, 0x1C	; 28
	}
	else{
		Clear_GPIO(28); // turn off OEM719
     ea0:	90 e0       	ldi	r25, 0x00	; 0
     ea2:	b5 d3       	rcall	.+1898   	; 0x160e <Clear_GPIO>
     ea4:	8b e1       	ldi	r24, 0x1B	; 27
		Clear_GPIO(27); // turn off GNSS beagle
     ea6:	90 e0       	ldi	r25, 0x00	; 0
     ea8:	b2 d3       	rcall	.+1892   	; 0x160e <Clear_GPIO>
     eaa:	8c 2f       	mov	r24, r28
		Disable_3V3_1(power_state); // turn off 5V rail
     eac:	5c df       	rcall	.-328    	; 0xd66 <Disable_3V3_1>
     eae:	8c 2f       	mov	r24, r28
     eb0:	60 df       	rcall	.-320    	; 0xd72 <Disable_5V>
		Disable_5V(power_state); // turn off 3V3-1 rail
     eb2:	cf 91       	pop	r28
     eb4:	08 95       	ret

00000eb6 <sband_SWITCH>:
     eb6:	cf 93       	push	r28
	}
}
     eb8:	c8 2f       	mov	r28, r24
     eba:	86 ff       	sbrs	r24, 6
	
	// SBand mask
	uint8_t mask_sband = 0b01000000;
	
	// Turn on SBand components if power stated calls for it
	if(power_state & mask_sband){
     ebc:	05 c0       	rjmp	.+10     	; 0xec8 <sband_SWITCH+0x12>
		Enable_8V();
     ebe:	35 df       	rcall	.-406    	; 0xd2a <Enable_8V>
		Set_GPIO(26); // turn on SBand
     ec0:	8a e1       	ldi	r24, 0x1A	; 26
     ec2:	90 e0       	ldi	r25, 0x00	; 0
     ec4:	3e d3       	rcall	.+1660   	; 0x1542 <Set_GPIO>
     ec6:	05 c0       	rjmp	.+10     	; 0xed2 <sband_SWITCH+0x1c>
	}
	else{
		Clear_GPIO(26); // turn off SBand
     ec8:	8a e1       	ldi	r24, 0x1A	; 26
     eca:	90 e0       	ldi	r25, 0x00	; 0
		Disable_8V(power_state); // turn off 8V rail
     ecc:	a0 d3       	rcall	.+1856   	; 0x160e <Clear_GPIO>
     ece:	8c 2f       	mov	r24, r28
     ed0:	56 df       	rcall	.-340    	; 0xd7e <Disable_8V>
	}
}
     ed2:	cf 91       	pop	r28
     ed4:	08 95       	ret

00000ed6 <uhf_SWITCH>:
// Author: Chris Thomas
// Date: 2019-03-24
// Description: Switches power to UHF based on current power state.
/*========================================================================================*/

uhf_SWITCH(uint8_t power_state){
     ed6:	cf 93       	push	r28
     ed8:	c8 2f       	mov	r28, r24
	
	// UHF mask
	uint8_t mask_uhf = 0b10000000;
	
	// Turn on UHF components if power state calls for it
	if(power_state & mask_uhf){
     eda:	88 23       	and	r24, r24
     edc:	2c f4       	brge	.+10     	; 0xee8 <uhf_SWITCH+0x12>
		Enable_8V();
     ede:	25 df       	rcall	.-438    	; 0xd2a <Enable_8V>
		Set_GPIO(25); // turn on UHF
     ee0:	89 e1       	ldi	r24, 0x19	; 25
     ee2:	90 e0       	ldi	r25, 0x00	; 0
     ee4:	2e d3       	rcall	.+1628   	; 0x1542 <Set_GPIO>
     ee6:	05 c0       	rjmp	.+10     	; 0xef2 <uhf_SWITCH+0x1c>
	}
	else{
		Clear_GPIO(25); // turn off UHF
     ee8:	89 e1       	ldi	r24, 0x19	; 25
     eea:	90 e0       	ldi	r25, 0x00	; 0
		Disable_8V(power_state); // turn off 8V rail
     eec:	90 d3       	rcall	.+1824   	; 0x160e <Clear_GPIO>
     eee:	8c 2f       	mov	r24, r28
     ef0:	46 df       	rcall	.-372    	; 0xd7e <Disable_8V>
	}
     ef2:	cf 91       	pop	r28
     ef4:	08 95       	ret

00000ef6 <Update_LOADS>:
// Description: Switches power to subsystems based on the current power state. The
//				power state is treated the same way whether the EPS is in autonomous or
//				manual mode.
/*========================================================================================*/

void Update_LOADS(uint8_t power_state, uint8_t* power_pointer){
     ef6:	cf 93       	push	r28
     ef8:	c8 2f       	mov	r28, r24
	
	// Heater switching
	heater_SWITCH(power_state, power_pointer);
     efa:	4d df       	rcall	.-358    	; 0xd96 <heater_SWITCH>
	
	// OBC switching
	obc_SWITCH(power_state);
     efc:	8c 2f       	mov	r24, r28
     efe:	a2 df       	rcall	.-188    	; 0xe44 <obc_SWITCH>
	
	// Imager switching
	imager_SWITCH(power_state);
     f00:	8c 2f       	mov	r24, r28
     f02:	aa df       	rcall	.-172    	; 0xe58 <imager_SWITCH>
	
	// GRIPS switching
	grips_SWITCH(power_state);
     f04:	8c 2f       	mov	r24, r28
     f06:	be df       	rcall	.-132    	; 0xe84 <grips_SWITCH>
	
	// SBand switching
	sband_SWITCH(power_state);
     f08:	8c 2f       	mov	r24, r28
     f0a:	d5 df       	rcall	.-86     	; 0xeb6 <sband_SWITCH>
     f0c:	8c 2f       	mov	r24, r28
	
	// UHF switching
	uhf_SWITCH(power_state);
     f0e:	e3 df       	rcall	.-58     	; 0xed6 <uhf_SWITCH>
     f10:	cf 91       	pop	r28
     f12:	08 95       	ret

00000f14 <pwrMatInit>:
	
}
     f14:	fc 01       	movw	r30, r24
     f16:	81 e0       	ldi	r24, 0x01	; 1
// The structure for the power state matrix is
//
/*========================================================================================*/

void pwrMatInit(uint8_t* pwrMat){
	pwrMat[0] = 0b00000001;
     f18:	80 83       	st	Z, r24
	pwrMat[1] = 0b00000001;
     f1a:	81 83       	std	Z+1, r24	; 0x01
	pwrMat[2] = 0b00000000;
     f1c:	12 82       	std	Z+2, r1	; 0x02
	pwrMat[3] = 0b00000000;
     f1e:	13 82       	std	Z+3, r1	; 0x03
	pwrMat[4] = 0b00000000;
     f20:	14 82       	std	Z+4, r1	; 0x04
	pwrMat[5] = 0b00000000;
     f22:	15 82       	std	Z+5, r1	; 0x05
	pwrMat[6] = 0b00000100;
     f24:	84 e0       	ldi	r24, 0x04	; 4
     f26:	86 83       	std	Z+6, r24	; 0x06
	pwrMat[7] = 0b00001000;
     f28:	88 e0       	ldi	r24, 0x08	; 8
     f2a:	87 83       	std	Z+7, r24	; 0x07
	pwrMat[8] = 0b00001000;
     f2c:	80 87       	std	Z+8, r24	; 0x08
	pwrMat[9] = 0b00001000;
     f2e:	81 87       	std	Z+9, r24	; 0x09
	pwrMat[10] = 0b00011100;
     f30:	8c e1       	ldi	r24, 0x1C	; 28
     f32:	82 87       	std	Z+10, r24	; 0x0a
	pwrMat[11] = 0b00011010;
     f34:	8a e1       	ldi	r24, 0x1A	; 26
     f36:	83 87       	std	Z+11, r24	; 0x0b
	pwrMat[12] = 0b00011000;
     f38:	88 e1       	ldi	r24, 0x18	; 24
     f3a:	84 87       	std	Z+12, r24	; 0x0c
	pwrMat[13] = 0b00011000;
     f3c:	85 87       	std	Z+13, r24	; 0x0d
	pwrMat[14] = 0b00000000;
     f3e:	16 86       	std	Z+14, r1	; 0x0e
	pwrMat[15] = 0b10111100;
     f40:	8c eb       	ldi	r24, 0xBC	; 188
     f42:	87 87       	std	Z+15, r24	; 0x0f
	pwrMat[16] = 0b00111010;
     f44:	8a e3       	ldi	r24, 0x3A	; 58
     f46:	80 8b       	std	Z+16, r24	; 0x10
	pwrMat[17] = 0b00111000;
     f48:	88 e3       	ldi	r24, 0x38	; 56
     f4a:	81 8b       	std	Z+17, r24	; 0x11
	pwrMat[18] = 0b00111000;
     f4c:	82 8b       	std	Z+18, r24	; 0x12
	pwrMat[19] = 0b00000000;
     f4e:	13 8a       	std	Z+19, r1	; 0x13
	pwrMat[20] = 0b11111100;
     f50:	8c ef       	ldi	r24, 0xFC	; 252
     f52:	84 8b       	std	Z+20, r24	; 0x14
	pwrMat[21] = 0b11111010;
     f54:	8a ef       	ldi	r24, 0xFA	; 250
     f56:	85 8b       	std	Z+21, r24	; 0x15
	pwrMat[22] = 0b11111000;
     f58:	88 ef       	ldi	r24, 0xF8	; 248
     f5a:	86 8b       	std	Z+22, r24	; 0x16
	pwrMat[23] = 0b11111000;
     f5c:	87 8b       	std	Z+23, r24	; 0x17
	pwrMat[24] = 0b00000000;
     f5e:	10 8e       	std	Z+24, r1	; 0x18
     f60:	08 95       	ret

00000f62 <PowerStateCheck>:
// Author: Kyle Andersen
// Date: 2019-03-20
// Description: 
/*========================================================================================*/

int PowerStateCheck(float SOC, float temp){
     f62:	8f 92       	push	r8
     f64:	9f 92       	push	r9
     f66:	af 92       	push	r10
     f68:	bf 92       	push	r11
     f6a:	cf 92       	push	r12
     f6c:	df 92       	push	r13
     f6e:	ef 92       	push	r14
     f70:	ff 92       	push	r15
     f72:	cf 93       	push	r28
     f74:	6b 01       	movw	r12, r22
     f76:	7c 01       	movw	r14, r24
     f78:	49 01       	movw	r8, r18
     f7a:	5a 01       	movw	r10, r20
	if(SOC < 20){
     f7c:	20 e0       	ldi	r18, 0x00	; 0
     f7e:	30 e0       	ldi	r19, 0x00	; 0
     f80:	40 ea       	ldi	r20, 0xA0	; 160
     f82:	51 e4       	ldi	r21, 0x41	; 65
     f84:	0e 94 47 14 	call	0x288e	; 0x288e <__cmpsf2>
     f88:	88 23       	and	r24, r24
     f8a:	0c f0       	brlt	.+2      	; 0xf8e <PowerStateCheck+0x2c>
     f8c:	4f c0       	rjmp	.+158    	; 0x102c <PowerStateCheck+0xca>
		if(temp >= 40){
     f8e:	20 e0       	ldi	r18, 0x00	; 0
     f90:	30 e0       	ldi	r19, 0x00	; 0
     f92:	40 e2       	ldi	r20, 0x20	; 32
     f94:	52 e4       	ldi	r21, 0x42	; 66
     f96:	c5 01       	movw	r24, r10
     f98:	b4 01       	movw	r22, r8
     f9a:	0e 94 96 15 	call	0x2b2c	; 0x2b2c <__gesf2>
     f9e:	88 23       	and	r24, r24
     fa0:	0c f0       	brlt	.+2      	; 0xfa4 <PowerStateCheck+0x42>
     fa2:	c6 c1       	rjmp	.+908    	; 0x1330 <PowerStateCheck+0x3ce>
			return 4;
		}//end else if
		else if(temp >= 30 && temp < 40){
     fa4:	20 e0       	ldi	r18, 0x00	; 0
     fa6:	30 e0       	ldi	r19, 0x00	; 0
     fa8:	40 ef       	ldi	r20, 0xF0	; 240
     faa:	51 e4       	ldi	r21, 0x41	; 65
     fac:	c5 01       	movw	r24, r10
     fae:	b4 01       	movw	r22, r8
     fb0:	0e 94 96 15 	call	0x2b2c	; 0x2b2c <__gesf2>
     fb4:	88 23       	and	r24, r24
     fb6:	5c f0       	brlt	.+22     	; 0xfce <PowerStateCheck+0x6c>
     fb8:	20 e0       	ldi	r18, 0x00	; 0
     fba:	30 e0       	ldi	r19, 0x00	; 0
     fbc:	40 e2       	ldi	r20, 0x20	; 32
     fbe:	52 e4       	ldi	r21, 0x42	; 66
     fc0:	c5 01       	movw	r24, r10
     fc2:	b4 01       	movw	r22, r8
     fc4:	0e 94 47 14 	call	0x288e	; 0x288e <__cmpsf2>
     fc8:	88 23       	and	r24, r24
     fca:	0c f4       	brge	.+2      	; 0xfce <PowerStateCheck+0x6c>
     fcc:	b4 c1       	rjmp	.+872    	; 0x1336 <PowerStateCheck+0x3d4>
			return 3;
		}//end else if
		else if(temp >= 15 && temp < 30){
     fce:	20 e0       	ldi	r18, 0x00	; 0
     fd0:	30 e0       	ldi	r19, 0x00	; 0
     fd2:	40 e7       	ldi	r20, 0x70	; 112
     fd4:	51 e4       	ldi	r21, 0x41	; 65
     fd6:	c5 01       	movw	r24, r10
     fd8:	b4 01       	movw	r22, r8
     fda:	0e 94 96 15 	call	0x2b2c	; 0x2b2c <__gesf2>
     fde:	88 23       	and	r24, r24
     fe0:	5c f0       	brlt	.+22     	; 0xff8 <PowerStateCheck+0x96>
     fe2:	20 e0       	ldi	r18, 0x00	; 0
     fe4:	30 e0       	ldi	r19, 0x00	; 0
     fe6:	40 ef       	ldi	r20, 0xF0	; 240
     fe8:	51 e4       	ldi	r21, 0x41	; 65
     fea:	c5 01       	movw	r24, r10
     fec:	b4 01       	movw	r22, r8
     fee:	0e 94 47 14 	call	0x288e	; 0x288e <__cmpsf2>
     ff2:	88 23       	and	r24, r24
     ff4:	0c f4       	brge	.+2      	; 0xff8 <PowerStateCheck+0x96>
     ff6:	a2 c1       	rjmp	.+836    	; 0x133c <PowerStateCheck+0x3da>
			return 2;
		}//end else if
		else if(temp >= 0 && temp < 15){
     ff8:	20 e0       	ldi	r18, 0x00	; 0
     ffa:	30 e0       	ldi	r19, 0x00	; 0
     ffc:	a9 01       	movw	r20, r18
     ffe:	c5 01       	movw	r24, r10
    1000:	b4 01       	movw	r22, r8
    1002:	0e 94 96 15 	call	0x2b2c	; 0x2b2c <__gesf2>
    1006:	88 23       	and	r24, r24
    1008:	0c f4       	brge	.+2      	; 0x100c <PowerStateCheck+0xaa>
    100a:	9b c1       	rjmp	.+822    	; 0x1342 <PowerStateCheck+0x3e0>
/*========================================================================================*/

int PowerStateCheck(float SOC, float temp){
	if(SOC < 20){
		if(temp >= 40){
			return 4;
    100c:	c1 e0       	ldi	r28, 0x01	; 1
    100e:	f1 2c       	mov	r15, r1
    1010:	20 e0       	ldi	r18, 0x00	; 0
    1012:	30 e0       	ldi	r19, 0x00	; 0
    1014:	40 e7       	ldi	r20, 0x70	; 112
    1016:	51 e4       	ldi	r21, 0x41	; 65
    1018:	c5 01       	movw	r24, r10
    101a:	b4 01       	movw	r22, r8
    101c:	0e 94 47 14 	call	0x288e	; 0x288e <__cmpsf2>
    1020:	88 23       	and	r24, r24
    1022:	0c f0       	brlt	.+2      	; 0x1026 <PowerStateCheck+0xc4>
    1024:	c0 e0       	ldi	r28, 0x00	; 0
    1026:	8c 2f       	mov	r24, r28
    1028:	9f 2d       	mov	r25, r15
    102a:	ca c1       	rjmp	.+916    	; 0x13c0 <PowerStateCheck+0x45e>
		}//end else if
		else{
			return 0;
		}//end else
	}//end if SOC < 20
	else if(SOC < 40 && SOC >= 20){
    102c:	20 e0       	ldi	r18, 0x00	; 0
    102e:	30 e0       	ldi	r19, 0x00	; 0
    1030:	40 e2       	ldi	r20, 0x20	; 32
    1032:	52 e4       	ldi	r21, 0x42	; 66
    1034:	c7 01       	movw	r24, r14
    1036:	b6 01       	movw	r22, r12
    1038:	0e 94 47 14 	call	0x288e	; 0x288e <__cmpsf2>
    103c:	88 23       	and	r24, r24
    103e:	0c f0       	brlt	.+2      	; 0x1042 <PowerStateCheck+0xe0>
    1040:	5b c0       	rjmp	.+182    	; 0x10f8 <PowerStateCheck+0x196>
    1042:	20 e0       	ldi	r18, 0x00	; 0
    1044:	30 e0       	ldi	r19, 0x00	; 0
    1046:	40 ea       	ldi	r20, 0xA0	; 160
    1048:	51 e4       	ldi	r21, 0x41	; 65
    104a:	c7 01       	movw	r24, r14
    104c:	b6 01       	movw	r22, r12
    104e:	0e 94 96 15 	call	0x2b2c	; 0x2b2c <__gesf2>
    1052:	88 23       	and	r24, r24
    1054:	0c f4       	brge	.+2      	; 0x1058 <PowerStateCheck+0xf6>
    1056:	50 c0       	rjmp	.+160    	; 0x10f8 <PowerStateCheck+0x196>
		if(temp >= 40){
    1058:	20 e0       	ldi	r18, 0x00	; 0
    105a:	30 e0       	ldi	r19, 0x00	; 0
    105c:	40 e2       	ldi	r20, 0x20	; 32
    105e:	52 e4       	ldi	r21, 0x42	; 66
    1060:	c5 01       	movw	r24, r10
    1062:	b4 01       	movw	r22, r8
    1064:	0e 94 96 15 	call	0x2b2c	; 0x2b2c <__gesf2>
    1068:	88 23       	and	r24, r24
    106a:	0c f0       	brlt	.+2      	; 0x106e <PowerStateCheck+0x10c>
    106c:	6d c1       	rjmp	.+730    	; 0x1348 <PowerStateCheck+0x3e6>
			return 9;
		}//end else if
		else if(temp >= 30 && temp < 40){
    106e:	20 e0       	ldi	r18, 0x00	; 0
    1070:	30 e0       	ldi	r19, 0x00	; 0
    1072:	40 ef       	ldi	r20, 0xF0	; 240
    1074:	51 e4       	ldi	r21, 0x41	; 65
    1076:	c5 01       	movw	r24, r10
    1078:	b4 01       	movw	r22, r8
    107a:	0e 94 96 15 	call	0x2b2c	; 0x2b2c <__gesf2>
    107e:	88 23       	and	r24, r24
    1080:	5c f0       	brlt	.+22     	; 0x1098 <PowerStateCheck+0x136>
    1082:	20 e0       	ldi	r18, 0x00	; 0
    1084:	30 e0       	ldi	r19, 0x00	; 0
    1086:	40 e2       	ldi	r20, 0x20	; 32
    1088:	52 e4       	ldi	r21, 0x42	; 66
    108a:	c5 01       	movw	r24, r10
    108c:	b4 01       	movw	r22, r8
    108e:	0e 94 47 14 	call	0x288e	; 0x288e <__cmpsf2>
    1092:	88 23       	and	r24, r24
    1094:	0c f4       	brge	.+2      	; 0x1098 <PowerStateCheck+0x136>
    1096:	5b c1       	rjmp	.+694    	; 0x134e <PowerStateCheck+0x3ec>
			return 8;
		}//end else if
		else if(temp >= 15 && temp < 30){
    1098:	20 e0       	ldi	r18, 0x00	; 0
    109a:	30 e0       	ldi	r19, 0x00	; 0
    109c:	40 e7       	ldi	r20, 0x70	; 112
    109e:	51 e4       	ldi	r21, 0x41	; 65
    10a0:	c5 01       	movw	r24, r10
    10a2:	b4 01       	movw	r22, r8
    10a4:	0e 94 96 15 	call	0x2b2c	; 0x2b2c <__gesf2>
    10a8:	88 23       	and	r24, r24
    10aa:	5c f0       	brlt	.+22     	; 0x10c2 <PowerStateCheck+0x160>
    10ac:	20 e0       	ldi	r18, 0x00	; 0
    10ae:	30 e0       	ldi	r19, 0x00	; 0
    10b0:	40 ef       	ldi	r20, 0xF0	; 240
    10b2:	51 e4       	ldi	r21, 0x41	; 65
    10b4:	c5 01       	movw	r24, r10
    10b6:	b4 01       	movw	r22, r8
    10b8:	0e 94 47 14 	call	0x288e	; 0x288e <__cmpsf2>
    10bc:	88 23       	and	r24, r24
    10be:	0c f4       	brge	.+2      	; 0x10c2 <PowerStateCheck+0x160>
    10c0:	49 c1       	rjmp	.+658    	; 0x1354 <PowerStateCheck+0x3f2>
			return 7;
		}//end else if
		else if(temp >= 0 && temp < 15){
    10c2:	20 e0       	ldi	r18, 0x00	; 0
    10c4:	30 e0       	ldi	r19, 0x00	; 0
    10c6:	a9 01       	movw	r20, r18
    10c8:	c5 01       	movw	r24, r10
    10ca:	b4 01       	movw	r22, r8
    10cc:	0e 94 96 15 	call	0x2b2c	; 0x2b2c <__gesf2>
    10d0:	88 23       	and	r24, r24
    10d2:	0c f4       	brge	.+2      	; 0x10d6 <PowerStateCheck+0x174>
    10d4:	42 c1       	rjmp	.+644    	; 0x135a <PowerStateCheck+0x3f8>
    10d6:	20 e0       	ldi	r18, 0x00	; 0
    10d8:	30 e0       	ldi	r19, 0x00	; 0
    10da:	40 e7       	ldi	r20, 0x70	; 112
    10dc:	51 e4       	ldi	r21, 0x41	; 65
    10de:	c5 01       	movw	r24, r10
    10e0:	b4 01       	movw	r22, r8
    10e2:	0e 94 47 14 	call	0x288e	; 0x288e <__cmpsf2>
			return 6;
		}//end else if
		else{
			return 5;
    10e6:	08 2e       	mov	r0, r24
    10e8:	00 0c       	add	r0, r0
    10ea:	99 0b       	sbc	r25, r25
    10ec:	88 27       	eor	r24, r24
    10ee:	99 0f       	add	r25, r25
    10f0:	88 1f       	adc	r24, r24
    10f2:	99 27       	eor	r25, r25
    10f4:	05 96       	adiw	r24, 0x05	; 5
    10f6:	64 c1       	rjmp	.+712    	; 0x13c0 <PowerStateCheck+0x45e>
		}//end else
	}//end else if SOC < 40
	else if(SOC < 60 && SOC >= 40){
    10f8:	20 e0       	ldi	r18, 0x00	; 0
    10fa:	30 e0       	ldi	r19, 0x00	; 0
    10fc:	40 e7       	ldi	r20, 0x70	; 112
    10fe:	52 e4       	ldi	r21, 0x42	; 66
    1100:	c7 01       	movw	r24, r14
    1102:	b6 01       	movw	r22, r12
    1104:	0e 94 47 14 	call	0x288e	; 0x288e <__cmpsf2>
    1108:	88 23       	and	r24, r24
    110a:	0c f0       	brlt	.+2      	; 0x110e <PowerStateCheck+0x1ac>
    110c:	5b c0       	rjmp	.+182    	; 0x11c4 <PowerStateCheck+0x262>
    110e:	20 e0       	ldi	r18, 0x00	; 0
    1110:	30 e0       	ldi	r19, 0x00	; 0
    1112:	40 e2       	ldi	r20, 0x20	; 32
    1114:	52 e4       	ldi	r21, 0x42	; 66
    1116:	c7 01       	movw	r24, r14
    1118:	b6 01       	movw	r22, r12
    111a:	0e 94 96 15 	call	0x2b2c	; 0x2b2c <__gesf2>
    111e:	88 23       	and	r24, r24
    1120:	0c f4       	brge	.+2      	; 0x1124 <PowerStateCheck+0x1c2>
    1122:	42 c1       	rjmp	.+644    	; 0x13a8 <PowerStateCheck+0x446>
		if(temp >= 40){
    1124:	20 e0       	ldi	r18, 0x00	; 0
    1126:	30 e0       	ldi	r19, 0x00	; 0
    1128:	40 e2       	ldi	r20, 0x20	; 32
    112a:	52 e4       	ldi	r21, 0x42	; 66
    112c:	c5 01       	movw	r24, r10
    112e:	b4 01       	movw	r22, r8
    1130:	0e 94 96 15 	call	0x2b2c	; 0x2b2c <__gesf2>
    1134:	88 23       	and	r24, r24
    1136:	0c f0       	brlt	.+2      	; 0x113a <PowerStateCheck+0x1d8>
    1138:	13 c1       	rjmp	.+550    	; 0x1360 <PowerStateCheck+0x3fe>
			return 14;
		}//end else if
		else if(temp >= 30 && temp < 40){
    113a:	20 e0       	ldi	r18, 0x00	; 0
    113c:	30 e0       	ldi	r19, 0x00	; 0
    113e:	40 ef       	ldi	r20, 0xF0	; 240
    1140:	51 e4       	ldi	r21, 0x41	; 65
    1142:	c5 01       	movw	r24, r10
    1144:	b4 01       	movw	r22, r8
    1146:	0e 94 96 15 	call	0x2b2c	; 0x2b2c <__gesf2>
    114a:	88 23       	and	r24, r24
    114c:	5c f0       	brlt	.+22     	; 0x1164 <PowerStateCheck+0x202>
    114e:	20 e0       	ldi	r18, 0x00	; 0
    1150:	30 e0       	ldi	r19, 0x00	; 0
    1152:	40 e2       	ldi	r20, 0x20	; 32
    1154:	52 e4       	ldi	r21, 0x42	; 66
    1156:	c5 01       	movw	r24, r10
    1158:	b4 01       	movw	r22, r8
    115a:	0e 94 47 14 	call	0x288e	; 0x288e <__cmpsf2>
    115e:	88 23       	and	r24, r24
    1160:	0c f4       	brge	.+2      	; 0x1164 <PowerStateCheck+0x202>
    1162:	01 c1       	rjmp	.+514    	; 0x1366 <PowerStateCheck+0x404>
			return 13;
		}//end else if
		else if(temp >= 15 && temp < 30){
    1164:	20 e0       	ldi	r18, 0x00	; 0
    1166:	30 e0       	ldi	r19, 0x00	; 0
    1168:	40 e7       	ldi	r20, 0x70	; 112
    116a:	51 e4       	ldi	r21, 0x41	; 65
    116c:	c5 01       	movw	r24, r10
    116e:	b4 01       	movw	r22, r8
    1170:	0e 94 96 15 	call	0x2b2c	; 0x2b2c <__gesf2>
    1174:	88 23       	and	r24, r24
    1176:	5c f0       	brlt	.+22     	; 0x118e <PowerStateCheck+0x22c>
    1178:	20 e0       	ldi	r18, 0x00	; 0
    117a:	30 e0       	ldi	r19, 0x00	; 0
    117c:	40 ef       	ldi	r20, 0xF0	; 240
    117e:	51 e4       	ldi	r21, 0x41	; 65
    1180:	c5 01       	movw	r24, r10
    1182:	b4 01       	movw	r22, r8
    1184:	0e 94 47 14 	call	0x288e	; 0x288e <__cmpsf2>
    1188:	88 23       	and	r24, r24
    118a:	0c f4       	brge	.+2      	; 0x118e <PowerStateCheck+0x22c>
    118c:	ef c0       	rjmp	.+478    	; 0x136c <PowerStateCheck+0x40a>
			return 12;
		}//end else if
		else if(temp >= 0 && temp < 15){
    118e:	20 e0       	ldi	r18, 0x00	; 0
    1190:	30 e0       	ldi	r19, 0x00	; 0
    1192:	a9 01       	movw	r20, r18
    1194:	c5 01       	movw	r24, r10
    1196:	b4 01       	movw	r22, r8
    1198:	0e 94 96 15 	call	0x2b2c	; 0x2b2c <__gesf2>
    119c:	88 23       	and	r24, r24
    119e:	0c f4       	brge	.+2      	; 0x11a2 <PowerStateCheck+0x240>
    11a0:	e8 c0       	rjmp	.+464    	; 0x1372 <PowerStateCheck+0x410>
    11a2:	20 e0       	ldi	r18, 0x00	; 0
    11a4:	30 e0       	ldi	r19, 0x00	; 0
    11a6:	40 e7       	ldi	r20, 0x70	; 112
    11a8:	51 e4       	ldi	r21, 0x41	; 65
    11aa:	c5 01       	movw	r24, r10
    11ac:	b4 01       	movw	r22, r8
    11ae:	0e 94 47 14 	call	0x288e	; 0x288e <__cmpsf2>
			return 11;
		}//end else if
		else{
			return 10;
    11b2:	08 2e       	mov	r0, r24
    11b4:	00 0c       	add	r0, r0
    11b6:	99 0b       	sbc	r25, r25
    11b8:	88 27       	eor	r24, r24
    11ba:	99 0f       	add	r25, r25
    11bc:	88 1f       	adc	r24, r24
    11be:	99 27       	eor	r25, r25
    11c0:	0a 96       	adiw	r24, 0x0a	; 10
    11c2:	fe c0       	rjmp	.+508    	; 0x13c0 <PowerStateCheck+0x45e>
		}//end else
	}//end if SOC < 60
	else if(SOC < 80 && SOC <= 60){
    11c4:	20 e0       	ldi	r18, 0x00	; 0
    11c6:	30 e0       	ldi	r19, 0x00	; 0
    11c8:	40 ea       	ldi	r20, 0xA0	; 160
    11ca:	52 e4       	ldi	r21, 0x42	; 66
    11cc:	c7 01       	movw	r24, r14
    11ce:	b6 01       	movw	r22, r12
    11d0:	0e 94 47 14 	call	0x288e	; 0x288e <__cmpsf2>
    11d4:	88 23       	and	r24, r24
    11d6:	0c f0       	brlt	.+2      	; 0x11da <PowerStateCheck+0x278>
    11d8:	5b c0       	rjmp	.+182    	; 0x1290 <PowerStateCheck+0x32e>
    11da:	20 e0       	ldi	r18, 0x00	; 0
    11dc:	30 e0       	ldi	r19, 0x00	; 0
    11de:	40 e7       	ldi	r20, 0x70	; 112
    11e0:	52 e4       	ldi	r21, 0x42	; 66
    11e2:	c7 01       	movw	r24, r14
    11e4:	b6 01       	movw	r22, r12
    11e6:	0e 94 47 14 	call	0x288e	; 0x288e <__cmpsf2>
    11ea:	18 16       	cp	r1, r24
    11ec:	0c f4       	brge	.+2      	; 0x11f0 <PowerStateCheck+0x28e>
    11ee:	50 c0       	rjmp	.+160    	; 0x1290 <PowerStateCheck+0x32e>
		if(temp >= 40){
    11f0:	20 e0       	ldi	r18, 0x00	; 0
    11f2:	30 e0       	ldi	r19, 0x00	; 0
    11f4:	40 e2       	ldi	r20, 0x20	; 32
    11f6:	52 e4       	ldi	r21, 0x42	; 66
    11f8:	c5 01       	movw	r24, r10
    11fa:	b4 01       	movw	r22, r8
    11fc:	0e 94 96 15 	call	0x2b2c	; 0x2b2c <__gesf2>
    1200:	88 23       	and	r24, r24
    1202:	0c f0       	brlt	.+2      	; 0x1206 <PowerStateCheck+0x2a4>
    1204:	b9 c0       	rjmp	.+370    	; 0x1378 <PowerStateCheck+0x416>
			return 19;
		}//end else if
		else if(temp >= 30 && temp < 40){
    1206:	20 e0       	ldi	r18, 0x00	; 0
    1208:	30 e0       	ldi	r19, 0x00	; 0
    120a:	40 ef       	ldi	r20, 0xF0	; 240
    120c:	51 e4       	ldi	r21, 0x41	; 65
    120e:	c5 01       	movw	r24, r10
    1210:	b4 01       	movw	r22, r8
    1212:	0e 94 96 15 	call	0x2b2c	; 0x2b2c <__gesf2>
    1216:	88 23       	and	r24, r24
    1218:	5c f0       	brlt	.+22     	; 0x1230 <PowerStateCheck+0x2ce>
    121a:	20 e0       	ldi	r18, 0x00	; 0
    121c:	30 e0       	ldi	r19, 0x00	; 0
    121e:	40 e2       	ldi	r20, 0x20	; 32
    1220:	52 e4       	ldi	r21, 0x42	; 66
    1222:	c5 01       	movw	r24, r10
    1224:	b4 01       	movw	r22, r8
    1226:	0e 94 47 14 	call	0x288e	; 0x288e <__cmpsf2>
    122a:	88 23       	and	r24, r24
    122c:	0c f4       	brge	.+2      	; 0x1230 <PowerStateCheck+0x2ce>
    122e:	a7 c0       	rjmp	.+334    	; 0x137e <PowerStateCheck+0x41c>
			return 18;
		}//end else if
		else if(temp >= 15 && temp < 30){
    1230:	20 e0       	ldi	r18, 0x00	; 0
    1232:	30 e0       	ldi	r19, 0x00	; 0
    1234:	40 e7       	ldi	r20, 0x70	; 112
    1236:	51 e4       	ldi	r21, 0x41	; 65
    1238:	c5 01       	movw	r24, r10
    123a:	b4 01       	movw	r22, r8
    123c:	0e 94 96 15 	call	0x2b2c	; 0x2b2c <__gesf2>
    1240:	88 23       	and	r24, r24
    1242:	5c f0       	brlt	.+22     	; 0x125a <PowerStateCheck+0x2f8>
    1244:	20 e0       	ldi	r18, 0x00	; 0
    1246:	30 e0       	ldi	r19, 0x00	; 0
    1248:	40 ef       	ldi	r20, 0xF0	; 240
    124a:	51 e4       	ldi	r21, 0x41	; 65
    124c:	c5 01       	movw	r24, r10
    124e:	b4 01       	movw	r22, r8
    1250:	0e 94 47 14 	call	0x288e	; 0x288e <__cmpsf2>
    1254:	88 23       	and	r24, r24
    1256:	0c f4       	brge	.+2      	; 0x125a <PowerStateCheck+0x2f8>
    1258:	95 c0       	rjmp	.+298    	; 0x1384 <PowerStateCheck+0x422>
			return 17;
		}//end else if
		else if(temp >= 0 && temp < 15){
    125a:	20 e0       	ldi	r18, 0x00	; 0
    125c:	30 e0       	ldi	r19, 0x00	; 0
    125e:	a9 01       	movw	r20, r18
    1260:	c5 01       	movw	r24, r10
    1262:	b4 01       	movw	r22, r8
    1264:	0e 94 96 15 	call	0x2b2c	; 0x2b2c <__gesf2>
    1268:	88 23       	and	r24, r24
    126a:	0c f4       	brge	.+2      	; 0x126e <PowerStateCheck+0x30c>
    126c:	8e c0       	rjmp	.+284    	; 0x138a <PowerStateCheck+0x428>
    126e:	20 e0       	ldi	r18, 0x00	; 0
    1270:	30 e0       	ldi	r19, 0x00	; 0
    1272:	40 e7       	ldi	r20, 0x70	; 112
    1274:	51 e4       	ldi	r21, 0x41	; 65
    1276:	c5 01       	movw	r24, r10
    1278:	b4 01       	movw	r22, r8
    127a:	0e 94 47 14 	call	0x288e	; 0x288e <__cmpsf2>
			return 16;
		}//end else if
		else{
			return 15;
    127e:	08 2e       	mov	r0, r24
    1280:	00 0c       	add	r0, r0
    1282:	99 0b       	sbc	r25, r25
    1284:	88 27       	eor	r24, r24
    1286:	99 0f       	add	r25, r25
    1288:	88 1f       	adc	r24, r24
    128a:	99 27       	eor	r25, r25
    128c:	0f 96       	adiw	r24, 0x0f	; 15
    128e:	98 c0       	rjmp	.+304    	; 0x13c0 <PowerStateCheck+0x45e>
		}//end else
	}//end if SOC < 80
	else {
		if(temp >= 40){
    1290:	20 e0       	ldi	r18, 0x00	; 0
    1292:	30 e0       	ldi	r19, 0x00	; 0
    1294:	40 e2       	ldi	r20, 0x20	; 32
    1296:	52 e4       	ldi	r21, 0x42	; 66
    1298:	c5 01       	movw	r24, r10
    129a:	b4 01       	movw	r22, r8
    129c:	0e 94 96 15 	call	0x2b2c	; 0x2b2c <__gesf2>
    12a0:	88 23       	and	r24, r24
    12a2:	0c f0       	brlt	.+2      	; 0x12a6 <PowerStateCheck+0x344>
    12a4:	75 c0       	rjmp	.+234    	; 0x1390 <PowerStateCheck+0x42e>
			return 24;
		}//end else if
		else if(temp >= 30 && temp < 40){
    12a6:	20 e0       	ldi	r18, 0x00	; 0
    12a8:	30 e0       	ldi	r19, 0x00	; 0
    12aa:	40 ef       	ldi	r20, 0xF0	; 240
    12ac:	51 e4       	ldi	r21, 0x41	; 65
    12ae:	c5 01       	movw	r24, r10
    12b0:	b4 01       	movw	r22, r8
    12b2:	0e 94 96 15 	call	0x2b2c	; 0x2b2c <__gesf2>
    12b6:	88 23       	and	r24, r24
    12b8:	5c f0       	brlt	.+22     	; 0x12d0 <PowerStateCheck+0x36e>
    12ba:	20 e0       	ldi	r18, 0x00	; 0
    12bc:	30 e0       	ldi	r19, 0x00	; 0
    12be:	40 e2       	ldi	r20, 0x20	; 32
    12c0:	52 e4       	ldi	r21, 0x42	; 66
    12c2:	c5 01       	movw	r24, r10
    12c4:	b4 01       	movw	r22, r8
    12c6:	0e 94 47 14 	call	0x288e	; 0x288e <__cmpsf2>
    12ca:	88 23       	and	r24, r24
    12cc:	0c f4       	brge	.+2      	; 0x12d0 <PowerStateCheck+0x36e>
    12ce:	63 c0       	rjmp	.+198    	; 0x1396 <PowerStateCheck+0x434>
			return 23;
		}//end else if
		else if(temp >= 15 && temp < 30){
    12d0:	20 e0       	ldi	r18, 0x00	; 0
    12d2:	30 e0       	ldi	r19, 0x00	; 0
    12d4:	40 e7       	ldi	r20, 0x70	; 112
    12d6:	51 e4       	ldi	r21, 0x41	; 65
    12d8:	c5 01       	movw	r24, r10
    12da:	b4 01       	movw	r22, r8
    12dc:	0e 94 96 15 	call	0x2b2c	; 0x2b2c <__gesf2>
    12e0:	88 23       	and	r24, r24
    12e2:	5c f0       	brlt	.+22     	; 0x12fa <PowerStateCheck+0x398>
    12e4:	20 e0       	ldi	r18, 0x00	; 0
    12e6:	30 e0       	ldi	r19, 0x00	; 0
    12e8:	40 ef       	ldi	r20, 0xF0	; 240
    12ea:	51 e4       	ldi	r21, 0x41	; 65
    12ec:	c5 01       	movw	r24, r10
    12ee:	b4 01       	movw	r22, r8
    12f0:	0e 94 47 14 	call	0x288e	; 0x288e <__cmpsf2>
    12f4:	88 23       	and	r24, r24
    12f6:	0c f4       	brge	.+2      	; 0x12fa <PowerStateCheck+0x398>
    12f8:	51 c0       	rjmp	.+162    	; 0x139c <PowerStateCheck+0x43a>
			return 22;
		}//end else if
		else if(temp >= 0 && temp < 15){
    12fa:	20 e0       	ldi	r18, 0x00	; 0
    12fc:	30 e0       	ldi	r19, 0x00	; 0
    12fe:	a9 01       	movw	r20, r18
    1300:	c5 01       	movw	r24, r10
    1302:	b4 01       	movw	r22, r8
    1304:	0e 94 96 15 	call	0x2b2c	; 0x2b2c <__gesf2>
    1308:	88 23       	and	r24, r24
    130a:	0c f4       	brge	.+2      	; 0x130e <PowerStateCheck+0x3ac>
    130c:	4a c0       	rjmp	.+148    	; 0x13a2 <PowerStateCheck+0x440>
    130e:	20 e0       	ldi	r18, 0x00	; 0
    1310:	30 e0       	ldi	r19, 0x00	; 0
    1312:	40 e7       	ldi	r20, 0x70	; 112
    1314:	51 e4       	ldi	r21, 0x41	; 65
    1316:	c5 01       	movw	r24, r10
    1318:	b4 01       	movw	r22, r8
    131a:	0e 94 47 14 	call	0x288e	; 0x288e <__cmpsf2>
			return 21;
		}//end else if
		else{
			return 20;
    131e:	08 2e       	mov	r0, r24
    1320:	00 0c       	add	r0, r0
    1322:	99 0b       	sbc	r25, r25
    1324:	88 27       	eor	r24, r24
    1326:	99 0f       	add	r25, r25
    1328:	88 1f       	adc	r24, r24
    132a:	99 27       	eor	r25, r25
    132c:	44 96       	adiw	r24, 0x14	; 20
    132e:	48 c0       	rjmp	.+144    	; 0x13c0 <PowerStateCheck+0x45e>
/*========================================================================================*/

int PowerStateCheck(float SOC, float temp){
	if(SOC < 20){
		if(temp >= 40){
			return 4;
    1330:	84 e0       	ldi	r24, 0x04	; 4
    1332:	90 e0       	ldi	r25, 0x00	; 0
    1334:	45 c0       	rjmp	.+138    	; 0x13c0 <PowerStateCheck+0x45e>
		}//end else if
		else if(temp >= 30 && temp < 40){
			return 3;
    1336:	83 e0       	ldi	r24, 0x03	; 3
    1338:	90 e0       	ldi	r25, 0x00	; 0
    133a:	42 c0       	rjmp	.+132    	; 0x13c0 <PowerStateCheck+0x45e>
		}//end else if
		else if(temp >= 15 && temp < 30){
			return 2;
    133c:	82 e0       	ldi	r24, 0x02	; 2
    133e:	90 e0       	ldi	r25, 0x00	; 0
    1340:	3f c0       	rjmp	.+126    	; 0x13c0 <PowerStateCheck+0x45e>
		}//end else if
		else if(temp >= 0 && temp < 15){
			return 1;
		}//end else if
		else{
			return 0;
    1342:	80 e0       	ldi	r24, 0x00	; 0
    1344:	90 e0       	ldi	r25, 0x00	; 0
    1346:	3c c0       	rjmp	.+120    	; 0x13c0 <PowerStateCheck+0x45e>
		}//end else
	}//end if SOC < 20
	else if(SOC < 40 && SOC >= 20){
		if(temp >= 40){
			return 9;
    1348:	89 e0       	ldi	r24, 0x09	; 9
    134a:	90 e0       	ldi	r25, 0x00	; 0
    134c:	39 c0       	rjmp	.+114    	; 0x13c0 <PowerStateCheck+0x45e>
		}//end else if
		else if(temp >= 30 && temp < 40){
			return 8;
    134e:	88 e0       	ldi	r24, 0x08	; 8
    1350:	90 e0       	ldi	r25, 0x00	; 0
    1352:	36 c0       	rjmp	.+108    	; 0x13c0 <PowerStateCheck+0x45e>
		}//end else if
		else if(temp >= 15 && temp < 30){
			return 7;
    1354:	87 e0       	ldi	r24, 0x07	; 7
    1356:	90 e0       	ldi	r25, 0x00	; 0
    1358:	33 c0       	rjmp	.+102    	; 0x13c0 <PowerStateCheck+0x45e>
		}//end else if
		else if(temp >= 0 && temp < 15){
			return 6;
		}//end else if
		else{
			return 5;
    135a:	85 e0       	ldi	r24, 0x05	; 5
    135c:	90 e0       	ldi	r25, 0x00	; 0
    135e:	30 c0       	rjmp	.+96     	; 0x13c0 <PowerStateCheck+0x45e>
		}//end else
	}//end else if SOC < 40
	else if(SOC < 60 && SOC >= 40){
		if(temp >= 40){
			return 14;
    1360:	8e e0       	ldi	r24, 0x0E	; 14
    1362:	90 e0       	ldi	r25, 0x00	; 0
    1364:	2d c0       	rjmp	.+90     	; 0x13c0 <PowerStateCheck+0x45e>
		}//end else if
		else if(temp >= 30 && temp < 40){
			return 13;
    1366:	8d e0       	ldi	r24, 0x0D	; 13
    1368:	90 e0       	ldi	r25, 0x00	; 0
    136a:	2a c0       	rjmp	.+84     	; 0x13c0 <PowerStateCheck+0x45e>
		}//end else if
		else if(temp >= 15 && temp < 30){
			return 12;
    136c:	8c e0       	ldi	r24, 0x0C	; 12
    136e:	90 e0       	ldi	r25, 0x00	; 0
    1370:	27 c0       	rjmp	.+78     	; 0x13c0 <PowerStateCheck+0x45e>
		}//end else if
		else if(temp >= 0 && temp < 15){
			return 11;
		}//end else if
		else{
			return 10;
    1372:	8a e0       	ldi	r24, 0x0A	; 10
    1374:	90 e0       	ldi	r25, 0x00	; 0
    1376:	24 c0       	rjmp	.+72     	; 0x13c0 <PowerStateCheck+0x45e>
		}//end else
	}//end if SOC < 60
	else if(SOC < 80 && SOC <= 60){
		if(temp >= 40){
			return 19;
    1378:	83 e1       	ldi	r24, 0x13	; 19
    137a:	90 e0       	ldi	r25, 0x00	; 0
    137c:	21 c0       	rjmp	.+66     	; 0x13c0 <PowerStateCheck+0x45e>
		}//end else if
		else if(temp >= 30 && temp < 40){
			return 18;
    137e:	82 e1       	ldi	r24, 0x12	; 18
    1380:	90 e0       	ldi	r25, 0x00	; 0
    1382:	1e c0       	rjmp	.+60     	; 0x13c0 <PowerStateCheck+0x45e>
		}//end else if
		else if(temp >= 15 && temp < 30){
			return 17;
    1384:	81 e1       	ldi	r24, 0x11	; 17
    1386:	90 e0       	ldi	r25, 0x00	; 0
    1388:	1b c0       	rjmp	.+54     	; 0x13c0 <PowerStateCheck+0x45e>
		}//end else if
		else if(temp >= 0 && temp < 15){
			return 16;
		}//end else if
		else{
			return 15;
    138a:	8f e0       	ldi	r24, 0x0F	; 15
    138c:	90 e0       	ldi	r25, 0x00	; 0
    138e:	18 c0       	rjmp	.+48     	; 0x13c0 <PowerStateCheck+0x45e>
		}//end else
	}//end if SOC < 80
	else {
		if(temp >= 40){
			return 24;
    1390:	88 e1       	ldi	r24, 0x18	; 24
    1392:	90 e0       	ldi	r25, 0x00	; 0
    1394:	15 c0       	rjmp	.+42     	; 0x13c0 <PowerStateCheck+0x45e>
		}//end else if
		else if(temp >= 30 && temp < 40){
			return 23;
    1396:	87 e1       	ldi	r24, 0x17	; 23
    1398:	90 e0       	ldi	r25, 0x00	; 0
    139a:	12 c0       	rjmp	.+36     	; 0x13c0 <PowerStateCheck+0x45e>
		}//end else if
		else if(temp >= 15 && temp < 30){
			return 22;
    139c:	86 e1       	ldi	r24, 0x16	; 22
    139e:	90 e0       	ldi	r25, 0x00	; 0
    13a0:	0f c0       	rjmp	.+30     	; 0x13c0 <PowerStateCheck+0x45e>
		}//end else if
		else if(temp >= 0 && temp < 15){
			return 21;
		}//end else if
		else{
			return 20;
    13a2:	84 e1       	ldi	r24, 0x14	; 20
    13a4:	90 e0       	ldi	r25, 0x00	; 0
    13a6:	0c c0       	rjmp	.+24     	; 0x13c0 <PowerStateCheck+0x45e>
		}//end else if
		else{
			return 10;
		}//end else
	}//end if SOC < 60
	else if(SOC < 80 && SOC <= 60){
    13a8:	20 e0       	ldi	r18, 0x00	; 0
    13aa:	30 e0       	ldi	r19, 0x00	; 0
    13ac:	40 ea       	ldi	r20, 0xA0	; 160
    13ae:	52 e4       	ldi	r21, 0x42	; 66
    13b0:	c7 01       	movw	r24, r14
    13b2:	b6 01       	movw	r22, r12
    13b4:	0e 94 47 14 	call	0x288e	; 0x288e <__cmpsf2>
    13b8:	88 23       	and	r24, r24
    13ba:	0c f4       	brge	.+2      	; 0x13be <PowerStateCheck+0x45c>
    13bc:	19 cf       	rjmp	.-462    	; 0x11f0 <PowerStateCheck+0x28e>
    13be:	68 cf       	rjmp	.-304    	; 0x1290 <PowerStateCheck+0x32e>
		}//end else if
		else{
			return 20;
		}//end else
	}//end else SOC > 80
}//end PowerStateCheck
    13c0:	cf 91       	pop	r28
    13c2:	ff 90       	pop	r15
    13c4:	ef 90       	pop	r14
    13c6:	df 90       	pop	r13
    13c8:	cf 90       	pop	r12
    13ca:	bf 90       	pop	r11
    13cc:	af 90       	pop	r10
    13ce:	9f 90       	pop	r9
    13d0:	8f 90       	pop	r8
    13d2:	08 95       	ret

000013d4 <Update_STATE>:
// Date: 2019-03-25
// Description: Updates to the state to character array form for ease of use as it is
//				impossbile to read individual bits in a unsigned integer.
/*========================================================================================*/

void Update_STATE(char* power, uint8_t state){
    13d4:	fc 01       	movw	r30, r24
    13d6:	ac 01       	movw	r20, r24
    13d8:	48 5f       	subi	r20, 0xF8	; 248
    13da:	5f 4f       	sbci	r21, 0xFF	; 255
	power[6] => SBand   Power
	power[7] => UHF     Power	
	*/
	
	// 8 bit mask to check the state of each position
	uint8_t mask = 0x01;
    13dc:	91 e0       	ldi	r25, 0x01	; 1
		if (mask & state){
			power[i] = 'y';
			mask = mask << 1; // shift left once
		}
		else{
			power[i] = 'n';
    13de:	3e e6       	ldi	r19, 0x6E	; 110
	uint8_t mask = 0x01;
	// keep track of the first index
	
	while(i < 8){
		if (mask & state){
			power[i] = 'y';
    13e0:	89 e7       	ldi	r24, 0x79	; 121
	// 8 bit mask to check the state of each position
	uint8_t mask = 0x01;
	// keep track of the first index
	
	while(i < 8){
		if (mask & state){
    13e2:	26 2f       	mov	r18, r22
    13e4:	29 23       	and	r18, r25
    13e6:	19 f0       	breq	.+6      	; 0x13ee <Update_STATE+0x1a>
			power[i] = 'y';
    13e8:	80 83       	st	Z, r24
			mask = mask << 1; // shift left once
    13ea:	99 0f       	add	r25, r25
    13ec:	02 c0       	rjmp	.+4      	; 0x13f2 <Update_STATE+0x1e>
		}
		else{
			power[i] = 'n';
    13ee:	30 83       	st	Z, r19
			mask = mask << 1; // shift left once
    13f0:	99 0f       	add	r25, r25
    13f2:	31 96       	adiw	r30, 0x01	; 1
	
	// 8 bit mask to check the state of each position
	uint8_t mask = 0x01;
	// keep track of the first index
	
	while(i < 8){
    13f4:	e4 17       	cp	r30, r20
    13f6:	f5 07       	cpc	r31, r21
    13f8:	a1 f7       	brne	.-24     	; 0x13e2 <Update_STATE+0xe>
			power[i] = 'n';
			mask = mask << 1; // shift left once
		}
		i++;
	}
}
    13fa:	08 95       	ret

000013fc <Manual_STATE>:
// Date: 2019-03-27
// Description: Converts the power state from array of characters to an unsigned integer.
//				Unsigned integers are used instead of character arrays for speed.
/*========================================================================================*/

void Manual_STATE(char* power, uint8_t* power_state){
    13fc:	db 01       	movw	r26, r22
    13fe:	fc 01       	movw	r30, r24
    1400:	ac 01       	movw	r20, r24
    1402:	48 5f       	subi	r20, 0xF8	; 248
    1404:	5f 4f       	sbci	r21, 0xFF	; 255
	// String Index
	int i = 0;
	
	// 8 bit mask to check the state of each position
	uint8_t mask = 0x01;
	uint8_t new_mask = 0xff;
    1406:	3f ef       	ldi	r19, 0xFF	; 255
	
	// String Index
	int i = 0;
	
	// 8 bit mask to check the state of each position
	uint8_t mask = 0x01;
    1408:	91 e0       	ldi	r25, 0x01	; 1
	uint8_t new_mask = 0xff;
	// keep track of the first index
	
	while(i < 8){
		if (power[i] == 'y'){
    140a:	21 91       	ld	r18, Z+
    140c:	29 37       	cpi	r18, 0x79	; 121
    140e:	29 f4       	brne	.+10     	; 0x141a <Manual_STATE+0x1e>
			power_state[0] |= mask;
    1410:	8c 91       	ld	r24, X
    1412:	89 2b       	or	r24, r25
    1414:	8c 93       	st	X, r24
			mask = mask << 1; // shift left once
    1416:	99 0f       	add	r25, r25
    1418:	05 c0       	rjmp	.+10     	; 0x1424 <Manual_STATE+0x28>
		}
		else{
			new_mask ^= mask;
    141a:	39 27       	eor	r19, r25
			power_state[0] &= new_mask;
    141c:	2c 91       	ld	r18, X
    141e:	23 23       	and	r18, r19
    1420:	2c 93       	st	X, r18
			mask = mask << 1; // shift left once
    1422:	99 0f       	add	r25, r25
	// 8 bit mask to check the state of each position
	uint8_t mask = 0x01;
	uint8_t new_mask = 0xff;
	// keep track of the first index
	
	while(i < 8){
    1424:	e4 17       	cp	r30, r20
    1426:	f5 07       	cpc	r31, r21
    1428:	81 f7       	brne	.-32     	; 0x140a <Manual_STATE+0xe>
			power_state[0] &= new_mask;
			mask = mask << 1; // shift left once
		}
		i++;
	}
}
    142a:	08 95       	ret

0000142c <pwrMatChange>:
// Author: Chris Thomas
// Date: 2019-03-27
// Description: Converts the power state from array of characters to an unsigned integer.
/*========================================================================================*/

void pwrMatChange(uint8_t* edit_num, char* power, uint8_t* pwrMat){
    142c:	cf 93       	push	r28
    142e:	df 93       	push	r29
    1430:	ec 01       	movw	r28, r24
    1432:	fb 01       	movw	r30, r22
    1434:	68 5f       	subi	r22, 0xF8	; 248
    1436:	7f 4f       	sbci	r23, 0xFF	; 255
	// String Index
	int i = 0;
	
	// 8 bit mask to check the state of each position
	uint8_t mask = 0x01;
	uint8_t new_mask = 0xff;
    1438:	3f ef       	ldi	r19, 0xFF	; 255
	
	// String Index
	int i = 0;
	
	// 8 bit mask to check the state of each position
	uint8_t mask = 0x01;
    143a:	91 e0       	ldi	r25, 0x01	; 1
	uint8_t new_mask = 0xff;
	// keep track of the first index
	
	while(i < 8){
		if (power[i] == 'y'){
    143c:	21 91       	ld	r18, Z+
    143e:	29 37       	cpi	r18, 0x79	; 121
    1440:	49 f4       	brne	.+18     	; 0x1454 <pwrMatChange+0x28>
			pwrMat[edit_num[0]] |= mask;
    1442:	88 81       	ld	r24, Y
    1444:	da 01       	movw	r26, r20
    1446:	a8 0f       	add	r26, r24
    1448:	b1 1d       	adc	r27, r1
    144a:	8c 91       	ld	r24, X
    144c:	89 2b       	or	r24, r25
    144e:	8c 93       	st	X, r24
			mask = mask << 1; // shift left once
    1450:	99 0f       	add	r25, r25
    1452:	09 c0       	rjmp	.+18     	; 0x1466 <pwrMatChange+0x3a>
		}
		else{
			new_mask ^= mask;
    1454:	39 27       	eor	r19, r25
			pwrMat[edit_num[0]] &= new_mask;
    1456:	28 81       	ld	r18, Y
    1458:	da 01       	movw	r26, r20
    145a:	a2 0f       	add	r26, r18
    145c:	b1 1d       	adc	r27, r1
    145e:	2c 91       	ld	r18, X
    1460:	23 23       	and	r18, r19
    1462:	2c 93       	st	X, r18
			mask = mask << 1; // shift left once
    1464:	99 0f       	add	r25, r25
	// 8 bit mask to check the state of each position
	uint8_t mask = 0x01;
	uint8_t new_mask = 0xff;
	// keep track of the first index
	
	while(i < 8){
    1466:	e6 17       	cp	r30, r22
    1468:	f7 07       	cpc	r31, r23
    146a:	41 f7       	brne	.-48     	; 0x143c <pwrMatChange+0x10>
			mask = mask << 1; // shift left once
		}
		i++;
	}
	
}
    146c:	df 91       	pop	r29
    146e:	cf 91       	pop	r28
    1470:	08 95       	ret

00001472 <pwrMatEdit>:
// Date: 2019-03-27
// Description: Changes the power state in the power state matrix and prints the 
//				associated input prompts.
/*========================================================================================*/

void pwrMatEdit(uint8_t* edit_num , char* power, uint8_t* pwrMat){
    1472:	ef 92       	push	r14
    1474:	ff 92       	push	r15
    1476:	0f 93       	push	r16
    1478:	1f 93       	push	r17
    147a:	cf 93       	push	r28
    147c:	df 93       	push	r29
    147e:	ec 01       	movw	r28, r24
    1480:	8b 01       	movw	r16, r22
    1482:	7a 01       	movw	r14, r20
	
	// Get user input
	edit_num[0] = 0;
    1484:	18 82       	st	Y, r1
	UART0_putstring("Enter the power state number to be changed");
    1486:	84 e7       	ldi	r24, 0x74	; 116
    1488:	96 e0       	ldi	r25, 0x06	; 6
    148a:	00 d7       	rcall	.+3584   	; 0x228c <UART0_putstring>
	UART0_putchar('\n');
    148c:	8a e0       	ldi	r24, 0x0A	; 10
    148e:	ee d6       	rcall	.+3548   	; 0x226c <UART0_putchar>
	UART0_putchar('\n');
    1490:	8a e0       	ldi	r24, 0x0A	; 10
    1492:	ec d6       	rcall	.+3544   	; 0x226c <UART0_putchar>
	UART0_putchar('\r');
    1494:	8d e0       	ldi	r24, 0x0D	; 13
    1496:	ea d6       	rcall	.+3540   	; 0x226c <UART0_putchar>
	UART0_putstring("> ");
    1498:	83 e3       	ldi	r24, 0x33	; 51
    149a:	97 e0       	ldi	r25, 0x07	; 7
    149c:	f7 d6       	rcall	.+3566   	; 0x228c <UART0_putstring>
    149e:	ee d6       	rcall	.+3548   	; 0x227c <UART0_getchar>
	edit_num[0] += (UART0_getchar() - 0x30) * 10; // multiply first digit
    14a0:	08 2e       	mov	r0, r24
    14a2:	00 0c       	add	r0, r0
    14a4:	99 0b       	sbc	r25, r25
    14a6:	c0 97       	sbiw	r24, 0x30	; 48
    14a8:	9c 01       	movw	r18, r24
    14aa:	22 0f       	add	r18, r18
    14ac:	33 1f       	adc	r19, r19
    14ae:	88 0f       	add	r24, r24
    14b0:	99 1f       	adc	r25, r25
    14b2:	88 0f       	add	r24, r24
    14b4:	99 1f       	adc	r25, r25
    14b6:	88 0f       	add	r24, r24
    14b8:	99 1f       	adc	r25, r25
    14ba:	82 0f       	add	r24, r18
    14bc:	93 1f       	adc	r25, r19
    14be:	98 81       	ld	r25, Y
    14c0:	89 0f       	add	r24, r25
    14c2:	88 83       	st	Y, r24
    14c4:	db d6       	rcall	.+3510   	; 0x227c <UART0_getchar>
	edit_num[0] += UART0_getchar() - 0x30; // do nothing to last digit
    14c6:	08 2e       	mov	r0, r24
    14c8:	00 0c       	add	r0, r0
    14ca:	99 0b       	sbc	r25, r25
    14cc:	c0 97       	sbiw	r24, 0x30	; 48
    14ce:	98 81       	ld	r25, Y
    14d0:	89 0f       	add	r24, r25
    14d2:	88 83       	st	Y, r24
	UART0_putchar('\n');
    14d4:	8a e0       	ldi	r24, 0x0A	; 10
    14d6:	ca d6       	rcall	.+3476   	; 0x226c <UART0_putchar>
	UART0_putchar('\n');
    14d8:	8a e0       	ldi	r24, 0x0A	; 10
    14da:	c8 d6       	rcall	.+3472   	; 0x226c <UART0_putchar>
	UART0_putchar('\r');
    14dc:	8d e0       	ldi	r24, 0x0D	; 13
    14de:	c6 d6       	rcall	.+3468   	; 0x226c <UART0_putchar>
	UART0_putstring("Enter the new state in character form (y/n): ");
    14e0:	8f e9       	ldi	r24, 0x9F	; 159
    14e2:	96 e0       	ldi	r25, 0x06	; 6
    14e4:	d3 d6       	rcall	.+3494   	; 0x228c <UART0_putstring>
	UART0_putchar('\n');
    14e6:	8a e0       	ldi	r24, 0x0A	; 10
    14e8:	c1 d6       	rcall	.+3458   	; 0x226c <UART0_putchar>
    14ea:	8a e0       	ldi	r24, 0x0A	; 10
	UART0_putchar('\n');
    14ec:	bf d6       	rcall	.+3454   	; 0x226c <UART0_putchar>
    14ee:	8d e0       	ldi	r24, 0x0D	; 13
	UART0_putchar('\r');
    14f0:	bd d6       	rcall	.+3450   	; 0x226c <UART0_putchar>
    14f2:	83 e3       	ldi	r24, 0x33	; 51
	UART0_putstring("> ");
    14f4:	97 e0       	ldi	r25, 0x07	; 7
    14f6:	ca d6       	rcall	.+3476   	; 0x228c <UART0_putstring>
    14f8:	c8 01       	movw	r24, r16
	UART0_getstring(power); // get the new state in string form
    14fa:	d6 d6       	rcall	.+3500   	; 0x22a8 <UART0_getstring>
    14fc:	a7 01       	movw	r20, r14
    14fe:	b8 01       	movw	r22, r16
	pwrMatChange(edit_num, power, pwrMat);
    1500:	ce 01       	movw	r24, r28
    1502:	94 df       	rcall	.-216    	; 0x142c <pwrMatChange>
    1504:	8a e0       	ldi	r24, 0x0A	; 10
    1506:	b2 d6       	rcall	.+3428   	; 0x226c <UART0_putchar>
    1508:	8a e0       	ldi	r24, 0x0A	; 10
	UART0_putchar('\n');
    150a:	b0 d6       	rcall	.+3424   	; 0x226c <UART0_putchar>
    150c:	8d e0       	ldi	r24, 0x0D	; 13
    150e:	ae d6       	rcall	.+3420   	; 0x226c <UART0_putchar>
	UART0_putchar('\n');
    1510:	df 91       	pop	r29
    1512:	cf 91       	pop	r28
    1514:	1f 91       	pop	r17
	UART0_putchar('\r');
    1516:	0f 91       	pop	r16
    1518:	ff 90       	pop	r15
    151a:	ef 90       	pop	r14
    151c:	08 95       	ret

0000151e <EEPROM_Write>:
/*========================================================================================*/

void EEPROM_Write(uint8_t launch_bits, uint16_t address){
	
	// Wait for previous read/write cycle to be finished
	while(EECR & 0x02);
    151e:	f9 99       	sbic	0x1f, 1	; 31
    1520:	fe cf       	rjmp	.-4      	; 0x151e <EEPROM_Write>
	
	// Select EEPROM Address (first address)
	EEAR = address; // first address
    1522:	72 bd       	out	0x22, r23	; 34
    1524:	61 bd       	out	0x21, r22	; 33
	
	// Write to data Register
	EEDR = launch_bits;
    1526:	80 bd       	out	0x20, r24	; 32
	
	// Master Write Enable
	EECR = 0x04;
    1528:	84 e0       	ldi	r24, 0x04	; 4
    152a:	8f bb       	out	0x1f, r24	; 31
	
	// Write Enable
	EECR = 0x02;
    152c:	82 e0       	ldi	r24, 0x02	; 2
    152e:	8f bb       	out	0x1f, r24	; 31
    1530:	08 95       	ret

00001532 <EEPROM_Read>:
/*========================================================================================*/

uint8_t EEPROM_Read(uint16_t address){
	
	// Wait for previous read/write cycle to be finished
	while(EECR & 0x02);
    1532:	f9 99       	sbic	0x1f, 1	; 31
    1534:	fe cf       	rjmp	.-4      	; 0x1532 <EEPROM_Read>
	
	// Select EEPROM Address (first address)
	EEAR = address;
    1536:	92 bd       	out	0x22, r25	; 34
    1538:	81 bd       	out	0x21, r24	; 33
	
	// Read Enable
	EECR = 0x01;
    153a:	81 e0       	ldi	r24, 0x01	; 1
    153c:	8f bb       	out	0x1f, r24	; 31
	
	return EEDR;
    153e:	80 b5       	in	r24, 0x20	; 32
	
}
    1540:	08 95       	ret

00001542 <Set_GPIO>:
void Set_GPIO(int gpio_num){
	
	int gpio = 0x01; // initialize gpio selection to bit 0
	
	// PORT H
	if (gpio_num < 7){
    1542:	87 30       	cpi	r24, 0x07	; 7
    1544:	91 05       	cpc	r25, r1
    1546:	7c f4       	brge	.+30     	; 0x1566 <Set_GPIO+0x24>
		gpio = gpio << gpio_num; // shift to correct bit
		PORTH |= gpio; // set selected pin high
    1548:	e2 e0       	ldi	r30, 0x02	; 2
    154a:	f1 e0       	ldi	r31, 0x01	; 1
    154c:	40 81       	ld	r20, Z
    154e:	21 e0       	ldi	r18, 0x01	; 1
    1550:	30 e0       	ldi	r19, 0x00	; 0
    1552:	b9 01       	movw	r22, r18
    1554:	02 c0       	rjmp	.+4      	; 0x155a <Set_GPIO+0x18>
    1556:	66 0f       	add	r22, r22
    1558:	77 1f       	adc	r23, r23
    155a:	8a 95       	dec	r24
    155c:	e2 f7       	brpl	.-8      	; 0x1556 <Set_GPIO+0x14>
    155e:	cb 01       	movw	r24, r22
    1560:	84 2b       	or	r24, r20
    1562:	80 83       	st	Z, r24
    1564:	08 95       	ret
	}
	// PORT L
	else if (gpio_num >= 7 && gpio_num < 10){
    1566:	9c 01       	movw	r18, r24
    1568:	27 50       	subi	r18, 0x07	; 7
    156a:	31 09       	sbc	r19, r1
    156c:	23 30       	cpi	r18, 0x03	; 3
    156e:	31 05       	cpc	r19, r1
    1570:	80 f4       	brcc	.+32     	; 0x1592 <Set_GPIO+0x50>
		gpio = gpio << (gpio_num - 6); // shift to correct bit
		PORTL |= gpio; // set selected pin high
    1572:	eb e0       	ldi	r30, 0x0B	; 11
    1574:	f1 e0       	ldi	r31, 0x01	; 1
    1576:	40 81       	ld	r20, Z
    1578:	06 97       	sbiw	r24, 0x06	; 6
    157a:	21 e0       	ldi	r18, 0x01	; 1
    157c:	30 e0       	ldi	r19, 0x00	; 0
    157e:	b9 01       	movw	r22, r18
    1580:	02 c0       	rjmp	.+4      	; 0x1586 <Set_GPIO+0x44>
    1582:	66 0f       	add	r22, r22
    1584:	77 1f       	adc	r23, r23
    1586:	8a 95       	dec	r24
    1588:	e2 f7       	brpl	.-8      	; 0x1582 <Set_GPIO+0x40>
    158a:	cb 01       	movw	r24, r22
    158c:	84 2b       	or	r24, r20
    158e:	80 83       	st	Z, r24
    1590:	08 95       	ret
	}
	// PORT A
	else if(gpio_num >= 10 && gpio_num < 14){
    1592:	9c 01       	movw	r18, r24
    1594:	2a 50       	subi	r18, 0x0A	; 10
    1596:	31 09       	sbc	r19, r1
    1598:	24 30       	cpi	r18, 0x04	; 4
    159a:	31 05       	cpc	r19, r1
    159c:	70 f4       	brcc	.+28     	; 0x15ba <Set_GPIO+0x78>
		gpio = gpio << (gpio_num - 6); // shift to correct bit
		PORTA |= gpio; // set selected pin high
    159e:	42 b1       	in	r20, 0x02	; 2
    15a0:	06 97       	sbiw	r24, 0x06	; 6
    15a2:	21 e0       	ldi	r18, 0x01	; 1
    15a4:	30 e0       	ldi	r19, 0x00	; 0
    15a6:	b9 01       	movw	r22, r18
    15a8:	02 c0       	rjmp	.+4      	; 0x15ae <Set_GPIO+0x6c>
    15aa:	66 0f       	add	r22, r22
    15ac:	77 1f       	adc	r23, r23
    15ae:	8a 95       	dec	r24
    15b0:	e2 f7       	brpl	.-8      	; 0x15aa <Set_GPIO+0x68>
    15b2:	cb 01       	movw	r24, r22
    15b4:	84 2b       	or	r24, r20
    15b6:	82 b9       	out	0x02, r24	; 2
    15b8:	08 95       	ret
	}
	// PORT J
	else if(gpio_num >= 14 && gpio_num < 21){
    15ba:	9c 01       	movw	r18, r24
    15bc:	2e 50       	subi	r18, 0x0E	; 14
    15be:	31 09       	sbc	r19, r1
    15c0:	27 30       	cpi	r18, 0x07	; 7
    15c2:	31 05       	cpc	r19, r1
    15c4:	80 f4       	brcc	.+32     	; 0x15e6 <Set_GPIO+0xa4>
		gpio = gpio << (gpio_num - 14); // shift to correct bit
		PORTJ |= gpio; // set selected pin high
    15c6:	e5 e0       	ldi	r30, 0x05	; 5
    15c8:	f1 e0       	ldi	r31, 0x01	; 1
    15ca:	40 81       	ld	r20, Z
    15cc:	c9 01       	movw	r24, r18
    15ce:	21 e0       	ldi	r18, 0x01	; 1
    15d0:	30 e0       	ldi	r19, 0x00	; 0
    15d2:	b9 01       	movw	r22, r18
    15d4:	02 c0       	rjmp	.+4      	; 0x15da <Set_GPIO+0x98>
    15d6:	66 0f       	add	r22, r22
    15d8:	77 1f       	adc	r23, r23
    15da:	8a 95       	dec	r24
    15dc:	e2 f7       	brpl	.-8      	; 0x15d6 <Set_GPIO+0x94>
    15de:	cb 01       	movw	r24, r22
    15e0:	84 2b       	or	r24, r20
    15e2:	80 83       	st	Z, r24
    15e4:	08 95       	ret
	}
	// PORT C
	else if (gpio_num >= 21 && gpio_num < 29){
    15e6:	9c 01       	movw	r18, r24
    15e8:	25 51       	subi	r18, 0x15	; 21
    15ea:	31 09       	sbc	r19, r1
    15ec:	28 30       	cpi	r18, 0x08	; 8
    15ee:	31 05       	cpc	r19, r1
    15f0:	68 f4       	brcc	.+26     	; 0x160c <Set_GPIO+0xca>
		gpio = gpio << (gpio_num - 21); // shift to correct bit
		PORTC |= gpio; // set selected pin high
    15f2:	48 b1       	in	r20, 0x08	; 8
    15f4:	c9 01       	movw	r24, r18
    15f6:	21 e0       	ldi	r18, 0x01	; 1
    15f8:	30 e0       	ldi	r19, 0x00	; 0
    15fa:	b9 01       	movw	r22, r18
    15fc:	02 c0       	rjmp	.+4      	; 0x1602 <Set_GPIO+0xc0>
    15fe:	66 0f       	add	r22, r22
    1600:	77 1f       	adc	r23, r23
    1602:	8a 95       	dec	r24
    1604:	e2 f7       	brpl	.-8      	; 0x15fe <Set_GPIO+0xbc>
    1606:	cb 01       	movw	r24, r22
    1608:	84 2b       	or	r24, r20
    160a:	88 b9       	out	0x08, r24	; 8
    160c:	08 95       	ret

0000160e <Clear_GPIO>:
	
	int gpio = 0x01; // initialize gpio selection to bit 0
	int gpio_mask = 0xFE; //gpio mask
	
	// PORT H
	if (gpio_num < 7){
    160e:	87 30       	cpi	r24, 0x07	; 7
    1610:	91 05       	cpc	r25, r1
    1612:	84 f4       	brge	.+32     	; 0x1634 <Clear_GPIO+0x26>
		gpio = gpio << gpio_num; // shift to correct bit
		PORTH &= (gpio^gpio_mask); // use mask to clear bit
    1614:	e2 e0       	ldi	r30, 0x02	; 2
    1616:	f1 e0       	ldi	r31, 0x01	; 1
    1618:	90 81       	ld	r25, Z
    161a:	41 e0       	ldi	r20, 0x01	; 1
    161c:	50 e0       	ldi	r21, 0x00	; 0
    161e:	02 c0       	rjmp	.+4      	; 0x1624 <Clear_GPIO+0x16>
    1620:	44 0f       	add	r20, r20
    1622:	55 1f       	adc	r21, r21
    1624:	8a 95       	dec	r24
    1626:	e2 f7       	brpl	.-8      	; 0x1620 <Clear_GPIO+0x12>
    1628:	2e ef       	ldi	r18, 0xFE	; 254
    162a:	84 2f       	mov	r24, r20
    162c:	82 27       	eor	r24, r18
    162e:	89 23       	and	r24, r25
    1630:	80 83       	st	Z, r24
    1632:	08 95       	ret
	}
	// PORT L
	else if (gpio_num >= 7 && gpio_num < 10){
    1634:	9c 01       	movw	r18, r24
    1636:	27 50       	subi	r18, 0x07	; 7
    1638:	31 09       	sbc	r19, r1
    163a:	23 30       	cpi	r18, 0x03	; 3
    163c:	31 05       	cpc	r19, r1
    163e:	90 f4       	brcc	.+36     	; 0x1664 <Clear_GPIO+0x56>
		gpio = gpio << (gpio_num - 6); // shift to correct bit
		PORTL &= (gpio^gpio_mask); // use mask to clear bit
    1640:	eb e0       	ldi	r30, 0x0B	; 11
    1642:	f1 e0       	ldi	r31, 0x01	; 1
    1644:	20 81       	ld	r18, Z
    1646:	ac 01       	movw	r20, r24
    1648:	46 50       	subi	r20, 0x06	; 6
    164a:	51 09       	sbc	r21, r1
    164c:	81 e0       	ldi	r24, 0x01	; 1
    164e:	90 e0       	ldi	r25, 0x00	; 0
    1650:	02 c0       	rjmp	.+4      	; 0x1656 <Clear_GPIO+0x48>
    1652:	88 0f       	add	r24, r24
    1654:	99 1f       	adc	r25, r25
    1656:	4a 95       	dec	r20
    1658:	e2 f7       	brpl	.-8      	; 0x1652 <Clear_GPIO+0x44>
    165a:	9e ef       	ldi	r25, 0xFE	; 254
    165c:	89 27       	eor	r24, r25
    165e:	82 23       	and	r24, r18
    1660:	80 83       	st	Z, r24
    1662:	08 95       	ret
	}
	// PORT A
	else if(gpio_num >= 10 && gpio_num < 14){
    1664:	9c 01       	movw	r18, r24
    1666:	2a 50       	subi	r18, 0x0A	; 10
    1668:	31 09       	sbc	r19, r1
    166a:	24 30       	cpi	r18, 0x04	; 4
    166c:	31 05       	cpc	r19, r1
    166e:	80 f4       	brcc	.+32     	; 0x1690 <Clear_GPIO+0x82>
		gpio = gpio << (gpio_num - 6); // shift to correct bit
		PORTA &= (gpio^gpio_mask); // use mask to clear bit
    1670:	22 b1       	in	r18, 0x02	; 2
    1672:	ac 01       	movw	r20, r24
    1674:	46 50       	subi	r20, 0x06	; 6
    1676:	51 09       	sbc	r21, r1
    1678:	81 e0       	ldi	r24, 0x01	; 1
    167a:	90 e0       	ldi	r25, 0x00	; 0
    167c:	02 c0       	rjmp	.+4      	; 0x1682 <Clear_GPIO+0x74>
    167e:	88 0f       	add	r24, r24
    1680:	99 1f       	adc	r25, r25
    1682:	4a 95       	dec	r20
    1684:	e2 f7       	brpl	.-8      	; 0x167e <Clear_GPIO+0x70>
    1686:	9e ef       	ldi	r25, 0xFE	; 254
    1688:	89 27       	eor	r24, r25
    168a:	82 23       	and	r24, r18
    168c:	82 b9       	out	0x02, r24	; 2
    168e:	08 95       	ret
	}
	// PORT J
	else if(gpio_num >= 14 && gpio_num < 21){
    1690:	9c 01       	movw	r18, r24
    1692:	2e 50       	subi	r18, 0x0E	; 14
    1694:	31 09       	sbc	r19, r1
    1696:	27 30       	cpi	r18, 0x07	; 7
    1698:	31 05       	cpc	r19, r1
    169a:	90 f4       	brcc	.+36     	; 0x16c0 <Clear_GPIO+0xb2>
		gpio = gpio << (gpio_num - 14); // shift to correct bit
		PORTJ &= (gpio^gpio_mask); // use mask to clear bit
    169c:	e5 e0       	ldi	r30, 0x05	; 5
    169e:	f1 e0       	ldi	r31, 0x01	; 1
    16a0:	20 81       	ld	r18, Z
    16a2:	ac 01       	movw	r20, r24
    16a4:	4e 50       	subi	r20, 0x0E	; 14
    16a6:	51 09       	sbc	r21, r1
    16a8:	81 e0       	ldi	r24, 0x01	; 1
    16aa:	90 e0       	ldi	r25, 0x00	; 0
    16ac:	02 c0       	rjmp	.+4      	; 0x16b2 <Clear_GPIO+0xa4>
    16ae:	88 0f       	add	r24, r24
    16b0:	99 1f       	adc	r25, r25
    16b2:	4a 95       	dec	r20
    16b4:	e2 f7       	brpl	.-8      	; 0x16ae <Clear_GPIO+0xa0>
    16b6:	9e ef       	ldi	r25, 0xFE	; 254
    16b8:	89 27       	eor	r24, r25
    16ba:	82 23       	and	r24, r18
    16bc:	80 83       	st	Z, r24
    16be:	08 95       	ret
	}
	// PORT C
	else if (gpio_num >= 21 && gpio_num < 29){
    16c0:	9c 01       	movw	r18, r24
    16c2:	25 51       	subi	r18, 0x15	; 21
    16c4:	31 09       	sbc	r19, r1
    16c6:	28 30       	cpi	r18, 0x08	; 8
    16c8:	31 05       	cpc	r19, r1
    16ca:	78 f4       	brcc	.+30     	; 0x16ea <Clear_GPIO+0xdc>
		gpio = gpio << (gpio_num - 21); // shift to correct bit
		PORTC &= (gpio^gpio_mask); // use mask to clear bit
    16cc:	28 b1       	in	r18, 0x08	; 8
    16ce:	45 97       	sbiw	r24, 0x15	; 21
    16d0:	41 e0       	ldi	r20, 0x01	; 1
    16d2:	50 e0       	ldi	r21, 0x00	; 0
    16d4:	ba 01       	movw	r22, r20
    16d6:	02 c0       	rjmp	.+4      	; 0x16dc <Clear_GPIO+0xce>
    16d8:	66 0f       	add	r22, r22
    16da:	77 1f       	adc	r23, r23
    16dc:	8a 95       	dec	r24
    16de:	e2 f7       	brpl	.-8      	; 0x16d8 <Clear_GPIO+0xca>
    16e0:	cb 01       	movw	r24, r22
    16e2:	9e ef       	ldi	r25, 0xFE	; 254
    16e4:	89 27       	eor	r24, r25
    16e6:	82 23       	and	r24, r18
    16e8:	88 b9       	out	0x08, r24	; 8
    16ea:	08 95       	ret

000016ec <Update_TELEM>:
// Author: Chris Thomas
// Date: 2019-02-03
// Description: Updates telemetry information for OBC. Voltage, current and temperature.
/*========================================================================================*/

void Update_TELEM(double* telem, uint8_t power_state){
    16ec:	1f 93       	push	r17
    16ee:	cf 93       	push	r28
    16f0:	df 93       	push	r29
    16f2:	ec 01       	movw	r28, r24
    16f4:	16 2f       	mov	r17, r22
	
	// Set 5V rail for readings (needed for current sensors)
	
	// RE-ENABLE FOR DEMOOOOOOOOOOO//////
	Enable_5V();
    16f6:	0a db       	rcall	.-2540   	; 0xd0c <Enable_5V>
	
	//Enable_5V();
	// ^^^^^^^^^^^
	
	// Ammeter measurements
	telem[0] = Amp_ADC(2); // 3V3-1 rail current
    16f8:	82 e0       	ldi	r24, 0x02	; 2
    16fa:	90 e0       	ldi	r25, 0x00	; 0
    16fc:	0e 94 a1 01 	call	0x342	; 0x342 <Amp_ADC>
    1700:	68 83       	st	Y, r22
    1702:	79 83       	std	Y+1, r23	; 0x01
    1704:	8a 83       	std	Y+2, r24	; 0x02
    1706:	9b 83       	std	Y+3, r25	; 0x03
	telem[1] = Amp_ADC(3); // 3V3-2 rail current
    1708:	83 e0       	ldi	r24, 0x03	; 3
    170a:	90 e0       	ldi	r25, 0x00	; 0
    170c:	0e 94 a1 01 	call	0x342	; 0x342 <Amp_ADC>
    1710:	6c 83       	std	Y+4, r22	; 0x04
    1712:	7d 83       	std	Y+5, r23	; 0x05
    1714:	8e 83       	std	Y+6, r24	; 0x06
    1716:	9f 83       	std	Y+7, r25	; 0x07
	telem[2] = Amp_ADC(1); // 5V rail current
    1718:	81 e0       	ldi	r24, 0x01	; 1
    171a:	90 e0       	ldi	r25, 0x00	; 0
    171c:	0e 94 a1 01 	call	0x342	; 0x342 <Amp_ADC>
    1720:	68 87       	std	Y+8, r22	; 0x08
    1722:	79 87       	std	Y+9, r23	; 0x09
    1724:	8a 87       	std	Y+10, r24	; 0x0a
    1726:	9b 87       	std	Y+11, r25	; 0x0b
	telem[3] = Amp_ADC(0); // 8V rail current
    1728:	80 e0       	ldi	r24, 0x00	; 0
    172a:	90 e0       	ldi	r25, 0x00	; 0
    172c:	0e 94 a1 01 	call	0x342	; 0x342 <Amp_ADC>
    1730:	6c 87       	std	Y+12, r22	; 0x0c
    1732:	7d 87       	std	Y+13, r23	; 0x0d
    1734:	8e 87       	std	Y+14, r24	; 0x0e
    1736:	9f 87       	std	Y+15, r25	; 0x0f
	telem[4] = Amp_ADC(5); // VBatt rail current
    1738:	85 e0       	ldi	r24, 0x05	; 5
    173a:	90 e0       	ldi	r25, 0x00	; 0
    173c:	0e 94 a1 01 	call	0x342	; 0x342 <Amp_ADC>
    1740:	68 8b       	std	Y+16, r22	; 0x10
    1742:	79 8b       	std	Y+17, r23	; 0x11
    1744:	8a 8b       	std	Y+18, r24	; 0x12
    1746:	9b 8b       	std	Y+19, r25	; 0x13
	telem[5] = Amp_ADC(4); // Solar panel current
    1748:	84 e0       	ldi	r24, 0x04	; 4
    174a:	90 e0       	ldi	r25, 0x00	; 0
    174c:	0e 94 a1 01 	call	0x342	; 0x342 <Amp_ADC>
    1750:	6c 8b       	std	Y+20, r22	; 0x14
    1752:	7d 8b       	std	Y+21, r23	; 0x15
    1754:	8e 8b       	std	Y+22, r24	; 0x16
    1756:	9f 8b       	std	Y+23, r25	; 0x17
	
	// Voltmeter measurements
	telem[6] = Volt_ADC(0); // 3V3-1 rail voltage
    1758:	80 e0       	ldi	r24, 0x00	; 0
    175a:	90 e0       	ldi	r25, 0x00	; 0
    175c:	0e 94 38 01 	call	0x270	; 0x270 <Volt_ADC>
    1760:	68 8f       	std	Y+24, r22	; 0x18
    1762:	79 8f       	std	Y+25, r23	; 0x19
    1764:	8a 8f       	std	Y+26, r24	; 0x1a
    1766:	9b 8f       	std	Y+27, r25	; 0x1b
	telem[7] = Volt_ADC(1); // 3V3-2 rail voltage
    1768:	81 e0       	ldi	r24, 0x01	; 1
    176a:	90 e0       	ldi	r25, 0x00	; 0
    176c:	0e 94 38 01 	call	0x270	; 0x270 <Volt_ADC>
    1770:	6c 8f       	std	Y+28, r22	; 0x1c
    1772:	7d 8f       	std	Y+29, r23	; 0x1d
    1774:	8e 8f       	std	Y+30, r24	; 0x1e
    1776:	9f 8f       	std	Y+31, r25	; 0x1f
	telem[8] = Volt_ADC(2); // 5V rail voltage
    1778:	82 e0       	ldi	r24, 0x02	; 2
    177a:	90 e0       	ldi	r25, 0x00	; 0
    177c:	0e 94 38 01 	call	0x270	; 0x270 <Volt_ADC>
    1780:	68 a3       	std	Y+32, r22	; 0x20
    1782:	79 a3       	std	Y+33, r23	; 0x21
    1784:	8a a3       	std	Y+34, r24	; 0x22
    1786:	9b a3       	std	Y+35, r25	; 0x23
	telem[9] = Volt_ADC(3); // 8V-1 rail voltage
    1788:	83 e0       	ldi	r24, 0x03	; 3
    178a:	90 e0       	ldi	r25, 0x00	; 0
    178c:	0e 94 38 01 	call	0x270	; 0x270 <Volt_ADC>
    1790:	6c a3       	std	Y+36, r22	; 0x24
    1792:	7d a3       	std	Y+37, r23	; 0x25
    1794:	8e a3       	std	Y+38, r24	; 0x26
    1796:	9f a3       	std	Y+39, r25	; 0x27
	telem[10] = Volt_ADC(4); // VBatt rail voltage
    1798:	84 e0       	ldi	r24, 0x04	; 4
    179a:	90 e0       	ldi	r25, 0x00	; 0
    179c:	0e 94 38 01 	call	0x270	; 0x270 <Volt_ADC>
    17a0:	68 a7       	std	Y+40, r22	; 0x28
    17a2:	79 a7       	std	Y+41, r23	; 0x29
    17a4:	8a a7       	std	Y+42, r24	; 0x2a
    17a6:	9b a7       	std	Y+43, r25	; 0x2b
	telem[11] = Temp_ADC(); // Battery temperature
    17a8:	0e 94 64 02 	call	0x4c8	; 0x4c8 <Temp_ADC>
    17ac:	6c a7       	std	Y+44, r22	; 0x2c
    17ae:	7d a7       	std	Y+45, r23	; 0x2d
    17b0:	8e a7       	std	Y+46, r24	; 0x2e
    17b2:	9f a7       	std	Y+47, r25	; 0x2f
	
	// Disable 5V rail
	Disable_5V(power_state);	
    17b4:	81 2f       	mov	r24, r17
    17b6:	dd da       	rcall	.-2630   	; 0xd72 <Disable_5V>
}
    17b8:	df 91       	pop	r29
    17ba:	cf 91       	pop	r28
    17bc:	1f 91       	pop	r17
    17be:	08 95       	ret

000017c0 <Update_OBC>:
// Author: Chris Thomas
// Date: 2019-02-03
// Description: Updates the telemetry information to the OBC.
/*========================================================================================*/

void Update_OBC(double* telem, char* power, uint8_t state_num, uint8_t mode, int soc){
    17c0:	2f 92       	push	r2
    17c2:	3f 92       	push	r3
    17c4:	4f 92       	push	r4
    17c6:	5f 92       	push	r5
    17c8:	6f 92       	push	r6
    17ca:	7f 92       	push	r7
    17cc:	8f 92       	push	r8
    17ce:	9f 92       	push	r9
    17d0:	af 92       	push	r10
    17d2:	bf 92       	push	r11
    17d4:	cf 92       	push	r12
    17d6:	df 92       	push	r13
    17d8:	ef 92       	push	r14
    17da:	ff 92       	push	r15
    17dc:	0f 93       	push	r16
    17de:	1f 93       	push	r17
    17e0:	cf 93       	push	r28
    17e2:	df 93       	push	r29
    17e4:	cd b7       	in	r28, 0x3d	; 61
    17e6:	de b7       	in	r29, 0x3e	; 62
    17e8:	c5 5b       	subi	r28, 0xB5	; 181
    17ea:	d2 40       	sbci	r29, 0x02	; 2
    17ec:	0f b6       	in	r0, 0x3f	; 63
    17ee:	f8 94       	cli
    17f0:	de bf       	out	0x3e, r29	; 62
    17f2:	0f be       	out	0x3f, r0	; 63
    17f4:	cd bf       	out	0x3d, r28	; 61
    17f6:	ce 54       	subi	r28, 0x4E	; 78
    17f8:	dd 4f       	sbci	r29, 0xFD	; 253
    17fa:	99 83       	std	Y+1, r25	; 0x01
    17fc:	88 83       	st	Y, r24
    17fe:	c2 5b       	subi	r28, 0xB2	; 178
    1800:	d2 40       	sbci	r29, 0x02	; 2
    1802:	c6 55       	subi	r28, 0x56	; 86
    1804:	dd 4f       	sbci	r29, 0xFD	; 253
    1806:	79 83       	std	Y+1, r23	; 0x01
    1808:	68 83       	st	Y, r22
    180a:	ca 5a       	subi	r28, 0xAA	; 170
    180c:	d2 40       	sbci	r29, 0x02	; 2
    180e:	c4 55       	subi	r28, 0x54	; 84
    1810:	dd 4f       	sbci	r29, 0xFD	; 253
    1812:	48 83       	st	Y, r20
    1814:	cc 5a       	subi	r28, 0xAC	; 172
    1816:	d2 40       	sbci	r29, 0x02	; 2
    1818:	c3 55       	subi	r28, 0x53	; 83
    181a:	dd 4f       	sbci	r29, 0xFD	; 253
    181c:	28 83       	st	Y, r18
    181e:	cd 5a       	subi	r28, 0xAD	; 173
    1820:	d2 40       	sbci	r29, 0x02	; 2
    1822:	c2 55       	subi	r28, 0x52	; 82
    1824:	dd 4f       	sbci	r29, 0xFD	; 253
    1826:	08 83       	st	Y, r16
    1828:	ce 5a       	subi	r28, 0xAE	; 174
    182a:	d2 40       	sbci	r29, 0x02	; 2
    182c:	c1 55       	subi	r28, 0x51	; 81
    182e:	dd 4f       	sbci	r29, 0xFD	; 253
    1830:	18 83       	st	Y, r17
    1832:	cf 5a       	subi	r28, 0xAF	; 175
    1834:	d2 40       	sbci	r29, 0x02	; 2
	// Prints a border to the Putty
	char stars[100] = "/********************************************************************CubeSat EPS"; // left side of border
    1836:	81 e5       	ldi	r24, 0x51	; 81
    1838:	ea e1       	ldi	r30, 0x1A	; 26
    183a:	f2 e0       	ldi	r31, 0x02	; 2
    183c:	de 01       	movw	r26, r28
    183e:	11 96       	adiw	r26, 0x01	; 1
    1840:	01 90       	ld	r0, Z+
    1842:	0d 92       	st	X+, r0
    1844:	8a 95       	dec	r24
    1846:	e1 f7       	brne	.-8      	; 0x1840 <Update_OBC+0x80>
    1848:	fe 01       	movw	r30, r28
    184a:	ee 5a       	subi	r30, 0xAE	; 174
    184c:	ff 4f       	sbci	r31, 0xFF	; 255
    184e:	83 e1       	ldi	r24, 0x13	; 19
    1850:	df 01       	movw	r26, r30
    1852:	1d 92       	st	X+, r1
    1854:	8a 95       	dec	r24
    1856:	e9 f7       	brne	.-6      	; 0x1852 <Update_OBC+0x92>
	char stars2[100] = "********************************************************************/"; // right side of border
    1858:	86 e4       	ldi	r24, 0x46	; 70
    185a:	ee e7       	ldi	r30, 0x7E	; 126
    185c:	f2 e0       	ldi	r31, 0x02	; 2
    185e:	de 01       	movw	r26, r28
    1860:	ab 59       	subi	r26, 0x9B	; 155
    1862:	bf 4f       	sbci	r27, 0xFF	; 255
    1864:	01 90       	ld	r0, Z+
    1866:	0d 92       	st	X+, r0
    1868:	8a 95       	dec	r24
    186a:	e1 f7       	brne	.-8      	; 0x1864 <Update_OBC+0xa4>
    186c:	fe 01       	movw	r30, r28
    186e:	e5 55       	subi	r30, 0x55	; 85
    1870:	ff 4f       	sbci	r31, 0xFF	; 255
    1872:	8e e1       	ldi	r24, 0x1E	; 30
    1874:	df 01       	movw	r26, r30
    1876:	1d 92       	st	X+, r1
    1878:	8a 95       	dec	r24
    187a:	e9 f7       	brne	.-6      	; 0x1876 <Update_OBC+0xb6>
	char* border; // complete border top and bottom
	border = strcat(stars,stars2);
    187c:	be 01       	movw	r22, r28
    187e:	6b 59       	subi	r22, 0x9B	; 155
    1880:	7f 4f       	sbci	r23, 0xFF	; 255
    1882:	ce 01       	movw	r24, r28
    1884:	01 96       	adiw	r24, 0x01	; 1
    1886:	0e 94 75 1a 	call	0x34ea	; 0x34ea <strcat>
	
	// Print border
	UART0_putstring(border);
    188a:	00 d5       	rcall	.+2560   	; 0x228c <UART0_putstring>
	
	// Spacing
	UART0_putchar('\n');
    188c:	8a e0       	ldi	r24, 0x0A	; 10
    188e:	ee d4       	rcall	.+2524   	; 0x226c <UART0_putchar>
	UART0_putchar('\n');
    1890:	8a e0       	ldi	r24, 0x0A	; 10
    1892:	ec d4       	rcall	.+2520   	; 0x226c <UART0_putchar>
	UART0_putchar('\r');
    1894:	8d e0       	ldi	r24, 0x0D	; 13
    1896:	ea d4       	rcall	.+2516   	; 0x226c <UART0_putchar>
    1898:	80 ea       	ldi	r24, 0xA0	; 160
	
	// String Initializations
	char loads[8][20] = {"Heater 1 (VBatt)", "Heater 2 (5V)", "Heater 3 (8V)", 
    189a:	e2 ee       	ldi	r30, 0xE2	; 226
    189c:	f2 e0       	ldi	r31, 0x02	; 2
    189e:	de 01       	movw	r26, r28
    18a0:	a7 53       	subi	r26, 0x37	; 55
    18a2:	bf 4f       	sbci	r27, 0xFF	; 255
    18a4:	01 90       	ld	r0, Z+
    18a6:	0d 92       	st	X+, r0
    18a8:	8a 95       	dec	r24
    18aa:	e1 f7       	brne	.-8      	; 0x18a4 <Update_OBC+0xe4>
    18ac:	80 ef       	ldi	r24, 0xF0	; 240
						 "OBC", "Imager", "GRIPS", "S-Band", "UHF"};
						 
	char sensors[12][20] = {"3V3-1 Rail [A]", "3V3-2 Rail [A]", "5V Rail [A]", 
    18ae:	e2 e8       	ldi	r30, 0x82	; 130
    18b0:	f3 e0       	ldi	r31, 0x03	; 3
    18b2:	de 01       	movw	r26, r28
    18b4:	a7 59       	subi	r26, 0x97	; 151
    18b6:	be 4f       	sbci	r27, 0xFE	; 254
    18b8:	01 90       	ld	r0, Z+
    18ba:	0d 92       	st	X+, r0
    18bc:	8a 95       	dec	r24
    18be:	e1 f7       	brne	.-8      	; 0x18b8 <Update_OBC+0xf8>
    18c0:	82 e4       	ldi	r24, 0x42	; 66
							"8V Rail [A]", "Battery Rail [A]", "Solar Input [A]",
							"3V3-1 Rail [V]", "3V3-2 Rail [V]", "5V Rail [V]", "8V Rail [V]",
							"Battery Rail [V]", "Temperature [C]"};
							
	char sections[3][22] = {"CURRENT", "VOLTAGE", "LOADS"};
    18c2:	e2 e7       	ldi	r30, 0x72	; 114
    18c4:	f4 e0       	ldi	r31, 0x04	; 4
    18c6:	de 01       	movw	r26, r28
    18c8:	a7 5a       	subi	r26, 0xA7	; 167
    18ca:	bd 4f       	sbci	r27, 0xFD	; 253
    18cc:	01 90       	ld	r0, Z+
    18ce:	0d 92       	st	X+, r0
    18d0:	8a 95       	dec	r24
    18d2:	e1 f7       	brne	.-8      	; 0x18cc <Update_OBC+0x10c>
    18d4:	fe 01       	movw	r30, r28
    18d6:	e7 59       	subi	r30, 0x97	; 151
    18d8:	fe 4f       	sbci	r31, 0xFE	; 254
    18da:	7f 01       	movw	r14, r30
    18dc:	aa 24       	eor	r10, r10
    18de:	a3 94       	inc	r10
    18e0:	b1 2c       	mov	r11, r1
    18e2:	c1 2c       	mov	r12, r1
    18e4:	d1 2c       	mov	r13, r1
    18e6:	41 2c       	mov	r4, r1
	int spaces2 = 0; // for inner loops
	int l_incr = 0; // load increment (8)
	int s_incr = 0; // sensor increment (12)
	int i = 0; // increment for telemetry (0 to 6, then 6 to 12)
	char measure[10]; // used for sprintf
	int section_incr = 0; // used for the section titles
    18e8:	51 2c       	mov	r5, r1
    18ea:	61 2c       	mov	r6, r1
	int spacing = 20;
	int spaces = 0;
	int spaces2 = 0; // for inner loops
	int l_incr = 0; // load increment (8)
	int s_incr = 0; // sensor increment (12)
	int i = 0; // increment for telemetry (0 to 6, then 6 to 12)
    18ec:	71 2c       	mov	r7, r1
    18ee:	c0 55       	subi	r28, 0x50	; 80
	char sections[3][22] = {"CURRENT", "VOLTAGE", "LOADS"};
							
	// Doing to the spacing correctly						
	int spacing = 20;
	int spaces = 0;
	int spaces2 = 0; // for inner loops
    18f0:	dd 4f       	sbci	r29, 0xFD	; 253
    18f2:	19 82       	std	Y+1, r1	; 0x01
    18f4:	18 82       	st	Y, r1
    18f6:	c0 5b       	subi	r28, 0xB0	; 176
    18f8:	d2 40       	sbci	r29, 0x02	; 2
    18fa:	00 e0       	ldi	r16, 0x00	; 0
							
	char sections[3][22] = {"CURRENT", "VOLTAGE", "LOADS"};
							
	// Doing to the spacing correctly						
	int spacing = 20;
	int spaces = 0;
    18fc:	10 e0       	ldi	r17, 0x00	; 0
    18fe:	0f 2e       	mov	r0, r31
			UART0_putchar(' ');
			spaces--;
		}
		UART0_putstring(sensors[s_incr]);
		s_incr++;
		spaces = spacing - strlen(sensors[s_incr - 1]);
    1900:	f4 e1       	ldi	r31, 0x14	; 20
    1902:	8f 2e       	mov	r8, r31
    1904:	91 2c       	mov	r9, r1
    1906:	f0 2d       	mov	r31, r0
    1908:	1e 01       	movw	r2, r28
			while(i < s_incr){
				while(spaces2){
					UART0_putchar(' ');
					spaces2--;
				}
				sprintf(measure,"%.3f",telem[i]);
    190a:	f5 e6       	ldi	r31, 0x65	; 101
    190c:	2f 1a       	sub	r2, r31
    190e:	fd ef       	ldi	r31, 0xFD	; 253
    1910:	3f 0a       	sbc	r3, r31
    1912:	cc 54       	subi	r28, 0x4C	; 76
    1914:	dd 4f       	sbci	r29, 0xFD	; 253
    1916:	28 82       	st	Y, r2
    1918:	c4 5b       	subi	r28, 0xB4	; 180
    191a:	d2 40       	sbci	r29, 0x02	; 2
    191c:	cb 54       	subi	r28, 0x4B	; 75
    191e:	dd 4f       	sbci	r29, 0xFD	; 253
    1920:	38 82       	st	Y, r3
    1922:	c5 5b       	subi	r28, 0xB5	; 181
    1924:	d2 40       	sbci	r29, 0x02	; 2
    1926:	c6 01       	movw	r24, r12
    1928:	26 e0       	ldi	r18, 0x06	; 6
	// Print the telemetry information
	while (s_incr < 12){
		
		// Switch lines after 6 titles are written and write
		// data on the next line
		if (s_incr == 6){
    192a:	c2 16       	cp	r12, r18
    192c:	d1 04       	cpc	r13, r1
    192e:	09 f0       	breq	.+2      	; 0x1932 <Update_OBC+0x172>
    1930:	18 c2       	rjmp	.+1072   	; 0x1d62 <Update_OBC+0x5a2>
			UART0_putchar('\n');
    1932:	8a e0       	ldi	r24, 0x0A	; 10
    1934:	9b d4       	rcall	.+2358   	; 0x226c <UART0_putchar>
    1936:	8d e0       	ldi	r24, 0x0D	; 13
			UART0_putchar('\r');
    1938:	99 d4       	rcall	.+2354   	; 0x226c <UART0_putchar>
    193a:	36 e0       	ldi	r19, 0x06	; 6
    193c:	63 16       	cp	r6, r19
			// print values
			while(i < s_incr){
    193e:	71 04       	cpc	r7, r1
    1940:	0c f0       	brlt	.+2      	; 0x1944 <Update_OBC+0x184>
    1942:	63 c0       	rjmp	.+198    	; 0x1a0a <Update_OBC+0x24a>
    1944:	83 01       	movw	r16, r6
    1946:	00 0f       	add	r16, r16
    1948:	11 1f       	adc	r17, r17
    194a:	00 0f       	add	r16, r16
    194c:	11 1f       	adc	r17, r17
    194e:	ce 54       	subi	r28, 0x4E	; 78
    1950:	dd 4f       	sbci	r29, 0xFD	; 253
    1952:	88 81       	ld	r24, Y
    1954:	99 81       	ldd	r25, Y+1	; 0x01
    1956:	c2 5b       	subi	r28, 0xB2	; 178
    1958:	d2 40       	sbci	r29, 0x02	; 2
    195a:	08 0f       	add	r16, r24
    195c:	19 1f       	adc	r17, r25
    195e:	4b c0       	rjmp	.+150    	; 0x19f6 <Update_OBC+0x236>
    1960:	80 e2       	ldi	r24, 0x20	; 32
				while(spaces2){
					UART0_putchar(' ');
    1962:	84 d4       	rcall	.+2312   	; 0x226c <UART0_putchar>
    1964:	c0 55       	subi	r28, 0x50	; 80
    1966:	dd 4f       	sbci	r29, 0xFD	; 253
					spaces2--;
    1968:	a8 81       	ld	r26, Y
    196a:	b9 81       	ldd	r27, Y+1	; 0x01
    196c:	c0 5b       	subi	r28, 0xB0	; 176
    196e:	d2 40       	sbci	r29, 0x02	; 2
    1970:	11 97       	sbiw	r26, 0x01	; 1
    1972:	c0 55       	subi	r28, 0x50	; 80
    1974:	dd 4f       	sbci	r29, 0xFD	; 253
    1976:	b9 83       	std	Y+1, r27	; 0x01
    1978:	a8 83       	st	Y, r26
    197a:	c0 5b       	subi	r28, 0xB0	; 176
    197c:	d2 40       	sbci	r29, 0x02	; 2
    197e:	ab 2b       	or	r26, r27
    1980:	79 f7       	brne	.-34     	; 0x1960 <Update_OBC+0x1a0>
		if (s_incr == 6){
			UART0_putchar('\n');
			UART0_putchar('\r');
			// print values
			while(i < s_incr){
				while(spaces2){
    1982:	f8 01       	movw	r30, r16
    1984:	80 81       	ld	r24, Z
					UART0_putchar(' ');
					spaces2--;
				}
				sprintf(measure,"%.3f",telem[i]);
    1986:	91 81       	ldd	r25, Z+1	; 0x01
    1988:	22 81       	ldd	r18, Z+2	; 0x02
    198a:	33 81       	ldd	r19, Z+3	; 0x03
    198c:	0c 5f       	subi	r16, 0xFC	; 252
    198e:	1f 4f       	sbci	r17, 0xFF	; 255
    1990:	3f 93       	push	r19
    1992:	2f 93       	push	r18
    1994:	9f 93       	push	r25
    1996:	8f 93       	push	r24
    1998:	2d ec       	ldi	r18, 0xCD	; 205
    199a:	36 e0       	ldi	r19, 0x06	; 6
    199c:	3f 93       	push	r19
    199e:	2f 93       	push	r18
    19a0:	3f 92       	push	r3
    19a2:	2f 92       	push	r2
    19a4:	0e 94 d0 1a 	call	0x35a0	; 0x35a0 <sprintf>
    19a8:	cc 54       	subi	r28, 0x4C	; 76
    19aa:	dd 4f       	sbci	r29, 0xFD	; 253
				UART0_putstring(measure);
    19ac:	88 81       	ld	r24, Y
    19ae:	c4 5b       	subi	r28, 0xB4	; 180
    19b0:	d2 40       	sbci	r29, 0x02	; 2
    19b2:	cb 54       	subi	r28, 0x4B	; 75
    19b4:	dd 4f       	sbci	r29, 0xFD	; 253
    19b6:	98 81       	ld	r25, Y
    19b8:	c5 5b       	subi	r28, 0xB5	; 181
    19ba:	d2 40       	sbci	r29, 0x02	; 2
    19bc:	67 d4       	rcall	.+2254   	; 0x228c <UART0_putstring>
    19be:	9f ef       	ldi	r25, 0xFF	; 255
    19c0:	69 1a       	sub	r6, r25
				i++;
    19c2:	79 0a       	sbc	r7, r25
    19c4:	f1 01       	movw	r30, r2
    19c6:	01 90       	ld	r0, Z+
				spaces2 = spacing - strlen(measure);
    19c8:	00 20       	and	r0, r0
    19ca:	e9 f7       	brne	.-6      	; 0x19c6 <Update_OBC+0x206>
    19cc:	31 97       	sbiw	r30, 0x01	; 1
    19ce:	e2 19       	sub	r30, r2
    19d0:	f3 09       	sbc	r31, r3
    19d2:	d4 01       	movw	r26, r8
    19d4:	ae 1b       	sub	r26, r30
    19d6:	bf 0b       	sbc	r27, r31
    19d8:	c0 55       	subi	r28, 0x50	; 80
    19da:	dd 4f       	sbci	r29, 0xFD	; 253
    19dc:	b9 83       	std	Y+1, r27	; 0x01
    19de:	a8 83       	st	Y, r26
    19e0:	c0 5b       	subi	r28, 0xB0	; 176
    19e2:	d2 40       	sbci	r29, 0x02	; 2
    19e4:	0f b6       	in	r0, 0x3f	; 63
    19e6:	f8 94       	cli
		// data on the next line
		if (s_incr == 6){
			UART0_putchar('\n');
			UART0_putchar('\r');
			// print values
			while(i < s_incr){
    19e8:	de bf       	out	0x3e, r29	; 62
    19ea:	0f be       	out	0x3f, r0	; 63
    19ec:	cd bf       	out	0x3d, r28	; 61
    19ee:	f6 e0       	ldi	r31, 0x06	; 6
    19f0:	6f 16       	cp	r6, r31
    19f2:	71 04       	cpc	r7, r1
    19f4:	51 f0       	breq	.+20     	; 0x1a0a <Update_OBC+0x24a>
    19f6:	c0 55       	subi	r28, 0x50	; 80
    19f8:	dd 4f       	sbci	r29, 0xFD	; 253
				while(spaces2){
    19fa:	28 81       	ld	r18, Y
    19fc:	39 81       	ldd	r19, Y+1	; 0x01
    19fe:	c0 5b       	subi	r28, 0xB0	; 176
    1a00:	d2 40       	sbci	r29, 0x02	; 2
    1a02:	23 2b       	or	r18, r19
    1a04:	09 f0       	breq	.+2      	; 0x1a08 <Update_OBC+0x248>
    1a06:	ac cf       	rjmp	.-168    	; 0x1960 <Update_OBC+0x1a0>
				sprintf(measure,"%.3f",telem[i]);
				UART0_putstring(measure);
				i++;
				spaces2 = spacing - strlen(measure);
			}
			UART0_putchar('\n');
    1a08:	bc cf       	rjmp	.-136    	; 0x1982 <Update_OBC+0x1c2>
    1a0a:	8a e0       	ldi	r24, 0x0A	; 10
    1a0c:	2f d4       	rcall	.+2142   	; 0x226c <UART0_putchar>
			UART0_putchar('\n');
    1a0e:	8a e0       	ldi	r24, 0x0A	; 10
    1a10:	2d d4       	rcall	.+2138   	; 0x226c <UART0_putchar>
    1a12:	8d e0       	ldi	r24, 0x0D	; 13
			UART0_putchar('\r');
    1a14:	2b d4       	rcall	.+2134   	; 0x226c <UART0_putchar>
    1a16:	36 e1       	ldi	r19, 0x16	; 22
    1a18:	34 9d       	mul	r19, r4
			UART0_putchar('\n');
			UART0_putchar('\r');
			section_incr++;
		}
		else if(s_incr == 6){
			UART0_putstring(sections[section_incr]);
    1a1a:	c0 01       	movw	r24, r0
    1a1c:	35 9d       	mul	r19, r5
    1a1e:	90 0d       	add	r25, r0
    1a20:	11 24       	eor	r1, r1
    1a22:	a9 e5       	ldi	r26, 0x59	; 89
    1a24:	b2 e0       	ldi	r27, 0x02	; 2
    1a26:	ac 0f       	add	r26, r28
    1a28:	bd 1f       	adc	r27, r29
    1a2a:	8a 0f       	add	r24, r26
    1a2c:	9b 1f       	adc	r25, r27
			UART0_putchar('\n');
    1a2e:	2e d4       	rcall	.+2140   	; 0x228c <UART0_putstring>
    1a30:	8a e0       	ldi	r24, 0x0A	; 10
    1a32:	1c d4       	rcall	.+2104   	; 0x226c <UART0_putchar>
			UART0_putchar('\n');
    1a34:	8a e0       	ldi	r24, 0x0A	; 10
    1a36:	1a d4       	rcall	.+2100   	; 0x226c <UART0_putchar>
    1a38:	8d e0       	ldi	r24, 0x0D	; 13
			UART0_putchar('\r');
    1a3a:	18 d4       	rcall	.+2096   	; 0x226c <UART0_putchar>
    1a3c:	bf ef       	ldi	r27, 0xFF	; 255
    1a3e:	4b 1a       	sub	r4, r27
			section_incr++;
    1a40:	5b 0a       	sbc	r5, r27
    1a42:	93 c1       	rjmp	.+806    	; 0x1d6a <Update_OBC+0x5aa>
    1a44:	e6 e1       	ldi	r30, 0x16	; 22
		}
		
		// Put the titles in normally
		// re-initialize the spaces
		if(s_incr == 0){
			UART0_putstring(sections[section_incr]);
    1a46:	e4 9d       	mul	r30, r4
    1a48:	c0 01       	movw	r24, r0
    1a4a:	e5 9d       	mul	r30, r5
    1a4c:	90 0d       	add	r25, r0
    1a4e:	11 24       	eor	r1, r1
    1a50:	29 e5       	ldi	r18, 0x59	; 89
    1a52:	32 e0       	ldi	r19, 0x02	; 2
    1a54:	2c 0f       	add	r18, r28
    1a56:	3d 1f       	adc	r19, r29
    1a58:	82 0f       	add	r24, r18
    1a5a:	93 1f       	adc	r25, r19
    1a5c:	17 d4       	rcall	.+2094   	; 0x228c <UART0_putstring>
			UART0_putchar('\n');
    1a5e:	8a e0       	ldi	r24, 0x0A	; 10
    1a60:	05 d4       	rcall	.+2058   	; 0x226c <UART0_putchar>
			UART0_putchar('\n');
    1a62:	8a e0       	ldi	r24, 0x0A	; 10
    1a64:	03 d4       	rcall	.+2054   	; 0x226c <UART0_putchar>
    1a66:	8d e0       	ldi	r24, 0x0D	; 13
			UART0_putchar('\r');
    1a68:	01 d4       	rcall	.+2050   	; 0x226c <UART0_putchar>
    1a6a:	3f ef       	ldi	r19, 0xFF	; 255
			section_incr++;
    1a6c:	43 1a       	sub	r4, r19
    1a6e:	53 0a       	sbc	r5, r19
    1a70:	01 15       	cp	r16, r1
			UART0_putchar('\n');
			UART0_putchar('\n');
			UART0_putchar('\r');
			section_incr++;
		}
		while(spaces){
    1a72:	11 05       	cpc	r17, r1
    1a74:	21 f4       	brne	.+8      	; 0x1a7e <Update_OBC+0x2be>
    1a76:	79 c1       	rjmp	.+754    	; 0x1d6a <Update_OBC+0x5aa>
    1a78:	01 15       	cp	r16, r1
    1a7a:	11 05       	cpc	r17, r1
    1a7c:	29 f0       	breq	.+10     	; 0x1a88 <Update_OBC+0x2c8>
    1a7e:	80 e2       	ldi	r24, 0x20	; 32
			UART0_putchar(' ');
    1a80:	f5 d3       	rcall	.+2026   	; 0x226c <UART0_putchar>
    1a82:	01 50       	subi	r16, 0x01	; 1
    1a84:	11 09       	sbc	r17, r1
			spaces--;
    1a86:	d9 f7       	brne	.-10     	; 0x1a7e <Update_OBC+0x2be>
			UART0_putchar('\n');
			UART0_putchar('\n');
			UART0_putchar('\r');
			section_incr++;
		}
		while(spaces){
    1a88:	c7 01       	movw	r24, r14
			UART0_putchar(' ');
			spaces--;
		}
		UART0_putstring(sensors[s_incr]);
    1a8a:	00 d4       	rcall	.+2048   	; 0x228c <UART0_putstring>
    1a8c:	f7 01       	movw	r30, r14
		s_incr++;
		spaces = spacing - strlen(sensors[s_incr - 1]);
    1a8e:	01 90       	ld	r0, Z+
    1a90:	00 20       	and	r0, r0
    1a92:	e9 f7       	brne	.-6      	; 0x1a8e <Update_OBC+0x2ce>
    1a94:	31 97       	sbiw	r30, 0x01	; 1
    1a96:	ee 19       	sub	r30, r14
    1a98:	ff 09       	sbc	r31, r15
    1a9a:	84 01       	movw	r16, r8
    1a9c:	0e 1b       	sub	r16, r30
    1a9e:	1f 0b       	sbc	r17, r31
    1aa0:	8c e0       	ldi	r24, 0x0C	; 12
		
		// Print the second round of telemetry data
		if (s_incr == 12){
    1aa2:	a8 16       	cp	r10, r24
    1aa4:	b1 04       	cpc	r11, r1
    1aa6:	09 f0       	breq	.+2      	; 0x1aaa <Update_OBC+0x2ea>
    1aa8:	5f c0       	rjmp	.+190    	; 0x1b68 <Update_OBC+0x3a8>
    1aaa:	8a e0       	ldi	r24, 0x0A	; 10
			spaces2 = 0; // re-initialize spaces to 0
			UART0_putchar('\n');
    1aac:	df d3       	rcall	.+1982   	; 0x226c <UART0_putchar>
    1aae:	8d e0       	ldi	r24, 0x0D	; 13
    1ab0:	dd d3       	rcall	.+1978   	; 0x226c <UART0_putchar>
			UART0_putchar('\r');
    1ab2:	9c e0       	ldi	r25, 0x0C	; 12
    1ab4:	69 16       	cp	r6, r25
    1ab6:	71 04       	cpc	r7, r1
			// print values
			while(i < s_incr){
    1ab8:	0c f0       	brlt	.+2      	; 0x1abc <Update_OBC+0x2fc>
    1aba:	64 c0       	rjmp	.+200    	; 0x1b84 <Update_OBC+0x3c4>
    1abc:	83 01       	movw	r16, r6
    1abe:	00 0f       	add	r16, r16
    1ac0:	11 1f       	adc	r17, r17
    1ac2:	00 0f       	add	r16, r16
    1ac4:	11 1f       	adc	r17, r17
    1ac6:	ce 54       	subi	r28, 0x4E	; 78
    1ac8:	dd 4f       	sbci	r29, 0xFD	; 253
    1aca:	a8 81       	ld	r26, Y
    1acc:	b9 81       	ldd	r27, Y+1	; 0x01
    1ace:	c2 5b       	subi	r28, 0xB2	; 178
    1ad0:	d2 40       	sbci	r29, 0x02	; 2
    1ad2:	0a 0f       	add	r16, r26
    1ad4:	1b 1f       	adc	r17, r27
    1ad6:	0f 2e       	mov	r0, r31
    1ad8:	f2 ed       	ldi	r31, 0xD2	; 210
				while(spaces2){
					UART0_putchar(' ');
					spaces2--;
				}
				sprintf(measure,"%.2f",telem[i]);
    1ada:	af 2e       	mov	r10, r31
    1adc:	f6 e0       	ldi	r31, 0x06	; 6
    1ade:	bf 2e       	mov	r11, r31
    1ae0:	f0 2d       	mov	r31, r0
    1ae2:	7e 01       	movw	r14, r28
    1ae4:	b5 e6       	ldi	r27, 0x65	; 101
    1ae6:	eb 1a       	sub	r14, r27
    1ae8:	bd ef       	ldi	r27, 0xFD	; 253
    1aea:	fb 0a       	sbc	r15, r27
    1aec:	0f 2e       	mov	r0, r31
    1aee:	f4 e1       	ldi	r31, 0x14	; 20
				UART0_putstring(measure);
				i++;
				spaces2 = spacing - strlen(measure);
    1af0:	8f 2e       	mov	r8, r31
    1af2:	91 2c       	mov	r9, r1
    1af4:	f0 2d       	mov	r31, r0
    1af6:	06 c0       	rjmp	.+12     	; 0x1b04 <Update_OBC+0x344>
    1af8:	80 e2       	ldi	r24, 0x20	; 32
    1afa:	b8 d3       	rcall	.+1904   	; 0x226c <UART0_putchar>
			UART0_putchar('\n');
			UART0_putchar('\r');
			// print values
			while(i < s_incr){
				while(spaces2){
					UART0_putchar(' ');
    1afc:	e1 e0       	ldi	r30, 0x01	; 1
    1afe:	ce 1a       	sub	r12, r30
    1b00:	d1 08       	sbc	r13, r1
					spaces2--;
    1b02:	d1 f7       	brne	.-12     	; 0x1af8 <Update_OBC+0x338>
    1b04:	d8 01       	movw	r26, r16
    1b06:	8c 91       	ld	r24, X
				}
				sprintf(measure,"%.2f",telem[i]);
    1b08:	11 96       	adiw	r26, 0x01	; 1
    1b0a:	9c 91       	ld	r25, X
    1b0c:	11 97       	sbiw	r26, 0x01	; 1
    1b0e:	12 96       	adiw	r26, 0x02	; 2
    1b10:	2c 91       	ld	r18, X
    1b12:	12 97       	sbiw	r26, 0x02	; 2
    1b14:	13 96       	adiw	r26, 0x03	; 3
    1b16:	3c 91       	ld	r19, X
    1b18:	0c 5f       	subi	r16, 0xFC	; 252
    1b1a:	1f 4f       	sbci	r17, 0xFF	; 255
    1b1c:	3f 93       	push	r19
    1b1e:	2f 93       	push	r18
    1b20:	9f 93       	push	r25
    1b22:	8f 93       	push	r24
    1b24:	bf 92       	push	r11
    1b26:	af 92       	push	r10
    1b28:	ff 92       	push	r15
    1b2a:	ef 92       	push	r14
    1b2c:	0e 94 d0 1a 	call	0x35a0	; 0x35a0 <sprintf>
    1b30:	c7 01       	movw	r24, r14
    1b32:	ac d3       	rcall	.+1880   	; 0x228c <UART0_putstring>
				UART0_putstring(measure);
    1b34:	bf ef       	ldi	r27, 0xFF	; 255
    1b36:	6b 1a       	sub	r6, r27
    1b38:	7b 0a       	sbc	r7, r27
				i++;
    1b3a:	f7 01       	movw	r30, r14
    1b3c:	01 90       	ld	r0, Z+
    1b3e:	00 20       	and	r0, r0
				spaces2 = spacing - strlen(measure);
    1b40:	e9 f7       	brne	.-6      	; 0x1b3c <Update_OBC+0x37c>
    1b42:	31 97       	sbiw	r30, 0x01	; 1
    1b44:	ee 19       	sub	r30, r14
    1b46:	ff 09       	sbc	r31, r15
    1b48:	64 01       	movw	r12, r8
    1b4a:	ce 1a       	sub	r12, r30
    1b4c:	df 0a       	sbc	r13, r31
    1b4e:	0f b6       	in	r0, 0x3f	; 63
    1b50:	f8 94       	cli
    1b52:	de bf       	out	0x3e, r29	; 62
		if (s_incr == 12){
			spaces2 = 0; // re-initialize spaces to 0
			UART0_putchar('\n');
			UART0_putchar('\r');
			// print values
			while(i < s_incr){
    1b54:	0f be       	out	0x3f, r0	; 63
    1b56:	cd bf       	out	0x3d, r28	; 61
    1b58:	fc e0       	ldi	r31, 0x0C	; 12
    1b5a:	6f 16       	cp	r6, r31
    1b5c:	71 04       	cpc	r7, r1
    1b5e:	91 f0       	breq	.+36     	; 0x1b84 <Update_OBC+0x3c4>
    1b60:	c1 14       	cp	r12, r1
				while(spaces2){
    1b62:	d1 04       	cpc	r13, r1
    1b64:	49 f6       	brne	.-110    	; 0x1af8 <Update_OBC+0x338>
    1b66:	ce cf       	rjmp	.-100    	; 0x1b04 <Update_OBC+0x344>
    1b68:	2f ef       	ldi	r18, 0xFF	; 255
    1b6a:	c2 1a       	sub	r12, r18
    1b6c:	d2 0a       	sbc	r13, r18
    1b6e:	3f ef       	ldi	r19, 0xFF	; 255
    1b70:	a3 1a       	sub	r10, r19
    1b72:	b3 0a       	sbc	r11, r19
    1b74:	84 e1       	ldi	r24, 0x14	; 20
    1b76:	e8 0e       	add	r14, r24
    1b78:	f1 1c       	adc	r15, r1
	int i = 0; // increment for telemetry (0 to 6, then 6 to 12)
	char measure[10]; // used for sprintf
	int section_incr = 0; // used for the section titles
	
	// Print the telemetry information
	while (s_incr < 12){
    1b7a:	9c e0       	ldi	r25, 0x0C	; 12
    1b7c:	c9 16       	cp	r12, r25
    1b7e:	d1 04       	cpc	r13, r1
	}
	
	
	// Print the Load Titles
	spaces = 0; // re initialize spaces
	UART0_putchar('\n');
    1b80:	09 f0       	breq	.+2      	; 0x1b84 <Update_OBC+0x3c4>
    1b82:	d1 ce       	rjmp	.-606    	; 0x1926 <Update_OBC+0x166>
    1b84:	8a e0       	ldi	r24, 0x0A	; 10
	UART0_putchar('\n');
    1b86:	72 d3       	rcall	.+1764   	; 0x226c <UART0_putchar>
    1b88:	8a e0       	ldi	r24, 0x0A	; 10
    1b8a:	70 d3       	rcall	.+1760   	; 0x226c <UART0_putchar>
	UART0_putchar('\r');
    1b8c:	8d e0       	ldi	r24, 0x0D	; 13
    1b8e:	6e d3       	rcall	.+1756   	; 0x226c <UART0_putchar>
    1b90:	26 e1       	ldi	r18, 0x16	; 22
	UART0_putstring(sections[section_incr]);
    1b92:	24 9d       	mul	r18, r4
    1b94:	c0 01       	movw	r24, r0
    1b96:	25 9d       	mul	r18, r5
    1b98:	90 0d       	add	r25, r0
    1b9a:	11 24       	eor	r1, r1
    1b9c:	a9 e5       	ldi	r26, 0x59	; 89
    1b9e:	b2 e0       	ldi	r27, 0x02	; 2
    1ba0:	ac 0f       	add	r26, r28
    1ba2:	bd 1f       	adc	r27, r29
    1ba4:	8a 0f       	add	r24, r26
    1ba6:	9b 1f       	adc	r25, r27
    1ba8:	71 d3       	rcall	.+1762   	; 0x228c <UART0_putstring>
    1baa:	8a e0       	ldi	r24, 0x0A	; 10
	UART0_putchar('\n');
    1bac:	5f d3       	rcall	.+1726   	; 0x226c <UART0_putchar>
    1bae:	8a e0       	ldi	r24, 0x0A	; 10
	UART0_putchar('\n');
    1bb0:	5d d3       	rcall	.+1722   	; 0x226c <UART0_putchar>
    1bb2:	8d e0       	ldi	r24, 0x0D	; 13
    1bb4:	5b d3       	rcall	.+1718   	; 0x226c <UART0_putchar>
	UART0_putchar('\r');
    1bb6:	8e 01       	movw	r16, r28
    1bb8:	07 53       	subi	r16, 0x37	; 55
    1bba:	1f 4f       	sbci	r17, 0xFF	; 255
    1bbc:	6e 01       	movw	r12, r28
    1bbe:	bb ea       	ldi	r27, 0xAB	; 171
    1bc0:	cb 1a       	sub	r12, r27
    1bc2:	be ef       	ldi	r27, 0xFE	; 254
    1bc4:	db 0a       	sbc	r13, r27
    1bc6:	0f 2e       	mov	r0, r31
    1bc8:	f4 e1       	ldi	r31, 0x14	; 20
    1bca:	ef 2e       	mov	r14, r31
			UART0_putchar(' ');
			spaces--;
		}
		UART0_putstring(loads[l_incr]);
		l_incr++;
		spaces = spacing - strlen(loads[l_incr - 1]);
    1bcc:	f1 2c       	mov	r15, r1
    1bce:	f0 2d       	mov	r31, r0
    1bd0:	08 c0       	rjmp	.+16     	; 0x1be2 <Update_OBC+0x422>
    1bd2:	80 e2       	ldi	r24, 0x20	; 32
	UART0_putchar('\n');
	UART0_putchar('\n');
	UART0_putchar('\r');
	while(l_incr < 8){
		while(spaces){
			UART0_putchar(' ');
    1bd4:	4b d3       	rcall	.+1686   	; 0x226c <UART0_putchar>
    1bd6:	e1 e0       	ldi	r30, 0x01	; 1
    1bd8:	ae 1a       	sub	r10, r30
			spaces--;
    1bda:	b1 08       	sbc	r11, r1
    1bdc:	d1 f7       	brne	.-12     	; 0x1bd2 <Update_OBC+0x412>
    1bde:	0c 5e       	subi	r16, 0xEC	; 236
	UART0_putstring(sections[section_incr]);
	UART0_putchar('\n');
	UART0_putchar('\n');
	UART0_putchar('\r');
	while(l_incr < 8){
		while(spaces){
    1be0:	1f 4f       	sbci	r17, 0xFF	; 255
    1be2:	c8 01       	movw	r24, r16
    1be4:	53 d3       	rcall	.+1702   	; 0x228c <UART0_putstring>
			UART0_putchar(' ');
			spaces--;
		}
		UART0_putstring(loads[l_incr]);
    1be6:	f8 01       	movw	r30, r16
    1be8:	01 90       	ld	r0, Z+
		l_incr++;
		spaces = spacing - strlen(loads[l_incr - 1]);
    1bea:	00 20       	and	r0, r0
    1bec:	e9 f7       	brne	.-6      	; 0x1be8 <Update_OBC+0x428>
    1bee:	31 97       	sbiw	r30, 0x01	; 1
    1bf0:	e0 1b       	sub	r30, r16
    1bf2:	f1 0b       	sbc	r31, r17
    1bf4:	57 01       	movw	r10, r14
    1bf6:	ae 1a       	sub	r10, r30
    1bf8:	bf 0a       	sbc	r11, r31
    1bfa:	c0 16       	cp	r12, r16
    1bfc:	d1 06       	cpc	r13, r17
	UART0_putchar('\r');
	UART0_putstring(sections[section_incr]);
	UART0_putchar('\n');
	UART0_putchar('\n');
	UART0_putchar('\r');
	while(l_incr < 8){
    1bfe:	21 f0       	breq	.+8      	; 0x1c08 <Update_OBC+0x448>
    1c00:	a1 14       	cp	r10, r1
		while(spaces){
    1c02:	b1 04       	cpc	r11, r1
    1c04:	31 f7       	brne	.-52     	; 0x1bd2 <Update_OBC+0x412>
    1c06:	eb cf       	rjmp	.-42     	; 0x1bde <Update_OBC+0x41e>
    1c08:	8a e0       	ldi	r24, 0x0A	; 10
	
	// Print the load states
	// Print the Load Titles
	l_incr = 0; // reset load increment to 0
	spaces = 0; // re initialize spaces
	UART0_putchar('\n');
    1c0a:	30 d3       	rcall	.+1632   	; 0x226c <UART0_putchar>
    1c0c:	8d e0       	ldi	r24, 0x0D	; 13
    1c0e:	2e d3       	rcall	.+1628   	; 0x226c <UART0_putchar>
	UART0_putchar('\r');
    1c10:	c6 55       	subi	r28, 0x56	; 86
    1c12:	dd 4f       	sbci	r29, 0xFD	; 253
    1c14:	08 81       	ld	r16, Y
    1c16:	19 81       	ldd	r17, Y+1	; 0x01
    1c18:	ca 5a       	subi	r28, 0xAA	; 170
    1c1a:	d2 40       	sbci	r29, 0x02	; 2
    1c1c:	38 01       	movw	r6, r16
    1c1e:	f8 e0       	ldi	r31, 0x08	; 8
    1c20:	6f 0e       	add	r6, r31
    1c22:	71 1c       	adc	r7, r1
    1c24:	06 c0       	rjmp	.+12     	; 0x1c32 <Update_OBC+0x472>
    1c26:	80 e2       	ldi	r24, 0x20	; 32
	while(l_incr < 8){
		while(spaces){
			UART0_putchar(' ');
    1c28:	21 d3       	rcall	.+1602   	; 0x226c <UART0_putchar>
    1c2a:	21 e0       	ldi	r18, 0x01	; 1
			spaces--;
    1c2c:	e2 1a       	sub	r14, r18
    1c2e:	f1 08       	sbc	r15, r1
	l_incr = 0; // reset load increment to 0
	spaces = 0; // re initialize spaces
	UART0_putchar('\n');
	UART0_putchar('\r');
	while(l_incr < 8){
		while(spaces){
    1c30:	d1 f7       	brne	.-12     	; 0x1c26 <Update_OBC+0x466>
			UART0_putchar(' ');
			spaces--;
		}
		if(power[l_incr] == 'y'){
    1c32:	d8 01       	movw	r26, r16
    1c34:	8d 91       	ld	r24, X+
    1c36:	8d 01       	movw	r16, r26
    1c38:	89 37       	cpi	r24, 0x79	; 121
			UART0_putstring("ON");
    1c3a:	49 f4       	brne	.+18     	; 0x1c4e <Update_OBC+0x48e>
    1c3c:	87 ed       	ldi	r24, 0xD7	; 215
    1c3e:	96 e0       	ldi	r25, 0x06	; 6
    1c40:	25 d3       	rcall	.+1610   	; 0x228c <UART0_putstring>
			spaces = spacing - 2;			
    1c42:	0f 2e       	mov	r0, r31
    1c44:	f2 e1       	ldi	r31, 0x12	; 18
    1c46:	ef 2e       	mov	r14, r31
    1c48:	f1 2c       	mov	r15, r1
    1c4a:	f0 2d       	mov	r31, r0
		}
		else{
			UART0_putstring("OFF");
    1c4c:	08 c0       	rjmp	.+16     	; 0x1c5e <Update_OBC+0x49e>
    1c4e:	8a ed       	ldi	r24, 0xDA	; 218
    1c50:	96 e0       	ldi	r25, 0x06	; 6
    1c52:	1c d3       	rcall	.+1592   	; 0x228c <UART0_putstring>
			spaces = spacing - 3;
    1c54:	0f 2e       	mov	r0, r31
    1c56:	f1 e1       	ldi	r31, 0x11	; 17
    1c58:	ef 2e       	mov	r14, r31
    1c5a:	f1 2c       	mov	r15, r1
    1c5c:	f0 2d       	mov	r31, r0
	// Print the Load Titles
	l_incr = 0; // reset load increment to 0
	spaces = 0; // re initialize spaces
	UART0_putchar('\n');
	UART0_putchar('\r');
	while(l_incr < 8){
    1c5e:	60 16       	cp	r6, r16
    1c60:	71 06       	cpc	r7, r17
    1c62:	09 f7       	brne	.-62     	; 0x1c26 <Update_OBC+0x466>
			UART0_putstring("OFF");
			spaces = spacing - 3;
		}
		l_incr++;
	}
	UART0_putchar('\n');
    1c64:	8a e0       	ldi	r24, 0x0A	; 10
    1c66:	02 d3       	rcall	.+1540   	; 0x226c <UART0_putchar>
    1c68:	8a e0       	ldi	r24, 0x0A	; 10
	UART0_putchar('\n');
    1c6a:	00 d3       	rcall	.+1536   	; 0x226c <UART0_putchar>
    1c6c:	8d e0       	ldi	r24, 0x0D	; 13
	UART0_putchar('\r');
    1c6e:	fe d2       	rcall	.+1532   	; 0x226c <UART0_putchar>
    1c70:	8e ed       	ldi	r24, 0xDE	; 222
    1c72:	96 e0       	ldi	r25, 0x06	; 6
	
	// Print the State Number
	char state[5]; // character array for sprintf()
	UART0_putstring("STATE #");
    1c74:	0b d3       	rcall	.+1558   	; 0x228c <UART0_putstring>
    1c76:	8a e0       	ldi	r24, 0x0A	; 10
    1c78:	f9 d2       	rcall	.+1522   	; 0x226c <UART0_putchar>
	UART0_putchar('\n');
    1c7a:	8d e0       	ldi	r24, 0x0D	; 13
    1c7c:	f7 d2       	rcall	.+1518   	; 0x226c <UART0_putchar>
	UART0_putchar('\r');
    1c7e:	c4 55       	subi	r28, 0x54	; 84
    1c80:	dd 4f       	sbci	r29, 0xFD	; 253
	if(state_num == 'M'){
    1c82:	b8 81       	ld	r27, Y
    1c84:	cc 5a       	subi	r28, 0xAC	; 172
    1c86:	d2 40       	sbci	r29, 0x02	; 2
    1c88:	bd 34       	cpi	r27, 0x4D	; 77
    1c8a:	19 f4       	brne	.+6      	; 0x1c92 <Update_OBC+0x4d2>
		UART0_putchar('M');
    1c8c:	8d e4       	ldi	r24, 0x4D	; 77
    1c8e:	ee d2       	rcall	.+1500   	; 0x226c <UART0_putchar>
    1c90:	1a c0       	rjmp	.+52     	; 0x1cc6 <Update_OBC+0x506>
    1c92:	1f 92       	push	r1
	}
	else{
		sprintf(state,"%d",state_num);
    1c94:	c4 55       	subi	r28, 0x54	; 84
    1c96:	dd 4f       	sbci	r29, 0xFD	; 253
    1c98:	e8 81       	ld	r30, Y
    1c9a:	cc 5a       	subi	r28, 0xAC	; 172
    1c9c:	d2 40       	sbci	r29, 0x02	; 2
    1c9e:	ef 93       	push	r30
    1ca0:	86 ee       	ldi	r24, 0xE6	; 230
    1ca2:	96 e0       	ldi	r25, 0x06	; 6
    1ca4:	9f 93       	push	r25
    1ca6:	8f 93       	push	r24
    1ca8:	8e 01       	movw	r16, r28
    1caa:	0b 55       	subi	r16, 0x5B	; 91
    1cac:	1d 4f       	sbci	r17, 0xFD	; 253
    1cae:	1f 93       	push	r17
    1cb0:	0f 93       	push	r16
    1cb2:	0e 94 d0 1a 	call	0x35a0	; 0x35a0 <sprintf>
		UART0_putstring(state);
    1cb6:	c8 01       	movw	r24, r16
    1cb8:	e9 d2       	rcall	.+1490   	; 0x228c <UART0_putstring>
    1cba:	0f 90       	pop	r0
    1cbc:	0f 90       	pop	r0
    1cbe:	0f 90       	pop	r0
    1cc0:	0f 90       	pop	r0
	}
	UART0_putchar('\n');
    1cc2:	0f 90       	pop	r0
    1cc4:	0f 90       	pop	r0
	UART0_putchar('\n');
    1cc6:	8a e0       	ldi	r24, 0x0A	; 10
    1cc8:	d1 d2       	rcall	.+1442   	; 0x226c <UART0_putchar>
	UART0_putchar('\r');
    1cca:	8a e0       	ldi	r24, 0x0A	; 10
    1ccc:	cf d2       	rcall	.+1438   	; 0x226c <UART0_putchar>
    1cce:	8d e0       	ldi	r24, 0x0D	; 13
	
	// Print the State of Charge
	// re-use state from above
	UART0_putstring("STATE OF CHARGE");
    1cd0:	cd d2       	rcall	.+1434   	; 0x226c <UART0_putchar>
    1cd2:	89 ee       	ldi	r24, 0xE9	; 233
    1cd4:	96 e0       	ldi	r25, 0x06	; 6
    1cd6:	da d2       	rcall	.+1460   	; 0x228c <UART0_putstring>
	UART0_putchar('\n');
    1cd8:	8a e0       	ldi	r24, 0x0A	; 10
    1cda:	c8 d2       	rcall	.+1424   	; 0x226c <UART0_putchar>
    1cdc:	8d e0       	ldi	r24, 0x0D	; 13
	UART0_putchar('\r');
    1cde:	c6 d2       	rcall	.+1420   	; 0x226c <UART0_putchar>
    1ce0:	c1 55       	subi	r28, 0x51	; 81
    1ce2:	dd 4f       	sbci	r29, 0xFD	; 253
	sprintf(state,"%d",soc);
    1ce4:	f8 81       	ld	r31, Y
    1ce6:	cf 5a       	subi	r28, 0xAF	; 175
    1ce8:	d2 40       	sbci	r29, 0x02	; 2
    1cea:	ff 93       	push	r31
    1cec:	c2 55       	subi	r28, 0x52	; 82
    1cee:	dd 4f       	sbci	r29, 0xFD	; 253
    1cf0:	28 81       	ld	r18, Y
    1cf2:	ce 5a       	subi	r28, 0xAE	; 174
    1cf4:	d2 40       	sbci	r29, 0x02	; 2
    1cf6:	2f 93       	push	r18
    1cf8:	86 ee       	ldi	r24, 0xE6	; 230
    1cfa:	96 e0       	ldi	r25, 0x06	; 6
    1cfc:	9f 93       	push	r25
    1cfe:	8f 93       	push	r24
    1d00:	8e 01       	movw	r16, r28
    1d02:	0b 55       	subi	r16, 0x5B	; 91
    1d04:	1d 4f       	sbci	r17, 0xFD	; 253
	UART0_putstring(state);
    1d06:	1f 93       	push	r17
    1d08:	0f 93       	push	r16
    1d0a:	0e 94 d0 1a 	call	0x35a0	; 0x35a0 <sprintf>
	UART0_putchar('\n');
    1d0e:	c8 01       	movw	r24, r16
    1d10:	bd d2       	rcall	.+1402   	; 0x228c <UART0_putstring>
	UART0_putchar('\n');
    1d12:	8a e0       	ldi	r24, 0x0A	; 10
    1d14:	ab d2       	rcall	.+1366   	; 0x226c <UART0_putchar>
    1d16:	8a e0       	ldi	r24, 0x0A	; 10
	UART0_putchar('\r');
    1d18:	a9 d2       	rcall	.+1362   	; 0x226c <UART0_putchar>
    1d1a:	8d e0       	ldi	r24, 0x0D	; 13
    1d1c:	a7 d2       	rcall	.+1358   	; 0x226c <UART0_putchar>
	
	
	// Print the mode of operation (auto/manual)
	UART0_putstring("MODE");
    1d1e:	89 ef       	ldi	r24, 0xF9	; 249
    1d20:	96 e0       	ldi	r25, 0x06	; 6
    1d22:	b4 d2       	rcall	.+1384   	; 0x228c <UART0_putstring>
    1d24:	8a e0       	ldi	r24, 0x0A	; 10
	UART0_putchar('\n');
    1d26:	a2 d2       	rcall	.+1348   	; 0x226c <UART0_putchar>
    1d28:	8d e0       	ldi	r24, 0x0D	; 13
    1d2a:	a0 d2       	rcall	.+1344   	; 0x226c <UART0_putchar>
	UART0_putchar('\r');
    1d2c:	0f 90       	pop	r0
    1d2e:	0f 90       	pop	r0
    1d30:	0f 90       	pop	r0
	if(mode){
    1d32:	0f 90       	pop	r0
    1d34:	0f 90       	pop	r0
    1d36:	0f 90       	pop	r0
    1d38:	c3 55       	subi	r28, 0x53	; 83
    1d3a:	dd 4f       	sbci	r29, 0xFD	; 253
    1d3c:	38 81       	ld	r19, Y
    1d3e:	cd 5a       	subi	r28, 0xAD	; 173
    1d40:	d2 40       	sbci	r29, 0x02	; 2
    1d42:	33 23       	and	r19, r19
    1d44:	21 f0       	breq	.+8      	; 0x1d4e <Update_OBC+0x58e>
    1d46:	8e ef       	ldi	r24, 0xFE	; 254
    1d48:	96 e0       	ldi	r25, 0x06	; 6
    1d4a:	a0 d2       	rcall	.+1344   	; 0x228c <UART0_putstring>
		UART0_putstring("Autonomous");
    1d4c:	03 c0       	rjmp	.+6      	; 0x1d54 <Update_OBC+0x594>
    1d4e:	89 e0       	ldi	r24, 0x09	; 9
    1d50:	97 e0       	ldi	r25, 0x07	; 7
    1d52:	9c d2       	rcall	.+1336   	; 0x228c <UART0_putstring>
    1d54:	8a e0       	ldi	r24, 0x0A	; 10
	}
	else{
		UART0_putstring("Manual");
    1d56:	8a d2       	rcall	.+1300   	; 0x226c <UART0_putchar>
    1d58:	8a e0       	ldi	r24, 0x0A	; 10
    1d5a:	88 d2       	rcall	.+1296   	; 0x226c <UART0_putchar>
    1d5c:	8d e0       	ldi	r24, 0x0D	; 13
	}
	UART0_putchar('\n');
    1d5e:	86 d2       	rcall	.+1292   	; 0x226c <UART0_putchar>
    1d60:	11 c0       	rjmp	.+34     	; 0x1d84 <Update_OBC+0x5c4>
    1d62:	89 2b       	or	r24, r25
	UART0_putchar('\n');
    1d64:	09 f0       	breq	.+2      	; 0x1d68 <Update_OBC+0x5a8>
    1d66:	88 ce       	rjmp	.-752    	; 0x1a78 <Update_OBC+0x2b8>
    1d68:	6d ce       	rjmp	.-806    	; 0x1a44 <Update_OBC+0x284>
	UART0_putchar('\r');
    1d6a:	c7 01       	movw	r24, r14
    1d6c:	8f d2       	rcall	.+1310   	; 0x228c <UART0_putstring>
    1d6e:	f7 01       	movw	r30, r14
}
    1d70:	01 90       	ld	r0, Z+
			spaces = 0; // reset for next line of titles
		}
		
		// Put the titles in normally
		// re-initialize the spaces
		if(s_incr == 0){
    1d72:	00 20       	and	r0, r0
    1d74:	e9 f7       	brne	.-6      	; 0x1d70 <Update_OBC+0x5b0>
    1d76:	31 97       	sbiw	r30, 0x01	; 1
    1d78:	ee 19       	sub	r30, r14
		}
		while(spaces){
			UART0_putchar(' ');
			spaces--;
		}
		UART0_putstring(sensors[s_incr]);
    1d7a:	ff 09       	sbc	r31, r15
    1d7c:	84 01       	movw	r16, r8
    1d7e:	0e 1b       	sub	r16, r30
		s_incr++;
		spaces = spacing - strlen(sensors[s_incr - 1]);
    1d80:	1f 0b       	sbc	r17, r31
    1d82:	f2 ce       	rjmp	.-540    	; 0x1b68 <Update_OBC+0x3a8>
    1d84:	cb 54       	subi	r28, 0x4B	; 75
    1d86:	dd 4f       	sbci	r29, 0xFD	; 253
    1d88:	0f b6       	in	r0, 0x3f	; 63
    1d8a:	f8 94       	cli
    1d8c:	de bf       	out	0x3e, r29	; 62
    1d8e:	0f be       	out	0x3f, r0	; 63
    1d90:	cd bf       	out	0x3d, r28	; 61
    1d92:	df 91       	pop	r29
    1d94:	cf 91       	pop	r28
		UART0_putstring("Manual");
	}
	UART0_putchar('\n');
	UART0_putchar('\n');
	UART0_putchar('\r');
}
    1d96:	1f 91       	pop	r17
    1d98:	0f 91       	pop	r16
    1d9a:	ff 90       	pop	r15
    1d9c:	ef 90       	pop	r14
    1d9e:	df 90       	pop	r13
    1da0:	cf 90       	pop	r12
    1da2:	bf 90       	pop	r11
    1da4:	af 90       	pop	r10
    1da6:	9f 90       	pop	r9
    1da8:	8f 90       	pop	r8
    1daa:	7f 90       	pop	r7
    1dac:	6f 90       	pop	r6
    1dae:	5f 90       	pop	r5
    1db0:	4f 90       	pop	r4
    1db2:	3f 90       	pop	r3
    1db4:	2f 90       	pop	r2
    1db6:	08 95       	ret

00001db8 <Manual_RESET>:
    1db8:	61 e0       	ldi	r22, 0x01	; 1
    1dba:	70 e0       	ldi	r23, 0x00	; 0
    1dbc:	8f ef       	ldi	r24, 0xFF	; 255
    1dbe:	af db       	rcall	.-2210   	; 0x151e <EEPROM_Write>
    1dc0:	a8 95       	wdr
    1dc2:	81 e0       	ldi	r24, 0x01	; 1
    1dc4:	b6 d2       	rcall	.+1388   	; 0x2332 <wdt_enable>
    1dc6:	80 e0       	ldi	r24, 0x00	; 0
    1dc8:	90 c2       	rjmp	.+1312   	; 0x22ea <wdt_set_timeout_period>
	
	// Set the watchdog to System Reset Mode
	wdt_enable(SYSTEM_RESET_MODE);
	
	// Change the tiemout period to 1.0s			 
	wdt_set_timeout_period(WDT_TIMEOUT_PERIOD_2KCLK); // timeout set from 1024k to 128k
    1dca:	08 95       	ret

00001dcc <commandDecode>:
    1dcc:	2f 92       	push	r2
// Date: 2019-03-17
// Description: Decodes commands from the OBC and calls their corresponding function.		
/*========================================================================================*/
void commandDecode (double* telem, uint8_t* mode, uint8_t* power_state,
					char* power, uint8_t* pwrMat, uint8_t state_num, 
					uint8_t* edit_num, uint8_t* demo, int soc){
    1dce:	3f 92       	push	r3
    1dd0:	4f 92       	push	r4
    1dd2:	5f 92       	push	r5
    1dd4:	6f 92       	push	r6
    1dd6:	7f 92       	push	r7
    1dd8:	8f 92       	push	r8
    1dda:	9f 92       	push	r9
    1ddc:	af 92       	push	r10
    1dde:	bf 92       	push	r11
    1de0:	cf 92       	push	r12
    1de2:	df 92       	push	r13
    1de4:	ef 92       	push	r14
    1de6:	ff 92       	push	r15
    1de8:	0f 93       	push	r16
    1dea:	1f 93       	push	r17
    1dec:	cf 93       	push	r28
    1dee:	df 93       	push	r29
    1df0:	cd b7       	in	r28, 0x3d	; 61
    1df2:	de b7       	in	r29, 0x3e	; 62
    1df4:	ca 5b       	subi	r28, 0xBA	; 186
    1df6:	d1 09       	sbc	r29, r1
    1df8:	0f b6       	in	r0, 0x3f	; 63
    1dfa:	f8 94       	cli
    1dfc:	de bf       	out	0x3e, r29	; 62
    1dfe:	0f be       	out	0x3f, r0	; 63
    1e00:	cd bf       	out	0x3d, r28	; 61
    1e02:	cb 54       	subi	r28, 0x4B	; 75
    1e04:	df 4f       	sbci	r29, 0xFF	; 255
    1e06:	99 83       	std	Y+1, r25	; 0x01
    1e08:	88 83       	st	Y, r24
    1e0a:	c5 5b       	subi	r28, 0xB5	; 181
    1e0c:	d0 40       	sbci	r29, 0x00	; 0
    1e0e:	2b 01       	movw	r4, r22
    1e10:	1a 01       	movw	r2, r20
    1e12:	39 01       	movw	r6, r18
    1e14:	c9 54       	subi	r28, 0x49	; 73
    1e16:	df 4f       	sbci	r29, 0xFF	; 255
    1e18:	19 83       	std	Y+1, r17	; 0x01
    1e1a:	08 83       	st	Y, r16
    1e1c:	c7 5b       	subi	r28, 0xB7	; 183
    1e1e:	d0 40       	sbci	r29, 0x00	; 0
    1e20:	c7 54       	subi	r28, 0x47	; 71
    1e22:	df 4f       	sbci	r29, 0xFF	; 255
    1e24:	d9 82       	std	Y+1, r13	; 0x01
    1e26:	c8 82       	st	Y, r12
    1e28:	c9 5b       	subi	r28, 0xB9	; 185
    1e2a:	d0 40       	sbci	r29, 0x00	; 0
	
	// Erase the first echoed letter
	UART0_putchar('\b'); // ascii code for backspace
    1e2c:	88 e0       	ldi	r24, 0x08	; 8
    1e2e:	1e d2       	rcall	.+1084   	; 0x226c <UART0_putchar>
	
	// List of OBC Commands
	// OBC Commands
	char obc_command[9][20] = {"TelemRqt", "SubSysRqt",
    1e30:	8e 01       	movw	r16, r28
    1e32:	0f 5f       	subi	r16, 0xFF	; 255
    1e34:	1f 4f       	sbci	r17, 0xFF	; 255
    1e36:	84 eb       	ldi	r24, 0xB4	; 180
    1e38:	d8 01       	movw	r26, r16
    1e3a:	1d 92       	st	X+, r1
    1e3c:	8a 95       	dec	r24
    1e3e:	e9 f7       	brne	.-6      	; 0x1e3a <commandDecode+0x6e>
    1e40:	89 e0       	ldi	r24, 0x09	; 9
    1e42:	e4 eb       	ldi	r30, 0xB4	; 180
    1e44:	f4 e0       	ldi	r31, 0x04	; 4
    1e46:	d8 01       	movw	r26, r16
    1e48:	01 90       	ld	r0, Z+
    1e4a:	0d 92       	st	X+, r0
    1e4c:	8a 95       	dec	r24
    1e4e:	e1 f7       	brne	.-8      	; 0x1e48 <commandDecode+0x7c>
    1e50:	fe 01       	movw	r30, r28
    1e52:	3a 96       	adiw	r30, 0x0a	; 10
    1e54:	8b e0       	ldi	r24, 0x0B	; 11
    1e56:	df 01       	movw	r26, r30
    1e58:	1d 92       	st	X+, r1
    1e5a:	8a 95       	dec	r24
    1e5c:	e9 f7       	brne	.-6      	; 0x1e58 <commandDecode+0x8c>
    1e5e:	8a e0       	ldi	r24, 0x0A	; 10
    1e60:	e8 ec       	ldi	r30, 0xC8	; 200
    1e62:	f4 e0       	ldi	r31, 0x04	; 4
    1e64:	de 01       	movw	r26, r28
    1e66:	55 96       	adiw	r26, 0x15	; 21
    1e68:	01 90       	ld	r0, Z+
    1e6a:	0d 92       	st	X+, r0
    1e6c:	8a 95       	dec	r24
    1e6e:	e1 f7       	brne	.-8      	; 0x1e68 <commandDecode+0x9c>
    1e70:	fe 01       	movw	r30, r28
    1e72:	7f 96       	adiw	r30, 0x1f	; 31
    1e74:	8a e0       	ldi	r24, 0x0A	; 10
    1e76:	df 01       	movw	r26, r30
    1e78:	1d 92       	st	X+, r1
    1e7a:	8a 95       	dec	r24
    1e7c:	e9 f7       	brne	.-6      	; 0x1e78 <commandDecode+0xac>
    1e7e:	8b e0       	ldi	r24, 0x0B	; 11
    1e80:	ec ed       	ldi	r30, 0xDC	; 220
    1e82:	f4 e0       	ldi	r31, 0x04	; 4
    1e84:	de 01       	movw	r26, r28
    1e86:	99 96       	adiw	r26, 0x29	; 41
    1e88:	01 90       	ld	r0, Z+
    1e8a:	0d 92       	st	X+, r0
    1e8c:	8a 95       	dec	r24
    1e8e:	e1 f7       	brne	.-8      	; 0x1e88 <commandDecode+0xbc>
    1e90:	89 e0       	ldi	r24, 0x09	; 9
    1e92:	fe 01       	movw	r30, r28
    1e94:	f4 96       	adiw	r30, 0x34	; 52
    1e96:	df 01       	movw	r26, r30
    1e98:	98 2f       	mov	r25, r24
    1e9a:	1d 92       	st	X+, r1
    1e9c:	9a 95       	dec	r25
    1e9e:	e9 f7       	brne	.-6      	; 0x1e9a <commandDecode+0xce>
    1ea0:	9b e0       	ldi	r25, 0x0B	; 11
    1ea2:	e0 ef       	ldi	r30, 0xF0	; 240
    1ea4:	f4 e0       	ldi	r31, 0x04	; 4
    1ea6:	de 01       	movw	r26, r28
    1ea8:	dd 96       	adiw	r26, 0x3d	; 61
    1eaa:	01 90       	ld	r0, Z+
    1eac:	0d 92       	st	X+, r0
    1eae:	9a 95       	dec	r25
    1eb0:	e1 f7       	brne	.-8      	; 0x1eaa <commandDecode+0xde>
    1eb2:	fe 01       	movw	r30, r28
    1eb4:	e8 5b       	subi	r30, 0xB8	; 184
    1eb6:	ff 4f       	sbci	r31, 0xFF	; 255
    1eb8:	df 01       	movw	r26, r30
    1eba:	98 2f       	mov	r25, r24
    1ebc:	1d 92       	st	X+, r1
    1ebe:	9a 95       	dec	r25
    1ec0:	e9 f7       	brne	.-6      	; 0x1ebc <commandDecode+0xf0>
    1ec2:	9c e0       	ldi	r25, 0x0C	; 12
    1ec4:	e4 e0       	ldi	r30, 0x04	; 4
    1ec6:	f5 e0       	ldi	r31, 0x05	; 5
    1ec8:	de 01       	movw	r26, r28
    1eca:	af 5a       	subi	r26, 0xAF	; 175
    1ecc:	bf 4f       	sbci	r27, 0xFF	; 255
    1ece:	01 90       	ld	r0, Z+
    1ed0:	0d 92       	st	X+, r0
    1ed2:	9a 95       	dec	r25
    1ed4:	e1 f7       	brne	.-8      	; 0x1ece <commandDecode+0x102>
    1ed6:	e1 e5       	ldi	r30, 0x51	; 81
    1ed8:	f0 e0       	ldi	r31, 0x00	; 0
    1eda:	ec 0f       	add	r30, r28
    1edc:	fd 1f       	adc	r31, r29
    1ede:	3c 96       	adiw	r30, 0x0c	; 12
    1ee0:	98 e0       	ldi	r25, 0x08	; 8
    1ee2:	df 01       	movw	r26, r30
    1ee4:	1d 92       	st	X+, r1
    1ee6:	9a 95       	dec	r25
    1ee8:	e9 f7       	brne	.-6      	; 0x1ee4 <commandDecode+0x118>
    1eea:	9b e0       	ldi	r25, 0x0B	; 11
    1eec:	e8 e1       	ldi	r30, 0x18	; 24
    1eee:	f5 e0       	ldi	r31, 0x05	; 5
    1ef0:	de 01       	movw	r26, r28
    1ef2:	ab 59       	subi	r26, 0x9B	; 155
    1ef4:	bf 4f       	sbci	r27, 0xFF	; 255
    1ef6:	01 90       	ld	r0, Z+
    1ef8:	0d 92       	st	X+, r0
    1efa:	9a 95       	dec	r25
    1efc:	e1 f7       	brne	.-8      	; 0x1ef6 <commandDecode+0x12a>
    1efe:	e5 e6       	ldi	r30, 0x65	; 101
    1f00:	f0 e0       	ldi	r31, 0x00	; 0
    1f02:	ec 0f       	add	r30, r28
    1f04:	fd 1f       	adc	r31, r29
    1f06:	3b 96       	adiw	r30, 0x0b	; 11
    1f08:	df 01       	movw	r26, r30
    1f0a:	1d 92       	st	X+, r1
    1f0c:	8a 95       	dec	r24
    1f0e:	e9 f7       	brne	.-6      	; 0x1f0a <commandDecode+0x13e>
    1f10:	86 e0       	ldi	r24, 0x06	; 6
    1f12:	ec e2       	ldi	r30, 0x2C	; 44
    1f14:	f5 e0       	ldi	r31, 0x05	; 5
    1f16:	de 01       	movw	r26, r28
    1f18:	a7 58       	subi	r26, 0x87	; 135
    1f1a:	bf 4f       	sbci	r27, 0xFF	; 255
    1f1c:	01 90       	ld	r0, Z+
    1f1e:	0d 92       	st	X+, r0
    1f20:	8a 95       	dec	r24
    1f22:	e1 f7       	brne	.-8      	; 0x1f1c <commandDecode+0x150>
    1f24:	e9 e7       	ldi	r30, 0x79	; 121
    1f26:	f0 e0       	ldi	r31, 0x00	; 0
    1f28:	ec 0f       	add	r30, r28
    1f2a:	fd 1f       	adc	r31, r29
    1f2c:	36 96       	adiw	r30, 0x06	; 6
    1f2e:	8e e0       	ldi	r24, 0x0E	; 14
    1f30:	df 01       	movw	r26, r30
    1f32:	1d 92       	st	X+, r1
    1f34:	8a 95       	dec	r24
    1f36:	e9 f7       	brne	.-6      	; 0x1f32 <commandDecode+0x166>
    1f38:	85 e0       	ldi	r24, 0x05	; 5
    1f3a:	e0 e4       	ldi	r30, 0x40	; 64
    1f3c:	f5 e0       	ldi	r31, 0x05	; 5
    1f3e:	de 01       	movw	r26, r28
    1f40:	a3 57       	subi	r26, 0x73	; 115
    1f42:	bf 4f       	sbci	r27, 0xFF	; 255
    1f44:	01 90       	ld	r0, Z+
    1f46:	0d 92       	st	X+, r0
    1f48:	8a 95       	dec	r24
    1f4a:	e1 f7       	brne	.-8      	; 0x1f44 <commandDecode+0x178>
    1f4c:	ed e8       	ldi	r30, 0x8D	; 141
    1f4e:	f0 e0       	ldi	r31, 0x00	; 0
    1f50:	ec 0f       	add	r30, r28
    1f52:	fd 1f       	adc	r31, r29
    1f54:	35 96       	adiw	r30, 0x05	; 5
    1f56:	8f e0       	ldi	r24, 0x0F	; 15
    1f58:	df 01       	movw	r26, r30
    1f5a:	1d 92       	st	X+, r1
    1f5c:	8a 95       	dec	r24
    1f5e:	e9 f7       	brne	.-6      	; 0x1f5a <commandDecode+0x18e>
							   
	// Print list of commands for the user
	int i = 0; // increment
	
	// Printing the list cleanly
	UART0_putstring("List of available OBC Commands: ");
    1f60:	80 e1       	ldi	r24, 0x10	; 16
    1f62:	97 e0       	ldi	r25, 0x07	; 7
    1f64:	93 d1       	rcall	.+806    	; 0x228c <UART0_putstring>
	UART0_putchar('\n');
    1f66:	8a e0       	ldi	r24, 0x0A	; 10
    1f68:	81 d1       	rcall	.+770    	; 0x226c <UART0_putchar>
	UART0_putchar('\n');
    1f6a:	8a e0       	ldi	r24, 0x0A	; 10
    1f6c:	7f d1       	rcall	.+766    	; 0x226c <UART0_putchar>
	UART0_putchar('\r');
    1f6e:	8d e0       	ldi	r24, 0x0D	; 13
    1f70:	7d d1       	rcall	.+762    	; 0x226c <UART0_putchar>
    1f72:	68 01       	movw	r12, r16
    1f74:	11 e3       	ldi	r17, 0x31	; 49
	// print all seven commands
	while(i < 8){
		UART0_putchar(0x31 + i); // the '1' plus the command index
    1f76:	81 2f       	mov	r24, r17
    1f78:	79 d1       	rcall	.+754    	; 0x226c <UART0_putchar>
		UART0_putstring(" -> ");
    1f7a:	81 e3       	ldi	r24, 0x31	; 49
    1f7c:	97 e0       	ldi	r25, 0x07	; 7
		UART0_putstring(obc_command[i]);
    1f7e:	86 d1       	rcall	.+780    	; 0x228c <UART0_putstring>
    1f80:	c6 01       	movw	r24, r12
    1f82:	84 d1       	rcall	.+776    	; 0x228c <UART0_putstring>
		UART0_putchar('\n');
    1f84:	8a e0       	ldi	r24, 0x0A	; 10
    1f86:	72 d1       	rcall	.+740    	; 0x226c <UART0_putchar>
    1f88:	8d e0       	ldi	r24, 0x0D	; 13
		UART0_putchar('\r');
    1f8a:	70 d1       	rcall	.+736    	; 0x226c <UART0_putchar>
    1f8c:	1f 5f       	subi	r17, 0xFF	; 255
    1f8e:	b4 e1       	ldi	r27, 0x14	; 20
    1f90:	cb 0e       	add	r12, r27
    1f92:	d1 1c       	adc	r13, r1
	UART0_putstring("List of available OBC Commands: ");
	UART0_putchar('\n');
	UART0_putchar('\n');
	UART0_putchar('\r');
	// print all seven commands
	while(i < 8){
    1f94:	19 33       	cpi	r17, 0x39	; 57
		UART0_putchar('\r');
		i++;
	}
	
	// Prompt the User
	UART0_putchar('\n');
    1f96:	79 f7       	brne	.-34     	; 0x1f76 <commandDecode+0x1aa>
    1f98:	8a e0       	ldi	r24, 0x0A	; 10
	UART0_putstring("Enter the desired command:");
    1f9a:	68 d1       	rcall	.+720    	; 0x226c <UART0_putchar>
    1f9c:	86 e3       	ldi	r24, 0x36	; 54
    1f9e:	97 e0       	ldi	r25, 0x07	; 7
	UART0_putchar('\n');
    1fa0:	75 d1       	rcall	.+746    	; 0x228c <UART0_putstring>
    1fa2:	8a e0       	ldi	r24, 0x0A	; 10
	UART0_putchar('\n');
    1fa4:	63 d1       	rcall	.+710    	; 0x226c <UART0_putchar>
    1fa6:	8a e0       	ldi	r24, 0x0A	; 10
	UART0_putchar('\r');
    1fa8:	61 d1       	rcall	.+706    	; 0x226c <UART0_putchar>
    1faa:	8d e0       	ldi	r24, 0x0D	; 13
	UART0_putstring("> ");		
    1fac:	5f d1       	rcall	.+702    	; 0x226c <UART0_putchar>
    1fae:	83 e3       	ldi	r24, 0x33	; 51
    1fb0:	97 e0       	ldi	r25, 0x07	; 7
		UART0_putchar('\n');
		UART0_putchar('\r');
		
		// Print the selected Command
		UART0_putstring("You have Selected: ");
		UART0_putstring(obc_command[com_ind]);
    1fb2:	6c d1       	rcall	.+728    	; 0x228c <UART0_putstring>
    1fb4:	0f 2e       	mov	r0, r31
    1fb6:	f4 e1       	ldi	r31, 0x14	; 20
    1fb8:	ff 2e       	mov	r15, r31
	
	// Check for command in list, if not in list, prompt user again
	
	while(incorrect){
		// Receive command index from OBC
		int com_ind = UART0_getchar() - 0x31; // negate the '0' char value to get the index
    1fba:	f0 2d       	mov	r31, r0
    1fbc:	5f d1       	rcall	.+702    	; 0x227c <UART0_getchar>
    1fbe:	d8 2e       	mov	r13, r24
		UART0_putchar('\n');
    1fc0:	8a e0       	ldi	r24, 0x0A	; 10
    1fc2:	54 d1       	rcall	.+680    	; 0x226c <UART0_putchar>
    1fc4:	8a e0       	ldi	r24, 0x0A	; 10
		UART0_putchar('\n');
    1fc6:	52 d1       	rcall	.+676    	; 0x226c <UART0_putchar>
    1fc8:	8d e0       	ldi	r24, 0x0D	; 13
    1fca:	50 d1       	rcall	.+672    	; 0x226c <UART0_putchar>
		UART0_putchar('\r');
    1fcc:	81 e5       	ldi	r24, 0x51	; 81
    1fce:	97 e0       	ldi	r25, 0x07	; 7
		
		// Print the selected Command
		UART0_putstring("You have Selected: ");
    1fd0:	5d d1       	rcall	.+698    	; 0x228c <UART0_putstring>
    1fd2:	8d 2d       	mov	r24, r13
    1fd4:	dd 0c       	add	r13, r13
		UART0_putstring(obc_command[com_ind]);
    1fd6:	99 0b       	sbc	r25, r25
    1fd8:	c1 97       	sbiw	r24, 0x31	; 49
    1fda:	f8 9e       	mul	r15, r24
    1fdc:	60 01       	movw	r12, r0
    1fde:	f9 9e       	mul	r15, r25
    1fe0:	d0 0c       	add	r13, r0
    1fe2:	11 24       	eor	r1, r1
    1fe4:	e1 e0       	ldi	r30, 0x01	; 1
    1fe6:	f0 e0       	ldi	r31, 0x00	; 0
    1fe8:	ec 0f       	add	r30, r28
    1fea:	fd 1f       	adc	r31, r29
    1fec:	ce 0e       	add	r12, r30
    1fee:	df 1e       	adc	r13, r31
    1ff0:	c6 01       	movw	r24, r12
    1ff2:	4c d1       	rcall	.+664    	; 0x228c <UART0_putstring>
		UART0_putchar('\n');
    1ff4:	8a e0       	ldi	r24, 0x0A	; 10
    1ff6:	3a d1       	rcall	.+628    	; 0x226c <UART0_putchar>
    1ff8:	8a e0       	ldi	r24, 0x0A	; 10
		UART0_putchar('\n');
    1ffa:	38 d1       	rcall	.+624    	; 0x226c <UART0_putchar>
    1ffc:	8d e0       	ldi	r24, 0x0D	; 13
    1ffe:	36 d1       	rcall	.+620    	; 0x226c <UART0_putchar>
		UART0_putchar('\r');
    2000:	64 eb       	ldi	r22, 0xB4	; 180
    2002:	74 e0       	ldi	r23, 0x04	; 4
			
		incorrect = 0; // assume the user inputs the correct command until it isn't found
			
		if (strcmp(obc_command[com_ind], "TelemRqt") == 0) {
    2004:	c6 01       	movw	r24, r12
    2006:	0e 94 80 1a 	call	0x3500	; 0x3500 <strcmp>
    200a:	89 2b       	or	r24, r25
    200c:	f1 f4       	brne	.+60     	; 0x204a <commandDecode+0x27e>
    200e:	85 e6       	ldi	r24, 0x65	; 101
    2010:	97 e0       	ldi	r25, 0x07	; 7
			UART0_putstring("Updating Telemetry Information");
    2012:	3c d1       	rcall	.+632    	; 0x228c <UART0_putstring>
    2014:	8a e0       	ldi	r24, 0x0A	; 10
    2016:	2a d1       	rcall	.+596    	; 0x226c <UART0_putchar>
			UART0_putchar('\n');
    2018:	8a e0       	ldi	r24, 0x0A	; 10
    201a:	28 d1       	rcall	.+592    	; 0x226c <UART0_putchar>
    201c:	8d e0       	ldi	r24, 0x0D	; 13
			UART0_putchar('\n');
    201e:	26 d1       	rcall	.+588    	; 0x226c <UART0_putchar>
    2020:	62 2d       	mov	r22, r2
    2022:	cb 54       	subi	r28, 0x4B	; 75
			UART0_putchar('\r');
    2024:	df 4f       	sbci	r29, 0xFF	; 255
    2026:	88 81       	ld	r24, Y
    2028:	99 81       	ldd	r25, Y+1	; 0x01
			Update_TELEM(telem, power_state);
    202a:	c5 5b       	subi	r28, 0xB5	; 181
    202c:	d0 40       	sbci	r29, 0x00	; 0
    202e:	5e db       	rcall	.-2372   	; 0x16ec <Update_TELEM>
    2030:	84 01       	movw	r16, r8
    2032:	d2 01       	movw	r26, r4
    2034:	2c 91       	ld	r18, X
    2036:	4e 2d       	mov	r20, r14
    2038:	b3 01       	movw	r22, r6
			Update_OBC(telem, power, state_num, mode[0], soc);
    203a:	cb 54       	subi	r28, 0x4B	; 75
    203c:	df 4f       	sbci	r29, 0xFF	; 255
    203e:	88 81       	ld	r24, Y
    2040:	99 81       	ldd	r25, Y+1	; 0x01
    2042:	c5 5b       	subi	r28, 0xB5	; 181
    2044:	d0 40       	sbci	r29, 0x00	; 0
    2046:	bc db       	rcall	.-2184   	; 0x17c0 <Update_OBC>
    2048:	af c0       	rjmp	.+350    	; 0x21a8 <commandDecode+0x3dc>
    204a:	68 ec       	ldi	r22, 0xC8	; 200
    204c:	74 e0       	ldi	r23, 0x04	; 4
			//send telem
		} //end if
		else if (strcmp(obc_command[com_ind], "SubSysRqt") == 0) {	
    204e:	c6 01       	movw	r24, r12
    2050:	0e 94 80 1a 	call	0x3500	; 0x3500 <strcmp>
    2054:	89 2b       	or	r24, r25
    2056:	09 f0       	breq	.+2      	; 0x205a <commandDecode+0x28e>
    2058:	34 c0       	rjmp	.+104    	; 0x20c2 <commandDecode+0x2f6>
			if(!mode[0]){
    205a:	f2 01       	movw	r30, r4
    205c:	80 81       	ld	r24, Z
    205e:	81 11       	cpse	r24, r1
				// power_state = some new value (input yet to be determined, handle in GUI)
				UART0_putstring("Enter the desired state: ");
    2060:	1d c0       	rjmp	.+58     	; 0x209c <commandDecode+0x2d0>
    2062:	84 e8       	ldi	r24, 0x84	; 132
				UART0_putchar('\n');
    2064:	97 e0       	ldi	r25, 0x07	; 7
    2066:	12 d1       	rcall	.+548    	; 0x228c <UART0_putstring>
				UART0_putchar('\n');
    2068:	8a e0       	ldi	r24, 0x0A	; 10
    206a:	00 d1       	rcall	.+512    	; 0x226c <UART0_putchar>
				UART0_putchar('\r');
    206c:	8a e0       	ldi	r24, 0x0A	; 10
    206e:	fe d0       	rcall	.+508    	; 0x226c <UART0_putchar>
				UART0_putstring("> ");	
    2070:	8d e0       	ldi	r24, 0x0D	; 13
    2072:	fc d0       	rcall	.+504    	; 0x226c <UART0_putchar>
				UART0_getstring(power);
    2074:	83 e3       	ldi	r24, 0x33	; 51
    2076:	97 e0       	ldi	r25, 0x07	; 7
    2078:	09 d1       	rcall	.+530    	; 0x228c <UART0_putstring>
				Manual_STATE(power, power_state);
    207a:	c3 01       	movw	r24, r6
    207c:	15 d1       	rcall	.+554    	; 0x22a8 <UART0_getstring>
    207e:	b1 01       	movw	r22, r2
    2080:	c3 01       	movw	r24, r6
				//UART0_putstring(power);  *****---->>> Putty echo now enabled not need
				Update_LOADS(power_state[0], power_state);
    2082:	bc d9       	rcall	.-3208   	; 0x13fc <Manual_STATE>
    2084:	b1 01       	movw	r22, r2
    2086:	d1 01       	movw	r26, r2
    2088:	8c 91       	ld	r24, X
    208a:	0e 94 7b 07 	call	0xef6	; 0xef6 <Update_LOADS>
				UART0_putchar('\n');
    208e:	8a e0       	ldi	r24, 0x0A	; 10
    2090:	ed d0       	rcall	.+474    	; 0x226c <UART0_putchar>
				UART0_putchar('\n');
    2092:	8a e0       	ldi	r24, 0x0A	; 10
    2094:	eb d0       	rcall	.+470    	; 0x226c <UART0_putchar>
    2096:	8d e0       	ldi	r24, 0x0D	; 13
				UART0_putchar('\r');
    2098:	e9 d0       	rcall	.+466    	; 0x226c <UART0_putchar>
    209a:	86 c0       	rjmp	.+268    	; 0x21a8 <commandDecode+0x3dc>
    209c:	8e e9       	ldi	r24, 0x9E	; 158
			}
			else{
				UART0_putstring("I am currently in Autonomous mode.");
    209e:	97 e0       	ldi	r25, 0x07	; 7
    20a0:	f5 d0       	rcall	.+490    	; 0x228c <UART0_putstring>
    20a2:	8a e0       	ldi	r24, 0x0A	; 10
    20a4:	e3 d0       	rcall	.+454    	; 0x226c <UART0_putchar>
				UART0_putchar('\n');
    20a6:	8a e0       	ldi	r24, 0x0A	; 10
    20a8:	e1 d0       	rcall	.+450    	; 0x226c <UART0_putchar>
    20aa:	8d e0       	ldi	r24, 0x0D	; 13
				UART0_putchar('\n');
    20ac:	df d0       	rcall	.+446    	; 0x226c <UART0_putchar>
    20ae:	81 ec       	ldi	r24, 0xC1	; 193
    20b0:	97 e0       	ldi	r25, 0x07	; 7
				UART0_putchar('\r');
    20b2:	ec d0       	rcall	.+472    	; 0x228c <UART0_putstring>
    20b4:	8a e0       	ldi	r24, 0x0A	; 10
    20b6:	da d0       	rcall	.+436    	; 0x226c <UART0_putchar>
				UART0_putstring("Select ModeChange [4] before attempting to change the power state.");
    20b8:	8a e0       	ldi	r24, 0x0A	; 10
    20ba:	d8 d0       	rcall	.+432    	; 0x226c <UART0_putchar>
    20bc:	8d e0       	ldi	r24, 0x0D	; 13
    20be:	d6 d0       	rcall	.+428    	; 0x226c <UART0_putchar>
				UART0_putchar('\n');
    20c0:	73 c0       	rjmp	.+230    	; 0x21a8 <commandDecode+0x3dc>
    20c2:	6c ed       	ldi	r22, 0xDC	; 220
				UART0_putchar('\n');
    20c4:	74 e0       	ldi	r23, 0x04	; 4
    20c6:	c6 01       	movw	r24, r12
				UART0_putchar('\r');
    20c8:	0e 94 80 1a 	call	0x3500	; 0x3500 <strcmp>
    20cc:	89 2b       	or	r24, r25
				// Tell the user the EPS is still in autonomous mode and it must be changed
			}
		} //else if
		else if (strcmp(obc_command[com_ind], "PwrMatEdit") == 0) {
    20ce:	79 f4       	brne	.+30     	; 0x20ee <commandDecode+0x322>
    20d0:	c9 54       	subi	r28, 0x49	; 73
    20d2:	df 4f       	sbci	r29, 0xFF	; 255
    20d4:	48 81       	ld	r20, Y
    20d6:	59 81       	ldd	r21, Y+1	; 0x01
    20d8:	c7 5b       	subi	r28, 0xB7	; 183
			pwrMatEdit(edit_num, power, pwrMat);
    20da:	d0 40       	sbci	r29, 0x00	; 0
    20dc:	b3 01       	movw	r22, r6
    20de:	c7 54       	subi	r28, 0x47	; 71
    20e0:	df 4f       	sbci	r29, 0xFF	; 255
    20e2:	88 81       	ld	r24, Y
    20e4:	99 81       	ldd	r25, Y+1	; 0x01
    20e6:	c9 5b       	subi	r28, 0xB9	; 185
    20e8:	d0 40       	sbci	r29, 0x00	; 0
    20ea:	c3 d9       	rcall	.-3194   	; 0x1472 <pwrMatEdit>
    20ec:	5d c0       	rjmp	.+186    	; 0x21a8 <commandDecode+0x3dc>
    20ee:	60 ef       	ldi	r22, 0xF0	; 240
    20f0:	74 e0       	ldi	r23, 0x04	; 4
    20f2:	c6 01       	movw	r24, r12
    20f4:	0e 94 80 1a 	call	0x3500	; 0x3500 <strcmp>
		} //end else if
		else if (strcmp(obc_command[com_ind], "ModeChange") == 0) {
    20f8:	89 2b       	or	r24, r25
    20fa:	b9 f4       	brne	.+46     	; 0x212a <commandDecode+0x35e>
    20fc:	f2 01       	movw	r30, r4
    20fe:	80 81       	ld	r24, Z
    2100:	91 e0       	ldi	r25, 0x01	; 1
			// The character 0 must be sent to go into manual mode
			mode[0] = !mode[0]; // toggle the current mode
    2102:	81 11       	cpse	r24, r1
    2104:	90 e0       	ldi	r25, 0x00	; 0
    2106:	d2 01       	movw	r26, r4
    2108:	9c 93       	st	X, r25
    210a:	88 23       	and	r24, r24
    210c:	21 f0       	breq	.+8      	; 0x2116 <commandDecode+0x34a>
    210e:	84 e0       	ldi	r24, 0x04	; 4
			if(!mode[0]){
    2110:	98 e0       	ldi	r25, 0x08	; 8
				UART0_putstring("I am now in Manual mode.");
    2112:	bc d0       	rcall	.+376    	; 0x228c <UART0_putstring>
    2114:	03 c0       	rjmp	.+6      	; 0x211c <commandDecode+0x350>
    2116:	8d e1       	ldi	r24, 0x1D	; 29
    2118:	98 e0       	ldi	r25, 0x08	; 8
    211a:	b8 d0       	rcall	.+368    	; 0x228c <UART0_putstring>
			}
			else{
				UART0_putstring("I am now in Autonomous mode.");
    211c:	8a e0       	ldi	r24, 0x0A	; 10
    211e:	a6 d0       	rcall	.+332    	; 0x226c <UART0_putchar>
    2120:	8a e0       	ldi	r24, 0x0A	; 10
    2122:	a4 d0       	rcall	.+328    	; 0x226c <UART0_putchar>
			}
			UART0_putchar('\n');
    2124:	8d e0       	ldi	r24, 0x0D	; 13
    2126:	a2 d0       	rcall	.+324    	; 0x226c <UART0_putchar>
    2128:	3f c0       	rjmp	.+126    	; 0x21a8 <commandDecode+0x3dc>
			UART0_putchar('\n');
    212a:	64 e0       	ldi	r22, 0x04	; 4
    212c:	75 e0       	ldi	r23, 0x05	; 5
    212e:	c6 01       	movw	r24, r12
			UART0_putchar('\r');
    2130:	0e 94 80 1a 	call	0x3500	; 0x3500 <strcmp>
    2134:	89 2b       	or	r24, r25
			//change or update the mode of the micro
			// In this state do not update the power state, simply remain in the one specified
			// Have an SOC thing here
		} //end else if
		else if (strcmp(obc_command[com_ind], "LaunchReset") == 0) {
    2136:	19 f4       	brne	.+6      	; 0x213e <commandDecode+0x372>
    2138:	0e 94 20 06 	call	0xc40	; 0xc40 <launch_reset>
    213c:	35 c0       	rjmp	.+106    	; 0x21a8 <commandDecode+0x3dc>
			launch_reset();
    213e:	68 e1       	ldi	r22, 0x18	; 24
    2140:	75 e0       	ldi	r23, 0x05	; 5
    2142:	c6 01       	movw	r24, r12
			//reset the system to a pre-launch config
			// Use the watchdog to reset the system
		} //end else if
		else if (strcmp(obc_command[com_ind], "HelloCheck") == 0) {
    2144:	0e 94 80 1a 	call	0x3500	; 0x3500 <strcmp>
    2148:	89 2b       	or	r24, r25
    214a:	51 f4       	brne	.+20     	; 0x2160 <commandDecode+0x394>
    214c:	8a e3       	ldi	r24, 0x3A	; 58
    214e:	98 e0       	ldi	r25, 0x08	; 8
    2150:	9d d0       	rcall	.+314    	; 0x228c <UART0_putstring>
			UART0_putstring("Oh Hello, I am CubeSat EPS. What's your Zodiac sign?");
    2152:	8a e0       	ldi	r24, 0x0A	; 10
    2154:	8b d0       	rcall	.+278    	; 0x226c <UART0_putchar>
    2156:	8a e0       	ldi	r24, 0x0A	; 10
    2158:	89 d0       	rcall	.+274    	; 0x226c <UART0_putchar>
			UART0_putchar('\n');
    215a:	8d e0       	ldi	r24, 0x0D	; 13
    215c:	87 d0       	rcall	.+270    	; 0x226c <UART0_putchar>
    215e:	24 c0       	rjmp	.+72     	; 0x21a8 <commandDecode+0x3dc>
			UART0_putchar('\n');
    2160:	6c e2       	ldi	r22, 0x2C	; 44
    2162:	75 e0       	ldi	r23, 0x05	; 5
    2164:	c6 01       	movw	r24, r12
			UART0_putchar('\r');
    2166:	0e 94 80 1a 	call	0x3500	; 0x3500 <strcmp>
    216a:	89 2b       	or	r24, r25
    216c:	11 f4       	brne	.+4      	; 0x2172 <commandDecode+0x3a6>
		} //end else if
		else if(strcmp(obc_command[com_ind], "Reset") == 0){
    216e:	24 de       	rcall	.-952    	; 0x1db8 <Manual_RESET>
    2170:	1b c0       	rjmp	.+54     	; 0x21a8 <commandDecode+0x3dc>
    2172:	60 e4       	ldi	r22, 0x40	; 64
    2174:	75 e0       	ldi	r23, 0x05	; 5
    2176:	c6 01       	movw	r24, r12
    2178:	0e 94 80 1a 	call	0x3500	; 0x3500 <strcmp>
			Manual_RESET(); // Reset the EPS without changing launch state
    217c:	89 2b       	or	r24, r25
    217e:	41 f4       	brne	.+16     	; 0x2190 <commandDecode+0x3c4>
    2180:	81 e0       	ldi	r24, 0x01	; 1
		}
		else if(strcmp(obc_command[com_ind], "Demo") == 0){
    2182:	f5 01       	movw	r30, r10
    2184:	90 81       	ld	r25, Z
    2186:	91 11       	cpse	r25, r1
    2188:	80 e0       	ldi	r24, 0x00	; 0
    218a:	d5 01       	movw	r26, r10
    218c:	8c 93       	st	X, r24
    218e:	0c c0       	rjmp	.+24     	; 0x21a8 <commandDecode+0x3dc>
			demo[0] = !demo[0]; // toggle demo mode
    2190:	8f e6       	ldi	r24, 0x6F	; 111
    2192:	98 e0       	ldi	r25, 0x08	; 8
    2194:	7b d0       	rcall	.+246    	; 0x228c <UART0_putstring>
    2196:	8a e0       	ldi	r24, 0x0A	; 10
    2198:	69 d0       	rcall	.+210    	; 0x226c <UART0_putchar>
    219a:	8a e0       	ldi	r24, 0x0A	; 10
    219c:	67 d0       	rcall	.+206    	; 0x226c <UART0_putchar>
    219e:	8d e0       	ldi	r24, 0x0D	; 13
		}
		else {
			incorrect = 1;
			UART0_putstring("Command Unrecognized. Please Try again.");
    21a0:	65 d0       	rcall	.+202    	; 0x226c <UART0_putchar>
    21a2:	8e e3       	ldi	r24, 0x3E	; 62
    21a4:	63 d0       	rcall	.+198    	; 0x226c <UART0_putchar>
    21a6:	0a cf       	rjmp	.-492    	; 0x1fbc <commandDecode+0x1f0>
			UART0_putchar('\n');
    21a8:	c6 54       	subi	r28, 0x46	; 70
    21aa:	df 4f       	sbci	r29, 0xFF	; 255
    21ac:	0f b6       	in	r0, 0x3f	; 63
			UART0_putchar('\n');
    21ae:	f8 94       	cli
    21b0:	de bf       	out	0x3e, r29	; 62
    21b2:	0f be       	out	0x3f, r0	; 63
			UART0_putchar('\r');
    21b4:	cd bf       	out	0x3d, r28	; 61
    21b6:	df 91       	pop	r29
    21b8:	cf 91       	pop	r28
			UART0_putchar('>');
    21ba:	1f 91       	pop	r17
    21bc:	0f 91       	pop	r16
    21be:	ff 90       	pop	r15
    21c0:	ef 90       	pop	r14
			//UART0_putstring(strcat("Error! The following command isn't recognized: ", obc_command));
		} //end else
	} //end while
} //end commandDecode
    21c2:	df 90       	pop	r13
    21c4:	cf 90       	pop	r12
    21c6:	bf 90       	pop	r11
    21c8:	af 90       	pop	r10
    21ca:	9f 90       	pop	r9
    21cc:	8f 90       	pop	r8
    21ce:	7f 90       	pop	r7
    21d0:	6f 90       	pop	r6
    21d2:	5f 90       	pop	r5
    21d4:	4f 90       	pop	r4
    21d6:	3f 90       	pop	r3
    21d8:	2f 90       	pop	r2
    21da:	08 95       	ret

000021dc <GPIO_init>:

void GPIO_init(){
	
	// Initializing the PORTs
	
	DDRH = 0x7F; // PORTH pins 0-6 set as outputs
    21dc:	8f e7       	ldi	r24, 0x7F	; 127
    21de:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <__TEXT_REGION_LENGTH__+0x7e0101>
	DDRL = 0x0E; // PORTL pins 1-3 set as outputs
    21e2:	9e e0       	ldi	r25, 0x0E	; 14
    21e4:	90 93 0a 01 	sts	0x010A, r25	; 0x80010a <__TEXT_REGION_LENGTH__+0x7e010a>
	DDRA = 0xF0; // PORTA pins 4-7 set as outputs
    21e8:	90 ef       	ldi	r25, 0xF0	; 240
    21ea:	91 b9       	out	0x01, r25	; 1
	DDRJ = 0x7F; // PORTJ pins 0-6 set as outputs
    21ec:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <__TEXT_REGION_LENGTH__+0x7e0104>
	DDRC = 0xFF; // PORTC pins 0-7 set as outputs
    21f0:	8f ef       	ldi	r24, 0xFF	; 255
    21f2:	87 b9       	out	0x07, r24	; 7
	
	// Set Output as Low
	PORTH = 0x02; // pin 1 set high to inhibit temperature measurement
    21f4:	82 e0       	ldi	r24, 0x02	; 2
    21f6:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <__TEXT_REGION_LENGTH__+0x7e0102>
	PORTL = 0x00;
    21fa:	10 92 0b 01 	sts	0x010B, r1	; 0x80010b <__TEXT_REGION_LENGTH__+0x7e010b>
	PORTA = 0x00;
    21fe:	12 b8       	out	0x02, r1	; 2
	PORTJ = 0x00; 
    2200:	10 92 05 01 	sts	0x0105, r1	; 0x800105 <__TEXT_REGION_LENGTH__+0x7e0105>
	PORTC = 0x00;
    2204:	18 b8       	out	0x08, r1	; 8
    2206:	08 95       	ret

00002208 <ADC_init>:
/*========================================================================================*/

void ADC_init(){
	
	// Enable as Input
	DDRF = 0x00;
    2208:	10 ba       	out	0x10, r1	; 16
	
	// Enable the 1.1V internal reference
	//ADMUX |= ((REFS1 << 0) | (REFS0 << 0)); // set the first bit to 1
	ADMUX = 0x00;
    220a:	10 92 7c 00 	sts	0x007C, r1	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>
	
	// Enable the ADC via the status control register & enable interrupt
	//ADCSRA |= (ADEN << 1) | (ADPS2 << 1) | (ADPS0 << 1) | (ADIE << 1);
	ADCSRA = 0x85;
    220e:	85 e8       	ldi	r24, 0x85	; 133
    2210:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
    2214:	08 95       	ret

00002216 <CLK_init>:
/*========================================================================================*/

CLK_init(){
	
	// Enable Timer 1
	TCCR1B = 0x04;
    2216:	84 e0       	ldi	r24, 0x04	; 4
    2218:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
	
	// Enable Output Compare Interrupt
	TIMSK1 = 0x02;
    221c:	82 e0       	ldi	r24, 0x02	; 2
    221e:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__TEXT_REGION_LENGTH__+0x7e006f>
	
	// Set Counter to 65,536 clock cycles (MAX)
	OCR1A = 0xff;
    2222:	8f ef       	ldi	r24, 0xFF	; 255
    2224:	90 e0       	ldi	r25, 0x00	; 0
    2226:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
    222a:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
	
	// Set clock to 0
	TCNT1 = 0x0000;
    222e:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
    2232:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
    2236:	08 95       	ret

00002238 <UART0_init>:
/*========================================================================================*/

void UART0_init(){
	
	// Using the values from set baud tool
	UBRR0H = UBRRH_VALUE;
    2238:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
	UBRR0L = UBRRL_VALUE;
    223c:	8c e0       	ldi	r24, 0x0C	; 12
    223e:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
	
	// Enable TX & RX and Enable RX complete interrupt
	UCSR0B = 0x98; // enabling bits 4 & 3 (RX & TX) ****** RE-ENABLE INTERRUPT!!!!!!!
    2242:	88 e9       	ldi	r24, 0x98	; 152
    2244:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
	
	
	// Set up the format 8bit no parity
	UCSR0C = 0x06; // enable 8 bit chars
    2248:	86 e0       	ldi	r24, 0x06	; 6
    224a:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7e00c2>
    224e:	08 95       	ret

00002250 <WD_init>:
/*========================================================================================*/

void WD_init(){
	
	// Reset the MCU reset flag
	MCUSR &= 0xf7; // changes bit 3 to 0
    2250:	84 b7       	in	r24, 0x34	; 52
    2252:	87 7f       	andi	r24, 0xF7	; 247
    2254:	84 bf       	out	0x34, r24	; 52
	
	// Enable the interrupt/system reset mode
	wdt_enable(INTERRUPT_SYSTEM_RESET_MODE);
    2256:	82 e0       	ldi	r24, 0x02	; 2
    2258:	6c d0       	rcall	.+216    	; 0x2332 <wdt_enable>
	
	// Set pre-scaler to 8s
	wdt_set_timeout_period(WDT_TIMEOUT_PERIOD_1024KCLK);
    225a:	89 e0       	ldi	r24, 0x09	; 9
    225c:	46 c0       	rjmp	.+140    	; 0x22ea <wdt_set_timeout_period>
    225e:	08 95       	ret

00002260 <ALL_init>:
/*========================================================================================*/

void ALL_init(){
	
	// Initialize GPIO
	GPIO_init();
    2260:	bd df       	rcall	.-134    	; 0x21dc <GPIO_init>
	
	// Initialize the ADC
	ADC_init();
    2262:	d2 df       	rcall	.-92     	; 0x2208 <ADC_init>
	
	// Initialize UART
	UART0_init();
    2264:	e9 df       	rcall	.-46     	; 0x2238 <UART0_init>
	
	// Initialize Timer (CLK) *** NOT during testing ***
	CLK_init();
    2266:	d7 df       	rcall	.-82     	; 0x2216 <CLK_init>
    2268:	f3 cf       	rjmp	.-26     	; 0x2250 <WD_init>
	
	// Initialize Watchdog Timer
	WD_init();
    226a:	08 95       	ret

0000226c <UART0_putchar>:
    226c:	e0 ec       	ldi	r30, 0xC0	; 192
    226e:	f0 e0       	ldi	r31, 0x00	; 0
/*========================================================================================*/

void UART0_putchar(char h){
	
	// wait for transmit buffer to be empty
	while(! (UCSR0A & (1 << UDRE0)));
    2270:	90 81       	ld	r25, Z
    2272:	95 ff       	sbrs	r25, 5
    2274:	fd cf       	rjmp	.-6      	; 0x2270 <UART0_putchar+0x4>
	
	// Put data to be transmitted into buffer
	UDR0 = h; // write to the data register
    2276:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
    227a:	08 95       	ret

0000227c <UART0_getchar>:
/*========================================================================================*/

char UART0_getchar(){
	
	// wait for data to be received
	while (!( UCSR0A & (1 << RXC0)));
    227c:	e0 ec       	ldi	r30, 0xC0	; 192
    227e:	f0 e0       	ldi	r31, 0x00	; 0
    2280:	80 81       	ld	r24, Z
    2282:	88 23       	and	r24, r24
    2284:	ec f7       	brge	.-6      	; 0x2280 <UART0_getchar+0x4>
	
	// return the received character
	return UDR0;
    2286:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
	
}
    228a:	08 95       	ret

0000228c <UART0_putstring>:
// Author: Chris Thomas
// Date: 2019-03-13
// Description: Writes strings via UART0 using putchar.
/*========================================================================================*/

void UART0_putstring(char *string){
    228c:	cf 93       	push	r28
    228e:	df 93       	push	r29
    2290:	ec 01       	movw	r28, r24
	while(*string){
    2292:	88 81       	ld	r24, Y
    2294:	88 23       	and	r24, r24
    2296:	29 f0       	breq	.+10     	; 0x22a2 <UART0_putstring+0x16>
    2298:	21 96       	adiw	r28, 0x01	; 1
		UART0_putchar(*string++);
    229a:	e8 df       	rcall	.-48     	; 0x226c <UART0_putchar>
// Date: 2019-03-13
// Description: Writes strings via UART0 using putchar.
/*========================================================================================*/

void UART0_putstring(char *string){
	while(*string){
    229c:	89 91       	ld	r24, Y+
    229e:	81 11       	cpse	r24, r1
    22a0:	fc cf       	rjmp	.-8      	; 0x229a <UART0_putstring+0xe>
		UART0_putchar(*string++);
	}
}
    22a2:	df 91       	pop	r29
    22a4:	cf 91       	pop	r28
    22a6:	08 95       	ret

000022a8 <UART0_getstring>:
// Date: 2019-03-13
// Description: Reads strings via UART0 using getchar.
/*========================================================================================*/


void UART0_getstring(char* message){
    22a8:	ef 92       	push	r14
    22aa:	ff 92       	push	r15
    22ac:	0f 93       	push	r16
    22ae:	1f 93       	push	r17
    22b0:	cf 93       	push	r28
    22b2:	df 93       	push	r29
    22b4:	7c 01       	movw	r14, r24
	char prev;
	int i = 0;
	
	// Check the first value for the terminator ' ' (SPACE)
	prev = UART0_getchar();
    22b6:	e2 df       	rcall	.-60     	; 0x227c <UART0_getchar>
	
	// Check previous value for terminator (SPACE)
	while(prev != 0x0D){
    22b8:	8d 30       	cpi	r24, 0x0D	; 13
    22ba:	59 f0       	breq	.+22     	; 0x22d2 <UART0_getstring+0x2a>
    22bc:	87 01       	movw	r16, r14
    22be:	c0 e0       	ldi	r28, 0x00	; 0
    22c0:	d0 e0       	ldi	r29, 0x00	; 0
		message[i] = prev; // save the char if it isn't the terminator
    22c2:	f8 01       	movw	r30, r16
    22c4:	81 93       	st	Z+, r24
    22c6:	8f 01       	movw	r16, r30
		i++;
		prev = UART0_getchar();
    22c8:	21 96       	adiw	r28, 0x01	; 1
    22ca:	d8 df       	rcall	.-80     	; 0x227c <UART0_getchar>
	
	// Check the first value for the terminator ' ' (SPACE)
	prev = UART0_getchar();
	
	// Check previous value for terminator (SPACE)
	while(prev != 0x0D){
    22cc:	8d 30       	cpi	r24, 0x0D	; 13
    22ce:	c9 f7       	brne	.-14     	; 0x22c2 <UART0_getstring+0x1a>
    22d0:	02 c0       	rjmp	.+4      	; 0x22d6 <UART0_getstring+0x2e>
/*========================================================================================*/


void UART0_getstring(char* message){
	char prev;
	int i = 0;
    22d2:	c0 e0       	ldi	r28, 0x00	; 0
    22d4:	d0 e0       	ldi	r29, 0x00	; 0
	while(prev != 0x0D){
		message[i] = prev; // save the char if it isn't the terminator
		i++;
		prev = UART0_getchar();
	}
	message[i] = '\0';
    22d6:	ce 0d       	add	r28, r14
    22d8:	df 1d       	adc	r29, r15
    22da:	18 82       	st	Y, r1
    22dc:	df 91       	pop	r29
    22de:	cf 91       	pop	r28
    22e0:	1f 91       	pop	r17
    22e2:	0f 91       	pop	r16
    22e4:	ff 90       	pop	r15
    22e6:	ef 90       	pop	r14
    22e8:	08 95       	ret

000022ea <wdt_set_timeout_period>:
 *  This function is written in asm where ever the time is critical
 *
 *  \param  to_period  WDT timeout period
 */
void wdt_set_timeout_period(enum wdt_timeout_period to_period)
{
    22ea:	cf 93       	push	r28
    22ec:	df 93       	push	r29
    22ee:	1f 92       	push	r1
    22f0:	cd b7       	in	r28, 0x3d	; 61
    22f2:	de b7       	in	r29, 0x3e	; 62
	/* Store the prescale value to temp register */
#if defined (__GNUC__)
	asm ("MOV R19,R24");
    22f4:	38 2f       	mov	r19, r24
#else
#error Unsupported compiler.
#endif

	/* Mask for WDP3 */
	if (to_period & MASK_PRESCALE_WPD3) {
    22f6:	83 ff       	sbrs	r24, 3
    22f8:	02 c0       	rjmp	.+4      	; 0x22fe <wdt_set_timeout_period+0x14>
		asm ("LDI R21,0x20");
    22fa:	50 e2       	ldi	r21, 0x20	; 32
    22fc:	01 c0       	rjmp	.+2      	; 0x2300 <wdt_set_timeout_period+0x16>
	} else {
		asm ("LDI R21,0x00");
    22fe:	50 e0       	ldi	r21, 0x00	; 0

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    2300:	8f b7       	in	r24, 0x3f	; 63
    2302:	89 83       	std	Y+1, r24	; 0x01
	cpu_irq_disable();
    2304:	f8 94       	cli
	return flags;
    2306:	89 81       	ldd	r24, Y+1	; 0x01

	/* Disable Global interrupt */
	uint8_t sreg = cpu_irq_save();

	/* Reset Watchdog timer */
	wdt_reset();
    2308:	a8 95       	wdr

	asm ("LDI R17,0xD8");
    230a:	18 ed       	ldi	r17, 0xD8	; 216
	asm ("LDS R18,0x60");   /* WDTCSR Address = 0x60 */
    230c:	20 91 60 00 	lds	r18, 0x0060	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
	asm ("AND R17,R18");
    2310:	12 23       	and	r17, r18
	asm ("STS 0x60,R17");   /* WDTCSR Address = 0x60 */
    2312:	10 93 60 00 	sts	0x0060, r17	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
	/* Load the new prescale value */
	asm ("LDI R20,0x18");
    2316:	48 e1       	ldi	r20, 0x18	; 24
	asm ("LDI R18,0x07");
    2318:	27 e0       	ldi	r18, 0x07	; 7
	asm ("AND R19,R18");
    231a:	32 23       	and	r19, r18
	asm ("OR R19,R21");
    231c:	35 2b       	or	r19, r21
	asm ("OR R19,R17");
    231e:	31 2b       	or	r19, r17
	/* Write logical one to WDCE and WDE */
	asm ("STS 0x60,R20");   /* WDTCSR Address = 0x60 */
    2320:	40 93 60 00 	sts	0x0060, r20	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
	/* Write new prescale setting */
	asm ("STS 0x60,R19");   /* WDTCSR Address = 0x60 */
    2324:	30 93 60 00 	sts	0x0060, r19	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    2328:	8f bf       	out	0x3f, r24	; 63

	/* Restore Global interrupt */
	cpu_irq_restore(sreg);
}
    232a:	0f 90       	pop	r0
    232c:	df 91       	pop	r29
    232e:	cf 91       	pop	r28
    2330:	08 95       	ret

00002332 <wdt_enable>:
 * This function is written in asm where ever the time is critical
 *
 * \param mode WDT timer mode selection
 */
void wdt_enable(enum wdt_mode_select mode)
{
    2332:	cf 93       	push	r28
    2334:	df 93       	push	r29
    2336:	1f 92       	push	r1
    2338:	cd b7       	in	r28, 0x3d	; 61
    233a:	de b7       	in	r29, 0x3e	; 62

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    233c:	9f b7       	in	r25, 0x3f	; 63
    233e:	99 83       	std	Y+1, r25	; 0x01
	cpu_irq_disable();
    2340:	f8 94       	cli
	return flags;
    2342:	29 81       	ldd	r18, Y+1	; 0x01
	/* Disable Global interrupt */
	uint8_t sreg = cpu_irq_save();

	/* Reset Watchdog timer */
	wdt_reset();
    2344:	a8 95       	wdr
 ***\param  none
 */
static inline void wdt_reset_flag_clear(void)
{
	/* Clear WDRF flag in MCUSR */
	MCUSR &= ~WDRF_bm;
    2346:	94 b7       	in	r25, 0x34	; 52
    2348:	97 7f       	andi	r25, 0xF7	; 247
    234a:	94 bf       	out	0x34, r25	; 52

	/* Clear WDRF flag in MCUSR */
	wdt_reset_flag_clear();

	/*System reset mode */
	if (mode == SYSTEM_RESET_MODE) {
    234c:	81 30       	cpi	r24, 0x01	; 1
    234e:	59 f4       	brne	.+22     	; 0x2366 <wdt_enable+0x34>
		/* Write logical zero to WDIE */
		asm ("LDI R17,0xBF");
    2350:	1f eb       	ldi	r17, 0xBF	; 191
		asm ("LDS R18,0x60"); /* WDTCSR Address = 0x60 */
    2352:	20 91 60 00 	lds	r18, 0x0060	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
		asm ("AND R17,R18");
    2356:	12 23       	and	r17, r18
		asm ("STS 0x60,R17"); /* WDTCSR Address = 0x60 */
    2358:	10 93 60 00 	sts	0x0060, r17	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
		/* Write WDIF,WDE and WDCE to logical one */
		asm ("LDI R18,0x98");
    235c:	28 e9       	ldi	r18, 0x98	; 152
		asm ("OR R18,R17");
    235e:	21 2b       	or	r18, r17
		asm ("STS 0x60,R18"); /* WDTCSR Address = 0x60 */
    2360:	20 93 60 00 	sts	0x0060, r18	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
    2364:	1c c0       	rjmp	.+56     	; 0x239e <wdt_enable+0x6c>
	}
	/* Interrupt mode */
	else if (mode == INTERRUPT_MODE) {
    2366:	81 11       	cpse	r24, r1
    2368:	0e c0       	rjmp	.+28     	; 0x2386 <wdt_enable+0x54>
		/* Write logical zero to WDE */
		asm ("LDI R17,0xF7");
    236a:	17 ef       	ldi	r17, 0xF7	; 247
		asm ("LDS R18,0x60"); /* WDTCSR Address = 0x60 */
    236c:	20 91 60 00 	lds	r18, 0x0060	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
		asm ("AND R17,R18");
    2370:	12 23       	and	r17, r18
		asm ("STS 0x60,R17"); /* WDTCSR Address = 0x60 */
    2372:	10 93 60 00 	sts	0x0060, r17	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
		asm ("LDI R20,0x18");
    2376:	48 e1       	ldi	r20, 0x18	; 24
		asm ("LDI R19,0xD0");
    2378:	30 ed       	ldi	r19, 0xD0	; 208
		asm ("OR R19,R17");
    237a:	31 2b       	or	r19, r17
		/* Write logical one to WDCE and WDE */
		asm ("STS 0x60,R20"); /* WDTCSR Address = 0x60 */
    237c:	40 93 60 00 	sts	0x0060, r20	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
		/* Write WDIF,WDIE and WDCE to logical one */
		asm ("STS 0x60,R19"); /* WDTCSR Address = 0x60 */
    2380:	30 93 60 00 	sts	0x0060, r19	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
    2384:	0c c0       	rjmp	.+24     	; 0x239e <wdt_enable+0x6c>
	}
	/* Interrupt and System reset mode */
	else if (mode == INTERRUPT_SYSTEM_RESET_MODE) {
    2386:	82 30       	cpi	r24, 0x02	; 2
    2388:	51 f4       	brne	.+20     	; 0x239e <wdt_enable+0x6c>
		/* Write logical zero to WDE */
		asm ("LDI R17,0xF7");
    238a:	17 ef       	ldi	r17, 0xF7	; 247
		asm ("LDS R18,0x60"); /* WDTCSR Address = 0x60 */
    238c:	20 91 60 00 	lds	r18, 0x0060	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
		asm ("AND R17,R18");
    2390:	12 23       	and	r17, r18
		asm ("STS 0x60,R17"); /* WDTCSR Address = 0x60 */
    2392:	10 93 60 00 	sts	0x0060, r17	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
		/* Write logical one to WDCE, WDIE,WDIF and WDE */
		asm ("LDI R18,0xD8");
    2396:	28 ed       	ldi	r18, 0xD8	; 216
		asm ("OR R18,R17");
    2398:	21 2b       	or	r18, r17
		asm ("STS 0x60,R18"); /* WDTCSR Address = 0x60 */
    239a:	20 93 60 00 	sts	0x0060, r18	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    239e:	2f bf       	out	0x3f, r18	; 63
	}

	/* Restore Global interrupt */
	cpu_irq_restore(sreg);
}
    23a0:	0f 90       	pop	r0
    23a2:	df 91       	pop	r29
    23a4:	cf 91       	pop	r28
    23a6:	08 95       	ret

000023a8 <__vector_17>:
// Date: 2019-03-18
// Description: Interrupt occurs when timer register overflow flag is set, and
//				calls for telemetry data to be updated.
/*========================================================================================*/

ISR(TIMER1_COMPA_vect){
    23a8:	1f 92       	push	r1
    23aa:	0f 92       	push	r0
    23ac:	0f b6       	in	r0, 0x3f	; 63
    23ae:	0f 92       	push	r0
    23b0:	11 24       	eor	r1, r1
    23b2:	0f 93       	push	r16
    23b4:	1f 93       	push	r17
    23b6:	2f 93       	push	r18
    23b8:	3f 93       	push	r19
    23ba:	4f 93       	push	r20
    23bc:	5f 93       	push	r21
    23be:	6f 93       	push	r22
    23c0:	7f 93       	push	r23
    23c2:	8f 93       	push	r24
    23c4:	9f 93       	push	r25
    23c6:	af 93       	push	r26
    23c8:	bf 93       	push	r27
    23ca:	ef 93       	push	r30
    23cc:	ff 93       	push	r31
	
	// Disable Interrupts
	cli();
    23ce:	f8 94       	cli
	
	// Update Telemetry information
	Update_TELEM(telem, power_state[0]);
    23d0:	60 91 c7 08 	lds	r22, 0x08C7	; 0x8008c7 <power_state>
    23d4:	8d ef       	ldi	r24, 0xFD	; 253
    23d6:	98 e0       	ldi	r25, 0x08	; 8
    23d8:	89 d9       	rcall	.-3310   	; 0x16ec <Update_TELEM>
	
	// Check Power State
	temp = telem[11];
    23da:	80 91 29 09 	lds	r24, 0x0929	; 0x800929 <telem+0x2c>
    23de:	90 91 2a 09 	lds	r25, 0x092A	; 0x80092a <telem+0x2d>
    23e2:	a0 91 2b 09 	lds	r26, 0x092B	; 0x80092b <telem+0x2e>
    23e6:	b0 91 2c 09 	lds	r27, 0x092C	; 0x80092c <telem+0x2f>
    23ea:	80 93 cf 08 	sts	0x08CF, r24	; 0x8008cf <temp>
    23ee:	90 93 d0 08 	sts	0x08D0, r25	; 0x8008d0 <temp+0x1>
    23f2:	a0 93 d1 08 	sts	0x08D1, r26	; 0x8008d1 <temp+0x2>
    23f6:	b0 93 d2 08 	sts	0x08D2, r27	; 0x8008d2 <temp+0x3>
	
	if(mode[0] && !demo[0]){
    23fa:	80 91 01 02 	lds	r24, 0x0201	; 0x800201 <mode>
    23fe:	88 23       	and	r24, r24
    2400:	09 f4       	brne	.+2      	; 0x2404 <__vector_17+0x5c>
    2402:	00 c1       	rjmp	.+512    	; 0x2604 <__vector_17+0x25c>
    2404:	80 91 c4 08 	lds	r24, 0x08C4	; 0x8008c4 <__data_end>
    2408:	81 11       	cpse	r24, r1
    240a:	f6 c0       	rjmp	.+492    	; 0x25f8 <__vector_17+0x250>
		// Check state of charge
		soc = SoC_ADC(telem[10],telem[4]);
    240c:	ed ef       	ldi	r30, 0xFD	; 253
    240e:	f8 e0       	ldi	r31, 0x08	; 8
    2410:	20 89       	ldd	r18, Z+16	; 0x10
    2412:	31 89       	ldd	r19, Z+17	; 0x11
    2414:	42 89       	ldd	r20, Z+18	; 0x12
    2416:	53 89       	ldd	r21, Z+19	; 0x13
    2418:	60 a5       	ldd	r22, Z+40	; 0x28
    241a:	71 a5       	ldd	r23, Z+41	; 0x29
    241c:	82 a5       	ldd	r24, Z+42	; 0x2a
    241e:	93 a5       	ldd	r25, Z+43	; 0x2b
    2420:	0e 94 5f 03 	call	0x6be	; 0x6be <SoC_ADC>
    2424:	60 93 d7 08 	sts	0x08D7, r22	; 0x8008d7 <soc>
    2428:	70 93 d8 08 	sts	0x08D8, r23	; 0x8008d8 <soc+0x1>
    242c:	80 93 d9 08 	sts	0x08D9, r24	; 0x8008d9 <soc+0x2>
    2430:	90 93 da 08 	sts	0x08DA, r25	; 0x8008da <soc+0x3>
		// Update power state
		state_num = PowerStateCheck(soc, temp);
    2434:	20 91 cf 08 	lds	r18, 0x08CF	; 0x8008cf <temp>
    2438:	30 91 d0 08 	lds	r19, 0x08D0	; 0x8008d0 <temp+0x1>
    243c:	40 91 d1 08 	lds	r20, 0x08D1	; 0x8008d1 <temp+0x2>
    2440:	50 91 d2 08 	lds	r21, 0x08D2	; 0x8008d2 <temp+0x3>
    2444:	0e 94 b1 07 	call	0xf62	; 0xf62 <PowerStateCheck>
    2448:	90 93 ca 08 	sts	0x08CA, r25	; 0x8008ca <state_num+0x1>
    244c:	80 93 c9 08 	sts	0x08C9, r24	; 0x8008c9 <state_num>
		power_state[0] = pwrMat[state_num];
    2450:	fc 01       	movw	r30, r24
    2452:	e5 52       	subi	r30, 0x25	; 37
    2454:	f7 4f       	sbci	r31, 0xF7	; 247
    2456:	80 81       	ld	r24, Z
    2458:	80 93 c7 08 	sts	0x08C7, r24	; 0x8008c7 <power_state>
		// Update the state of the loads
		Update_LOADS(power_state[0], power_state);
    245c:	67 ec       	ldi	r22, 0xC7	; 199
    245e:	78 e0       	ldi	r23, 0x08	; 8
    2460:	0e 94 7b 07 	call	0xef6	; 0xef6 <Update_LOADS>
		Update_STATE(power, power_state[0]);
    2464:	60 91 c7 08 	lds	r22, 0x08C7	; 0x8008c7 <power_state>
    2468:	84 ef       	ldi	r24, 0xF4	; 244
    246a:	98 e0       	ldi	r25, 0x08	; 8
    246c:	0e 94 ea 09 	call	0x13d4	; 0x13d4 <Update_STATE>
		Update_OBC(telem, power, state_num, mode[0], soc);
    2470:	60 91 d7 08 	lds	r22, 0x08D7	; 0x8008d7 <soc>
    2474:	70 91 d8 08 	lds	r23, 0x08D8	; 0x8008d8 <soc+0x1>
    2478:	80 91 d9 08 	lds	r24, 0x08D9	; 0x8008d9 <soc+0x2>
    247c:	90 91 da 08 	lds	r25, 0x08DA	; 0x8008da <soc+0x3>
    2480:	72 d2       	rcall	.+1252   	; 0x2966 <__fixsfsi>
    2482:	8b 01       	movw	r16, r22
    2484:	20 91 01 02 	lds	r18, 0x0201	; 0x800201 <mode>
    2488:	40 91 c9 08 	lds	r20, 0x08C9	; 0x8008c9 <state_num>
    248c:	64 ef       	ldi	r22, 0xF4	; 244
    248e:	78 e0       	ldi	r23, 0x08	; 8
    2490:	8d ef       	ldi	r24, 0xFD	; 253
    2492:	98 e0       	ldi	r25, 0x08	; 8
    2494:	95 d9       	rcall	.-3286   	; 0x17c0 <Update_OBC>
    2496:	8a c0       	rjmp	.+276    	; 0x25ac <__vector_17+0x204>
	}
	else if(demo[0] && mode[0]){
		if(demo_start){
			UART0_putstring("The demo has started.");
    2498:	87 e9       	ldi	r24, 0x97	; 151
    249a:	98 e0       	ldi	r25, 0x08	; 8
    249c:	f7 de       	rcall	.-530    	; 0x228c <UART0_putstring>
			UART0_putchar('\n');
    249e:	8a e0       	ldi	r24, 0x0A	; 10
    24a0:	e5 de       	rcall	.-566    	; 0x226c <UART0_putchar>
			UART0_putchar('\n');
    24a2:	8a e0       	ldi	r24, 0x0A	; 10
    24a4:	e3 de       	rcall	.-570    	; 0x226c <UART0_putchar>
    24a6:	8d e0       	ldi	r24, 0x0D	; 13
			UART0_putchar('\r');
    24a8:	e1 de       	rcall	.-574    	; 0x226c <UART0_putchar>
    24aa:	8f e3       	ldi	r24, 0x3F	; 63
    24ac:	90 e0       	ldi	r25, 0x00	; 0
			// Speed up the interrupt for the demo
			OCR1A = 0x3f;
    24ae:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
    24b2:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
    24b6:	86 e1       	ldi	r24, 0x16	; 22
    24b8:	90 e0       	ldi	r25, 0x00	; 0
			state_num = 22;
    24ba:	90 93 ca 08 	sts	0x08CA, r25	; 0x8008ca <state_num+0x1>
    24be:	80 93 c9 08 	sts	0x08C9, r24	; 0x8008c9 <state_num>
    24c2:	80 e0       	ldi	r24, 0x00	; 0
    24c4:	90 e0       	ldi	r25, 0x00	; 0
			soc = 90;
    24c6:	a4 eb       	ldi	r26, 0xB4	; 180
    24c8:	b2 e4       	ldi	r27, 0x42	; 66
    24ca:	80 93 d7 08 	sts	0x08D7, r24	; 0x8008d7 <soc>
    24ce:	90 93 d8 08 	sts	0x08D8, r25	; 0x8008d8 <soc+0x1>
    24d2:	a0 93 d9 08 	sts	0x08D9, r26	; 0x8008d9 <soc+0x2>
    24d6:	b0 93 da 08 	sts	0x08DA, r27	; 0x8008da <soc+0x3>
    24da:	10 92 00 02 	sts	0x0200, r1	; 0x800200 <__data_start>
		}
		demo_start = 0; // demo initialization is done
    24de:	e0 91 c9 08 	lds	r30, 0x08C9	; 0x8008c9 <state_num>
		power_state[0] = pwrMat[state_num]; // update power state
    24e2:	f0 91 ca 08 	lds	r31, 0x08CA	; 0x8008ca <state_num+0x1>
    24e6:	e5 52       	subi	r30, 0x25	; 37
    24e8:	f7 4f       	sbci	r31, 0xF7	; 247
    24ea:	80 81       	ld	r24, Z
    24ec:	80 93 c7 08 	sts	0x08C7, r24	; 0x8008c7 <power_state>
    24f0:	67 ec       	ldi	r22, 0xC7	; 199
    24f2:	78 e0       	ldi	r23, 0x08	; 8
		// Update the rest of the system to simulate the changes
		Update_LOADS(power_state[0], power_state);
    24f4:	0e 94 7b 07 	call	0xef6	; 0xef6 <Update_LOADS>
    24f8:	60 91 c7 08 	lds	r22, 0x08C7	; 0x8008c7 <power_state>
		Update_STATE(power, power_state[0]);
    24fc:	84 ef       	ldi	r24, 0xF4	; 244
    24fe:	98 e0       	ldi	r25, 0x08	; 8
    2500:	0e 94 ea 09 	call	0x13d4	; 0x13d4 <Update_STATE>
    2504:	60 91 d7 08 	lds	r22, 0x08D7	; 0x8008d7 <soc>
		Update_OBC(telem, power, state_num, mode[0], soc);
    2508:	70 91 d8 08 	lds	r23, 0x08D8	; 0x8008d8 <soc+0x1>
    250c:	80 91 d9 08 	lds	r24, 0x08D9	; 0x8008d9 <soc+0x2>
    2510:	90 91 da 08 	lds	r25, 0x08DA	; 0x8008da <soc+0x3>
    2514:	28 d2       	rcall	.+1104   	; 0x2966 <__fixsfsi>
    2516:	8b 01       	movw	r16, r22
    2518:	20 91 01 02 	lds	r18, 0x0201	; 0x800201 <mode>
    251c:	40 91 c9 08 	lds	r20, 0x08C9	; 0x8008c9 <state_num>
    2520:	64 ef       	ldi	r22, 0xF4	; 244
    2522:	78 e0       	ldi	r23, 0x08	; 8
    2524:	8d ef       	ldi	r24, 0xFD	; 253
    2526:	98 e0       	ldi	r25, 0x08	; 8
    2528:	4b d9       	rcall	.-3434   	; 0x17c0 <Update_OBC>
    252a:	20 e0       	ldi	r18, 0x00	; 0
    252c:	30 e0       	ldi	r19, 0x00	; 0
		// Reset the demo variables
		if(soc < 20){
    252e:	40 ea       	ldi	r20, 0xA0	; 160
    2530:	51 e4       	ldi	r21, 0x41	; 65
    2532:	60 91 d7 08 	lds	r22, 0x08D7	; 0x8008d7 <soc>
    2536:	70 91 d8 08 	lds	r23, 0x08D8	; 0x8008d8 <soc+0x1>
    253a:	80 91 d9 08 	lds	r24, 0x08D9	; 0x8008d9 <soc+0x2>
    253e:	90 91 da 08 	lds	r25, 0x08DA	; 0x8008da <soc+0x3>
    2542:	a5 d1       	rcall	.+842    	; 0x288e <__cmpsf2>
    2544:	88 23       	and	r24, r24
    2546:	a4 f4       	brge	.+40     	; 0x2570 <__vector_17+0x1c8>
    2548:	8f ef       	ldi	r24, 0xFF	; 255
    254a:	90 e0       	ldi	r25, 0x00	; 0
			// Return to regular interrupt speed
			OCR1A = 0xff;
    254c:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
    2550:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
    2554:	81 e0       	ldi	r24, 0x01	; 1
			// Reset the demo variable
			demo_start = 1;
    2556:	80 93 00 02 	sts	0x0200, r24	; 0x800200 <__data_start>
			// Return to regular operation
			demo[0] = 0;
    255a:	10 92 c4 08 	sts	0x08C4, r1	; 0x8008c4 <__data_end>
			// Update the OBC that the demo is over
			UART0_putstring("The demo is complete.");
    255e:	8d ea       	ldi	r24, 0xAD	; 173
    2560:	98 e0       	ldi	r25, 0x08	; 8
    2562:	94 de       	rcall	.-728    	; 0x228c <UART0_putstring>
			UART0_putchar('\n');
    2564:	8a e0       	ldi	r24, 0x0A	; 10
    2566:	82 de       	rcall	.-764    	; 0x226c <UART0_putchar>
    2568:	8a e0       	ldi	r24, 0x0A	; 10
			UART0_putchar('\n');
    256a:	80 de       	rcall	.-768    	; 0x226c <UART0_putchar>
    256c:	8d e0       	ldi	r24, 0x0D	; 13
    256e:	7e de       	rcall	.-772    	; 0x226c <UART0_putchar>
			UART0_putchar('\r');
    2570:	20 e0       	ldi	r18, 0x00	; 0
    2572:	30 e0       	ldi	r19, 0x00	; 0
		}
		// Force the state of charge to change
		soc -= 20; // decrement the state of charge
    2574:	40 ea       	ldi	r20, 0xA0	; 160
    2576:	51 e4       	ldi	r21, 0x41	; 65
    2578:	60 91 d7 08 	lds	r22, 0x08D7	; 0x8008d7 <soc>
    257c:	70 91 d8 08 	lds	r23, 0x08D8	; 0x8008d8 <soc+0x1>
    2580:	80 91 d9 08 	lds	r24, 0x08D9	; 0x8008d9 <soc+0x2>
    2584:	90 91 da 08 	lds	r25, 0x08DA	; 0x8008da <soc+0x3>
    2588:	1d d1       	rcall	.+570    	; 0x27c4 <__subsf3>
    258a:	60 93 d7 08 	sts	0x08D7, r22	; 0x8008d7 <soc>
    258e:	70 93 d8 08 	sts	0x08D8, r23	; 0x8008d8 <soc+0x1>
    2592:	80 93 d9 08 	sts	0x08D9, r24	; 0x8008d9 <soc+0x2>
    2596:	90 93 da 08 	sts	0x08DA, r25	; 0x8008da <soc+0x3>
    259a:	80 91 c9 08 	lds	r24, 0x08C9	; 0x8008c9 <state_num>
    259e:	90 91 ca 08 	lds	r25, 0x08CA	; 0x8008ca <state_num+0x1>
		state_num -= 5; // decrement state number by 5 to switch loads
    25a2:	05 97       	sbiw	r24, 0x05	; 5
    25a4:	90 93 ca 08 	sts	0x08CA, r25	; 0x8008ca <state_num+0x1>
    25a8:	80 93 c9 08 	sts	0x08C9, r24	; 0x8008c9 <state_num>
    25ac:	80 91 c7 08 	lds	r24, 0x08C7	; 0x8008c7 <power_state>
    25b0:	80 93 c6 08 	sts	0x08C6, r24	; 0x8008c6 <prev_state>
	
	// Print the state of charge and power matrix index
	
	
	// Save previous states for less computation
	prev_state[0] = power_state[0];
    25b4:	80 91 cf 08 	lds	r24, 0x08CF	; 0x8008cf <temp>
    25b8:	90 91 d0 08 	lds	r25, 0x08D0	; 0x8008d0 <temp+0x1>
	prev_temp  = temp;
    25bc:	a0 91 d1 08 	lds	r26, 0x08D1	; 0x8008d1 <temp+0x2>
    25c0:	b0 91 d2 08 	lds	r27, 0x08D2	; 0x8008d2 <temp+0x3>
    25c4:	80 93 cb 08 	sts	0x08CB, r24	; 0x8008cb <prev_temp>
    25c8:	90 93 cc 08 	sts	0x08CC, r25	; 0x8008cc <prev_temp+0x1>
    25cc:	a0 93 cd 08 	sts	0x08CD, r26	; 0x8008cd <prev_temp+0x2>
    25d0:	b0 93 ce 08 	sts	0x08CE, r27	; 0x8008ce <prev_temp+0x3>
    25d4:	80 91 d7 08 	lds	r24, 0x08D7	; 0x8008d7 <soc>
    25d8:	90 91 d8 08 	lds	r25, 0x08D8	; 0x8008d8 <soc+0x1>
	prev_soc = soc;
    25dc:	a0 91 d9 08 	lds	r26, 0x08D9	; 0x8008d9 <soc+0x2>
    25e0:	b0 91 da 08 	lds	r27, 0x08DA	; 0x8008da <soc+0x3>
    25e4:	80 93 d3 08 	sts	0x08D3, r24	; 0x8008d3 <prev_soc>
    25e8:	90 93 d4 08 	sts	0x08D4, r25	; 0x8008d4 <prev_soc+0x1>
    25ec:	a0 93 d5 08 	sts	0x08D5, r26	; 0x8008d5 <prev_soc+0x2>
    25f0:	b0 93 d6 08 	sts	0x08D6, r27	; 0x8008d6 <prev_soc+0x3>
    25f4:	78 94       	sei
    25f6:	40 c0       	rjmp	.+128    	; 0x2678 <__vector_17+0x2d0>
    25f8:	80 91 00 02 	lds	r24, 0x0200	; 0x800200 <__data_start>
	
	// Re-enable interrupts
	sei();
		
}
    25fc:	88 23       	and	r24, r24
		Update_LOADS(power_state[0], power_state);
		Update_STATE(power, power_state[0]);
		Update_OBC(telem, power, state_num, mode[0], soc);
	}
	else if(demo[0] && mode[0]){
		if(demo_start){
    25fe:	09 f4       	brne	.+2      	; 0x2602 <__vector_17+0x25a>
    2600:	6c cf       	rjmp	.-296    	; 0x24da <__vector_17+0x132>
    2602:	4a cf       	rjmp	.-364    	; 0x2498 <__vector_17+0xf0>
    2604:	ed ef       	ldi	r30, 0xFD	; 253
    2606:	f8 e0       	ldi	r31, 0x08	; 8
    2608:	20 89       	ldd	r18, Z+16	; 0x10
		soc -= 20; // decrement the state of charge
		state_num -= 5; // decrement state number by 5 to switch loads
	}
	else{
		// Check state of charge
		soc = SoC_ADC(telem[10],telem[4]);
    260a:	31 89       	ldd	r19, Z+17	; 0x11
    260c:	42 89       	ldd	r20, Z+18	; 0x12
    260e:	53 89       	ldd	r21, Z+19	; 0x13
    2610:	60 a5       	ldd	r22, Z+40	; 0x28
    2612:	71 a5       	ldd	r23, Z+41	; 0x29
    2614:	82 a5       	ldd	r24, Z+42	; 0x2a
    2616:	93 a5       	ldd	r25, Z+43	; 0x2b
    2618:	0e 94 5f 03 	call	0x6be	; 0x6be <SoC_ADC>
    261c:	60 93 d7 08 	sts	0x08D7, r22	; 0x8008d7 <soc>
    2620:	70 93 d8 08 	sts	0x08D8, r23	; 0x8008d8 <soc+0x1>
    2624:	80 93 d9 08 	sts	0x08D9, r24	; 0x8008d9 <soc+0x2>
    2628:	90 93 da 08 	sts	0x08DA, r25	; 0x8008da <soc+0x3>
    262c:	8d e4       	ldi	r24, 0x4D	; 77
    262e:	90 e0       	ldi	r25, 0x00	; 0
    2630:	90 93 ca 08 	sts	0x08CA, r25	; 0x8008ca <state_num+0x1>
		state_num = 'M'; // stands for manual mode
    2634:	80 93 c9 08 	sts	0x08C9, r24	; 0x8008c9 <state_num>
    2638:	67 ec       	ldi	r22, 0xC7	; 199
    263a:	78 e0       	ldi	r23, 0x08	; 8
    263c:	80 91 c7 08 	lds	r24, 0x08C7	; 0x8008c7 <power_state>
		Update_LOADS(power_state[0], power_state);
    2640:	0e 94 7b 07 	call	0xef6	; 0xef6 <Update_LOADS>
    2644:	60 91 c7 08 	lds	r22, 0x08C7	; 0x8008c7 <power_state>
		Update_STATE(power, power_state[0]);
    2648:	84 ef       	ldi	r24, 0xF4	; 244
    264a:	98 e0       	ldi	r25, 0x08	; 8
    264c:	0e 94 ea 09 	call	0x13d4	; 0x13d4 <Update_STATE>
    2650:	60 91 d7 08 	lds	r22, 0x08D7	; 0x8008d7 <soc>
		Update_OBC(telem, power, state_num, mode[0], soc);
    2654:	70 91 d8 08 	lds	r23, 0x08D8	; 0x8008d8 <soc+0x1>
    2658:	80 91 d9 08 	lds	r24, 0x08D9	; 0x8008d9 <soc+0x2>
    265c:	90 91 da 08 	lds	r25, 0x08DA	; 0x8008da <soc+0x3>
    2660:	82 d1       	rcall	.+772    	; 0x2966 <__fixsfsi>
    2662:	8b 01       	movw	r16, r22
    2664:	20 91 01 02 	lds	r18, 0x0201	; 0x800201 <mode>
    2668:	40 91 c9 08 	lds	r20, 0x08C9	; 0x8008c9 <state_num>
    266c:	64 ef       	ldi	r22, 0xF4	; 244
    266e:	78 e0       	ldi	r23, 0x08	; 8
    2670:	8d ef       	ldi	r24, 0xFD	; 253
    2672:	98 e0       	ldi	r25, 0x08	; 8
    2674:	a5 d8       	rcall	.-3766   	; 0x17c0 <Update_OBC>
    2676:	9a cf       	rjmp	.-204    	; 0x25ac <__vector_17+0x204>
    2678:	ff 91       	pop	r31
    267a:	ef 91       	pop	r30
    267c:	bf 91       	pop	r27
	prev_soc = soc;
	
	// Re-enable interrupts
	sei();
		
}
    267e:	af 91       	pop	r26
    2680:	9f 91       	pop	r25
    2682:	8f 91       	pop	r24
    2684:	7f 91       	pop	r23
    2686:	6f 91       	pop	r22
    2688:	5f 91       	pop	r21
    268a:	4f 91       	pop	r20
    268c:	3f 91       	pop	r19
    268e:	2f 91       	pop	r18
    2690:	1f 91       	pop	r17
    2692:	0f 91       	pop	r16
    2694:	0f 90       	pop	r0
    2696:	0f be       	out	0x3f, r0	; 63
    2698:	0f 90       	pop	r0
    269a:	1f 90       	pop	r1
    269c:	18 95       	reti

0000269e <__vector_25>:
    269e:	1f 92       	push	r1
    26a0:	0f 92       	push	r0
    26a2:	0f b6       	in	r0, 0x3f	; 63

ISR(USART0_RX_vect){
    26a4:	0f 92       	push	r0
    26a6:	11 24       	eor	r1, r1
    26a8:	8f 92       	push	r8
    26aa:	9f 92       	push	r9
    26ac:	af 92       	push	r10
    26ae:	bf 92       	push	r11
    26b0:	cf 92       	push	r12
    26b2:	df 92       	push	r13
    26b4:	ef 92       	push	r14
    26b6:	0f 93       	push	r16
    26b8:	1f 93       	push	r17
    26ba:	2f 93       	push	r18
    26bc:	3f 93       	push	r19
    26be:	4f 93       	push	r20
    26c0:	5f 93       	push	r21
    26c2:	6f 93       	push	r22
    26c4:	7f 93       	push	r23
    26c6:	8f 93       	push	r24
    26c8:	9f 93       	push	r25
    26ca:	af 93       	push	r26
    26cc:	bf 93       	push	r27
    26ce:	ef 93       	push	r30
    26d0:	ff 93       	push	r31
	
	cli();
    26d2:	f8 94       	cli
	
	//wdt_disable();
	
	fake = UART0_getchar();
    26d4:	d3 dd       	rcall	.-1114   	; 0x227c <UART0_getchar>
    26d6:	80 93 2d 09 	sts	0x092D, r24	; 0x80092d <fake>
	commandDecode(telem, mode, power_state, power, pwrMat, state_num, edit_num, demo, soc);
    26da:	60 91 d7 08 	lds	r22, 0x08D7	; 0x8008d7 <soc>
    26de:	70 91 d8 08 	lds	r23, 0x08D8	; 0x8008d8 <soc+0x1>
    26e2:	80 91 d9 08 	lds	r24, 0x08D9	; 0x8008d9 <soc+0x2>
    26e6:	90 91 da 08 	lds	r25, 0x08DA	; 0x8008da <soc+0x3>
    26ea:	3d d1       	rcall	.+634    	; 0x2966 <__fixsfsi>
    26ec:	4b 01       	movw	r8, r22
    26ee:	0f 2e       	mov	r0, r31
    26f0:	f4 ec       	ldi	r31, 0xC4	; 196
    26f2:	af 2e       	mov	r10, r31
    26f4:	f8 e0       	ldi	r31, 0x08	; 8
    26f6:	bf 2e       	mov	r11, r31
    26f8:	f0 2d       	mov	r31, r0
    26fa:	0f 2e       	mov	r0, r31
    26fc:	f8 ec       	ldi	r31, 0xC8	; 200
    26fe:	cf 2e       	mov	r12, r31
    2700:	f8 e0       	ldi	r31, 0x08	; 8
    2702:	df 2e       	mov	r13, r31
    2704:	f0 2d       	mov	r31, r0
    2706:	e0 90 c9 08 	lds	r14, 0x08C9	; 0x8008c9 <state_num>
    270a:	0b ed       	ldi	r16, 0xDB	; 219
    270c:	18 e0       	ldi	r17, 0x08	; 8
    270e:	24 ef       	ldi	r18, 0xF4	; 244
    2710:	38 e0       	ldi	r19, 0x08	; 8
    2712:	47 ec       	ldi	r20, 0xC7	; 199
    2714:	58 e0       	ldi	r21, 0x08	; 8
    2716:	61 e0       	ldi	r22, 0x01	; 1
    2718:	72 e0       	ldi	r23, 0x02	; 2
    271a:	8d ef       	ldi	r24, 0xFD	; 253
    271c:	98 e0       	ldi	r25, 0x08	; 8
    271e:	56 db       	rcall	.-2388   	; 0x1dcc <commandDecode>
	
	//wdt_enable(INTERRUPT_SYSTEM_RESET_MODE);
	
	sei();
    2720:	78 94       	sei
}
    2722:	ff 91       	pop	r31
    2724:	ef 91       	pop	r30
    2726:	bf 91       	pop	r27
    2728:	af 91       	pop	r26
    272a:	9f 91       	pop	r25
    272c:	8f 91       	pop	r24
    272e:	7f 91       	pop	r23
    2730:	6f 91       	pop	r22
    2732:	5f 91       	pop	r21
    2734:	4f 91       	pop	r20
    2736:	3f 91       	pop	r19
    2738:	2f 91       	pop	r18
    273a:	1f 91       	pop	r17
    273c:	0f 91       	pop	r16
    273e:	ef 90       	pop	r14
    2740:	df 90       	pop	r13
    2742:	cf 90       	pop	r12
    2744:	bf 90       	pop	r11
    2746:	af 90       	pop	r10
    2748:	9f 90       	pop	r9
    274a:	8f 90       	pop	r8
    274c:	0f 90       	pop	r0
    274e:	0f be       	out	0x3f, r0	; 63
    2750:	0f 90       	pop	r0
    2752:	1f 90       	pop	r1
    2754:	18 95       	reti

00002756 <__vector_12>:

ISR(WDT_vect){
    2756:	1f 92       	push	r1
    2758:	0f 92       	push	r0
    275a:	0f b6       	in	r0, 0x3f	; 63
    275c:	0f 92       	push	r0
    275e:	11 24       	eor	r1, r1
    2760:	2f 93       	push	r18
    2762:	3f 93       	push	r19
    2764:	4f 93       	push	r20
    2766:	5f 93       	push	r21
    2768:	6f 93       	push	r22
    276a:	7f 93       	push	r23
    276c:	8f 93       	push	r24
    276e:	9f 93       	push	r25
    2770:	af 93       	push	r26
    2772:	bf 93       	push	r27
    2774:	ef 93       	push	r30
    2776:	ff 93       	push	r31
	cli();
    2778:	f8 94       	cli
	WD_init();
    277a:	6a dd       	rcall	.-1324   	; 0x2250 <WD_init>
	sei();
    277c:	78 94       	sei
}
    277e:	ff 91       	pop	r31
    2780:	ef 91       	pop	r30
    2782:	bf 91       	pop	r27
    2784:	af 91       	pop	r26
    2786:	9f 91       	pop	r25
    2788:	8f 91       	pop	r24
    278a:	7f 91       	pop	r23
    278c:	6f 91       	pop	r22
    278e:	5f 91       	pop	r21
    2790:	4f 91       	pop	r20
    2792:	3f 91       	pop	r19
    2794:	2f 91       	pop	r18
    2796:	0f 90       	pop	r0
    2798:	0f be       	out	0x3f, r0	; 63
    279a:	0f 90       	pop	r0
    279c:	1f 90       	pop	r1
    279e:	18 95       	reti

000027a0 <main>:

int main(void){
	
	// Check the Watchdog right away
	watchdog = MCUSR & 0x08;
    27a0:	84 b7       	in	r24, 0x34	; 52
    27a2:	88 70       	andi	r24, 0x08	; 8
    27a4:	80 93 c5 08 	sts	0x08C5, r24	; 0x8008c5 <watchdog>

	// Now initialize all peripherals
	ALL_init();
    27a8:	5b dd       	rcall	.-1354   	; 0x2260 <ALL_init>
	
	// Disable Interrupts upon start
	cli();
    27aa:	f8 94       	cli
	
	// Check the reason for reset
	fault_check(watchdog);
    27ac:	80 91 c5 08 	lds	r24, 0x08C5	; 0x8008c5 <watchdog>
    27b0:	0e 94 a1 05 	call	0xb42	; 0xb42 <fault_check>
	
	// Check State of Launch
	launch_state();	
    27b4:	0e 94 59 06 	call	0xcb2	; 0xcb2 <launch_state>
	
	// Update power state matrix
	pwrMatInit(pwrMat);
    27b8:	8b ed       	ldi	r24, 0xDB	; 219
    27ba:	98 e0       	ldi	r25, 0x08	; 8
    27bc:	0e 94 8a 07 	call	0xf14	; 0xf14 <pwrMatInit>
	
	//****** RE-Enable ******//
	sei();
    27c0:	78 94       	sei
    27c2:	ff cf       	rjmp	.-2      	; 0x27c2 <main+0x22>

000027c4 <__subsf3>:
    27c4:	50 58       	subi	r21, 0x80	; 128

000027c6 <__addsf3>:
    27c6:	bb 27       	eor	r27, r27
    27c8:	aa 27       	eor	r26, r26
    27ca:	0e d0       	rcall	.+28     	; 0x27e8 <__addsf3x>
    27cc:	75 c1       	rjmp	.+746    	; 0x2ab8 <__fp_round>
    27ce:	66 d1       	rcall	.+716    	; 0x2a9c <__fp_pscA>
    27d0:	30 f0       	brcs	.+12     	; 0x27de <__addsf3+0x18>
    27d2:	6b d1       	rcall	.+726    	; 0x2aaa <__fp_pscB>
    27d4:	20 f0       	brcs	.+8      	; 0x27de <__addsf3+0x18>
    27d6:	31 f4       	brne	.+12     	; 0x27e4 <__addsf3+0x1e>
    27d8:	9f 3f       	cpi	r25, 0xFF	; 255
    27da:	11 f4       	brne	.+4      	; 0x27e0 <__addsf3+0x1a>
    27dc:	1e f4       	brtc	.+6      	; 0x27e4 <__addsf3+0x1e>
    27de:	5b c1       	rjmp	.+694    	; 0x2a96 <__fp_nan>
    27e0:	0e f4       	brtc	.+2      	; 0x27e4 <__addsf3+0x1e>
    27e2:	e0 95       	com	r30
    27e4:	e7 fb       	bst	r30, 7
    27e6:	51 c1       	rjmp	.+674    	; 0x2a8a <__fp_inf>

000027e8 <__addsf3x>:
    27e8:	e9 2f       	mov	r30, r25
    27ea:	77 d1       	rcall	.+750    	; 0x2ada <__fp_split3>
    27ec:	80 f3       	brcs	.-32     	; 0x27ce <__addsf3+0x8>
    27ee:	ba 17       	cp	r27, r26
    27f0:	62 07       	cpc	r22, r18
    27f2:	73 07       	cpc	r23, r19
    27f4:	84 07       	cpc	r24, r20
    27f6:	95 07       	cpc	r25, r21
    27f8:	18 f0       	brcs	.+6      	; 0x2800 <__addsf3x+0x18>
    27fa:	71 f4       	brne	.+28     	; 0x2818 <__addsf3x+0x30>
    27fc:	9e f5       	brtc	.+102    	; 0x2864 <__addsf3x+0x7c>
    27fe:	8f c1       	rjmp	.+798    	; 0x2b1e <__fp_zero>
    2800:	0e f4       	brtc	.+2      	; 0x2804 <__addsf3x+0x1c>
    2802:	e0 95       	com	r30
    2804:	0b 2e       	mov	r0, r27
    2806:	ba 2f       	mov	r27, r26
    2808:	a0 2d       	mov	r26, r0
    280a:	0b 01       	movw	r0, r22
    280c:	b9 01       	movw	r22, r18
    280e:	90 01       	movw	r18, r0
    2810:	0c 01       	movw	r0, r24
    2812:	ca 01       	movw	r24, r20
    2814:	a0 01       	movw	r20, r0
    2816:	11 24       	eor	r1, r1
    2818:	ff 27       	eor	r31, r31
    281a:	59 1b       	sub	r21, r25
    281c:	99 f0       	breq	.+38     	; 0x2844 <__addsf3x+0x5c>
    281e:	59 3f       	cpi	r21, 0xF9	; 249
    2820:	50 f4       	brcc	.+20     	; 0x2836 <__addsf3x+0x4e>
    2822:	50 3e       	cpi	r21, 0xE0	; 224
    2824:	68 f1       	brcs	.+90     	; 0x2880 <__addsf3x+0x98>
    2826:	1a 16       	cp	r1, r26
    2828:	f0 40       	sbci	r31, 0x00	; 0
    282a:	a2 2f       	mov	r26, r18
    282c:	23 2f       	mov	r18, r19
    282e:	34 2f       	mov	r19, r20
    2830:	44 27       	eor	r20, r20
    2832:	58 5f       	subi	r21, 0xF8	; 248
    2834:	f3 cf       	rjmp	.-26     	; 0x281c <__addsf3x+0x34>
    2836:	46 95       	lsr	r20
    2838:	37 95       	ror	r19
    283a:	27 95       	ror	r18
    283c:	a7 95       	ror	r26
    283e:	f0 40       	sbci	r31, 0x00	; 0
    2840:	53 95       	inc	r21
    2842:	c9 f7       	brne	.-14     	; 0x2836 <__addsf3x+0x4e>
    2844:	7e f4       	brtc	.+30     	; 0x2864 <__addsf3x+0x7c>
    2846:	1f 16       	cp	r1, r31
    2848:	ba 0b       	sbc	r27, r26
    284a:	62 0b       	sbc	r22, r18
    284c:	73 0b       	sbc	r23, r19
    284e:	84 0b       	sbc	r24, r20
    2850:	ba f0       	brmi	.+46     	; 0x2880 <__addsf3x+0x98>
    2852:	91 50       	subi	r25, 0x01	; 1
    2854:	a1 f0       	breq	.+40     	; 0x287e <__addsf3x+0x96>
    2856:	ff 0f       	add	r31, r31
    2858:	bb 1f       	adc	r27, r27
    285a:	66 1f       	adc	r22, r22
    285c:	77 1f       	adc	r23, r23
    285e:	88 1f       	adc	r24, r24
    2860:	c2 f7       	brpl	.-16     	; 0x2852 <__addsf3x+0x6a>
    2862:	0e c0       	rjmp	.+28     	; 0x2880 <__addsf3x+0x98>
    2864:	ba 0f       	add	r27, r26
    2866:	62 1f       	adc	r22, r18
    2868:	73 1f       	adc	r23, r19
    286a:	84 1f       	adc	r24, r20
    286c:	48 f4       	brcc	.+18     	; 0x2880 <__addsf3x+0x98>
    286e:	87 95       	ror	r24
    2870:	77 95       	ror	r23
    2872:	67 95       	ror	r22
    2874:	b7 95       	ror	r27
    2876:	f7 95       	ror	r31
    2878:	9e 3f       	cpi	r25, 0xFE	; 254
    287a:	08 f0       	brcs	.+2      	; 0x287e <__addsf3x+0x96>
    287c:	b3 cf       	rjmp	.-154    	; 0x27e4 <__addsf3+0x1e>
    287e:	93 95       	inc	r25
    2880:	88 0f       	add	r24, r24
    2882:	08 f0       	brcs	.+2      	; 0x2886 <__addsf3x+0x9e>
    2884:	99 27       	eor	r25, r25
    2886:	ee 0f       	add	r30, r30
    2888:	97 95       	ror	r25
    288a:	87 95       	ror	r24
    288c:	08 95       	ret

0000288e <__cmpsf2>:
    288e:	d9 d0       	rcall	.+434    	; 0x2a42 <__fp_cmp>
    2890:	08 f4       	brcc	.+2      	; 0x2894 <__cmpsf2+0x6>
    2892:	81 e0       	ldi	r24, 0x01	; 1
    2894:	08 95       	ret

00002896 <__divsf3>:
    2896:	0c d0       	rcall	.+24     	; 0x28b0 <__divsf3x>
    2898:	0f c1       	rjmp	.+542    	; 0x2ab8 <__fp_round>
    289a:	07 d1       	rcall	.+526    	; 0x2aaa <__fp_pscB>
    289c:	40 f0       	brcs	.+16     	; 0x28ae <__divsf3+0x18>
    289e:	fe d0       	rcall	.+508    	; 0x2a9c <__fp_pscA>
    28a0:	30 f0       	brcs	.+12     	; 0x28ae <__divsf3+0x18>
    28a2:	21 f4       	brne	.+8      	; 0x28ac <__divsf3+0x16>
    28a4:	5f 3f       	cpi	r21, 0xFF	; 255
    28a6:	19 f0       	breq	.+6      	; 0x28ae <__divsf3+0x18>
    28a8:	f0 c0       	rjmp	.+480    	; 0x2a8a <__fp_inf>
    28aa:	51 11       	cpse	r21, r1
    28ac:	39 c1       	rjmp	.+626    	; 0x2b20 <__fp_szero>
    28ae:	f3 c0       	rjmp	.+486    	; 0x2a96 <__fp_nan>

000028b0 <__divsf3x>:
    28b0:	14 d1       	rcall	.+552    	; 0x2ada <__fp_split3>
    28b2:	98 f3       	brcs	.-26     	; 0x289a <__divsf3+0x4>

000028b4 <__divsf3_pse>:
    28b4:	99 23       	and	r25, r25
    28b6:	c9 f3       	breq	.-14     	; 0x28aa <__divsf3+0x14>
    28b8:	55 23       	and	r21, r21
    28ba:	b1 f3       	breq	.-20     	; 0x28a8 <__divsf3+0x12>
    28bc:	95 1b       	sub	r25, r21
    28be:	55 0b       	sbc	r21, r21
    28c0:	bb 27       	eor	r27, r27
    28c2:	aa 27       	eor	r26, r26
    28c4:	62 17       	cp	r22, r18
    28c6:	73 07       	cpc	r23, r19
    28c8:	84 07       	cpc	r24, r20
    28ca:	38 f0       	brcs	.+14     	; 0x28da <__divsf3_pse+0x26>
    28cc:	9f 5f       	subi	r25, 0xFF	; 255
    28ce:	5f 4f       	sbci	r21, 0xFF	; 255
    28d0:	22 0f       	add	r18, r18
    28d2:	33 1f       	adc	r19, r19
    28d4:	44 1f       	adc	r20, r20
    28d6:	aa 1f       	adc	r26, r26
    28d8:	a9 f3       	breq	.-22     	; 0x28c4 <__divsf3_pse+0x10>
    28da:	33 d0       	rcall	.+102    	; 0x2942 <__divsf3_pse+0x8e>
    28dc:	0e 2e       	mov	r0, r30
    28de:	3a f0       	brmi	.+14     	; 0x28ee <__divsf3_pse+0x3a>
    28e0:	e0 e8       	ldi	r30, 0x80	; 128
    28e2:	30 d0       	rcall	.+96     	; 0x2944 <__divsf3_pse+0x90>
    28e4:	91 50       	subi	r25, 0x01	; 1
    28e6:	50 40       	sbci	r21, 0x00	; 0
    28e8:	e6 95       	lsr	r30
    28ea:	00 1c       	adc	r0, r0
    28ec:	ca f7       	brpl	.-14     	; 0x28e0 <__divsf3_pse+0x2c>
    28ee:	29 d0       	rcall	.+82     	; 0x2942 <__divsf3_pse+0x8e>
    28f0:	fe 2f       	mov	r31, r30
    28f2:	27 d0       	rcall	.+78     	; 0x2942 <__divsf3_pse+0x8e>
    28f4:	66 0f       	add	r22, r22
    28f6:	77 1f       	adc	r23, r23
    28f8:	88 1f       	adc	r24, r24
    28fa:	bb 1f       	adc	r27, r27
    28fc:	26 17       	cp	r18, r22
    28fe:	37 07       	cpc	r19, r23
    2900:	48 07       	cpc	r20, r24
    2902:	ab 07       	cpc	r26, r27
    2904:	b0 e8       	ldi	r27, 0x80	; 128
    2906:	09 f0       	breq	.+2      	; 0x290a <__divsf3_pse+0x56>
    2908:	bb 0b       	sbc	r27, r27
    290a:	80 2d       	mov	r24, r0
    290c:	bf 01       	movw	r22, r30
    290e:	ff 27       	eor	r31, r31
    2910:	93 58       	subi	r25, 0x83	; 131
    2912:	5f 4f       	sbci	r21, 0xFF	; 255
    2914:	2a f0       	brmi	.+10     	; 0x2920 <__divsf3_pse+0x6c>
    2916:	9e 3f       	cpi	r25, 0xFE	; 254
    2918:	51 05       	cpc	r21, r1
    291a:	68 f0       	brcs	.+26     	; 0x2936 <__divsf3_pse+0x82>
    291c:	b6 c0       	rjmp	.+364    	; 0x2a8a <__fp_inf>
    291e:	00 c1       	rjmp	.+512    	; 0x2b20 <__fp_szero>
    2920:	5f 3f       	cpi	r21, 0xFF	; 255
    2922:	ec f3       	brlt	.-6      	; 0x291e <__divsf3_pse+0x6a>
    2924:	98 3e       	cpi	r25, 0xE8	; 232
    2926:	dc f3       	brlt	.-10     	; 0x291e <__divsf3_pse+0x6a>
    2928:	86 95       	lsr	r24
    292a:	77 95       	ror	r23
    292c:	67 95       	ror	r22
    292e:	b7 95       	ror	r27
    2930:	f7 95       	ror	r31
    2932:	9f 5f       	subi	r25, 0xFF	; 255
    2934:	c9 f7       	brne	.-14     	; 0x2928 <__divsf3_pse+0x74>
    2936:	88 0f       	add	r24, r24
    2938:	91 1d       	adc	r25, r1
    293a:	96 95       	lsr	r25
    293c:	87 95       	ror	r24
    293e:	97 f9       	bld	r25, 7
    2940:	08 95       	ret
    2942:	e1 e0       	ldi	r30, 0x01	; 1
    2944:	66 0f       	add	r22, r22
    2946:	77 1f       	adc	r23, r23
    2948:	88 1f       	adc	r24, r24
    294a:	bb 1f       	adc	r27, r27
    294c:	62 17       	cp	r22, r18
    294e:	73 07       	cpc	r23, r19
    2950:	84 07       	cpc	r24, r20
    2952:	ba 07       	cpc	r27, r26
    2954:	20 f0       	brcs	.+8      	; 0x295e <__divsf3_pse+0xaa>
    2956:	62 1b       	sub	r22, r18
    2958:	73 0b       	sbc	r23, r19
    295a:	84 0b       	sbc	r24, r20
    295c:	ba 0b       	sbc	r27, r26
    295e:	ee 1f       	adc	r30, r30
    2960:	88 f7       	brcc	.-30     	; 0x2944 <__divsf3_pse+0x90>
    2962:	e0 95       	com	r30
    2964:	08 95       	ret

00002966 <__fixsfsi>:
    2966:	04 d0       	rcall	.+8      	; 0x2970 <__fixunssfsi>
    2968:	68 94       	set
    296a:	b1 11       	cpse	r27, r1
    296c:	d9 c0       	rjmp	.+434    	; 0x2b20 <__fp_szero>
    296e:	08 95       	ret

00002970 <__fixunssfsi>:
    2970:	bc d0       	rcall	.+376    	; 0x2aea <__fp_splitA>
    2972:	88 f0       	brcs	.+34     	; 0x2996 <__fixunssfsi+0x26>
    2974:	9f 57       	subi	r25, 0x7F	; 127
    2976:	90 f0       	brcs	.+36     	; 0x299c <__fixunssfsi+0x2c>
    2978:	b9 2f       	mov	r27, r25
    297a:	99 27       	eor	r25, r25
    297c:	b7 51       	subi	r27, 0x17	; 23
    297e:	a0 f0       	brcs	.+40     	; 0x29a8 <__fixunssfsi+0x38>
    2980:	d1 f0       	breq	.+52     	; 0x29b6 <__fixunssfsi+0x46>
    2982:	66 0f       	add	r22, r22
    2984:	77 1f       	adc	r23, r23
    2986:	88 1f       	adc	r24, r24
    2988:	99 1f       	adc	r25, r25
    298a:	1a f0       	brmi	.+6      	; 0x2992 <__fixunssfsi+0x22>
    298c:	ba 95       	dec	r27
    298e:	c9 f7       	brne	.-14     	; 0x2982 <__fixunssfsi+0x12>
    2990:	12 c0       	rjmp	.+36     	; 0x29b6 <__fixunssfsi+0x46>
    2992:	b1 30       	cpi	r27, 0x01	; 1
    2994:	81 f0       	breq	.+32     	; 0x29b6 <__fixunssfsi+0x46>
    2996:	c3 d0       	rcall	.+390    	; 0x2b1e <__fp_zero>
    2998:	b1 e0       	ldi	r27, 0x01	; 1
    299a:	08 95       	ret
    299c:	c0 c0       	rjmp	.+384    	; 0x2b1e <__fp_zero>
    299e:	67 2f       	mov	r22, r23
    29a0:	78 2f       	mov	r23, r24
    29a2:	88 27       	eor	r24, r24
    29a4:	b8 5f       	subi	r27, 0xF8	; 248
    29a6:	39 f0       	breq	.+14     	; 0x29b6 <__fixunssfsi+0x46>
    29a8:	b9 3f       	cpi	r27, 0xF9	; 249
    29aa:	cc f3       	brlt	.-14     	; 0x299e <__fixunssfsi+0x2e>
    29ac:	86 95       	lsr	r24
    29ae:	77 95       	ror	r23
    29b0:	67 95       	ror	r22
    29b2:	b3 95       	inc	r27
    29b4:	d9 f7       	brne	.-10     	; 0x29ac <__fixunssfsi+0x3c>
    29b6:	3e f4       	brtc	.+14     	; 0x29c6 <__fixunssfsi+0x56>
    29b8:	90 95       	com	r25
    29ba:	80 95       	com	r24
    29bc:	70 95       	com	r23
    29be:	61 95       	neg	r22
    29c0:	7f 4f       	sbci	r23, 0xFF	; 255
    29c2:	8f 4f       	sbci	r24, 0xFF	; 255
    29c4:	9f 4f       	sbci	r25, 0xFF	; 255
    29c6:	08 95       	ret

000029c8 <__floatunsisf>:
    29c8:	e8 94       	clt
    29ca:	09 c0       	rjmp	.+18     	; 0x29de <__floatsisf+0x12>

000029cc <__floatsisf>:
    29cc:	97 fb       	bst	r25, 7
    29ce:	3e f4       	brtc	.+14     	; 0x29de <__floatsisf+0x12>
    29d0:	90 95       	com	r25
    29d2:	80 95       	com	r24
    29d4:	70 95       	com	r23
    29d6:	61 95       	neg	r22
    29d8:	7f 4f       	sbci	r23, 0xFF	; 255
    29da:	8f 4f       	sbci	r24, 0xFF	; 255
    29dc:	9f 4f       	sbci	r25, 0xFF	; 255
    29de:	99 23       	and	r25, r25
    29e0:	a9 f0       	breq	.+42     	; 0x2a0c <__floatsisf+0x40>
    29e2:	f9 2f       	mov	r31, r25
    29e4:	96 e9       	ldi	r25, 0x96	; 150
    29e6:	bb 27       	eor	r27, r27
    29e8:	93 95       	inc	r25
    29ea:	f6 95       	lsr	r31
    29ec:	87 95       	ror	r24
    29ee:	77 95       	ror	r23
    29f0:	67 95       	ror	r22
    29f2:	b7 95       	ror	r27
    29f4:	f1 11       	cpse	r31, r1
    29f6:	f8 cf       	rjmp	.-16     	; 0x29e8 <__floatsisf+0x1c>
    29f8:	fa f4       	brpl	.+62     	; 0x2a38 <__floatsisf+0x6c>
    29fa:	bb 0f       	add	r27, r27
    29fc:	11 f4       	brne	.+4      	; 0x2a02 <__floatsisf+0x36>
    29fe:	60 ff       	sbrs	r22, 0
    2a00:	1b c0       	rjmp	.+54     	; 0x2a38 <__floatsisf+0x6c>
    2a02:	6f 5f       	subi	r22, 0xFF	; 255
    2a04:	7f 4f       	sbci	r23, 0xFF	; 255
    2a06:	8f 4f       	sbci	r24, 0xFF	; 255
    2a08:	9f 4f       	sbci	r25, 0xFF	; 255
    2a0a:	16 c0       	rjmp	.+44     	; 0x2a38 <__floatsisf+0x6c>
    2a0c:	88 23       	and	r24, r24
    2a0e:	11 f0       	breq	.+4      	; 0x2a14 <__floatsisf+0x48>
    2a10:	96 e9       	ldi	r25, 0x96	; 150
    2a12:	11 c0       	rjmp	.+34     	; 0x2a36 <__floatsisf+0x6a>
    2a14:	77 23       	and	r23, r23
    2a16:	21 f0       	breq	.+8      	; 0x2a20 <__floatsisf+0x54>
    2a18:	9e e8       	ldi	r25, 0x8E	; 142
    2a1a:	87 2f       	mov	r24, r23
    2a1c:	76 2f       	mov	r23, r22
    2a1e:	05 c0       	rjmp	.+10     	; 0x2a2a <__floatsisf+0x5e>
    2a20:	66 23       	and	r22, r22
    2a22:	71 f0       	breq	.+28     	; 0x2a40 <__floatsisf+0x74>
    2a24:	96 e8       	ldi	r25, 0x86	; 134
    2a26:	86 2f       	mov	r24, r22
    2a28:	70 e0       	ldi	r23, 0x00	; 0
    2a2a:	60 e0       	ldi	r22, 0x00	; 0
    2a2c:	2a f0       	brmi	.+10     	; 0x2a38 <__floatsisf+0x6c>
    2a2e:	9a 95       	dec	r25
    2a30:	66 0f       	add	r22, r22
    2a32:	77 1f       	adc	r23, r23
    2a34:	88 1f       	adc	r24, r24
    2a36:	da f7       	brpl	.-10     	; 0x2a2e <__floatsisf+0x62>
    2a38:	88 0f       	add	r24, r24
    2a3a:	96 95       	lsr	r25
    2a3c:	87 95       	ror	r24
    2a3e:	97 f9       	bld	r25, 7
    2a40:	08 95       	ret

00002a42 <__fp_cmp>:
    2a42:	99 0f       	add	r25, r25
    2a44:	00 08       	sbc	r0, r0
    2a46:	55 0f       	add	r21, r21
    2a48:	aa 0b       	sbc	r26, r26
    2a4a:	e0 e8       	ldi	r30, 0x80	; 128
    2a4c:	fe ef       	ldi	r31, 0xFE	; 254
    2a4e:	16 16       	cp	r1, r22
    2a50:	17 06       	cpc	r1, r23
    2a52:	e8 07       	cpc	r30, r24
    2a54:	f9 07       	cpc	r31, r25
    2a56:	c0 f0       	brcs	.+48     	; 0x2a88 <__fp_cmp+0x46>
    2a58:	12 16       	cp	r1, r18
    2a5a:	13 06       	cpc	r1, r19
    2a5c:	e4 07       	cpc	r30, r20
    2a5e:	f5 07       	cpc	r31, r21
    2a60:	98 f0       	brcs	.+38     	; 0x2a88 <__fp_cmp+0x46>
    2a62:	62 1b       	sub	r22, r18
    2a64:	73 0b       	sbc	r23, r19
    2a66:	84 0b       	sbc	r24, r20
    2a68:	95 0b       	sbc	r25, r21
    2a6a:	39 f4       	brne	.+14     	; 0x2a7a <__fp_cmp+0x38>
    2a6c:	0a 26       	eor	r0, r26
    2a6e:	61 f0       	breq	.+24     	; 0x2a88 <__fp_cmp+0x46>
    2a70:	23 2b       	or	r18, r19
    2a72:	24 2b       	or	r18, r20
    2a74:	25 2b       	or	r18, r21
    2a76:	21 f4       	brne	.+8      	; 0x2a80 <__fp_cmp+0x3e>
    2a78:	08 95       	ret
    2a7a:	0a 26       	eor	r0, r26
    2a7c:	09 f4       	brne	.+2      	; 0x2a80 <__fp_cmp+0x3e>
    2a7e:	a1 40       	sbci	r26, 0x01	; 1
    2a80:	a6 95       	lsr	r26
    2a82:	8f ef       	ldi	r24, 0xFF	; 255
    2a84:	81 1d       	adc	r24, r1
    2a86:	81 1d       	adc	r24, r1
    2a88:	08 95       	ret

00002a8a <__fp_inf>:
    2a8a:	97 f9       	bld	r25, 7
    2a8c:	9f 67       	ori	r25, 0x7F	; 127
    2a8e:	80 e8       	ldi	r24, 0x80	; 128
    2a90:	70 e0       	ldi	r23, 0x00	; 0
    2a92:	60 e0       	ldi	r22, 0x00	; 0
    2a94:	08 95       	ret

00002a96 <__fp_nan>:
    2a96:	9f ef       	ldi	r25, 0xFF	; 255
    2a98:	80 ec       	ldi	r24, 0xC0	; 192
    2a9a:	08 95       	ret

00002a9c <__fp_pscA>:
    2a9c:	00 24       	eor	r0, r0
    2a9e:	0a 94       	dec	r0
    2aa0:	16 16       	cp	r1, r22
    2aa2:	17 06       	cpc	r1, r23
    2aa4:	18 06       	cpc	r1, r24
    2aa6:	09 06       	cpc	r0, r25
    2aa8:	08 95       	ret

00002aaa <__fp_pscB>:
    2aaa:	00 24       	eor	r0, r0
    2aac:	0a 94       	dec	r0
    2aae:	12 16       	cp	r1, r18
    2ab0:	13 06       	cpc	r1, r19
    2ab2:	14 06       	cpc	r1, r20
    2ab4:	05 06       	cpc	r0, r21
    2ab6:	08 95       	ret

00002ab8 <__fp_round>:
    2ab8:	09 2e       	mov	r0, r25
    2aba:	03 94       	inc	r0
    2abc:	00 0c       	add	r0, r0
    2abe:	11 f4       	brne	.+4      	; 0x2ac4 <__fp_round+0xc>
    2ac0:	88 23       	and	r24, r24
    2ac2:	52 f0       	brmi	.+20     	; 0x2ad8 <__fp_round+0x20>
    2ac4:	bb 0f       	add	r27, r27
    2ac6:	40 f4       	brcc	.+16     	; 0x2ad8 <__fp_round+0x20>
    2ac8:	bf 2b       	or	r27, r31
    2aca:	11 f4       	brne	.+4      	; 0x2ad0 <__fp_round+0x18>
    2acc:	60 ff       	sbrs	r22, 0
    2ace:	04 c0       	rjmp	.+8      	; 0x2ad8 <__fp_round+0x20>
    2ad0:	6f 5f       	subi	r22, 0xFF	; 255
    2ad2:	7f 4f       	sbci	r23, 0xFF	; 255
    2ad4:	8f 4f       	sbci	r24, 0xFF	; 255
    2ad6:	9f 4f       	sbci	r25, 0xFF	; 255
    2ad8:	08 95       	ret

00002ada <__fp_split3>:
    2ada:	57 fd       	sbrc	r21, 7
    2adc:	90 58       	subi	r25, 0x80	; 128
    2ade:	44 0f       	add	r20, r20
    2ae0:	55 1f       	adc	r21, r21
    2ae2:	59 f0       	breq	.+22     	; 0x2afa <__fp_splitA+0x10>
    2ae4:	5f 3f       	cpi	r21, 0xFF	; 255
    2ae6:	71 f0       	breq	.+28     	; 0x2b04 <__fp_splitA+0x1a>
    2ae8:	47 95       	ror	r20

00002aea <__fp_splitA>:
    2aea:	88 0f       	add	r24, r24
    2aec:	97 fb       	bst	r25, 7
    2aee:	99 1f       	adc	r25, r25
    2af0:	61 f0       	breq	.+24     	; 0x2b0a <__fp_splitA+0x20>
    2af2:	9f 3f       	cpi	r25, 0xFF	; 255
    2af4:	79 f0       	breq	.+30     	; 0x2b14 <__fp_splitA+0x2a>
    2af6:	87 95       	ror	r24
    2af8:	08 95       	ret
    2afa:	12 16       	cp	r1, r18
    2afc:	13 06       	cpc	r1, r19
    2afe:	14 06       	cpc	r1, r20
    2b00:	55 1f       	adc	r21, r21
    2b02:	f2 cf       	rjmp	.-28     	; 0x2ae8 <__fp_split3+0xe>
    2b04:	46 95       	lsr	r20
    2b06:	f1 df       	rcall	.-30     	; 0x2aea <__fp_splitA>
    2b08:	08 c0       	rjmp	.+16     	; 0x2b1a <__fp_splitA+0x30>
    2b0a:	16 16       	cp	r1, r22
    2b0c:	17 06       	cpc	r1, r23
    2b0e:	18 06       	cpc	r1, r24
    2b10:	99 1f       	adc	r25, r25
    2b12:	f1 cf       	rjmp	.-30     	; 0x2af6 <__fp_splitA+0xc>
    2b14:	86 95       	lsr	r24
    2b16:	71 05       	cpc	r23, r1
    2b18:	61 05       	cpc	r22, r1
    2b1a:	08 94       	sec
    2b1c:	08 95       	ret

00002b1e <__fp_zero>:
    2b1e:	e8 94       	clt

00002b20 <__fp_szero>:
    2b20:	bb 27       	eor	r27, r27
    2b22:	66 27       	eor	r22, r22
    2b24:	77 27       	eor	r23, r23
    2b26:	cb 01       	movw	r24, r22
    2b28:	97 f9       	bld	r25, 7
    2b2a:	08 95       	ret

00002b2c <__gesf2>:
    2b2c:	8a df       	rcall	.-236    	; 0x2a42 <__fp_cmp>
    2b2e:	08 f4       	brcc	.+2      	; 0x2b32 <__gesf2+0x6>
    2b30:	8f ef       	ldi	r24, 0xFF	; 255
    2b32:	08 95       	ret

00002b34 <__mulsf3>:
    2b34:	0b d0       	rcall	.+22     	; 0x2b4c <__mulsf3x>
    2b36:	c0 cf       	rjmp	.-128    	; 0x2ab8 <__fp_round>
    2b38:	b1 df       	rcall	.-158    	; 0x2a9c <__fp_pscA>
    2b3a:	28 f0       	brcs	.+10     	; 0x2b46 <__mulsf3+0x12>
    2b3c:	b6 df       	rcall	.-148    	; 0x2aaa <__fp_pscB>
    2b3e:	18 f0       	brcs	.+6      	; 0x2b46 <__mulsf3+0x12>
    2b40:	95 23       	and	r25, r21
    2b42:	09 f0       	breq	.+2      	; 0x2b46 <__mulsf3+0x12>
    2b44:	a2 cf       	rjmp	.-188    	; 0x2a8a <__fp_inf>
    2b46:	a7 cf       	rjmp	.-178    	; 0x2a96 <__fp_nan>
    2b48:	11 24       	eor	r1, r1
    2b4a:	ea cf       	rjmp	.-44     	; 0x2b20 <__fp_szero>

00002b4c <__mulsf3x>:
    2b4c:	c6 df       	rcall	.-116    	; 0x2ada <__fp_split3>
    2b4e:	a0 f3       	brcs	.-24     	; 0x2b38 <__mulsf3+0x4>

00002b50 <__mulsf3_pse>:
    2b50:	95 9f       	mul	r25, r21
    2b52:	d1 f3       	breq	.-12     	; 0x2b48 <__mulsf3+0x14>
    2b54:	95 0f       	add	r25, r21
    2b56:	50 e0       	ldi	r21, 0x00	; 0
    2b58:	55 1f       	adc	r21, r21
    2b5a:	62 9f       	mul	r22, r18
    2b5c:	f0 01       	movw	r30, r0
    2b5e:	72 9f       	mul	r23, r18
    2b60:	bb 27       	eor	r27, r27
    2b62:	f0 0d       	add	r31, r0
    2b64:	b1 1d       	adc	r27, r1
    2b66:	63 9f       	mul	r22, r19
    2b68:	aa 27       	eor	r26, r26
    2b6a:	f0 0d       	add	r31, r0
    2b6c:	b1 1d       	adc	r27, r1
    2b6e:	aa 1f       	adc	r26, r26
    2b70:	64 9f       	mul	r22, r20
    2b72:	66 27       	eor	r22, r22
    2b74:	b0 0d       	add	r27, r0
    2b76:	a1 1d       	adc	r26, r1
    2b78:	66 1f       	adc	r22, r22
    2b7a:	82 9f       	mul	r24, r18
    2b7c:	22 27       	eor	r18, r18
    2b7e:	b0 0d       	add	r27, r0
    2b80:	a1 1d       	adc	r26, r1
    2b82:	62 1f       	adc	r22, r18
    2b84:	73 9f       	mul	r23, r19
    2b86:	b0 0d       	add	r27, r0
    2b88:	a1 1d       	adc	r26, r1
    2b8a:	62 1f       	adc	r22, r18
    2b8c:	83 9f       	mul	r24, r19
    2b8e:	a0 0d       	add	r26, r0
    2b90:	61 1d       	adc	r22, r1
    2b92:	22 1f       	adc	r18, r18
    2b94:	74 9f       	mul	r23, r20
    2b96:	33 27       	eor	r19, r19
    2b98:	a0 0d       	add	r26, r0
    2b9a:	61 1d       	adc	r22, r1
    2b9c:	23 1f       	adc	r18, r19
    2b9e:	84 9f       	mul	r24, r20
    2ba0:	60 0d       	add	r22, r0
    2ba2:	21 1d       	adc	r18, r1
    2ba4:	82 2f       	mov	r24, r18
    2ba6:	76 2f       	mov	r23, r22
    2ba8:	6a 2f       	mov	r22, r26
    2baa:	11 24       	eor	r1, r1
    2bac:	9f 57       	subi	r25, 0x7F	; 127
    2bae:	50 40       	sbci	r21, 0x00	; 0
    2bb0:	8a f0       	brmi	.+34     	; 0x2bd4 <__mulsf3_pse+0x84>
    2bb2:	e1 f0       	breq	.+56     	; 0x2bec <__mulsf3_pse+0x9c>
    2bb4:	88 23       	and	r24, r24
    2bb6:	4a f0       	brmi	.+18     	; 0x2bca <__mulsf3_pse+0x7a>
    2bb8:	ee 0f       	add	r30, r30
    2bba:	ff 1f       	adc	r31, r31
    2bbc:	bb 1f       	adc	r27, r27
    2bbe:	66 1f       	adc	r22, r22
    2bc0:	77 1f       	adc	r23, r23
    2bc2:	88 1f       	adc	r24, r24
    2bc4:	91 50       	subi	r25, 0x01	; 1
    2bc6:	50 40       	sbci	r21, 0x00	; 0
    2bc8:	a9 f7       	brne	.-22     	; 0x2bb4 <__mulsf3_pse+0x64>
    2bca:	9e 3f       	cpi	r25, 0xFE	; 254
    2bcc:	51 05       	cpc	r21, r1
    2bce:	70 f0       	brcs	.+28     	; 0x2bec <__mulsf3_pse+0x9c>
    2bd0:	5c cf       	rjmp	.-328    	; 0x2a8a <__fp_inf>
    2bd2:	a6 cf       	rjmp	.-180    	; 0x2b20 <__fp_szero>
    2bd4:	5f 3f       	cpi	r21, 0xFF	; 255
    2bd6:	ec f3       	brlt	.-6      	; 0x2bd2 <__mulsf3_pse+0x82>
    2bd8:	98 3e       	cpi	r25, 0xE8	; 232
    2bda:	dc f3       	brlt	.-10     	; 0x2bd2 <__mulsf3_pse+0x82>
    2bdc:	86 95       	lsr	r24
    2bde:	77 95       	ror	r23
    2be0:	67 95       	ror	r22
    2be2:	b7 95       	ror	r27
    2be4:	f7 95       	ror	r31
    2be6:	e7 95       	ror	r30
    2be8:	9f 5f       	subi	r25, 0xFF	; 255
    2bea:	c1 f7       	brne	.-16     	; 0x2bdc <__mulsf3_pse+0x8c>
    2bec:	fe 2b       	or	r31, r30
    2bee:	88 0f       	add	r24, r24
    2bf0:	91 1d       	adc	r25, r1
    2bf2:	96 95       	lsr	r25
    2bf4:	87 95       	ror	r24
    2bf6:	97 f9       	bld	r25, 7
    2bf8:	08 95       	ret

00002bfa <vfprintf>:
    2bfa:	a0 e1       	ldi	r26, 0x10	; 16
    2bfc:	b0 e0       	ldi	r27, 0x00	; 0
    2bfe:	e2 e0       	ldi	r30, 0x02	; 2
    2c00:	f6 e1       	ldi	r31, 0x16	; 22
    2c02:	59 c3       	rjmp	.+1714   	; 0x32b6 <__prologue_saves__>
    2c04:	7c 01       	movw	r14, r24
    2c06:	1b 01       	movw	r2, r22
    2c08:	6a 01       	movw	r12, r20
    2c0a:	fc 01       	movw	r30, r24
    2c0c:	17 82       	std	Z+7, r1	; 0x07
    2c0e:	16 82       	std	Z+6, r1	; 0x06
    2c10:	83 81       	ldd	r24, Z+3	; 0x03
    2c12:	81 ff       	sbrs	r24, 1
    2c14:	2a c3       	rjmp	.+1620   	; 0x326a <vfprintf+0x670>
    2c16:	9e 01       	movw	r18, r28
    2c18:	2f 5f       	subi	r18, 0xFF	; 255
    2c1a:	3f 4f       	sbci	r19, 0xFF	; 255
    2c1c:	39 01       	movw	r6, r18
    2c1e:	f7 01       	movw	r30, r14
    2c20:	93 81       	ldd	r25, Z+3	; 0x03
    2c22:	f1 01       	movw	r30, r2
    2c24:	93 fd       	sbrc	r25, 3
    2c26:	85 91       	lpm	r24, Z+
    2c28:	93 ff       	sbrs	r25, 3
    2c2a:	81 91       	ld	r24, Z+
    2c2c:	1f 01       	movw	r2, r30
    2c2e:	88 23       	and	r24, r24
    2c30:	09 f4       	brne	.+2      	; 0x2c34 <vfprintf+0x3a>
    2c32:	17 c3       	rjmp	.+1582   	; 0x3262 <vfprintf+0x668>
    2c34:	85 32       	cpi	r24, 0x25	; 37
    2c36:	39 f4       	brne	.+14     	; 0x2c46 <vfprintf+0x4c>
    2c38:	93 fd       	sbrc	r25, 3
    2c3a:	85 91       	lpm	r24, Z+
    2c3c:	93 ff       	sbrs	r25, 3
    2c3e:	81 91       	ld	r24, Z+
    2c40:	1f 01       	movw	r2, r30
    2c42:	85 32       	cpi	r24, 0x25	; 37
    2c44:	31 f4       	brne	.+12     	; 0x2c52 <vfprintf+0x58>
    2c46:	b7 01       	movw	r22, r14
    2c48:	90 e0       	ldi	r25, 0x00	; 0
    2c4a:	6e d4       	rcall	.+2268   	; 0x3528 <fputc>
    2c4c:	56 01       	movw	r10, r12
    2c4e:	65 01       	movw	r12, r10
    2c50:	e6 cf       	rjmp	.-52     	; 0x2c1e <vfprintf+0x24>
    2c52:	10 e0       	ldi	r17, 0x00	; 0
    2c54:	51 2c       	mov	r5, r1
    2c56:	91 2c       	mov	r9, r1
    2c58:	ff e1       	ldi	r31, 0x1F	; 31
    2c5a:	f9 15       	cp	r31, r9
    2c5c:	d8 f0       	brcs	.+54     	; 0x2c94 <vfprintf+0x9a>
    2c5e:	8b 32       	cpi	r24, 0x2B	; 43
    2c60:	79 f0       	breq	.+30     	; 0x2c80 <vfprintf+0x86>
    2c62:	38 f4       	brcc	.+14     	; 0x2c72 <vfprintf+0x78>
    2c64:	80 32       	cpi	r24, 0x20	; 32
    2c66:	79 f0       	breq	.+30     	; 0x2c86 <vfprintf+0x8c>
    2c68:	83 32       	cpi	r24, 0x23	; 35
    2c6a:	a1 f4       	brne	.+40     	; 0x2c94 <vfprintf+0x9a>
    2c6c:	f9 2d       	mov	r31, r9
    2c6e:	f0 61       	ori	r31, 0x10	; 16
    2c70:	2e c0       	rjmp	.+92     	; 0x2cce <vfprintf+0xd4>
    2c72:	8d 32       	cpi	r24, 0x2D	; 45
    2c74:	61 f0       	breq	.+24     	; 0x2c8e <vfprintf+0x94>
    2c76:	80 33       	cpi	r24, 0x30	; 48
    2c78:	69 f4       	brne	.+26     	; 0x2c94 <vfprintf+0x9a>
    2c7a:	29 2d       	mov	r18, r9
    2c7c:	21 60       	ori	r18, 0x01	; 1
    2c7e:	2d c0       	rjmp	.+90     	; 0x2cda <vfprintf+0xe0>
    2c80:	39 2d       	mov	r19, r9
    2c82:	32 60       	ori	r19, 0x02	; 2
    2c84:	93 2e       	mov	r9, r19
    2c86:	89 2d       	mov	r24, r9
    2c88:	84 60       	ori	r24, 0x04	; 4
    2c8a:	98 2e       	mov	r9, r24
    2c8c:	2a c0       	rjmp	.+84     	; 0x2ce2 <vfprintf+0xe8>
    2c8e:	e9 2d       	mov	r30, r9
    2c90:	e8 60       	ori	r30, 0x08	; 8
    2c92:	15 c0       	rjmp	.+42     	; 0x2cbe <vfprintf+0xc4>
    2c94:	97 fc       	sbrc	r9, 7
    2c96:	2d c0       	rjmp	.+90     	; 0x2cf2 <vfprintf+0xf8>
    2c98:	20 ed       	ldi	r18, 0xD0	; 208
    2c9a:	28 0f       	add	r18, r24
    2c9c:	2a 30       	cpi	r18, 0x0A	; 10
    2c9e:	88 f4       	brcc	.+34     	; 0x2cc2 <vfprintf+0xc8>
    2ca0:	96 fe       	sbrs	r9, 6
    2ca2:	06 c0       	rjmp	.+12     	; 0x2cb0 <vfprintf+0xb6>
    2ca4:	3a e0       	ldi	r19, 0x0A	; 10
    2ca6:	13 9f       	mul	r17, r19
    2ca8:	20 0d       	add	r18, r0
    2caa:	11 24       	eor	r1, r1
    2cac:	12 2f       	mov	r17, r18
    2cae:	19 c0       	rjmp	.+50     	; 0x2ce2 <vfprintf+0xe8>
    2cb0:	8a e0       	ldi	r24, 0x0A	; 10
    2cb2:	58 9e       	mul	r5, r24
    2cb4:	20 0d       	add	r18, r0
    2cb6:	11 24       	eor	r1, r1
    2cb8:	52 2e       	mov	r5, r18
    2cba:	e9 2d       	mov	r30, r9
    2cbc:	e0 62       	ori	r30, 0x20	; 32
    2cbe:	9e 2e       	mov	r9, r30
    2cc0:	10 c0       	rjmp	.+32     	; 0x2ce2 <vfprintf+0xe8>
    2cc2:	8e 32       	cpi	r24, 0x2E	; 46
    2cc4:	31 f4       	brne	.+12     	; 0x2cd2 <vfprintf+0xd8>
    2cc6:	96 fc       	sbrc	r9, 6
    2cc8:	cc c2       	rjmp	.+1432   	; 0x3262 <vfprintf+0x668>
    2cca:	f9 2d       	mov	r31, r9
    2ccc:	f0 64       	ori	r31, 0x40	; 64
    2cce:	9f 2e       	mov	r9, r31
    2cd0:	08 c0       	rjmp	.+16     	; 0x2ce2 <vfprintf+0xe8>
    2cd2:	8c 36       	cpi	r24, 0x6C	; 108
    2cd4:	21 f4       	brne	.+8      	; 0x2cde <vfprintf+0xe4>
    2cd6:	29 2d       	mov	r18, r9
    2cd8:	20 68       	ori	r18, 0x80	; 128
    2cda:	92 2e       	mov	r9, r18
    2cdc:	02 c0       	rjmp	.+4      	; 0x2ce2 <vfprintf+0xe8>
    2cde:	88 36       	cpi	r24, 0x68	; 104
    2ce0:	41 f4       	brne	.+16     	; 0x2cf2 <vfprintf+0xf8>
    2ce2:	f1 01       	movw	r30, r2
    2ce4:	93 fd       	sbrc	r25, 3
    2ce6:	85 91       	lpm	r24, Z+
    2ce8:	93 ff       	sbrs	r25, 3
    2cea:	81 91       	ld	r24, Z+
    2cec:	1f 01       	movw	r2, r30
    2cee:	81 11       	cpse	r24, r1
    2cf0:	b3 cf       	rjmp	.-154    	; 0x2c58 <vfprintf+0x5e>
    2cf2:	9b eb       	ldi	r25, 0xBB	; 187
    2cf4:	98 0f       	add	r25, r24
    2cf6:	93 30       	cpi	r25, 0x03	; 3
    2cf8:	20 f4       	brcc	.+8      	; 0x2d02 <vfprintf+0x108>
    2cfa:	99 2d       	mov	r25, r9
    2cfc:	90 61       	ori	r25, 0x10	; 16
    2cfe:	80 5e       	subi	r24, 0xE0	; 224
    2d00:	07 c0       	rjmp	.+14     	; 0x2d10 <vfprintf+0x116>
    2d02:	9b e9       	ldi	r25, 0x9B	; 155
    2d04:	98 0f       	add	r25, r24
    2d06:	93 30       	cpi	r25, 0x03	; 3
    2d08:	08 f0       	brcs	.+2      	; 0x2d0c <vfprintf+0x112>
    2d0a:	59 c1       	rjmp	.+690    	; 0x2fbe <vfprintf+0x3c4>
    2d0c:	99 2d       	mov	r25, r9
    2d0e:	9f 7e       	andi	r25, 0xEF	; 239
    2d10:	96 ff       	sbrs	r25, 6
    2d12:	16 e0       	ldi	r17, 0x06	; 6
    2d14:	9f 73       	andi	r25, 0x3F	; 63
    2d16:	99 2e       	mov	r9, r25
    2d18:	85 36       	cpi	r24, 0x65	; 101
    2d1a:	19 f4       	brne	.+6      	; 0x2d22 <vfprintf+0x128>
    2d1c:	90 64       	ori	r25, 0x40	; 64
    2d1e:	99 2e       	mov	r9, r25
    2d20:	08 c0       	rjmp	.+16     	; 0x2d32 <vfprintf+0x138>
    2d22:	86 36       	cpi	r24, 0x66	; 102
    2d24:	21 f4       	brne	.+8      	; 0x2d2e <vfprintf+0x134>
    2d26:	39 2f       	mov	r19, r25
    2d28:	30 68       	ori	r19, 0x80	; 128
    2d2a:	93 2e       	mov	r9, r19
    2d2c:	02 c0       	rjmp	.+4      	; 0x2d32 <vfprintf+0x138>
    2d2e:	11 11       	cpse	r17, r1
    2d30:	11 50       	subi	r17, 0x01	; 1
    2d32:	97 fe       	sbrs	r9, 7
    2d34:	07 c0       	rjmp	.+14     	; 0x2d44 <vfprintf+0x14a>
    2d36:	1c 33       	cpi	r17, 0x3C	; 60
    2d38:	50 f4       	brcc	.+20     	; 0x2d4e <vfprintf+0x154>
    2d3a:	44 24       	eor	r4, r4
    2d3c:	43 94       	inc	r4
    2d3e:	41 0e       	add	r4, r17
    2d40:	27 e0       	ldi	r18, 0x07	; 7
    2d42:	0b c0       	rjmp	.+22     	; 0x2d5a <vfprintf+0x160>
    2d44:	18 30       	cpi	r17, 0x08	; 8
    2d46:	38 f0       	brcs	.+14     	; 0x2d56 <vfprintf+0x15c>
    2d48:	27 e0       	ldi	r18, 0x07	; 7
    2d4a:	17 e0       	ldi	r17, 0x07	; 7
    2d4c:	05 c0       	rjmp	.+10     	; 0x2d58 <vfprintf+0x15e>
    2d4e:	27 e0       	ldi	r18, 0x07	; 7
    2d50:	9c e3       	ldi	r25, 0x3C	; 60
    2d52:	49 2e       	mov	r4, r25
    2d54:	02 c0       	rjmp	.+4      	; 0x2d5a <vfprintf+0x160>
    2d56:	21 2f       	mov	r18, r17
    2d58:	41 2c       	mov	r4, r1
    2d5a:	56 01       	movw	r10, r12
    2d5c:	84 e0       	ldi	r24, 0x04	; 4
    2d5e:	a8 0e       	add	r10, r24
    2d60:	b1 1c       	adc	r11, r1
    2d62:	f6 01       	movw	r30, r12
    2d64:	60 81       	ld	r22, Z
    2d66:	71 81       	ldd	r23, Z+1	; 0x01
    2d68:	82 81       	ldd	r24, Z+2	; 0x02
    2d6a:	93 81       	ldd	r25, Z+3	; 0x03
    2d6c:	04 2d       	mov	r16, r4
    2d6e:	a3 01       	movw	r20, r6
    2d70:	d9 d2       	rcall	.+1458   	; 0x3324 <__ftoa_engine>
    2d72:	6c 01       	movw	r12, r24
    2d74:	f9 81       	ldd	r31, Y+1	; 0x01
    2d76:	fc 87       	std	Y+12, r31	; 0x0c
    2d78:	f0 ff       	sbrs	r31, 0
    2d7a:	02 c0       	rjmp	.+4      	; 0x2d80 <vfprintf+0x186>
    2d7c:	f3 ff       	sbrs	r31, 3
    2d7e:	06 c0       	rjmp	.+12     	; 0x2d8c <vfprintf+0x192>
    2d80:	91 fc       	sbrc	r9, 1
    2d82:	06 c0       	rjmp	.+12     	; 0x2d90 <vfprintf+0x196>
    2d84:	92 fe       	sbrs	r9, 2
    2d86:	06 c0       	rjmp	.+12     	; 0x2d94 <vfprintf+0x19a>
    2d88:	00 e2       	ldi	r16, 0x20	; 32
    2d8a:	05 c0       	rjmp	.+10     	; 0x2d96 <vfprintf+0x19c>
    2d8c:	0d e2       	ldi	r16, 0x2D	; 45
    2d8e:	03 c0       	rjmp	.+6      	; 0x2d96 <vfprintf+0x19c>
    2d90:	0b e2       	ldi	r16, 0x2B	; 43
    2d92:	01 c0       	rjmp	.+2      	; 0x2d96 <vfprintf+0x19c>
    2d94:	00 e0       	ldi	r16, 0x00	; 0
    2d96:	8c 85       	ldd	r24, Y+12	; 0x0c
    2d98:	8c 70       	andi	r24, 0x0C	; 12
    2d9a:	19 f0       	breq	.+6      	; 0x2da2 <vfprintf+0x1a8>
    2d9c:	01 11       	cpse	r16, r1
    2d9e:	43 c2       	rjmp	.+1158   	; 0x3226 <vfprintf+0x62c>
    2da0:	80 c2       	rjmp	.+1280   	; 0x32a2 <vfprintf+0x6a8>
    2da2:	97 fe       	sbrs	r9, 7
    2da4:	10 c0       	rjmp	.+32     	; 0x2dc6 <vfprintf+0x1cc>
    2da6:	4c 0c       	add	r4, r12
    2da8:	fc 85       	ldd	r31, Y+12	; 0x0c
    2daa:	f4 ff       	sbrs	r31, 4
    2dac:	04 c0       	rjmp	.+8      	; 0x2db6 <vfprintf+0x1bc>
    2dae:	8a 81       	ldd	r24, Y+2	; 0x02
    2db0:	81 33       	cpi	r24, 0x31	; 49
    2db2:	09 f4       	brne	.+2      	; 0x2db6 <vfprintf+0x1bc>
    2db4:	4a 94       	dec	r4
    2db6:	14 14       	cp	r1, r4
    2db8:	74 f5       	brge	.+92     	; 0x2e16 <vfprintf+0x21c>
    2dba:	28 e0       	ldi	r18, 0x08	; 8
    2dbc:	24 15       	cp	r18, r4
    2dbe:	78 f5       	brcc	.+94     	; 0x2e1e <vfprintf+0x224>
    2dc0:	88 e0       	ldi	r24, 0x08	; 8
    2dc2:	48 2e       	mov	r4, r24
    2dc4:	2c c0       	rjmp	.+88     	; 0x2e1e <vfprintf+0x224>
    2dc6:	96 fc       	sbrc	r9, 6
    2dc8:	2a c0       	rjmp	.+84     	; 0x2e1e <vfprintf+0x224>
    2dca:	81 2f       	mov	r24, r17
    2dcc:	90 e0       	ldi	r25, 0x00	; 0
    2dce:	8c 15       	cp	r24, r12
    2dd0:	9d 05       	cpc	r25, r13
    2dd2:	9c f0       	brlt	.+38     	; 0x2dfa <vfprintf+0x200>
    2dd4:	3c ef       	ldi	r19, 0xFC	; 252
    2dd6:	c3 16       	cp	r12, r19
    2dd8:	3f ef       	ldi	r19, 0xFF	; 255
    2dda:	d3 06       	cpc	r13, r19
    2ddc:	74 f0       	brlt	.+28     	; 0x2dfa <vfprintf+0x200>
    2dde:	89 2d       	mov	r24, r9
    2de0:	80 68       	ori	r24, 0x80	; 128
    2de2:	98 2e       	mov	r9, r24
    2de4:	0a c0       	rjmp	.+20     	; 0x2dfa <vfprintf+0x200>
    2de6:	e2 e0       	ldi	r30, 0x02	; 2
    2de8:	f0 e0       	ldi	r31, 0x00	; 0
    2dea:	ec 0f       	add	r30, r28
    2dec:	fd 1f       	adc	r31, r29
    2dee:	e1 0f       	add	r30, r17
    2df0:	f1 1d       	adc	r31, r1
    2df2:	80 81       	ld	r24, Z
    2df4:	80 33       	cpi	r24, 0x30	; 48
    2df6:	19 f4       	brne	.+6      	; 0x2dfe <vfprintf+0x204>
    2df8:	11 50       	subi	r17, 0x01	; 1
    2dfa:	11 11       	cpse	r17, r1
    2dfc:	f4 cf       	rjmp	.-24     	; 0x2de6 <vfprintf+0x1ec>
    2dfe:	97 fe       	sbrs	r9, 7
    2e00:	0e c0       	rjmp	.+28     	; 0x2e1e <vfprintf+0x224>
    2e02:	44 24       	eor	r4, r4
    2e04:	43 94       	inc	r4
    2e06:	41 0e       	add	r4, r17
    2e08:	81 2f       	mov	r24, r17
    2e0a:	90 e0       	ldi	r25, 0x00	; 0
    2e0c:	c8 16       	cp	r12, r24
    2e0e:	d9 06       	cpc	r13, r25
    2e10:	2c f4       	brge	.+10     	; 0x2e1c <vfprintf+0x222>
    2e12:	1c 19       	sub	r17, r12
    2e14:	04 c0       	rjmp	.+8      	; 0x2e1e <vfprintf+0x224>
    2e16:	44 24       	eor	r4, r4
    2e18:	43 94       	inc	r4
    2e1a:	01 c0       	rjmp	.+2      	; 0x2e1e <vfprintf+0x224>
    2e1c:	10 e0       	ldi	r17, 0x00	; 0
    2e1e:	97 fe       	sbrs	r9, 7
    2e20:	06 c0       	rjmp	.+12     	; 0x2e2e <vfprintf+0x234>
    2e22:	1c 14       	cp	r1, r12
    2e24:	1d 04       	cpc	r1, r13
    2e26:	34 f4       	brge	.+12     	; 0x2e34 <vfprintf+0x23a>
    2e28:	c6 01       	movw	r24, r12
    2e2a:	01 96       	adiw	r24, 0x01	; 1
    2e2c:	05 c0       	rjmp	.+10     	; 0x2e38 <vfprintf+0x23e>
    2e2e:	85 e0       	ldi	r24, 0x05	; 5
    2e30:	90 e0       	ldi	r25, 0x00	; 0
    2e32:	02 c0       	rjmp	.+4      	; 0x2e38 <vfprintf+0x23e>
    2e34:	81 e0       	ldi	r24, 0x01	; 1
    2e36:	90 e0       	ldi	r25, 0x00	; 0
    2e38:	01 11       	cpse	r16, r1
    2e3a:	01 96       	adiw	r24, 0x01	; 1
    2e3c:	11 23       	and	r17, r17
    2e3e:	31 f0       	breq	.+12     	; 0x2e4c <vfprintf+0x252>
    2e40:	21 2f       	mov	r18, r17
    2e42:	30 e0       	ldi	r19, 0x00	; 0
    2e44:	2f 5f       	subi	r18, 0xFF	; 255
    2e46:	3f 4f       	sbci	r19, 0xFF	; 255
    2e48:	82 0f       	add	r24, r18
    2e4a:	93 1f       	adc	r25, r19
    2e4c:	25 2d       	mov	r18, r5
    2e4e:	30 e0       	ldi	r19, 0x00	; 0
    2e50:	82 17       	cp	r24, r18
    2e52:	93 07       	cpc	r25, r19
    2e54:	14 f4       	brge	.+4      	; 0x2e5a <vfprintf+0x260>
    2e56:	58 1a       	sub	r5, r24
    2e58:	01 c0       	rjmp	.+2      	; 0x2e5c <vfprintf+0x262>
    2e5a:	51 2c       	mov	r5, r1
    2e5c:	89 2d       	mov	r24, r9
    2e5e:	89 70       	andi	r24, 0x09	; 9
    2e60:	41 f4       	brne	.+16     	; 0x2e72 <vfprintf+0x278>
    2e62:	55 20       	and	r5, r5
    2e64:	31 f0       	breq	.+12     	; 0x2e72 <vfprintf+0x278>
    2e66:	b7 01       	movw	r22, r14
    2e68:	80 e2       	ldi	r24, 0x20	; 32
    2e6a:	90 e0       	ldi	r25, 0x00	; 0
    2e6c:	5d d3       	rcall	.+1722   	; 0x3528 <fputc>
    2e6e:	5a 94       	dec	r5
    2e70:	f8 cf       	rjmp	.-16     	; 0x2e62 <vfprintf+0x268>
    2e72:	00 23       	and	r16, r16
    2e74:	21 f0       	breq	.+8      	; 0x2e7e <vfprintf+0x284>
    2e76:	b7 01       	movw	r22, r14
    2e78:	80 2f       	mov	r24, r16
    2e7a:	90 e0       	ldi	r25, 0x00	; 0
    2e7c:	55 d3       	rcall	.+1706   	; 0x3528 <fputc>
    2e7e:	93 fc       	sbrc	r9, 3
    2e80:	08 c0       	rjmp	.+16     	; 0x2e92 <vfprintf+0x298>
    2e82:	55 20       	and	r5, r5
    2e84:	31 f0       	breq	.+12     	; 0x2e92 <vfprintf+0x298>
    2e86:	b7 01       	movw	r22, r14
    2e88:	80 e3       	ldi	r24, 0x30	; 48
    2e8a:	90 e0       	ldi	r25, 0x00	; 0
    2e8c:	4d d3       	rcall	.+1690   	; 0x3528 <fputc>
    2e8e:	5a 94       	dec	r5
    2e90:	f8 cf       	rjmp	.-16     	; 0x2e82 <vfprintf+0x288>
    2e92:	97 fe       	sbrs	r9, 7
    2e94:	4a c0       	rjmp	.+148    	; 0x2f2a <vfprintf+0x330>
    2e96:	46 01       	movw	r8, r12
    2e98:	d7 fe       	sbrs	r13, 7
    2e9a:	02 c0       	rjmp	.+4      	; 0x2ea0 <vfprintf+0x2a6>
    2e9c:	81 2c       	mov	r8, r1
    2e9e:	91 2c       	mov	r9, r1
    2ea0:	c6 01       	movw	r24, r12
    2ea2:	88 19       	sub	r24, r8
    2ea4:	99 09       	sbc	r25, r9
    2ea6:	f3 01       	movw	r30, r6
    2ea8:	e8 0f       	add	r30, r24
    2eaa:	f9 1f       	adc	r31, r25
    2eac:	fe 87       	std	Y+14, r31	; 0x0e
    2eae:	ed 87       	std	Y+13, r30	; 0x0d
    2eb0:	96 01       	movw	r18, r12
    2eb2:	24 19       	sub	r18, r4
    2eb4:	31 09       	sbc	r19, r1
    2eb6:	38 8b       	std	Y+16, r19	; 0x10
    2eb8:	2f 87       	std	Y+15, r18	; 0x0f
    2eba:	01 2f       	mov	r16, r17
    2ebc:	10 e0       	ldi	r17, 0x00	; 0
    2ebe:	11 95       	neg	r17
    2ec0:	01 95       	neg	r16
    2ec2:	11 09       	sbc	r17, r1
    2ec4:	3f ef       	ldi	r19, 0xFF	; 255
    2ec6:	83 16       	cp	r8, r19
    2ec8:	93 06       	cpc	r9, r19
    2eca:	21 f4       	brne	.+8      	; 0x2ed4 <vfprintf+0x2da>
    2ecc:	b7 01       	movw	r22, r14
    2ece:	8e e2       	ldi	r24, 0x2E	; 46
    2ed0:	90 e0       	ldi	r25, 0x00	; 0
    2ed2:	2a d3       	rcall	.+1620   	; 0x3528 <fputc>
    2ed4:	c8 14       	cp	r12, r8
    2ed6:	d9 04       	cpc	r13, r9
    2ed8:	4c f0       	brlt	.+18     	; 0x2eec <vfprintf+0x2f2>
    2eda:	8f 85       	ldd	r24, Y+15	; 0x0f
    2edc:	98 89       	ldd	r25, Y+16	; 0x10
    2ede:	88 15       	cp	r24, r8
    2ee0:	99 05       	cpc	r25, r9
    2ee2:	24 f4       	brge	.+8      	; 0x2eec <vfprintf+0x2f2>
    2ee4:	ed 85       	ldd	r30, Y+13	; 0x0d
    2ee6:	fe 85       	ldd	r31, Y+14	; 0x0e
    2ee8:	81 81       	ldd	r24, Z+1	; 0x01
    2eea:	01 c0       	rjmp	.+2      	; 0x2eee <vfprintf+0x2f4>
    2eec:	80 e3       	ldi	r24, 0x30	; 48
    2eee:	f1 e0       	ldi	r31, 0x01	; 1
    2ef0:	8f 1a       	sub	r8, r31
    2ef2:	91 08       	sbc	r9, r1
    2ef4:	2d 85       	ldd	r18, Y+13	; 0x0d
    2ef6:	3e 85       	ldd	r19, Y+14	; 0x0e
    2ef8:	2f 5f       	subi	r18, 0xFF	; 255
    2efa:	3f 4f       	sbci	r19, 0xFF	; 255
    2efc:	3e 87       	std	Y+14, r19	; 0x0e
    2efe:	2d 87       	std	Y+13, r18	; 0x0d
    2f00:	80 16       	cp	r8, r16
    2f02:	91 06       	cpc	r9, r17
    2f04:	24 f0       	brlt	.+8      	; 0x2f0e <vfprintf+0x314>
    2f06:	b7 01       	movw	r22, r14
    2f08:	90 e0       	ldi	r25, 0x00	; 0
    2f0a:	0e d3       	rcall	.+1564   	; 0x3528 <fputc>
    2f0c:	db cf       	rjmp	.-74     	; 0x2ec4 <vfprintf+0x2ca>
    2f0e:	c8 14       	cp	r12, r8
    2f10:	d9 04       	cpc	r13, r9
    2f12:	41 f4       	brne	.+16     	; 0x2f24 <vfprintf+0x32a>
    2f14:	9a 81       	ldd	r25, Y+2	; 0x02
    2f16:	96 33       	cpi	r25, 0x36	; 54
    2f18:	20 f4       	brcc	.+8      	; 0x2f22 <vfprintf+0x328>
    2f1a:	95 33       	cpi	r25, 0x35	; 53
    2f1c:	19 f4       	brne	.+6      	; 0x2f24 <vfprintf+0x32a>
    2f1e:	3c 85       	ldd	r19, Y+12	; 0x0c
    2f20:	34 ff       	sbrs	r19, 4
    2f22:	81 e3       	ldi	r24, 0x31	; 49
    2f24:	b7 01       	movw	r22, r14
    2f26:	90 e0       	ldi	r25, 0x00	; 0
    2f28:	48 c0       	rjmp	.+144    	; 0x2fba <vfprintf+0x3c0>
    2f2a:	8a 81       	ldd	r24, Y+2	; 0x02
    2f2c:	81 33       	cpi	r24, 0x31	; 49
    2f2e:	19 f0       	breq	.+6      	; 0x2f36 <vfprintf+0x33c>
    2f30:	9c 85       	ldd	r25, Y+12	; 0x0c
    2f32:	9f 7e       	andi	r25, 0xEF	; 239
    2f34:	9c 87       	std	Y+12, r25	; 0x0c
    2f36:	b7 01       	movw	r22, r14
    2f38:	90 e0       	ldi	r25, 0x00	; 0
    2f3a:	f6 d2       	rcall	.+1516   	; 0x3528 <fputc>
    2f3c:	11 11       	cpse	r17, r1
    2f3e:	05 c0       	rjmp	.+10     	; 0x2f4a <vfprintf+0x350>
    2f40:	94 fc       	sbrc	r9, 4
    2f42:	16 c0       	rjmp	.+44     	; 0x2f70 <vfprintf+0x376>
    2f44:	85 e6       	ldi	r24, 0x65	; 101
    2f46:	90 e0       	ldi	r25, 0x00	; 0
    2f48:	15 c0       	rjmp	.+42     	; 0x2f74 <vfprintf+0x37a>
    2f4a:	b7 01       	movw	r22, r14
    2f4c:	8e e2       	ldi	r24, 0x2E	; 46
    2f4e:	90 e0       	ldi	r25, 0x00	; 0
    2f50:	eb d2       	rcall	.+1494   	; 0x3528 <fputc>
    2f52:	1e 5f       	subi	r17, 0xFE	; 254
    2f54:	82 e0       	ldi	r24, 0x02	; 2
    2f56:	01 e0       	ldi	r16, 0x01	; 1
    2f58:	08 0f       	add	r16, r24
    2f5a:	f3 01       	movw	r30, r6
    2f5c:	e8 0f       	add	r30, r24
    2f5e:	f1 1d       	adc	r31, r1
    2f60:	80 81       	ld	r24, Z
    2f62:	b7 01       	movw	r22, r14
    2f64:	90 e0       	ldi	r25, 0x00	; 0
    2f66:	e0 d2       	rcall	.+1472   	; 0x3528 <fputc>
    2f68:	80 2f       	mov	r24, r16
    2f6a:	01 13       	cpse	r16, r17
    2f6c:	f4 cf       	rjmp	.-24     	; 0x2f56 <vfprintf+0x35c>
    2f6e:	e8 cf       	rjmp	.-48     	; 0x2f40 <vfprintf+0x346>
    2f70:	85 e4       	ldi	r24, 0x45	; 69
    2f72:	90 e0       	ldi	r25, 0x00	; 0
    2f74:	b7 01       	movw	r22, r14
    2f76:	d8 d2       	rcall	.+1456   	; 0x3528 <fputc>
    2f78:	d7 fc       	sbrc	r13, 7
    2f7a:	06 c0       	rjmp	.+12     	; 0x2f88 <vfprintf+0x38e>
    2f7c:	c1 14       	cp	r12, r1
    2f7e:	d1 04       	cpc	r13, r1
    2f80:	41 f4       	brne	.+16     	; 0x2f92 <vfprintf+0x398>
    2f82:	ec 85       	ldd	r30, Y+12	; 0x0c
    2f84:	e4 ff       	sbrs	r30, 4
    2f86:	05 c0       	rjmp	.+10     	; 0x2f92 <vfprintf+0x398>
    2f88:	d1 94       	neg	r13
    2f8a:	c1 94       	neg	r12
    2f8c:	d1 08       	sbc	r13, r1
    2f8e:	8d e2       	ldi	r24, 0x2D	; 45
    2f90:	01 c0       	rjmp	.+2      	; 0x2f94 <vfprintf+0x39a>
    2f92:	8b e2       	ldi	r24, 0x2B	; 43
    2f94:	b7 01       	movw	r22, r14
    2f96:	90 e0       	ldi	r25, 0x00	; 0
    2f98:	c7 d2       	rcall	.+1422   	; 0x3528 <fputc>
    2f9a:	80 e3       	ldi	r24, 0x30	; 48
    2f9c:	2a e0       	ldi	r18, 0x0A	; 10
    2f9e:	c2 16       	cp	r12, r18
    2fa0:	d1 04       	cpc	r13, r1
    2fa2:	2c f0       	brlt	.+10     	; 0x2fae <vfprintf+0x3b4>
    2fa4:	8f 5f       	subi	r24, 0xFF	; 255
    2fa6:	fa e0       	ldi	r31, 0x0A	; 10
    2fa8:	cf 1a       	sub	r12, r31
    2faa:	d1 08       	sbc	r13, r1
    2fac:	f7 cf       	rjmp	.-18     	; 0x2f9c <vfprintf+0x3a2>
    2fae:	b7 01       	movw	r22, r14
    2fb0:	90 e0       	ldi	r25, 0x00	; 0
    2fb2:	ba d2       	rcall	.+1396   	; 0x3528 <fputc>
    2fb4:	b7 01       	movw	r22, r14
    2fb6:	c6 01       	movw	r24, r12
    2fb8:	c0 96       	adiw	r24, 0x30	; 48
    2fba:	b6 d2       	rcall	.+1388   	; 0x3528 <fputc>
    2fbc:	49 c1       	rjmp	.+658    	; 0x3250 <vfprintf+0x656>
    2fbe:	83 36       	cpi	r24, 0x63	; 99
    2fc0:	31 f0       	breq	.+12     	; 0x2fce <vfprintf+0x3d4>
    2fc2:	83 37       	cpi	r24, 0x73	; 115
    2fc4:	79 f0       	breq	.+30     	; 0x2fe4 <vfprintf+0x3ea>
    2fc6:	83 35       	cpi	r24, 0x53	; 83
    2fc8:	09 f0       	breq	.+2      	; 0x2fcc <vfprintf+0x3d2>
    2fca:	52 c0       	rjmp	.+164    	; 0x3070 <vfprintf+0x476>
    2fcc:	1f c0       	rjmp	.+62     	; 0x300c <vfprintf+0x412>
    2fce:	56 01       	movw	r10, r12
    2fd0:	32 e0       	ldi	r19, 0x02	; 2
    2fd2:	a3 0e       	add	r10, r19
    2fd4:	b1 1c       	adc	r11, r1
    2fd6:	f6 01       	movw	r30, r12
    2fd8:	80 81       	ld	r24, Z
    2fda:	89 83       	std	Y+1, r24	; 0x01
    2fdc:	01 e0       	ldi	r16, 0x01	; 1
    2fde:	10 e0       	ldi	r17, 0x00	; 0
    2fe0:	63 01       	movw	r12, r6
    2fe2:	11 c0       	rjmp	.+34     	; 0x3006 <vfprintf+0x40c>
    2fe4:	56 01       	movw	r10, r12
    2fe6:	f2 e0       	ldi	r31, 0x02	; 2
    2fe8:	af 0e       	add	r10, r31
    2fea:	b1 1c       	adc	r11, r1
    2fec:	f6 01       	movw	r30, r12
    2fee:	c0 80       	ld	r12, Z
    2ff0:	d1 80       	ldd	r13, Z+1	; 0x01
    2ff2:	96 fe       	sbrs	r9, 6
    2ff4:	03 c0       	rjmp	.+6      	; 0x2ffc <vfprintf+0x402>
    2ff6:	61 2f       	mov	r22, r17
    2ff8:	70 e0       	ldi	r23, 0x00	; 0
    2ffa:	02 c0       	rjmp	.+4      	; 0x3000 <vfprintf+0x406>
    2ffc:	6f ef       	ldi	r22, 0xFF	; 255
    2ffe:	7f ef       	ldi	r23, 0xFF	; 255
    3000:	c6 01       	movw	r24, r12
    3002:	87 d2       	rcall	.+1294   	; 0x3512 <strnlen>
    3004:	8c 01       	movw	r16, r24
    3006:	f9 2d       	mov	r31, r9
    3008:	ff 77       	andi	r31, 0x7F	; 127
    300a:	13 c0       	rjmp	.+38     	; 0x3032 <vfprintf+0x438>
    300c:	56 01       	movw	r10, r12
    300e:	22 e0       	ldi	r18, 0x02	; 2
    3010:	a2 0e       	add	r10, r18
    3012:	b1 1c       	adc	r11, r1
    3014:	f6 01       	movw	r30, r12
    3016:	c0 80       	ld	r12, Z
    3018:	d1 80       	ldd	r13, Z+1	; 0x01
    301a:	96 fe       	sbrs	r9, 6
    301c:	03 c0       	rjmp	.+6      	; 0x3024 <vfprintf+0x42a>
    301e:	61 2f       	mov	r22, r17
    3020:	70 e0       	ldi	r23, 0x00	; 0
    3022:	02 c0       	rjmp	.+4      	; 0x3028 <vfprintf+0x42e>
    3024:	6f ef       	ldi	r22, 0xFF	; 255
    3026:	7f ef       	ldi	r23, 0xFF	; 255
    3028:	c6 01       	movw	r24, r12
    302a:	54 d2       	rcall	.+1192   	; 0x34d4 <strnlen_P>
    302c:	8c 01       	movw	r16, r24
    302e:	f9 2d       	mov	r31, r9
    3030:	f0 68       	ori	r31, 0x80	; 128
    3032:	9f 2e       	mov	r9, r31
    3034:	f3 fd       	sbrc	r31, 3
    3036:	18 c0       	rjmp	.+48     	; 0x3068 <vfprintf+0x46e>
    3038:	85 2d       	mov	r24, r5
    303a:	90 e0       	ldi	r25, 0x00	; 0
    303c:	08 17       	cp	r16, r24
    303e:	19 07       	cpc	r17, r25
    3040:	98 f4       	brcc	.+38     	; 0x3068 <vfprintf+0x46e>
    3042:	b7 01       	movw	r22, r14
    3044:	80 e2       	ldi	r24, 0x20	; 32
    3046:	90 e0       	ldi	r25, 0x00	; 0
    3048:	6f d2       	rcall	.+1246   	; 0x3528 <fputc>
    304a:	5a 94       	dec	r5
    304c:	f5 cf       	rjmp	.-22     	; 0x3038 <vfprintf+0x43e>
    304e:	f6 01       	movw	r30, r12
    3050:	97 fc       	sbrc	r9, 7
    3052:	85 91       	lpm	r24, Z+
    3054:	97 fe       	sbrs	r9, 7
    3056:	81 91       	ld	r24, Z+
    3058:	6f 01       	movw	r12, r30
    305a:	b7 01       	movw	r22, r14
    305c:	90 e0       	ldi	r25, 0x00	; 0
    305e:	64 d2       	rcall	.+1224   	; 0x3528 <fputc>
    3060:	51 10       	cpse	r5, r1
    3062:	5a 94       	dec	r5
    3064:	01 50       	subi	r16, 0x01	; 1
    3066:	11 09       	sbc	r17, r1
    3068:	01 15       	cp	r16, r1
    306a:	11 05       	cpc	r17, r1
    306c:	81 f7       	brne	.-32     	; 0x304e <vfprintf+0x454>
    306e:	f0 c0       	rjmp	.+480    	; 0x3250 <vfprintf+0x656>
    3070:	84 36       	cpi	r24, 0x64	; 100
    3072:	11 f0       	breq	.+4      	; 0x3078 <vfprintf+0x47e>
    3074:	89 36       	cpi	r24, 0x69	; 105
    3076:	59 f5       	brne	.+86     	; 0x30ce <vfprintf+0x4d4>
    3078:	56 01       	movw	r10, r12
    307a:	97 fe       	sbrs	r9, 7
    307c:	09 c0       	rjmp	.+18     	; 0x3090 <vfprintf+0x496>
    307e:	24 e0       	ldi	r18, 0x04	; 4
    3080:	a2 0e       	add	r10, r18
    3082:	b1 1c       	adc	r11, r1
    3084:	f6 01       	movw	r30, r12
    3086:	60 81       	ld	r22, Z
    3088:	71 81       	ldd	r23, Z+1	; 0x01
    308a:	82 81       	ldd	r24, Z+2	; 0x02
    308c:	93 81       	ldd	r25, Z+3	; 0x03
    308e:	0a c0       	rjmp	.+20     	; 0x30a4 <vfprintf+0x4aa>
    3090:	f2 e0       	ldi	r31, 0x02	; 2
    3092:	af 0e       	add	r10, r31
    3094:	b1 1c       	adc	r11, r1
    3096:	f6 01       	movw	r30, r12
    3098:	60 81       	ld	r22, Z
    309a:	71 81       	ldd	r23, Z+1	; 0x01
    309c:	07 2e       	mov	r0, r23
    309e:	00 0c       	add	r0, r0
    30a0:	88 0b       	sbc	r24, r24
    30a2:	99 0b       	sbc	r25, r25
    30a4:	f9 2d       	mov	r31, r9
    30a6:	ff 76       	andi	r31, 0x6F	; 111
    30a8:	9f 2e       	mov	r9, r31
    30aa:	97 ff       	sbrs	r25, 7
    30ac:	09 c0       	rjmp	.+18     	; 0x30c0 <vfprintf+0x4c6>
    30ae:	90 95       	com	r25
    30b0:	80 95       	com	r24
    30b2:	70 95       	com	r23
    30b4:	61 95       	neg	r22
    30b6:	7f 4f       	sbci	r23, 0xFF	; 255
    30b8:	8f 4f       	sbci	r24, 0xFF	; 255
    30ba:	9f 4f       	sbci	r25, 0xFF	; 255
    30bc:	f0 68       	ori	r31, 0x80	; 128
    30be:	9f 2e       	mov	r9, r31
    30c0:	2a e0       	ldi	r18, 0x0A	; 10
    30c2:	30 e0       	ldi	r19, 0x00	; 0
    30c4:	a3 01       	movw	r20, r6
    30c6:	8b d2       	rcall	.+1302   	; 0x35de <__ultoa_invert>
    30c8:	c8 2e       	mov	r12, r24
    30ca:	c6 18       	sub	r12, r6
    30cc:	3e c0       	rjmp	.+124    	; 0x314a <vfprintf+0x550>
    30ce:	09 2d       	mov	r16, r9
    30d0:	85 37       	cpi	r24, 0x75	; 117
    30d2:	21 f4       	brne	.+8      	; 0x30dc <vfprintf+0x4e2>
    30d4:	0f 7e       	andi	r16, 0xEF	; 239
    30d6:	2a e0       	ldi	r18, 0x0A	; 10
    30d8:	30 e0       	ldi	r19, 0x00	; 0
    30da:	1d c0       	rjmp	.+58     	; 0x3116 <vfprintf+0x51c>
    30dc:	09 7f       	andi	r16, 0xF9	; 249
    30de:	8f 36       	cpi	r24, 0x6F	; 111
    30e0:	91 f0       	breq	.+36     	; 0x3106 <vfprintf+0x50c>
    30e2:	18 f4       	brcc	.+6      	; 0x30ea <vfprintf+0x4f0>
    30e4:	88 35       	cpi	r24, 0x58	; 88
    30e6:	59 f0       	breq	.+22     	; 0x30fe <vfprintf+0x504>
    30e8:	bc c0       	rjmp	.+376    	; 0x3262 <vfprintf+0x668>
    30ea:	80 37       	cpi	r24, 0x70	; 112
    30ec:	19 f0       	breq	.+6      	; 0x30f4 <vfprintf+0x4fa>
    30ee:	88 37       	cpi	r24, 0x78	; 120
    30f0:	11 f0       	breq	.+4      	; 0x30f6 <vfprintf+0x4fc>
    30f2:	b7 c0       	rjmp	.+366    	; 0x3262 <vfprintf+0x668>
    30f4:	00 61       	ori	r16, 0x10	; 16
    30f6:	04 ff       	sbrs	r16, 4
    30f8:	09 c0       	rjmp	.+18     	; 0x310c <vfprintf+0x512>
    30fa:	04 60       	ori	r16, 0x04	; 4
    30fc:	07 c0       	rjmp	.+14     	; 0x310c <vfprintf+0x512>
    30fe:	94 fe       	sbrs	r9, 4
    3100:	08 c0       	rjmp	.+16     	; 0x3112 <vfprintf+0x518>
    3102:	06 60       	ori	r16, 0x06	; 6
    3104:	06 c0       	rjmp	.+12     	; 0x3112 <vfprintf+0x518>
    3106:	28 e0       	ldi	r18, 0x08	; 8
    3108:	30 e0       	ldi	r19, 0x00	; 0
    310a:	05 c0       	rjmp	.+10     	; 0x3116 <vfprintf+0x51c>
    310c:	20 e1       	ldi	r18, 0x10	; 16
    310e:	30 e0       	ldi	r19, 0x00	; 0
    3110:	02 c0       	rjmp	.+4      	; 0x3116 <vfprintf+0x51c>
    3112:	20 e1       	ldi	r18, 0x10	; 16
    3114:	32 e0       	ldi	r19, 0x02	; 2
    3116:	56 01       	movw	r10, r12
    3118:	07 ff       	sbrs	r16, 7
    311a:	09 c0       	rjmp	.+18     	; 0x312e <vfprintf+0x534>
    311c:	84 e0       	ldi	r24, 0x04	; 4
    311e:	a8 0e       	add	r10, r24
    3120:	b1 1c       	adc	r11, r1
    3122:	f6 01       	movw	r30, r12
    3124:	60 81       	ld	r22, Z
    3126:	71 81       	ldd	r23, Z+1	; 0x01
    3128:	82 81       	ldd	r24, Z+2	; 0x02
    312a:	93 81       	ldd	r25, Z+3	; 0x03
    312c:	08 c0       	rjmp	.+16     	; 0x313e <vfprintf+0x544>
    312e:	f2 e0       	ldi	r31, 0x02	; 2
    3130:	af 0e       	add	r10, r31
    3132:	b1 1c       	adc	r11, r1
    3134:	f6 01       	movw	r30, r12
    3136:	60 81       	ld	r22, Z
    3138:	71 81       	ldd	r23, Z+1	; 0x01
    313a:	80 e0       	ldi	r24, 0x00	; 0
    313c:	90 e0       	ldi	r25, 0x00	; 0
    313e:	a3 01       	movw	r20, r6
    3140:	4e d2       	rcall	.+1180   	; 0x35de <__ultoa_invert>
    3142:	c8 2e       	mov	r12, r24
    3144:	c6 18       	sub	r12, r6
    3146:	0f 77       	andi	r16, 0x7F	; 127
    3148:	90 2e       	mov	r9, r16
    314a:	96 fe       	sbrs	r9, 6
    314c:	0b c0       	rjmp	.+22     	; 0x3164 <vfprintf+0x56a>
    314e:	09 2d       	mov	r16, r9
    3150:	0e 7f       	andi	r16, 0xFE	; 254
    3152:	c1 16       	cp	r12, r17
    3154:	50 f4       	brcc	.+20     	; 0x316a <vfprintf+0x570>
    3156:	94 fe       	sbrs	r9, 4
    3158:	0a c0       	rjmp	.+20     	; 0x316e <vfprintf+0x574>
    315a:	92 fc       	sbrc	r9, 2
    315c:	08 c0       	rjmp	.+16     	; 0x316e <vfprintf+0x574>
    315e:	09 2d       	mov	r16, r9
    3160:	0e 7e       	andi	r16, 0xEE	; 238
    3162:	05 c0       	rjmp	.+10     	; 0x316e <vfprintf+0x574>
    3164:	dc 2c       	mov	r13, r12
    3166:	09 2d       	mov	r16, r9
    3168:	03 c0       	rjmp	.+6      	; 0x3170 <vfprintf+0x576>
    316a:	dc 2c       	mov	r13, r12
    316c:	01 c0       	rjmp	.+2      	; 0x3170 <vfprintf+0x576>
    316e:	d1 2e       	mov	r13, r17
    3170:	04 ff       	sbrs	r16, 4
    3172:	0d c0       	rjmp	.+26     	; 0x318e <vfprintf+0x594>
    3174:	fe 01       	movw	r30, r28
    3176:	ec 0d       	add	r30, r12
    3178:	f1 1d       	adc	r31, r1
    317a:	80 81       	ld	r24, Z
    317c:	80 33       	cpi	r24, 0x30	; 48
    317e:	11 f4       	brne	.+4      	; 0x3184 <vfprintf+0x58a>
    3180:	09 7e       	andi	r16, 0xE9	; 233
    3182:	09 c0       	rjmp	.+18     	; 0x3196 <vfprintf+0x59c>
    3184:	02 ff       	sbrs	r16, 2
    3186:	06 c0       	rjmp	.+12     	; 0x3194 <vfprintf+0x59a>
    3188:	d3 94       	inc	r13
    318a:	d3 94       	inc	r13
    318c:	04 c0       	rjmp	.+8      	; 0x3196 <vfprintf+0x59c>
    318e:	80 2f       	mov	r24, r16
    3190:	86 78       	andi	r24, 0x86	; 134
    3192:	09 f0       	breq	.+2      	; 0x3196 <vfprintf+0x59c>
    3194:	d3 94       	inc	r13
    3196:	03 fd       	sbrc	r16, 3
    3198:	10 c0       	rjmp	.+32     	; 0x31ba <vfprintf+0x5c0>
    319a:	00 ff       	sbrs	r16, 0
    319c:	06 c0       	rjmp	.+12     	; 0x31aa <vfprintf+0x5b0>
    319e:	1c 2d       	mov	r17, r12
    31a0:	d5 14       	cp	r13, r5
    31a2:	78 f4       	brcc	.+30     	; 0x31c2 <vfprintf+0x5c8>
    31a4:	15 0d       	add	r17, r5
    31a6:	1d 19       	sub	r17, r13
    31a8:	0c c0       	rjmp	.+24     	; 0x31c2 <vfprintf+0x5c8>
    31aa:	d5 14       	cp	r13, r5
    31ac:	50 f4       	brcc	.+20     	; 0x31c2 <vfprintf+0x5c8>
    31ae:	b7 01       	movw	r22, r14
    31b0:	80 e2       	ldi	r24, 0x20	; 32
    31b2:	90 e0       	ldi	r25, 0x00	; 0
    31b4:	b9 d1       	rcall	.+882    	; 0x3528 <fputc>
    31b6:	d3 94       	inc	r13
    31b8:	f8 cf       	rjmp	.-16     	; 0x31aa <vfprintf+0x5b0>
    31ba:	d5 14       	cp	r13, r5
    31bc:	10 f4       	brcc	.+4      	; 0x31c2 <vfprintf+0x5c8>
    31be:	5d 18       	sub	r5, r13
    31c0:	01 c0       	rjmp	.+2      	; 0x31c4 <vfprintf+0x5ca>
    31c2:	51 2c       	mov	r5, r1
    31c4:	04 ff       	sbrs	r16, 4
    31c6:	0f c0       	rjmp	.+30     	; 0x31e6 <vfprintf+0x5ec>
    31c8:	b7 01       	movw	r22, r14
    31ca:	80 e3       	ldi	r24, 0x30	; 48
    31cc:	90 e0       	ldi	r25, 0x00	; 0
    31ce:	ac d1       	rcall	.+856    	; 0x3528 <fputc>
    31d0:	02 ff       	sbrs	r16, 2
    31d2:	16 c0       	rjmp	.+44     	; 0x3200 <vfprintf+0x606>
    31d4:	01 fd       	sbrc	r16, 1
    31d6:	03 c0       	rjmp	.+6      	; 0x31de <vfprintf+0x5e4>
    31d8:	88 e7       	ldi	r24, 0x78	; 120
    31da:	90 e0       	ldi	r25, 0x00	; 0
    31dc:	02 c0       	rjmp	.+4      	; 0x31e2 <vfprintf+0x5e8>
    31de:	88 e5       	ldi	r24, 0x58	; 88
    31e0:	90 e0       	ldi	r25, 0x00	; 0
    31e2:	b7 01       	movw	r22, r14
    31e4:	0c c0       	rjmp	.+24     	; 0x31fe <vfprintf+0x604>
    31e6:	80 2f       	mov	r24, r16
    31e8:	86 78       	andi	r24, 0x86	; 134
    31ea:	51 f0       	breq	.+20     	; 0x3200 <vfprintf+0x606>
    31ec:	01 ff       	sbrs	r16, 1
    31ee:	02 c0       	rjmp	.+4      	; 0x31f4 <vfprintf+0x5fa>
    31f0:	8b e2       	ldi	r24, 0x2B	; 43
    31f2:	01 c0       	rjmp	.+2      	; 0x31f6 <vfprintf+0x5fc>
    31f4:	80 e2       	ldi	r24, 0x20	; 32
    31f6:	07 fd       	sbrc	r16, 7
    31f8:	8d e2       	ldi	r24, 0x2D	; 45
    31fa:	b7 01       	movw	r22, r14
    31fc:	90 e0       	ldi	r25, 0x00	; 0
    31fe:	94 d1       	rcall	.+808    	; 0x3528 <fputc>
    3200:	c1 16       	cp	r12, r17
    3202:	30 f4       	brcc	.+12     	; 0x3210 <vfprintf+0x616>
    3204:	b7 01       	movw	r22, r14
    3206:	80 e3       	ldi	r24, 0x30	; 48
    3208:	90 e0       	ldi	r25, 0x00	; 0
    320a:	8e d1       	rcall	.+796    	; 0x3528 <fputc>
    320c:	11 50       	subi	r17, 0x01	; 1
    320e:	f8 cf       	rjmp	.-16     	; 0x3200 <vfprintf+0x606>
    3210:	ca 94       	dec	r12
    3212:	f3 01       	movw	r30, r6
    3214:	ec 0d       	add	r30, r12
    3216:	f1 1d       	adc	r31, r1
    3218:	80 81       	ld	r24, Z
    321a:	b7 01       	movw	r22, r14
    321c:	90 e0       	ldi	r25, 0x00	; 0
    321e:	84 d1       	rcall	.+776    	; 0x3528 <fputc>
    3220:	c1 10       	cpse	r12, r1
    3222:	f6 cf       	rjmp	.-20     	; 0x3210 <vfprintf+0x616>
    3224:	15 c0       	rjmp	.+42     	; 0x3250 <vfprintf+0x656>
    3226:	f4 e0       	ldi	r31, 0x04	; 4
    3228:	f5 15       	cp	r31, r5
    322a:	50 f5       	brcc	.+84     	; 0x3280 <vfprintf+0x686>
    322c:	84 e0       	ldi	r24, 0x04	; 4
    322e:	58 1a       	sub	r5, r24
    3230:	93 fe       	sbrs	r9, 3
    3232:	1e c0       	rjmp	.+60     	; 0x3270 <vfprintf+0x676>
    3234:	01 11       	cpse	r16, r1
    3236:	25 c0       	rjmp	.+74     	; 0x3282 <vfprintf+0x688>
    3238:	2c 85       	ldd	r18, Y+12	; 0x0c
    323a:	23 ff       	sbrs	r18, 3
    323c:	27 c0       	rjmp	.+78     	; 0x328c <vfprintf+0x692>
    323e:	04 ee       	ldi	r16, 0xE4	; 228
    3240:	10 e0       	ldi	r17, 0x00	; 0
    3242:	39 2d       	mov	r19, r9
    3244:	30 71       	andi	r19, 0x10	; 16
    3246:	93 2e       	mov	r9, r19
    3248:	f8 01       	movw	r30, r16
    324a:	84 91       	lpm	r24, Z
    324c:	81 11       	cpse	r24, r1
    324e:	21 c0       	rjmp	.+66     	; 0x3292 <vfprintf+0x698>
    3250:	55 20       	and	r5, r5
    3252:	09 f4       	brne	.+2      	; 0x3256 <vfprintf+0x65c>
    3254:	fc cc       	rjmp	.-1544   	; 0x2c4e <vfprintf+0x54>
    3256:	b7 01       	movw	r22, r14
    3258:	80 e2       	ldi	r24, 0x20	; 32
    325a:	90 e0       	ldi	r25, 0x00	; 0
    325c:	65 d1       	rcall	.+714    	; 0x3528 <fputc>
    325e:	5a 94       	dec	r5
    3260:	f7 cf       	rjmp	.-18     	; 0x3250 <vfprintf+0x656>
    3262:	f7 01       	movw	r30, r14
    3264:	86 81       	ldd	r24, Z+6	; 0x06
    3266:	97 81       	ldd	r25, Z+7	; 0x07
    3268:	23 c0       	rjmp	.+70     	; 0x32b0 <vfprintf+0x6b6>
    326a:	8f ef       	ldi	r24, 0xFF	; 255
    326c:	9f ef       	ldi	r25, 0xFF	; 255
    326e:	20 c0       	rjmp	.+64     	; 0x32b0 <vfprintf+0x6b6>
    3270:	b7 01       	movw	r22, r14
    3272:	80 e2       	ldi	r24, 0x20	; 32
    3274:	90 e0       	ldi	r25, 0x00	; 0
    3276:	58 d1       	rcall	.+688    	; 0x3528 <fputc>
    3278:	5a 94       	dec	r5
    327a:	51 10       	cpse	r5, r1
    327c:	f9 cf       	rjmp	.-14     	; 0x3270 <vfprintf+0x676>
    327e:	da cf       	rjmp	.-76     	; 0x3234 <vfprintf+0x63a>
    3280:	51 2c       	mov	r5, r1
    3282:	b7 01       	movw	r22, r14
    3284:	80 2f       	mov	r24, r16
    3286:	90 e0       	ldi	r25, 0x00	; 0
    3288:	4f d1       	rcall	.+670    	; 0x3528 <fputc>
    328a:	d6 cf       	rjmp	.-84     	; 0x3238 <vfprintf+0x63e>
    328c:	08 ee       	ldi	r16, 0xE8	; 232
    328e:	10 e0       	ldi	r17, 0x00	; 0
    3290:	d8 cf       	rjmp	.-80     	; 0x3242 <vfprintf+0x648>
    3292:	91 10       	cpse	r9, r1
    3294:	80 52       	subi	r24, 0x20	; 32
    3296:	b7 01       	movw	r22, r14
    3298:	90 e0       	ldi	r25, 0x00	; 0
    329a:	46 d1       	rcall	.+652    	; 0x3528 <fputc>
    329c:	0f 5f       	subi	r16, 0xFF	; 255
    329e:	1f 4f       	sbci	r17, 0xFF	; 255
    32a0:	d3 cf       	rjmp	.-90     	; 0x3248 <vfprintf+0x64e>
    32a2:	23 e0       	ldi	r18, 0x03	; 3
    32a4:	25 15       	cp	r18, r5
    32a6:	10 f4       	brcc	.+4      	; 0x32ac <vfprintf+0x6b2>
    32a8:	83 e0       	ldi	r24, 0x03	; 3
    32aa:	c1 cf       	rjmp	.-126    	; 0x322e <vfprintf+0x634>
    32ac:	51 2c       	mov	r5, r1
    32ae:	c4 cf       	rjmp	.-120    	; 0x3238 <vfprintf+0x63e>
    32b0:	60 96       	adiw	r28, 0x10	; 16
    32b2:	e2 e1       	ldi	r30, 0x12	; 18
    32b4:	1c c0       	rjmp	.+56     	; 0x32ee <__epilogue_restores__>

000032b6 <__prologue_saves__>:
    32b6:	2f 92       	push	r2
    32b8:	3f 92       	push	r3
    32ba:	4f 92       	push	r4
    32bc:	5f 92       	push	r5
    32be:	6f 92       	push	r6
    32c0:	7f 92       	push	r7
    32c2:	8f 92       	push	r8
    32c4:	9f 92       	push	r9
    32c6:	af 92       	push	r10
    32c8:	bf 92       	push	r11
    32ca:	cf 92       	push	r12
    32cc:	df 92       	push	r13
    32ce:	ef 92       	push	r14
    32d0:	ff 92       	push	r15
    32d2:	0f 93       	push	r16
    32d4:	1f 93       	push	r17
    32d6:	cf 93       	push	r28
    32d8:	df 93       	push	r29
    32da:	cd b7       	in	r28, 0x3d	; 61
    32dc:	de b7       	in	r29, 0x3e	; 62
    32de:	ca 1b       	sub	r28, r26
    32e0:	db 0b       	sbc	r29, r27
    32e2:	0f b6       	in	r0, 0x3f	; 63
    32e4:	f8 94       	cli
    32e6:	de bf       	out	0x3e, r29	; 62
    32e8:	0f be       	out	0x3f, r0	; 63
    32ea:	cd bf       	out	0x3d, r28	; 61
    32ec:	09 94       	ijmp

000032ee <__epilogue_restores__>:
    32ee:	2a 88       	ldd	r2, Y+18	; 0x12
    32f0:	39 88       	ldd	r3, Y+17	; 0x11
    32f2:	48 88       	ldd	r4, Y+16	; 0x10
    32f4:	5f 84       	ldd	r5, Y+15	; 0x0f
    32f6:	6e 84       	ldd	r6, Y+14	; 0x0e
    32f8:	7d 84       	ldd	r7, Y+13	; 0x0d
    32fa:	8c 84       	ldd	r8, Y+12	; 0x0c
    32fc:	9b 84       	ldd	r9, Y+11	; 0x0b
    32fe:	aa 84       	ldd	r10, Y+10	; 0x0a
    3300:	b9 84       	ldd	r11, Y+9	; 0x09
    3302:	c8 84       	ldd	r12, Y+8	; 0x08
    3304:	df 80       	ldd	r13, Y+7	; 0x07
    3306:	ee 80       	ldd	r14, Y+6	; 0x06
    3308:	fd 80       	ldd	r15, Y+5	; 0x05
    330a:	0c 81       	ldd	r16, Y+4	; 0x04
    330c:	1b 81       	ldd	r17, Y+3	; 0x03
    330e:	aa 81       	ldd	r26, Y+2	; 0x02
    3310:	b9 81       	ldd	r27, Y+1	; 0x01
    3312:	ce 0f       	add	r28, r30
    3314:	d1 1d       	adc	r29, r1
    3316:	0f b6       	in	r0, 0x3f	; 63
    3318:	f8 94       	cli
    331a:	de bf       	out	0x3e, r29	; 62
    331c:	0f be       	out	0x3f, r0	; 63
    331e:	cd bf       	out	0x3d, r28	; 61
    3320:	ed 01       	movw	r28, r26
    3322:	08 95       	ret

00003324 <__ftoa_engine>:
    3324:	28 30       	cpi	r18, 0x08	; 8
    3326:	08 f0       	brcs	.+2      	; 0x332a <__ftoa_engine+0x6>
    3328:	27 e0       	ldi	r18, 0x07	; 7
    332a:	33 27       	eor	r19, r19
    332c:	da 01       	movw	r26, r20
    332e:	99 0f       	add	r25, r25
    3330:	31 1d       	adc	r19, r1
    3332:	87 fd       	sbrc	r24, 7
    3334:	91 60       	ori	r25, 0x01	; 1
    3336:	00 96       	adiw	r24, 0x00	; 0
    3338:	61 05       	cpc	r22, r1
    333a:	71 05       	cpc	r23, r1
    333c:	39 f4       	brne	.+14     	; 0x334c <__ftoa_engine+0x28>
    333e:	32 60       	ori	r19, 0x02	; 2
    3340:	2e 5f       	subi	r18, 0xFE	; 254
    3342:	3d 93       	st	X+, r19
    3344:	30 e3       	ldi	r19, 0x30	; 48
    3346:	2a 95       	dec	r18
    3348:	e1 f7       	brne	.-8      	; 0x3342 <__ftoa_engine+0x1e>
    334a:	08 95       	ret
    334c:	9f 3f       	cpi	r25, 0xFF	; 255
    334e:	30 f0       	brcs	.+12     	; 0x335c <__ftoa_engine+0x38>
    3350:	80 38       	cpi	r24, 0x80	; 128
    3352:	71 05       	cpc	r23, r1
    3354:	61 05       	cpc	r22, r1
    3356:	09 f0       	breq	.+2      	; 0x335a <__ftoa_engine+0x36>
    3358:	3c 5f       	subi	r19, 0xFC	; 252
    335a:	3c 5f       	subi	r19, 0xFC	; 252
    335c:	3d 93       	st	X+, r19
    335e:	91 30       	cpi	r25, 0x01	; 1
    3360:	08 f0       	brcs	.+2      	; 0x3364 <__ftoa_engine+0x40>
    3362:	80 68       	ori	r24, 0x80	; 128
    3364:	91 1d       	adc	r25, r1
    3366:	df 93       	push	r29
    3368:	cf 93       	push	r28
    336a:	1f 93       	push	r17
    336c:	0f 93       	push	r16
    336e:	ff 92       	push	r15
    3370:	ef 92       	push	r14
    3372:	19 2f       	mov	r17, r25
    3374:	98 7f       	andi	r25, 0xF8	; 248
    3376:	96 95       	lsr	r25
    3378:	e9 2f       	mov	r30, r25
    337a:	96 95       	lsr	r25
    337c:	96 95       	lsr	r25
    337e:	e9 0f       	add	r30, r25
    3380:	ff 27       	eor	r31, r31
    3382:	ea 5b       	subi	r30, 0xBA	; 186
    3384:	fe 4f       	sbci	r31, 0xFE	; 254
    3386:	99 27       	eor	r25, r25
    3388:	33 27       	eor	r19, r19
    338a:	ee 24       	eor	r14, r14
    338c:	ff 24       	eor	r15, r15
    338e:	a7 01       	movw	r20, r14
    3390:	e7 01       	movw	r28, r14
    3392:	05 90       	lpm	r0, Z+
    3394:	08 94       	sec
    3396:	07 94       	ror	r0
    3398:	28 f4       	brcc	.+10     	; 0x33a4 <__ftoa_engine+0x80>
    339a:	36 0f       	add	r19, r22
    339c:	e7 1e       	adc	r14, r23
    339e:	f8 1e       	adc	r15, r24
    33a0:	49 1f       	adc	r20, r25
    33a2:	51 1d       	adc	r21, r1
    33a4:	66 0f       	add	r22, r22
    33a6:	77 1f       	adc	r23, r23
    33a8:	88 1f       	adc	r24, r24
    33aa:	99 1f       	adc	r25, r25
    33ac:	06 94       	lsr	r0
    33ae:	a1 f7       	brne	.-24     	; 0x3398 <__ftoa_engine+0x74>
    33b0:	05 90       	lpm	r0, Z+
    33b2:	07 94       	ror	r0
    33b4:	28 f4       	brcc	.+10     	; 0x33c0 <__ftoa_engine+0x9c>
    33b6:	e7 0e       	add	r14, r23
    33b8:	f8 1e       	adc	r15, r24
    33ba:	49 1f       	adc	r20, r25
    33bc:	56 1f       	adc	r21, r22
    33be:	c1 1d       	adc	r28, r1
    33c0:	77 0f       	add	r23, r23
    33c2:	88 1f       	adc	r24, r24
    33c4:	99 1f       	adc	r25, r25
    33c6:	66 1f       	adc	r22, r22
    33c8:	06 94       	lsr	r0
    33ca:	a1 f7       	brne	.-24     	; 0x33b4 <__ftoa_engine+0x90>
    33cc:	05 90       	lpm	r0, Z+
    33ce:	07 94       	ror	r0
    33d0:	28 f4       	brcc	.+10     	; 0x33dc <__ftoa_engine+0xb8>
    33d2:	f8 0e       	add	r15, r24
    33d4:	49 1f       	adc	r20, r25
    33d6:	56 1f       	adc	r21, r22
    33d8:	c7 1f       	adc	r28, r23
    33da:	d1 1d       	adc	r29, r1
    33dc:	88 0f       	add	r24, r24
    33de:	99 1f       	adc	r25, r25
    33e0:	66 1f       	adc	r22, r22
    33e2:	77 1f       	adc	r23, r23
    33e4:	06 94       	lsr	r0
    33e6:	a1 f7       	brne	.-24     	; 0x33d0 <__ftoa_engine+0xac>
    33e8:	05 90       	lpm	r0, Z+
    33ea:	07 94       	ror	r0
    33ec:	20 f4       	brcc	.+8      	; 0x33f6 <__ftoa_engine+0xd2>
    33ee:	49 0f       	add	r20, r25
    33f0:	56 1f       	adc	r21, r22
    33f2:	c7 1f       	adc	r28, r23
    33f4:	d8 1f       	adc	r29, r24
    33f6:	99 0f       	add	r25, r25
    33f8:	66 1f       	adc	r22, r22
    33fa:	77 1f       	adc	r23, r23
    33fc:	88 1f       	adc	r24, r24
    33fe:	06 94       	lsr	r0
    3400:	a9 f7       	brne	.-22     	; 0x33ec <__ftoa_engine+0xc8>
    3402:	84 91       	lpm	r24, Z
    3404:	10 95       	com	r17
    3406:	17 70       	andi	r17, 0x07	; 7
    3408:	41 f0       	breq	.+16     	; 0x341a <__ftoa_engine+0xf6>
    340a:	d6 95       	lsr	r29
    340c:	c7 95       	ror	r28
    340e:	57 95       	ror	r21
    3410:	47 95       	ror	r20
    3412:	f7 94       	ror	r15
    3414:	e7 94       	ror	r14
    3416:	1a 95       	dec	r17
    3418:	c1 f7       	brne	.-16     	; 0x340a <__ftoa_engine+0xe6>
    341a:	ec ee       	ldi	r30, 0xEC	; 236
    341c:	f0 e0       	ldi	r31, 0x00	; 0
    341e:	68 94       	set
    3420:	15 90       	lpm	r1, Z+
    3422:	15 91       	lpm	r17, Z+
    3424:	35 91       	lpm	r19, Z+
    3426:	65 91       	lpm	r22, Z+
    3428:	95 91       	lpm	r25, Z+
    342a:	05 90       	lpm	r0, Z+
    342c:	7f e2       	ldi	r23, 0x2F	; 47
    342e:	73 95       	inc	r23
    3430:	e1 18       	sub	r14, r1
    3432:	f1 0a       	sbc	r15, r17
    3434:	43 0b       	sbc	r20, r19
    3436:	56 0b       	sbc	r21, r22
    3438:	c9 0b       	sbc	r28, r25
    343a:	d0 09       	sbc	r29, r0
    343c:	c0 f7       	brcc	.-16     	; 0x342e <__ftoa_engine+0x10a>
    343e:	e1 0c       	add	r14, r1
    3440:	f1 1e       	adc	r15, r17
    3442:	43 1f       	adc	r20, r19
    3444:	56 1f       	adc	r21, r22
    3446:	c9 1f       	adc	r28, r25
    3448:	d0 1d       	adc	r29, r0
    344a:	7e f4       	brtc	.+30     	; 0x346a <__ftoa_engine+0x146>
    344c:	70 33       	cpi	r23, 0x30	; 48
    344e:	11 f4       	brne	.+4      	; 0x3454 <__ftoa_engine+0x130>
    3450:	8a 95       	dec	r24
    3452:	e6 cf       	rjmp	.-52     	; 0x3420 <__ftoa_engine+0xfc>
    3454:	e8 94       	clt
    3456:	01 50       	subi	r16, 0x01	; 1
    3458:	30 f0       	brcs	.+12     	; 0x3466 <__ftoa_engine+0x142>
    345a:	08 0f       	add	r16, r24
    345c:	0a f4       	brpl	.+2      	; 0x3460 <__ftoa_engine+0x13c>
    345e:	00 27       	eor	r16, r16
    3460:	02 17       	cp	r16, r18
    3462:	08 f4       	brcc	.+2      	; 0x3466 <__ftoa_engine+0x142>
    3464:	20 2f       	mov	r18, r16
    3466:	23 95       	inc	r18
    3468:	02 2f       	mov	r16, r18
    346a:	7a 33       	cpi	r23, 0x3A	; 58
    346c:	28 f0       	brcs	.+10     	; 0x3478 <__ftoa_engine+0x154>
    346e:	79 e3       	ldi	r23, 0x39	; 57
    3470:	7d 93       	st	X+, r23
    3472:	2a 95       	dec	r18
    3474:	e9 f7       	brne	.-6      	; 0x3470 <__ftoa_engine+0x14c>
    3476:	10 c0       	rjmp	.+32     	; 0x3498 <__ftoa_engine+0x174>
    3478:	7d 93       	st	X+, r23
    347a:	2a 95       	dec	r18
    347c:	89 f6       	brne	.-94     	; 0x3420 <__ftoa_engine+0xfc>
    347e:	06 94       	lsr	r0
    3480:	97 95       	ror	r25
    3482:	67 95       	ror	r22
    3484:	37 95       	ror	r19
    3486:	17 95       	ror	r17
    3488:	17 94       	ror	r1
    348a:	e1 18       	sub	r14, r1
    348c:	f1 0a       	sbc	r15, r17
    348e:	43 0b       	sbc	r20, r19
    3490:	56 0b       	sbc	r21, r22
    3492:	c9 0b       	sbc	r28, r25
    3494:	d0 09       	sbc	r29, r0
    3496:	98 f0       	brcs	.+38     	; 0x34be <__ftoa_engine+0x19a>
    3498:	23 95       	inc	r18
    349a:	7e 91       	ld	r23, -X
    349c:	73 95       	inc	r23
    349e:	7a 33       	cpi	r23, 0x3A	; 58
    34a0:	08 f0       	brcs	.+2      	; 0x34a4 <__ftoa_engine+0x180>
    34a2:	70 e3       	ldi	r23, 0x30	; 48
    34a4:	7c 93       	st	X, r23
    34a6:	20 13       	cpse	r18, r16
    34a8:	b8 f7       	brcc	.-18     	; 0x3498 <__ftoa_engine+0x174>
    34aa:	7e 91       	ld	r23, -X
    34ac:	70 61       	ori	r23, 0x10	; 16
    34ae:	7d 93       	st	X+, r23
    34b0:	30 f0       	brcs	.+12     	; 0x34be <__ftoa_engine+0x19a>
    34b2:	83 95       	inc	r24
    34b4:	71 e3       	ldi	r23, 0x31	; 49
    34b6:	7d 93       	st	X+, r23
    34b8:	70 e3       	ldi	r23, 0x30	; 48
    34ba:	2a 95       	dec	r18
    34bc:	e1 f7       	brne	.-8      	; 0x34b6 <__ftoa_engine+0x192>
    34be:	11 24       	eor	r1, r1
    34c0:	ef 90       	pop	r14
    34c2:	ff 90       	pop	r15
    34c4:	0f 91       	pop	r16
    34c6:	1f 91       	pop	r17
    34c8:	cf 91       	pop	r28
    34ca:	df 91       	pop	r29
    34cc:	99 27       	eor	r25, r25
    34ce:	87 fd       	sbrc	r24, 7
    34d0:	90 95       	com	r25
    34d2:	08 95       	ret

000034d4 <strnlen_P>:
    34d4:	fc 01       	movw	r30, r24
    34d6:	05 90       	lpm	r0, Z+
    34d8:	61 50       	subi	r22, 0x01	; 1
    34da:	70 40       	sbci	r23, 0x00	; 0
    34dc:	01 10       	cpse	r0, r1
    34de:	d8 f7       	brcc	.-10     	; 0x34d6 <strnlen_P+0x2>
    34e0:	80 95       	com	r24
    34e2:	90 95       	com	r25
    34e4:	8e 0f       	add	r24, r30
    34e6:	9f 1f       	adc	r25, r31
    34e8:	08 95       	ret

000034ea <strcat>:
    34ea:	fb 01       	movw	r30, r22
    34ec:	dc 01       	movw	r26, r24
    34ee:	0d 90       	ld	r0, X+
    34f0:	00 20       	and	r0, r0
    34f2:	e9 f7       	brne	.-6      	; 0x34ee <strcat+0x4>
    34f4:	11 97       	sbiw	r26, 0x01	; 1
    34f6:	01 90       	ld	r0, Z+
    34f8:	0d 92       	st	X+, r0
    34fa:	00 20       	and	r0, r0
    34fc:	e1 f7       	brne	.-8      	; 0x34f6 <strcat+0xc>
    34fe:	08 95       	ret

00003500 <strcmp>:
    3500:	fb 01       	movw	r30, r22
    3502:	dc 01       	movw	r26, r24
    3504:	8d 91       	ld	r24, X+
    3506:	01 90       	ld	r0, Z+
    3508:	80 19       	sub	r24, r0
    350a:	01 10       	cpse	r0, r1
    350c:	d9 f3       	breq	.-10     	; 0x3504 <strcmp+0x4>
    350e:	99 0b       	sbc	r25, r25
    3510:	08 95       	ret

00003512 <strnlen>:
    3512:	fc 01       	movw	r30, r24
    3514:	61 50       	subi	r22, 0x01	; 1
    3516:	70 40       	sbci	r23, 0x00	; 0
    3518:	01 90       	ld	r0, Z+
    351a:	01 10       	cpse	r0, r1
    351c:	d8 f7       	brcc	.-10     	; 0x3514 <strnlen+0x2>
    351e:	80 95       	com	r24
    3520:	90 95       	com	r25
    3522:	8e 0f       	add	r24, r30
    3524:	9f 1f       	adc	r25, r31
    3526:	08 95       	ret

00003528 <fputc>:
    3528:	0f 93       	push	r16
    352a:	1f 93       	push	r17
    352c:	cf 93       	push	r28
    352e:	df 93       	push	r29
    3530:	fb 01       	movw	r30, r22
    3532:	23 81       	ldd	r18, Z+3	; 0x03
    3534:	21 fd       	sbrc	r18, 1
    3536:	03 c0       	rjmp	.+6      	; 0x353e <fputc+0x16>
    3538:	8f ef       	ldi	r24, 0xFF	; 255
    353a:	9f ef       	ldi	r25, 0xFF	; 255
    353c:	2c c0       	rjmp	.+88     	; 0x3596 <fputc+0x6e>
    353e:	22 ff       	sbrs	r18, 2
    3540:	16 c0       	rjmp	.+44     	; 0x356e <fputc+0x46>
    3542:	46 81       	ldd	r20, Z+6	; 0x06
    3544:	57 81       	ldd	r21, Z+7	; 0x07
    3546:	24 81       	ldd	r18, Z+4	; 0x04
    3548:	35 81       	ldd	r19, Z+5	; 0x05
    354a:	42 17       	cp	r20, r18
    354c:	53 07       	cpc	r21, r19
    354e:	44 f4       	brge	.+16     	; 0x3560 <fputc+0x38>
    3550:	a0 81       	ld	r26, Z
    3552:	b1 81       	ldd	r27, Z+1	; 0x01
    3554:	9d 01       	movw	r18, r26
    3556:	2f 5f       	subi	r18, 0xFF	; 255
    3558:	3f 4f       	sbci	r19, 0xFF	; 255
    355a:	31 83       	std	Z+1, r19	; 0x01
    355c:	20 83       	st	Z, r18
    355e:	8c 93       	st	X, r24
    3560:	26 81       	ldd	r18, Z+6	; 0x06
    3562:	37 81       	ldd	r19, Z+7	; 0x07
    3564:	2f 5f       	subi	r18, 0xFF	; 255
    3566:	3f 4f       	sbci	r19, 0xFF	; 255
    3568:	37 83       	std	Z+7, r19	; 0x07
    356a:	26 83       	std	Z+6, r18	; 0x06
    356c:	14 c0       	rjmp	.+40     	; 0x3596 <fputc+0x6e>
    356e:	8b 01       	movw	r16, r22
    3570:	ec 01       	movw	r28, r24
    3572:	fb 01       	movw	r30, r22
    3574:	00 84       	ldd	r0, Z+8	; 0x08
    3576:	f1 85       	ldd	r31, Z+9	; 0x09
    3578:	e0 2d       	mov	r30, r0
    357a:	09 95       	icall
    357c:	89 2b       	or	r24, r25
    357e:	e1 f6       	brne	.-72     	; 0x3538 <fputc+0x10>
    3580:	d8 01       	movw	r26, r16
    3582:	16 96       	adiw	r26, 0x06	; 6
    3584:	8d 91       	ld	r24, X+
    3586:	9c 91       	ld	r25, X
    3588:	17 97       	sbiw	r26, 0x07	; 7
    358a:	01 96       	adiw	r24, 0x01	; 1
    358c:	17 96       	adiw	r26, 0x07	; 7
    358e:	9c 93       	st	X, r25
    3590:	8e 93       	st	-X, r24
    3592:	16 97       	sbiw	r26, 0x06	; 6
    3594:	ce 01       	movw	r24, r28
    3596:	df 91       	pop	r29
    3598:	cf 91       	pop	r28
    359a:	1f 91       	pop	r17
    359c:	0f 91       	pop	r16
    359e:	08 95       	ret

000035a0 <sprintf>:
    35a0:	ae e0       	ldi	r26, 0x0E	; 14
    35a2:	b0 e0       	ldi	r27, 0x00	; 0
    35a4:	e5 ed       	ldi	r30, 0xD5	; 213
    35a6:	fa e1       	ldi	r31, 0x1A	; 26
    35a8:	94 ce       	rjmp	.-728    	; 0x32d2 <__prologue_saves__+0x1c>
    35aa:	0d 89       	ldd	r16, Y+21	; 0x15
    35ac:	1e 89       	ldd	r17, Y+22	; 0x16
    35ae:	86 e0       	ldi	r24, 0x06	; 6
    35b0:	8c 83       	std	Y+4, r24	; 0x04
    35b2:	1a 83       	std	Y+2, r17	; 0x02
    35b4:	09 83       	std	Y+1, r16	; 0x01
    35b6:	8f ef       	ldi	r24, 0xFF	; 255
    35b8:	9f e7       	ldi	r25, 0x7F	; 127
    35ba:	9e 83       	std	Y+6, r25	; 0x06
    35bc:	8d 83       	std	Y+5, r24	; 0x05
    35be:	ae 01       	movw	r20, r28
    35c0:	47 5e       	subi	r20, 0xE7	; 231
    35c2:	5f 4f       	sbci	r21, 0xFF	; 255
    35c4:	6f 89       	ldd	r22, Y+23	; 0x17
    35c6:	78 8d       	ldd	r23, Y+24	; 0x18
    35c8:	ce 01       	movw	r24, r28
    35ca:	01 96       	adiw	r24, 0x01	; 1
    35cc:	16 db       	rcall	.-2516   	; 0x2bfa <vfprintf>
    35ce:	ef 81       	ldd	r30, Y+7	; 0x07
    35d0:	f8 85       	ldd	r31, Y+8	; 0x08
    35d2:	e0 0f       	add	r30, r16
    35d4:	f1 1f       	adc	r31, r17
    35d6:	10 82       	st	Z, r1
    35d8:	2e 96       	adiw	r28, 0x0e	; 14
    35da:	e4 e0       	ldi	r30, 0x04	; 4
    35dc:	96 ce       	rjmp	.-724    	; 0x330a <__epilogue_restores__+0x1c>

000035de <__ultoa_invert>:
    35de:	fa 01       	movw	r30, r20
    35e0:	aa 27       	eor	r26, r26
    35e2:	28 30       	cpi	r18, 0x08	; 8
    35e4:	51 f1       	breq	.+84     	; 0x363a <__ultoa_invert+0x5c>
    35e6:	20 31       	cpi	r18, 0x10	; 16
    35e8:	81 f1       	breq	.+96     	; 0x364a <__ultoa_invert+0x6c>
    35ea:	e8 94       	clt
    35ec:	6f 93       	push	r22
    35ee:	6e 7f       	andi	r22, 0xFE	; 254
    35f0:	6e 5f       	subi	r22, 0xFE	; 254
    35f2:	7f 4f       	sbci	r23, 0xFF	; 255
    35f4:	8f 4f       	sbci	r24, 0xFF	; 255
    35f6:	9f 4f       	sbci	r25, 0xFF	; 255
    35f8:	af 4f       	sbci	r26, 0xFF	; 255
    35fa:	b1 e0       	ldi	r27, 0x01	; 1
    35fc:	3e d0       	rcall	.+124    	; 0x367a <__ultoa_invert+0x9c>
    35fe:	b4 e0       	ldi	r27, 0x04	; 4
    3600:	3c d0       	rcall	.+120    	; 0x367a <__ultoa_invert+0x9c>
    3602:	67 0f       	add	r22, r23
    3604:	78 1f       	adc	r23, r24
    3606:	89 1f       	adc	r24, r25
    3608:	9a 1f       	adc	r25, r26
    360a:	a1 1d       	adc	r26, r1
    360c:	68 0f       	add	r22, r24
    360e:	79 1f       	adc	r23, r25
    3610:	8a 1f       	adc	r24, r26
    3612:	91 1d       	adc	r25, r1
    3614:	a1 1d       	adc	r26, r1
    3616:	6a 0f       	add	r22, r26
    3618:	71 1d       	adc	r23, r1
    361a:	81 1d       	adc	r24, r1
    361c:	91 1d       	adc	r25, r1
    361e:	a1 1d       	adc	r26, r1
    3620:	20 d0       	rcall	.+64     	; 0x3662 <__ultoa_invert+0x84>
    3622:	09 f4       	brne	.+2      	; 0x3626 <__ultoa_invert+0x48>
    3624:	68 94       	set
    3626:	3f 91       	pop	r19
    3628:	2a e0       	ldi	r18, 0x0A	; 10
    362a:	26 9f       	mul	r18, r22
    362c:	11 24       	eor	r1, r1
    362e:	30 19       	sub	r19, r0
    3630:	30 5d       	subi	r19, 0xD0	; 208
    3632:	31 93       	st	Z+, r19
    3634:	de f6       	brtc	.-74     	; 0x35ec <__ultoa_invert+0xe>
    3636:	cf 01       	movw	r24, r30
    3638:	08 95       	ret
    363a:	46 2f       	mov	r20, r22
    363c:	47 70       	andi	r20, 0x07	; 7
    363e:	40 5d       	subi	r20, 0xD0	; 208
    3640:	41 93       	st	Z+, r20
    3642:	b3 e0       	ldi	r27, 0x03	; 3
    3644:	0f d0       	rcall	.+30     	; 0x3664 <__ultoa_invert+0x86>
    3646:	c9 f7       	brne	.-14     	; 0x363a <__ultoa_invert+0x5c>
    3648:	f6 cf       	rjmp	.-20     	; 0x3636 <__ultoa_invert+0x58>
    364a:	46 2f       	mov	r20, r22
    364c:	4f 70       	andi	r20, 0x0F	; 15
    364e:	40 5d       	subi	r20, 0xD0	; 208
    3650:	4a 33       	cpi	r20, 0x3A	; 58
    3652:	18 f0       	brcs	.+6      	; 0x365a <__ultoa_invert+0x7c>
    3654:	49 5d       	subi	r20, 0xD9	; 217
    3656:	31 fd       	sbrc	r19, 1
    3658:	40 52       	subi	r20, 0x20	; 32
    365a:	41 93       	st	Z+, r20
    365c:	02 d0       	rcall	.+4      	; 0x3662 <__ultoa_invert+0x84>
    365e:	a9 f7       	brne	.-22     	; 0x364a <__ultoa_invert+0x6c>
    3660:	ea cf       	rjmp	.-44     	; 0x3636 <__ultoa_invert+0x58>
    3662:	b4 e0       	ldi	r27, 0x04	; 4
    3664:	a6 95       	lsr	r26
    3666:	97 95       	ror	r25
    3668:	87 95       	ror	r24
    366a:	77 95       	ror	r23
    366c:	67 95       	ror	r22
    366e:	ba 95       	dec	r27
    3670:	c9 f7       	brne	.-14     	; 0x3664 <__ultoa_invert+0x86>
    3672:	00 97       	sbiw	r24, 0x00	; 0
    3674:	61 05       	cpc	r22, r1
    3676:	71 05       	cpc	r23, r1
    3678:	08 95       	ret
    367a:	9b 01       	movw	r18, r22
    367c:	ac 01       	movw	r20, r24
    367e:	0a 2e       	mov	r0, r26
    3680:	06 94       	lsr	r0
    3682:	57 95       	ror	r21
    3684:	47 95       	ror	r20
    3686:	37 95       	ror	r19
    3688:	27 95       	ror	r18
    368a:	ba 95       	dec	r27
    368c:	c9 f7       	brne	.-14     	; 0x3680 <__ultoa_invert+0xa2>
    368e:	62 0f       	add	r22, r18
    3690:	73 1f       	adc	r23, r19
    3692:	84 1f       	adc	r24, r20
    3694:	95 1f       	adc	r25, r21
    3696:	a0 1d       	adc	r26, r0
    3698:	08 95       	ret

0000369a <_exit>:
    369a:	f8 94       	cli

0000369c <__stop_program>:
    369c:	ff cf       	rjmp	.-2      	; 0x369c <__stop_program>
