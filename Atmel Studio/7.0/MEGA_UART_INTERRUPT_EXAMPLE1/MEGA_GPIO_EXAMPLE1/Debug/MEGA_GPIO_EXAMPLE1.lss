
MEGA_GPIO_EXAMPLE1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000006c4  00800200  000031fc  00003290  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000031fc  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000006d  008008c4  008008c4  00003954  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00003954  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000039b0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000308  00000000  00000000  000039ec  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000439a  00000000  00000000  00003cf4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000182a  00000000  00000000  0000808e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00003f6f  00000000  00000000  000098b8  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000818  00000000  00000000  0000d828  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00014e05  00000000  00000000  0000e040  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000020f2  00000000  00000000  00022e45  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000248  00000000  00000000  00024f37  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  0000619b  00000000  00000000  0002517f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	f2 c0       	rjmp	.+484    	; 0x1e6 <__ctors_end>
       2:	00 00       	nop
       4:	0d c1       	rjmp	.+538    	; 0x220 <__bad_interrupt>
       6:	00 00       	nop
       8:	0b c1       	rjmp	.+534    	; 0x220 <__bad_interrupt>
       a:	00 00       	nop
       c:	09 c1       	rjmp	.+530    	; 0x220 <__bad_interrupt>
       e:	00 00       	nop
      10:	07 c1       	rjmp	.+526    	; 0x220 <__bad_interrupt>
      12:	00 00       	nop
      14:	05 c1       	rjmp	.+522    	; 0x220 <__bad_interrupt>
      16:	00 00       	nop
      18:	03 c1       	rjmp	.+518    	; 0x220 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	01 c1       	rjmp	.+514    	; 0x220 <__bad_interrupt>
      1e:	00 00       	nop
      20:	ff c0       	rjmp	.+510    	; 0x220 <__bad_interrupt>
      22:	00 00       	nop
      24:	fd c0       	rjmp	.+506    	; 0x220 <__bad_interrupt>
      26:	00 00       	nop
      28:	fb c0       	rjmp	.+502    	; 0x220 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	f9 c0       	rjmp	.+498    	; 0x220 <__bad_interrupt>
      2e:	00 00       	nop
      30:	0c 94 8b 11 	jmp	0x2316	; 0x2316 <__vector_12>
      34:	f5 c0       	rjmp	.+490    	; 0x220 <__bad_interrupt>
      36:	00 00       	nop
      38:	f3 c0       	rjmp	.+486    	; 0x220 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	f1 c0       	rjmp	.+482    	; 0x220 <__bad_interrupt>
      3e:	00 00       	nop
      40:	ef c0       	rjmp	.+478    	; 0x220 <__bad_interrupt>
      42:	00 00       	nop
      44:	0c 94 a5 10 	jmp	0x214a	; 0x214a <__vector_17>
      48:	eb c0       	rjmp	.+470    	; 0x220 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	e9 c0       	rjmp	.+466    	; 0x220 <__bad_interrupt>
      4e:	00 00       	nop
      50:	e7 c0       	rjmp	.+462    	; 0x220 <__bad_interrupt>
      52:	00 00       	nop
      54:	e5 c0       	rjmp	.+458    	; 0x220 <__bad_interrupt>
      56:	00 00       	nop
      58:	e3 c0       	rjmp	.+454    	; 0x220 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	e1 c0       	rjmp	.+450    	; 0x220 <__bad_interrupt>
      5e:	00 00       	nop
      60:	df c0       	rjmp	.+446    	; 0x220 <__bad_interrupt>
      62:	00 00       	nop
      64:	0c 94 51 11 	jmp	0x22a2	; 0x22a2 <__vector_25>
      68:	db c0       	rjmp	.+438    	; 0x220 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	d9 c0       	rjmp	.+434    	; 0x220 <__bad_interrupt>
      6e:	00 00       	nop
      70:	d7 c0       	rjmp	.+430    	; 0x220 <__bad_interrupt>
      72:	00 00       	nop
      74:	d5 c0       	rjmp	.+426    	; 0x220 <__bad_interrupt>
      76:	00 00       	nop
      78:	d3 c0       	rjmp	.+422    	; 0x220 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	d1 c0       	rjmp	.+418    	; 0x220 <__bad_interrupt>
      7e:	00 00       	nop
      80:	cf c0       	rjmp	.+414    	; 0x220 <__bad_interrupt>
      82:	00 00       	nop
      84:	cd c0       	rjmp	.+410    	; 0x220 <__bad_interrupt>
      86:	00 00       	nop
      88:	cb c0       	rjmp	.+406    	; 0x220 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	c9 c0       	rjmp	.+402    	; 0x220 <__bad_interrupt>
      8e:	00 00       	nop
      90:	c7 c0       	rjmp	.+398    	; 0x220 <__bad_interrupt>
      92:	00 00       	nop
      94:	c5 c0       	rjmp	.+394    	; 0x220 <__bad_interrupt>
      96:	00 00       	nop
      98:	c3 c0       	rjmp	.+390    	; 0x220 <__bad_interrupt>
      9a:	00 00       	nop
      9c:	c1 c0       	rjmp	.+386    	; 0x220 <__bad_interrupt>
      9e:	00 00       	nop
      a0:	bf c0       	rjmp	.+382    	; 0x220 <__bad_interrupt>
      a2:	00 00       	nop
      a4:	bd c0       	rjmp	.+378    	; 0x220 <__bad_interrupt>
      a6:	00 00       	nop
      a8:	bb c0       	rjmp	.+374    	; 0x220 <__bad_interrupt>
      aa:	00 00       	nop
      ac:	b9 c0       	rjmp	.+370    	; 0x220 <__bad_interrupt>
      ae:	00 00       	nop
      b0:	b7 c0       	rjmp	.+366    	; 0x220 <__bad_interrupt>
      b2:	00 00       	nop
      b4:	b5 c0       	rjmp	.+362    	; 0x220 <__bad_interrupt>
      b6:	00 00       	nop
      b8:	b3 c0       	rjmp	.+358    	; 0x220 <__bad_interrupt>
      ba:	00 00       	nop
      bc:	b1 c0       	rjmp	.+354    	; 0x220 <__bad_interrupt>
      be:	00 00       	nop
      c0:	af c0       	rjmp	.+350    	; 0x220 <__bad_interrupt>
      c2:	00 00       	nop
      c4:	ad c0       	rjmp	.+346    	; 0x220 <__bad_interrupt>
      c6:	00 00       	nop
      c8:	ab c0       	rjmp	.+342    	; 0x220 <__bad_interrupt>
      ca:	00 00       	nop
      cc:	a9 c0       	rjmp	.+338    	; 0x220 <__bad_interrupt>
      ce:	00 00       	nop
      d0:	a7 c0       	rjmp	.+334    	; 0x220 <__bad_interrupt>
      d2:	00 00       	nop
      d4:	a5 c0       	rjmp	.+330    	; 0x220 <__bad_interrupt>
      d6:	00 00       	nop
      d8:	a3 c0       	rjmp	.+326    	; 0x220 <__bad_interrupt>
      da:	00 00       	nop
      dc:	a1 c0       	rjmp	.+322    	; 0x220 <__bad_interrupt>
      de:	00 00       	nop
      e0:	9f c0       	rjmp	.+318    	; 0x220 <__bad_interrupt>
	...

000000e4 <__trampolines_end>:
      e4:	6e 61       	ori	r22, 0x1E	; 30
      e6:	6e 00       	.word	0x006e	; ????

000000e8 <__c.2332>:
      e8:	69 6e 66 00 00 40 7a 10 f3 5a 00 a0 72 4e 18 09     inf..@z..Z..rN..
      f8:	00 10 a5 d4 e8 00 00 e8 76 48 17 00 00 e4 0b 54     ........vH.....T
     108:	02 00 00 ca 9a 3b 00 00 00 e1 f5 05 00 00 80 96     .....;..........
     118:	98 00 00 00 40 42 0f 00 00 00 a0 86 01 00 00 00     ....@B..........
     128:	10 27 00 00 00 00 e8 03 00 00 00 00 64 00 00 00     .'..........d...
     138:	00 00 0a 00 00 00 00 00 01 00 00 00 00 00 2c 76     ..............,v
     148:	d8 88 dc 67 4f 08 23 df c1 df ae 59 e1 b1 b7 96     ...gO.#....Y....
     158:	e5 e3 e4 53 c6 3a e6 51 99 76 96 e8 e6 c2 84 26     ...S.:.Q.v.....&
     168:	eb 89 8c 9b 62 ed 40 7c 6f fc ef bc 9c 9f 40 f2     ....b.@|o.....@.
     178:	ba a5 6f a5 f4 90 05 5a 2a f7 5c 93 6b 6c f9 67     ..o....Z*.\.kl.g
     188:	6d c1 1b fc e0 e4 0d 47 fe f5 20 e6 b5 00 d0 ed     m......G.. .....
     198:	90 2e 03 00 94 35 77 05 00 80 84 1e 08 00 00 20     .....5w........ 
     1a8:	4e 0a 00 00 00 c8 0c 33 33 33 33 0f 98 6e 12 83     N......3333..n..
     1b8:	11 41 ef 8d 21 14 89 3b e6 55 16 cf fe e6 db 18     .A..!..;.U......
     1c8:	d1 84 4b 38 1b f7 7c 1d 90 1d a4 bb e4 24 20 32     ..K8..|......$ 2
     1d8:	84 72 5e 22 81 00 c9 f1 24 ec a1 e5 3d 27           .r^"....$...='

000001e6 <__ctors_end>:
     1e6:	11 24       	eor	r1, r1
     1e8:	1f be       	out	0x3f, r1	; 63
     1ea:	cf ef       	ldi	r28, 0xFF	; 255
     1ec:	d1 e2       	ldi	r29, 0x21	; 33
     1ee:	de bf       	out	0x3e, r29	; 62
     1f0:	cd bf       	out	0x3d, r28	; 61

000001f2 <__do_copy_data>:
     1f2:	18 e0       	ldi	r17, 0x08	; 8
     1f4:	a0 e0       	ldi	r26, 0x00	; 0
     1f6:	b2 e0       	ldi	r27, 0x02	; 2
     1f8:	ec ef       	ldi	r30, 0xFC	; 252
     1fa:	f1 e3       	ldi	r31, 0x31	; 49
     1fc:	02 c0       	rjmp	.+4      	; 0x202 <__do_copy_data+0x10>
     1fe:	05 90       	lpm	r0, Z+
     200:	0d 92       	st	X+, r0
     202:	a4 3c       	cpi	r26, 0xC4	; 196
     204:	b1 07       	cpc	r27, r17
     206:	d9 f7       	brne	.-10     	; 0x1fe <__do_copy_data+0xc>

00000208 <__do_clear_bss>:
     208:	29 e0       	ldi	r18, 0x09	; 9
     20a:	a4 ec       	ldi	r26, 0xC4	; 196
     20c:	b8 e0       	ldi	r27, 0x08	; 8
     20e:	01 c0       	rjmp	.+2      	; 0x212 <.do_clear_bss_start>

00000210 <.do_clear_bss_loop>:
     210:	1d 92       	st	X+, r1

00000212 <.do_clear_bss_start>:
     212:	a1 33       	cpi	r26, 0x31	; 49
     214:	b2 07       	cpc	r27, r18
     216:	e1 f7       	brne	.-8      	; 0x210 <.do_clear_bss_loop>
     218:	0e 94 b0 11 	call	0x2360	; 0x2360 <main>
     21c:	0c 94 fc 18 	jmp	0x31f8	; 0x31f8 <_exit>

00000220 <__bad_interrupt>:
     220:	ef ce       	rjmp	.-546    	; 0x0 <__vectors>

00000222 <Change_ADC>:
// Date: 2019-01-15
// Description: Change ADC_MUX to read next value
/*========================================================================================*/

void Change_ADC(int i){
	if (i < 4){
     222:	84 30       	cpi	r24, 0x04	; 4
     224:	91 05       	cpc	r25, r1
     226:	44 f4       	brge	.+16     	; 0x238 <Change_ADC+0x16>
		ADCSRB &= 0xf7;
     228:	eb e7       	ldi	r30, 0x7B	; 123
     22a:	f0 e0       	ldi	r31, 0x00	; 0
     22c:	90 81       	ld	r25, Z
     22e:	97 7f       	andi	r25, 0xF7	; 247
     230:	90 83       	st	Z, r25
		ADMUX = 0x00 + i;
     232:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>
     236:	08 95       	ret
	}
	else{
		ADCSRB = 0x08;
     238:	98 e0       	ldi	r25, 0x08	; 8
     23a:	90 93 7b 00 	sts	0x007B, r25	; 0x80007b <__TEXT_REGION_LENGTH__+0x7e007b>
		ADMUX = 0x00 + (i - 4);
     23e:	84 50       	subi	r24, 0x04	; 4
     240:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>
     244:	08 95       	ret

00000246 <Read_ADC>:
/*========================================================================================*/

uint16_t Read_ADC(){
	
	// start conversion
	ADCSRA |= 0x40;
     246:	ea e7       	ldi	r30, 0x7A	; 122
     248:	f0 e0       	ldi	r31, 0x00	; 0
     24a:	80 81       	ld	r24, Z
     24c:	80 64       	ori	r24, 0x40	; 64
     24e:	80 83       	st	Z, r24
	
	// Wait until conversion is done
	while(ADCSRA & 0x40);
     250:	80 81       	ld	r24, Z
     252:	86 fd       	sbrc	r24, 6
     254:	fd cf       	rjmp	.-6      	; 0x250 <Read_ADC+0xa>
	
	return ADC;
     256:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
     25a:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
}
     25e:	08 95       	ret

00000260 <Check_ADC>:
/*========================================================================================*/

float Check_ADC(int i){
	
	// Choose the correct ADC channel to read from
	Change_ADC(i);
     260:	e0 df       	rcall	.-64     	; 0x222 <Change_ADC>
	
	// Get the read value from the ADC
	return Read_ADC();	
     262:	f1 df       	rcall	.-30     	; 0x246 <Read_ADC>
     264:	bc 01       	movw	r22, r24
     266:	80 e0       	ldi	r24, 0x00	; 0
     268:	90 e0       	ldi	r25, 0x00	; 0
     26a:	0c 94 93 12 	jmp	0x2526	; 0x2526 <__floatunsisf>
     26e:	08 95       	ret

00000270 <Volt_ADC>:
	
}
     270:	9c 01       	movw	r18, r24
// Date: 2019-03-06
// Description: Voltage Measurements via ADC.
/*========================================================================================*/

float Volt_ADC(int Volt_num){
	int ADC_num = Volt_num + 4; // ADC_num is the value needed for Change_ADC
     272:	2c 5f       	subi	r18, 0xFC	; 252
     274:	3f 4f       	sbci	r19, 0xFF	; 255
	
	// Explained
	// voltage = (ADC_value / total resolution)
	
	// 3V3-1 & 3V3-2 rails
	if(ADC_num == 4 || ADC_num == 5){
     276:	02 97       	sbiw	r24, 0x02	; 2
     278:	a8 f4       	brcc	.+42     	; 0x2a4 <Volt_ADC+0x34>
		val = ((Check_ADC(ADC_num) / 1024) * 3.3) / 0.9090;
     27a:	c9 01       	movw	r24, r18
     27c:	f1 df       	rcall	.-30     	; 0x260 <Check_ADC>
     27e:	20 e0       	ldi	r18, 0x00	; 0
     280:	30 e0       	ldi	r19, 0x00	; 0
     282:	40 e8       	ldi	r20, 0x80	; 128
     284:	5a e3       	ldi	r21, 0x3A	; 58
     286:	0e 94 49 13 	call	0x2692	; 0x2692 <__mulsf3>
     28a:	23 e3       	ldi	r18, 0x33	; 51
     28c:	33 e3       	ldi	r19, 0x33	; 51
     28e:	43 e5       	ldi	r20, 0x53	; 83
     290:	50 e4       	ldi	r21, 0x40	; 64
     292:	0e 94 49 13 	call	0x2692	; 0x2692 <__mulsf3>
     296:	29 e3       	ldi	r18, 0x39	; 57
     298:	34 eb       	ldi	r19, 0xB4	; 180
     29a:	48 e6       	ldi	r20, 0x68	; 104
     29c:	5f e3       	ldi	r21, 0x3F	; 63
     29e:	0c 94 2b 12 	jmp	0x2456	; 0x2456 <__divsf3>
     2a2:	08 95       	ret
	}
	// 5V rail
	else if(ADC_num == 6){
     2a4:	26 30       	cpi	r18, 0x06	; 6
     2a6:	31 05       	cpc	r19, r1
     2a8:	b1 f4       	brne	.+44     	; 0x2d6 <Volt_ADC+0x66>
		val = ((Check_ADC(ADC_num) / 1024) * 3.3) / 0.5997;
     2aa:	86 e0       	ldi	r24, 0x06	; 6
     2ac:	90 e0       	ldi	r25, 0x00	; 0
     2ae:	d8 df       	rcall	.-80     	; 0x260 <Check_ADC>
     2b0:	20 e0       	ldi	r18, 0x00	; 0
     2b2:	30 e0       	ldi	r19, 0x00	; 0
     2b4:	40 e8       	ldi	r20, 0x80	; 128
     2b6:	5a e3       	ldi	r21, 0x3A	; 58
     2b8:	0e 94 49 13 	call	0x2692	; 0x2692 <__mulsf3>
     2bc:	23 e3       	ldi	r18, 0x33	; 51
     2be:	33 e3       	ldi	r19, 0x33	; 51
     2c0:	43 e5       	ldi	r20, 0x53	; 83
     2c2:	50 e4       	ldi	r21, 0x40	; 64
     2c4:	0e 94 49 13 	call	0x2692	; 0x2692 <__mulsf3>
     2c8:	20 ef       	ldi	r18, 0xF0	; 240
     2ca:	35 e8       	ldi	r19, 0x85	; 133
     2cc:	49 e1       	ldi	r20, 0x19	; 25
     2ce:	5f e3       	ldi	r21, 0x3F	; 63
     2d0:	0c 94 2b 12 	jmp	0x2456	; 0x2456 <__divsf3>
     2d4:	08 95       	ret
		// Correction factor (through testing)
		// 69 (mV) offset
	}
	// 8V rail
	else if(ADC_num == 7){
     2d6:	27 30       	cpi	r18, 0x07	; 7
     2d8:	31 05       	cpc	r19, r1
     2da:	b1 f4       	brne	.+44     	; 0x308 <Volt_ADC+0x98>
		val = ((Check_ADC(ADC_num) / 1024) * 3.3) / 0.3597;
     2dc:	87 e0       	ldi	r24, 0x07	; 7
     2de:	90 e0       	ldi	r25, 0x00	; 0
     2e0:	bf df       	rcall	.-130    	; 0x260 <Check_ADC>
     2e2:	20 e0       	ldi	r18, 0x00	; 0
     2e4:	30 e0       	ldi	r19, 0x00	; 0
     2e6:	40 e8       	ldi	r20, 0x80	; 128
     2e8:	5a e3       	ldi	r21, 0x3A	; 58
     2ea:	0e 94 49 13 	call	0x2692	; 0x2692 <__mulsf3>
     2ee:	23 e3       	ldi	r18, 0x33	; 51
     2f0:	33 e3       	ldi	r19, 0x33	; 51
     2f2:	43 e5       	ldi	r20, 0x53	; 83
     2f4:	50 e4       	ldi	r21, 0x40	; 64
     2f6:	0e 94 49 13 	call	0x2692	; 0x2692 <__mulsf3>
     2fa:	29 e9       	ldi	r18, 0x99	; 153
     2fc:	3a e2       	ldi	r19, 0x2A	; 42
     2fe:	48 eb       	ldi	r20, 0xB8	; 184
     300:	5e e3       	ldi	r21, 0x3E	; 62
     302:	0c 94 2b 12 	jmp	0x2456	; 0x2456 <__divsf3>
     306:	08 95       	ret
	}
	// VBatt rail
	else if(ADC_num == 8){
     308:	28 30       	cpi	r18, 0x08	; 8
     30a:	31 05       	cpc	r19, r1
		val = ((Check_ADC(ADC_num) / 1024) * 3.3) / 0.7141;
     30c:	b1 f4       	brne	.+44     	; 0x33a <Volt_ADC+0xca>
     30e:	88 e0       	ldi	r24, 0x08	; 8
     310:	90 e0       	ldi	r25, 0x00	; 0
     312:	a6 df       	rcall	.-180    	; 0x260 <Check_ADC>
     314:	20 e0       	ldi	r18, 0x00	; 0
     316:	30 e0       	ldi	r19, 0x00	; 0
     318:	40 e8       	ldi	r20, 0x80	; 128
     31a:	5a e3       	ldi	r21, 0x3A	; 58
     31c:	0e 94 49 13 	call	0x2692	; 0x2692 <__mulsf3>
     320:	23 e3       	ldi	r18, 0x33	; 51
     322:	33 e3       	ldi	r19, 0x33	; 51
     324:	43 e5       	ldi	r20, 0x53	; 83
     326:	50 e4       	ldi	r21, 0x40	; 64
     328:	0e 94 49 13 	call	0x2692	; 0x2692 <__mulsf3>
     32c:	22 e4       	ldi	r18, 0x42	; 66
     32e:	3f ec       	ldi	r19, 0xCF	; 207
     330:	46 e3       	ldi	r20, 0x36	; 54
     332:	5f e3       	ldi	r21, 0x3F	; 63
     334:	0c 94 2b 12 	jmp	0x2456	; 0x2456 <__divsf3>
     338:	08 95       	ret
// Description: Voltage Measurements via ADC.
/*========================================================================================*/

float Volt_ADC(int Volt_num){
	int ADC_num = Volt_num + 4; // ADC_num is the value needed for Change_ADC
	float val = 0;
     33a:	60 e0       	ldi	r22, 0x00	; 0
     33c:	70 e0       	ldi	r23, 0x00	; 0
     33e:	cb 01       	movw	r24, r22
	}
	else{
		// do nothing
	}
	return val;
}
     340:	08 95       	ret

00000342 <Amp_ADC>:
// Author: Chris Thomas
// Date: 2019-03-06
// Description: Ammeter measurements via ADC.
/*========================================================================================*/

float Amp_ADC(int Amp_num){
     342:	4f 92       	push	r4
     344:	5f 92       	push	r5
     346:	6f 92       	push	r6
     348:	7f 92       	push	r7
     34a:	8f 92       	push	r8
     34c:	9f 92       	push	r9
     34e:	af 92       	push	r10
     350:	bf 92       	push	r11
     352:	cf 92       	push	r12
     354:	df 92       	push	r13
     356:	ef 92       	push	r14
     358:	ff 92       	push	r15
     35a:	0f 93       	push	r16
     35c:	1f 93       	push	r17
     35e:	cf 93       	push	r28
     360:	df 93       	push	r29
     362:	cd b7       	in	r28, 0x3d	; 61
     364:	de b7       	in	r29, 0x3e	; 62
     366:	68 97       	sbiw	r28, 0x18	; 24
     368:	0f b6       	in	r0, 0x3f	; 63
     36a:	f8 94       	cli
     36c:	de bf       	out	0x3e, r29	; 62
     36e:	0f be       	out	0x3f, r0	; 63
     370:	cd bf       	out	0x3d, r28	; 61
     372:	5c 01       	movw	r10, r24
	int ADC_num = 0; // initialize ADC number to check
	float val = 0; // initialize the voltage value to 0 V
	float zero[6] = {0.515, 0.542, 0.523, 0.505, 0.508, 0.530};
     374:	88 e1       	ldi	r24, 0x18	; 24
     376:	e1 e0       	ldi	r30, 0x01	; 1
     378:	f2 e0       	ldi	r31, 0x02	; 2
     37a:	de 01       	movw	r26, r28
     37c:	11 96       	adiw	r26, 0x01	; 1
     37e:	01 90       	ld	r0, Z+
     380:	0d 92       	st	X+, r0
     382:	8a 95       	dec	r24
     384:	e1 f7       	brne	.-8      	; 0x37e <Amp_ADC+0x3c>
	int i = 0;
	
	// Voltage rail current 8V, 5V, 3V3-1, 3V3-2 respectively
	if(Amp_num < 4){
     386:	84 e0       	ldi	r24, 0x04	; 4
     388:	a8 16       	cp	r10, r24
     38a:	b1 04       	cpc	r11, r1
     38c:	0c f0       	brlt	.+2      	; 0x390 <Amp_ADC+0x4e>
     38e:	3d c0       	rjmp	.+122    	; 0x40a <__LOCK_REGION_LENGTH__+0xa>
     390:	09 e1       	ldi	r16, 0x19	; 25
     392:	10 e0       	ldi	r17, 0x00	; 0
     394:	c1 2c       	mov	r12, r1
     396:	d1 2c       	mov	r13, r1
     398:	76 01       	movw	r14, r12
		ADC_num = Amp_num;
		while(i < 25){
			val += (((Check_ADC(ADC_num) / 1024) * 3.3) - zero[Amp_num]) / 0.4;
     39a:	45 01       	movw	r8, r10
     39c:	88 0c       	add	r8, r8
     39e:	99 1c       	adc	r9, r9
     3a0:	88 0c       	add	r8, r8
     3a2:	99 1c       	adc	r9, r9
     3a4:	e1 e0       	ldi	r30, 0x01	; 1
     3a6:	f0 e0       	ldi	r31, 0x00	; 0
     3a8:	ec 0f       	add	r30, r28
     3aa:	fd 1f       	adc	r31, r29
     3ac:	8e 0e       	add	r8, r30
     3ae:	9f 1e       	adc	r9, r31
     3b0:	c5 01       	movw	r24, r10
     3b2:	56 df       	rcall	.-340    	; 0x260 <Check_ADC>
     3b4:	20 e0       	ldi	r18, 0x00	; 0
     3b6:	30 e0       	ldi	r19, 0x00	; 0
     3b8:	40 e8       	ldi	r20, 0x80	; 128
     3ba:	5a e3       	ldi	r21, 0x3A	; 58
     3bc:	0e 94 49 13 	call	0x2692	; 0x2692 <__mulsf3>
     3c0:	23 e3       	ldi	r18, 0x33	; 51
     3c2:	33 e3       	ldi	r19, 0x33	; 51
     3c4:	43 e5       	ldi	r20, 0x53	; 83
     3c6:	50 e4       	ldi	r21, 0x40	; 64
     3c8:	0e 94 49 13 	call	0x2692	; 0x2692 <__mulsf3>
     3cc:	f4 01       	movw	r30, r8
     3ce:	20 81       	ld	r18, Z
     3d0:	31 81       	ldd	r19, Z+1	; 0x01
     3d2:	42 81       	ldd	r20, Z+2	; 0x02
     3d4:	53 81       	ldd	r21, Z+3	; 0x03
     3d6:	0e 94 c2 11 	call	0x2384	; 0x2384 <__subsf3>
     3da:	2d ec       	ldi	r18, 0xCD	; 205
     3dc:	3c ec       	ldi	r19, 0xCC	; 204
     3de:	4c ec       	ldi	r20, 0xCC	; 204
     3e0:	5e e3       	ldi	r21, 0x3E	; 62
     3e2:	0e 94 2b 12 	call	0x2456	; 0x2456 <__divsf3>
     3e6:	9b 01       	movw	r18, r22
     3e8:	ac 01       	movw	r20, r24
     3ea:	c7 01       	movw	r24, r14
     3ec:	b6 01       	movw	r22, r12
     3ee:	0e 94 c3 11 	call	0x2386	; 0x2386 <__addsf3>
     3f2:	6b 01       	movw	r12, r22
     3f4:	7c 01       	movw	r14, r24
     3f6:	01 50       	subi	r16, 0x01	; 1
     3f8:	11 09       	sbc	r17, r1
	int i = 0;
	
	// Voltage rail current 8V, 5V, 3V3-1, 3V3-2 respectively
	if(Amp_num < 4){
		ADC_num = Amp_num;
		while(i < 25){
     3fa:	d1 f6       	brne	.-76     	; 0x3b0 <Amp_ADC+0x6e>
			val += (((Check_ADC(ADC_num) / 1024) * 3.3) - zero[Amp_num]) / 0.4;
			i++;
		}
		val = val/25;
     3fc:	20 e0       	ldi	r18, 0x00	; 0
     3fe:	30 e0       	ldi	r19, 0x00	; 0
     400:	48 ec       	ldi	r20, 0xC8	; 200
     402:	51 e4       	ldi	r21, 0x41	; 65
     404:	0e 94 2b 12 	call	0x2456	; 0x2456 <__divsf3>
     408:	48 c0       	rjmp	.+144    	; 0x49a <__LOCK_REGION_LENGTH__+0x9a>
	}
	// Solar current and Battery current, respectively
	else if(Amp_num == 4 || Amp_num == 5){
     40a:	c5 01       	movw	r24, r10
     40c:	04 97       	sbiw	r24, 0x04	; 4
     40e:	02 97       	sbiw	r24, 0x02	; 2
     410:	08 f0       	brcs	.+2      	; 0x414 <__LOCK_REGION_LENGTH__+0x14>
     412:	40 c0       	rjmp	.+128    	; 0x494 <__LOCK_REGION_LENGTH__+0x94>
		ADC_num = Amp_num + 5;
     414:	75 01       	movw	r14, r10
     416:	f5 e0       	ldi	r31, 0x05	; 5
     418:	ef 0e       	add	r14, r31
     41a:	f1 1c       	adc	r15, r1
     41c:	09 e1       	ldi	r16, 0x19	; 25
     41e:	10 e0       	ldi	r17, 0x00	; 0
// Description: Ammeter measurements via ADC.
/*========================================================================================*/

float Amp_ADC(int Amp_num){
	int ADC_num = 0; // initialize ADC number to check
	float val = 0; // initialize the voltage value to 0 V
     420:	41 2c       	mov	r4, r1
     422:	51 2c       	mov	r5, r1
     424:	32 01       	movw	r6, r4
	}
	// Solar current and Battery current, respectively
	else if(Amp_num == 4 || Amp_num == 5){
		ADC_num = Amp_num + 5;
		while(i < 25){
			val += (((Check_ADC(ADC_num) / 1024) * 3.3) - zero[Amp_num]) / 0.4;
     426:	aa 0c       	add	r10, r10
     428:	bb 1c       	adc	r11, r11
     42a:	aa 0c       	add	r10, r10
     42c:	bb 1c       	adc	r11, r11
     42e:	81 e0       	ldi	r24, 0x01	; 1
     430:	90 e0       	ldi	r25, 0x00	; 0
     432:	8c 0f       	add	r24, r28
     434:	9d 1f       	adc	r25, r29
     436:	a8 0e       	add	r10, r24
     438:	b9 1e       	adc	r11, r25
     43a:	c7 01       	movw	r24, r14
     43c:	11 df       	rcall	.-478    	; 0x260 <Check_ADC>
     43e:	20 e0       	ldi	r18, 0x00	; 0
     440:	30 e0       	ldi	r19, 0x00	; 0
     442:	40 e8       	ldi	r20, 0x80	; 128
     444:	5a e3       	ldi	r21, 0x3A	; 58
     446:	0e 94 49 13 	call	0x2692	; 0x2692 <__mulsf3>
     44a:	23 e3       	ldi	r18, 0x33	; 51
     44c:	33 e3       	ldi	r19, 0x33	; 51
     44e:	43 e5       	ldi	r20, 0x53	; 83
     450:	50 e4       	ldi	r21, 0x40	; 64
     452:	0e 94 49 13 	call	0x2692	; 0x2692 <__mulsf3>
     456:	f5 01       	movw	r30, r10
     458:	20 81       	ld	r18, Z
     45a:	31 81       	ldd	r19, Z+1	; 0x01
     45c:	42 81       	ldd	r20, Z+2	; 0x02
     45e:	53 81       	ldd	r21, Z+3	; 0x03
     460:	0e 94 c2 11 	call	0x2384	; 0x2384 <__subsf3>
     464:	2d ec       	ldi	r18, 0xCD	; 205
     466:	3c ec       	ldi	r19, 0xCC	; 204
     468:	4c ec       	ldi	r20, 0xCC	; 204
     46a:	5e e3       	ldi	r21, 0x3E	; 62
     46c:	0e 94 2b 12 	call	0x2456	; 0x2456 <__divsf3>
     470:	9b 01       	movw	r18, r22
     472:	ac 01       	movw	r20, r24
     474:	c3 01       	movw	r24, r6
     476:	b2 01       	movw	r22, r4
     478:	0e 94 c3 11 	call	0x2386	; 0x2386 <__addsf3>
     47c:	2b 01       	movw	r4, r22
     47e:	3c 01       	movw	r6, r24
     480:	01 50       	subi	r16, 0x01	; 1
     482:	11 09       	sbc	r17, r1
		val = val/25;
	}
	// Solar current and Battery current, respectively
	else if(Amp_num == 4 || Amp_num == 5){
		ADC_num = Amp_num + 5;
		while(i < 25){
     484:	d1 f6       	brne	.-76     	; 0x43a <__LOCK_REGION_LENGTH__+0x3a>
			val += (((Check_ADC(ADC_num) / 1024) * 3.3) - zero[Amp_num]) / 0.4;
			i++;
		}
		val = val/25;
     486:	20 e0       	ldi	r18, 0x00	; 0
     488:	30 e0       	ldi	r19, 0x00	; 0
     48a:	48 ec       	ldi	r20, 0xC8	; 200
     48c:	51 e4       	ldi	r21, 0x41	; 65
     48e:	0e 94 2b 12 	call	0x2456	; 0x2456 <__divsf3>
     492:	03 c0       	rjmp	.+6      	; 0x49a <__LOCK_REGION_LENGTH__+0x9a>
// Description: Ammeter measurements via ADC.
/*========================================================================================*/

float Amp_ADC(int Amp_num){
	int ADC_num = 0; // initialize ADC number to check
	float val = 0; // initialize the voltage value to 0 V
     494:	60 e0       	ldi	r22, 0x00	; 0
     496:	70 e0       	ldi	r23, 0x00	; 0
     498:	cb 01       	movw	r24, r22
			i++;
		}
		val = val/25;
	}
	return val;
}
     49a:	68 96       	adiw	r28, 0x18	; 24
     49c:	0f b6       	in	r0, 0x3f	; 63
     49e:	f8 94       	cli
     4a0:	de bf       	out	0x3e, r29	; 62
     4a2:	0f be       	out	0x3f, r0	; 63
     4a4:	cd bf       	out	0x3d, r28	; 61
     4a6:	df 91       	pop	r29
     4a8:	cf 91       	pop	r28
     4aa:	1f 91       	pop	r17
     4ac:	0f 91       	pop	r16
     4ae:	ff 90       	pop	r15
     4b0:	ef 90       	pop	r14
     4b2:	df 90       	pop	r13
     4b4:	cf 90       	pop	r12
     4b6:	bf 90       	pop	r11
     4b8:	af 90       	pop	r10
     4ba:	9f 90       	pop	r9
     4bc:	8f 90       	pop	r8
     4be:	7f 90       	pop	r7
     4c0:	6f 90       	pop	r6
     4c2:	5f 90       	pop	r5
     4c4:	4f 90       	pop	r4
     4c6:	08 95       	ret

000004c8 <Temp_ADC>:
// Author: Chris Thomas
// Date: 2019-03-17
// Description: Temperature measurement via ADC.
/*========================================================================================*/

float Temp_ADC(){
     4c8:	af 92       	push	r10
     4ca:	bf 92       	push	r11
     4cc:	cf 92       	push	r12
     4ce:	df 92       	push	r13
     4d0:	ef 92       	push	r14
     4d2:	ff 92       	push	r15
     4d4:	0f 93       	push	r16
     4d6:	1f 93       	push	r17
     4d8:	cf 93       	push	r28
     4da:	df 93       	push	r29
     4dc:	cd b7       	in	r28, 0x3d	; 61
     4de:	de b7       	in	r29, 0x3e	; 62
     4e0:	2c 97       	sbiw	r28, 0x0c	; 12
     4e2:	0f b6       	in	r0, 0x3f	; 63
     4e4:	f8 94       	cli
     4e6:	de bf       	out	0x3e, r29	; 62
     4e8:	0f be       	out	0x3f, r0	; 63
     4ea:	cd bf       	out	0x3d, r28	; 61
	int i = 0;
	float temp[3];
	float high; // return the highest temperature for symposium demo
	
	// Enable temperature sensor
	Clear_GPIO(1);
     4ec:	81 e0       	ldi	r24, 0x01	; 1
     4ee:	90 e0       	ldi	r25, 0x00	; 0
     4f0:	0e 94 b7 0a 	call	0x156e	; 0x156e <Clear_GPIO>
     4f4:	ee 24       	eor	r14, r14
     4f6:	e3 94       	inc	r14
     4f8:	f1 2c       	mov	r15, r1
     4fa:	00 e0       	ldi	r16, 0x00	; 0
     4fc:	10 e0       	ldi	r17, 0x00	; 0
     4fe:	05 c0       	rjmp	.+10     	; 0x50a <Temp_ADC+0x42>
     500:	0f 5f       	subi	r16, 0xFF	; 255
     502:	1f 4f       	sbci	r17, 0xFF	; 255
     504:	8f ef       	ldi	r24, 0xFF	; 255
     506:	e8 1a       	sub	r14, r24
     508:	f8 0a       	sbc	r15, r24
	
	 // 3 Temperature sensors on battery
	while(i < 3){
		if (i == 0){
     50a:	01 15       	cp	r16, r1
     50c:	11 05       	cpc	r17, r1
     50e:	51 f5       	brne	.+84     	; 0x564 <Temp_ADC+0x9c>
			Clear_GPIO(4);
     510:	84 e0       	ldi	r24, 0x04	; 4
     512:	90 e0       	ldi	r25, 0x00	; 0
     514:	0e 94 b7 0a 	call	0x156e	; 0x156e <Clear_GPIO>
			Set_GPIO(5);
     518:	85 e0       	ldi	r24, 0x05	; 5
     51a:	90 e0       	ldi	r25, 0x00	; 0
     51c:	c2 d7       	rcall	.+3972   	; 0x14a2 <Set_GPIO>
			Set_GPIO(6);
     51e:	86 e0       	ldi	r24, 0x06	; 6
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	bf d7       	rcall	.+3966   	; 0x14a2 <Set_GPIO>
			temp[0] = (((Check_ADC(11) / 1024) * 3.3) - 0.6972) / 0.0328;
     524:	8b e0       	ldi	r24, 0x0B	; 11
     526:	90 e0       	ldi	r25, 0x00	; 0
     528:	9b de       	rcall	.-714    	; 0x260 <Check_ADC>
     52a:	20 e0       	ldi	r18, 0x00	; 0
     52c:	30 e0       	ldi	r19, 0x00	; 0
     52e:	40 e8       	ldi	r20, 0x80	; 128
     530:	5a e3       	ldi	r21, 0x3A	; 58
     532:	0e 94 49 13 	call	0x2692	; 0x2692 <__mulsf3>
     536:	23 e3       	ldi	r18, 0x33	; 51
     538:	33 e3       	ldi	r19, 0x33	; 51
     53a:	43 e5       	ldi	r20, 0x53	; 83
     53c:	50 e4       	ldi	r21, 0x40	; 64
     53e:	0e 94 49 13 	call	0x2692	; 0x2692 <__mulsf3>
     542:	23 eb       	ldi	r18, 0xB3	; 179
     544:	3b e7       	ldi	r19, 0x7B	; 123
     546:	42 e3       	ldi	r20, 0x32	; 50
     548:	5f e3       	ldi	r21, 0x3F	; 63
     54a:	0e 94 c2 11 	call	0x2384	; 0x2384 <__subsf3>
     54e:	2b e4       	ldi	r18, 0x4B	; 75
     550:	39 e5       	ldi	r19, 0x59	; 89
     552:	46 e0       	ldi	r20, 0x06	; 6
     554:	5d e3       	ldi	r21, 0x3D	; 61
     556:	0e 94 2b 12 	call	0x2456	; 0x2456 <__divsf3>
     55a:	69 83       	std	Y+1, r22	; 0x01
     55c:	7a 83       	std	Y+2, r23	; 0x02
     55e:	8b 83       	std	Y+3, r24	; 0x03
     560:	9c 83       	std	Y+4, r25	; 0x04
     562:	ce cf       	rjmp	.-100    	; 0x500 <Temp_ADC+0x38>
		}
		else if(i == 1){
     564:	01 30       	cpi	r16, 0x01	; 1
     566:	11 05       	cpc	r17, r1
     568:	49 f5       	brne	.+82     	; 0x5bc <Temp_ADC+0xf4>
			Set_GPIO(4);
     56a:	84 e0       	ldi	r24, 0x04	; 4
     56c:	90 e0       	ldi	r25, 0x00	; 0
     56e:	99 d7       	rcall	.+3890   	; 0x14a2 <Set_GPIO>
			Set_GPIO(5);
     570:	85 e0       	ldi	r24, 0x05	; 5
     572:	90 e0       	ldi	r25, 0x00	; 0
			Clear_GPIO(6);
     574:	96 d7       	rcall	.+3884   	; 0x14a2 <Set_GPIO>
     576:	86 e0       	ldi	r24, 0x06	; 6
     578:	90 e0       	ldi	r25, 0x00	; 0
			temp[1] = (((Check_ADC(11) / 1024) * 3.3) - 0.6972) / 0.0328;
     57a:	f9 d7       	rcall	.+4082   	; 0x156e <Clear_GPIO>
     57c:	8b e0       	ldi	r24, 0x0B	; 11
     57e:	90 e0       	ldi	r25, 0x00	; 0
     580:	6f de       	rcall	.-802    	; 0x260 <Check_ADC>
     582:	20 e0       	ldi	r18, 0x00	; 0
     584:	30 e0       	ldi	r19, 0x00	; 0
     586:	40 e8       	ldi	r20, 0x80	; 128
     588:	5a e3       	ldi	r21, 0x3A	; 58
     58a:	0e 94 49 13 	call	0x2692	; 0x2692 <__mulsf3>
     58e:	23 e3       	ldi	r18, 0x33	; 51
     590:	33 e3       	ldi	r19, 0x33	; 51
     592:	43 e5       	ldi	r20, 0x53	; 83
     594:	50 e4       	ldi	r21, 0x40	; 64
     596:	0e 94 49 13 	call	0x2692	; 0x2692 <__mulsf3>
     59a:	23 eb       	ldi	r18, 0xB3	; 179
     59c:	3b e7       	ldi	r19, 0x7B	; 123
     59e:	42 e3       	ldi	r20, 0x32	; 50
     5a0:	5f e3       	ldi	r21, 0x3F	; 63
     5a2:	0e 94 c2 11 	call	0x2384	; 0x2384 <__subsf3>
     5a6:	2b e4       	ldi	r18, 0x4B	; 75
     5a8:	39 e5       	ldi	r19, 0x59	; 89
     5aa:	46 e0       	ldi	r20, 0x06	; 6
     5ac:	5d e3       	ldi	r21, 0x3D	; 61
     5ae:	0e 94 2b 12 	call	0x2456	; 0x2456 <__divsf3>
     5b2:	6d 83       	std	Y+5, r22	; 0x05
     5b4:	7e 83       	std	Y+6, r23	; 0x06
     5b6:	8f 83       	std	Y+7, r24	; 0x07
     5b8:	98 87       	std	Y+8, r25	; 0x08
     5ba:	a2 cf       	rjmp	.-188    	; 0x500 <Temp_ADC+0x38>
		}
		else if (i == 2){
     5bc:	02 30       	cpi	r16, 0x02	; 2
     5be:	11 05       	cpc	r17, r1
			Set_GPIO(4);
     5c0:	49 f5       	brne	.+82     	; 0x614 <Temp_ADC+0x14c>
     5c2:	84 e0       	ldi	r24, 0x04	; 4
     5c4:	90 e0       	ldi	r25, 0x00	; 0
			Set_GPIO(5);
     5c6:	6d d7       	rcall	.+3802   	; 0x14a2 <Set_GPIO>
     5c8:	85 e0       	ldi	r24, 0x05	; 5
     5ca:	90 e0       	ldi	r25, 0x00	; 0
			Set_GPIO(6);
     5cc:	6a d7       	rcall	.+3796   	; 0x14a2 <Set_GPIO>
     5ce:	86 e0       	ldi	r24, 0x06	; 6
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	67 d7       	rcall	.+3790   	; 0x14a2 <Set_GPIO>
			temp[2] = (((Check_ADC(11) / 1024) * 3.3) - 0.6972) / 0.0328;
     5d4:	8b e0       	ldi	r24, 0x0B	; 11
     5d6:	90 e0       	ldi	r25, 0x00	; 0
     5d8:	43 de       	rcall	.-890    	; 0x260 <Check_ADC>
     5da:	20 e0       	ldi	r18, 0x00	; 0
     5dc:	30 e0       	ldi	r19, 0x00	; 0
     5de:	40 e8       	ldi	r20, 0x80	; 128
     5e0:	5a e3       	ldi	r21, 0x3A	; 58
     5e2:	0e 94 49 13 	call	0x2692	; 0x2692 <__mulsf3>
     5e6:	23 e3       	ldi	r18, 0x33	; 51
     5e8:	33 e3       	ldi	r19, 0x33	; 51
     5ea:	43 e5       	ldi	r20, 0x53	; 83
     5ec:	50 e4       	ldi	r21, 0x40	; 64
     5ee:	0e 94 49 13 	call	0x2692	; 0x2692 <__mulsf3>
     5f2:	23 eb       	ldi	r18, 0xB3	; 179
     5f4:	3b e7       	ldi	r19, 0x7B	; 123
     5f6:	42 e3       	ldi	r20, 0x32	; 50
     5f8:	5f e3       	ldi	r21, 0x3F	; 63
     5fa:	0e 94 c2 11 	call	0x2384	; 0x2384 <__subsf3>
     5fe:	2b e4       	ldi	r18, 0x4B	; 75
     600:	39 e5       	ldi	r19, 0x59	; 89
     602:	46 e0       	ldi	r20, 0x06	; 6
     604:	5d e3       	ldi	r21, 0x3D	; 61
     606:	0e 94 2b 12 	call	0x2456	; 0x2456 <__divsf3>
     60a:	69 87       	std	Y+9, r22	; 0x09
     60c:	7a 87       	std	Y+10, r23	; 0x0a
     60e:	8b 87       	std	Y+11, r24	; 0x0b
     610:	9c 87       	std	Y+12, r25	; 0x0c
     612:	05 c0       	rjmp	.+10     	; 0x61e <Temp_ADC+0x156>
	
	// Enable temperature sensor
	Clear_GPIO(1);
	
	 // 3 Temperature sensors on battery
	while(i < 3){
     614:	83 e0       	ldi	r24, 0x03	; 3
     616:	e8 16       	cp	r14, r24
     618:	f1 04       	cpc	r15, r1
     61a:	0c f4       	brge	.+2      	; 0x61e <Temp_ADC+0x156>
		}
		i++;
	}
	
	// Disable temperature Sensor
	Set_GPIO(1);
     61c:	71 cf       	rjmp	.-286    	; 0x500 <Temp_ADC+0x38>
     61e:	81 e0       	ldi	r24, 0x01	; 1
     620:	90 e0       	ldi	r25, 0x00	; 0
	
	// Pull GPIO 4,5 & 6 low
	Clear_GPIO(4);
     622:	3f d7       	rcall	.+3710   	; 0x14a2 <Set_GPIO>
     624:	84 e0       	ldi	r24, 0x04	; 4
     626:	90 e0       	ldi	r25, 0x00	; 0
     628:	a2 d7       	rcall	.+3908   	; 0x156e <Clear_GPIO>
	Clear_GPIO(5);
     62a:	85 e0       	ldi	r24, 0x05	; 5
     62c:	90 e0       	ldi	r25, 0x00	; 0
     62e:	9f d7       	rcall	.+3902   	; 0x156e <Clear_GPIO>
     630:	86 e0       	ldi	r24, 0x06	; 6
	Clear_GPIO(6);
     632:	90 e0       	ldi	r25, 0x00	; 0
     634:	9c d7       	rcall	.+3896   	; 0x156e <Clear_GPIO>
     636:	f9 80       	ldd	r15, Y+1	; 0x01
     638:	0a 81       	ldd	r16, Y+2	; 0x02
	
	i = 1; // start at the second index
	high = temp[0]; // initialize the highest temperature to the first index
     63a:	1b 81       	ldd	r17, Y+3	; 0x03
     63c:	ec 80       	ldd	r14, Y+4	; 0x04
     63e:	ad 80       	ldd	r10, Y+5	; 0x05
     640:	be 80       	ldd	r11, Y+6	; 0x06
	while(i < 3){
		if(temp[i] > high){
     642:	cf 80       	ldd	r12, Y+7	; 0x07
     644:	d8 84       	ldd	r13, Y+8	; 0x08
     646:	2a 2d       	mov	r18, r10
     648:	3b 2d       	mov	r19, r11
     64a:	4c 2d       	mov	r20, r12
     64c:	5d 2d       	mov	r21, r13
     64e:	6f 2d       	mov	r22, r15
     650:	70 2f       	mov	r23, r16
     652:	81 2f       	mov	r24, r17
     654:	9e 2d       	mov	r25, r14
     656:	0e 94 27 12 	call	0x244e	; 0x244e <__cmpsf2>
     65a:	88 23       	and	r24, r24
     65c:	24 f4       	brge	.+8      	; 0x666 <Temp_ADC+0x19e>
     65e:	fa 2c       	mov	r15, r10
     660:	0b 2d       	mov	r16, r11
     662:	1c 2d       	mov	r17, r12
     664:	ed 2c       	mov	r14, r13
     666:	a9 84       	ldd	r10, Y+9	; 0x09
     668:	ba 84       	ldd	r11, Y+10	; 0x0a
     66a:	cb 84       	ldd	r12, Y+11	; 0x0b
     66c:	dc 84       	ldd	r13, Y+12	; 0x0c
     66e:	2f 2d       	mov	r18, r15
     670:	30 2f       	mov	r19, r16
     672:	41 2f       	mov	r20, r17
     674:	5e 2d       	mov	r21, r14
     676:	6a 2d       	mov	r22, r10
     678:	7b 2d       	mov	r23, r11
     67a:	8c 2d       	mov	r24, r12
     67c:	9d 2d       	mov	r25, r13
     67e:	0e 94 45 13 	call	0x268a	; 0x268a <__gesf2>
     682:	18 16       	cp	r1, r24
     684:	24 f4       	brge	.+8      	; 0x68e <Temp_ADC+0x1c6>
     686:	fa 2c       	mov	r15, r10
     688:	0b 2d       	mov	r16, r11
     68a:	1c 2d       	mov	r17, r12
     68c:	ed 2c       	mov	r14, r13
     68e:	6f 2d       	mov	r22, r15
     690:	70 2f       	mov	r23, r16
		i++;
	}
	
	// Divide temperature measurements by 3 to get an average (To be discussed)
	return high;
}
     692:	81 2f       	mov	r24, r17
     694:	9e 2d       	mov	r25, r14
     696:	2c 96       	adiw	r28, 0x0c	; 12
     698:	0f b6       	in	r0, 0x3f	; 63
     69a:	f8 94       	cli
     69c:	de bf       	out	0x3e, r29	; 62
     69e:	0f be       	out	0x3f, r0	; 63
     6a0:	cd bf       	out	0x3d, r28	; 61
     6a2:	df 91       	pop	r29
     6a4:	cf 91       	pop	r28
     6a6:	1f 91       	pop	r17
     6a8:	0f 91       	pop	r16
     6aa:	ff 90       	pop	r15
     6ac:	ef 90       	pop	r14
     6ae:	df 90       	pop	r13
     6b0:	cf 90       	pop	r12
     6b2:	bf 90       	pop	r11
     6b4:	af 90       	pop	r10
     6b6:	08 95       	ret

000006b8 <SoC_ADC>:
     6b8:	8f 92       	push	r8
     6ba:	9f 92       	push	r9
// Author: Chris Thomas
// Date: 2019-03-17
// Description: Temperature measurement via ADC.
/*========================================================================================*/

float SoC_ADC(float volt, float amp){
     6bc:	af 92       	push	r10
     6be:	bf 92       	push	r11
     6c0:	cf 92       	push	r12
     6c2:	df 92       	push	r13
     6c4:	ef 92       	push	r14
     6c6:	ff 92       	push	r15
     6c8:	6b 01       	movw	r12, r22
     6ca:	7c 01       	movw	r14, r24
     6cc:	49 01       	movw	r8, r18
     6ce:	5a 01       	movw	r10, r20
	
	// Check Battery voltage and current
	
	
	// Lookup table
	if (amp < 0.6){
     6d0:	2a e9       	ldi	r18, 0x9A	; 154
     6d2:	39 e9       	ldi	r19, 0x99	; 153
     6d4:	49 e1       	ldi	r20, 0x19	; 25
     6d6:	5f e3       	ldi	r21, 0x3F	; 63
     6d8:	c5 01       	movw	r24, r10
     6da:	b4 01       	movw	r22, r8
     6dc:	0e 94 27 12 	call	0x244e	; 0x244e <__cmpsf2>
     6e0:	88 23       	and	r24, r24
     6e2:	0c f0       	brlt	.+2      	; 0x6e6 <SoC_ADC+0x2e>
     6e4:	87 c0       	rjmp	.+270    	; 0x7f4 <SoC_ADC+0x13c>
		if (volt > 4.00) {
     6e6:	20 e0       	ldi	r18, 0x00	; 0
     6e8:	30 e0       	ldi	r19, 0x00	; 0
     6ea:	40 e8       	ldi	r20, 0x80	; 128
     6ec:	50 e4       	ldi	r21, 0x40	; 64
     6ee:	c7 01       	movw	r24, r14
     6f0:	b6 01       	movw	r22, r12
     6f2:	0e 94 45 13 	call	0x268a	; 0x268a <__gesf2>
     6f6:	18 16       	cp	r1, r24
     6f8:	0c f4       	brge	.+2      	; 0x6fc <SoC_ADC+0x44>
     6fa:	ab c1       	rjmp	.+854    	; 0xa52 <SoC_ADC+0x39a>
			soc = 80;
		} //end if
		else if (volt < 4.00 && volt > 3.80) {
     6fc:	20 e0       	ldi	r18, 0x00	; 0
     6fe:	30 e0       	ldi	r19, 0x00	; 0
     700:	40 e8       	ldi	r20, 0x80	; 128
     702:	50 e4       	ldi	r21, 0x40	; 64
     704:	c7 01       	movw	r24, r14
     706:	b6 01       	movw	r22, r12
     708:	0e 94 27 12 	call	0x244e	; 0x244e <__cmpsf2>
     70c:	88 23       	and	r24, r24
     70e:	5c f4       	brge	.+22     	; 0x726 <SoC_ADC+0x6e>
     710:	23 e3       	ldi	r18, 0x33	; 51
     712:	33 e3       	ldi	r19, 0x33	; 51
     714:	43 e7       	ldi	r20, 0x73	; 115
     716:	50 e4       	ldi	r21, 0x40	; 64
     718:	c7 01       	movw	r24, r14
     71a:	b6 01       	movw	r22, r12
     71c:	0e 94 45 13 	call	0x268a	; 0x268a <__gesf2>
     720:	18 16       	cp	r1, r24
     722:	0c f4       	brge	.+2      	; 0x726 <SoC_ADC+0x6e>
     724:	9b c1       	rjmp	.+822    	; 0xa5c <SoC_ADC+0x3a4>
			soc = 70;
		} //end else if
		else if (volt < 3.80 && volt > 3.75) {
     726:	23 e3       	ldi	r18, 0x33	; 51
     728:	33 e3       	ldi	r19, 0x33	; 51
     72a:	43 e7       	ldi	r20, 0x73	; 115
     72c:	50 e4       	ldi	r21, 0x40	; 64
     72e:	c7 01       	movw	r24, r14
     730:	b6 01       	movw	r22, r12
     732:	0e 94 27 12 	call	0x244e	; 0x244e <__cmpsf2>
     736:	88 23       	and	r24, r24
     738:	5c f4       	brge	.+22     	; 0x750 <SoC_ADC+0x98>
     73a:	20 e0       	ldi	r18, 0x00	; 0
     73c:	30 e0       	ldi	r19, 0x00	; 0
     73e:	40 e7       	ldi	r20, 0x70	; 112
     740:	50 e4       	ldi	r21, 0x40	; 64
     742:	c7 01       	movw	r24, r14
     744:	b6 01       	movw	r22, r12
     746:	0e 94 45 13 	call	0x268a	; 0x268a <__gesf2>
     74a:	18 16       	cp	r1, r24
     74c:	0c f4       	brge	.+2      	; 0x750 <SoC_ADC+0x98>
     74e:	8b c1       	rjmp	.+790    	; 0xa66 <SoC_ADC+0x3ae>
			soc = 60;
		} //end else if
		else if (volt < 3.75 && volt > 3.70) {
     750:	20 e0       	ldi	r18, 0x00	; 0
     752:	30 e0       	ldi	r19, 0x00	; 0
     754:	40 e7       	ldi	r20, 0x70	; 112
     756:	50 e4       	ldi	r21, 0x40	; 64
     758:	c7 01       	movw	r24, r14
     75a:	b6 01       	movw	r22, r12
     75c:	0e 94 27 12 	call	0x244e	; 0x244e <__cmpsf2>
     760:	88 23       	and	r24, r24
     762:	5c f4       	brge	.+22     	; 0x77a <SoC_ADC+0xc2>
     764:	2d ec       	ldi	r18, 0xCD	; 205
     766:	3c ec       	ldi	r19, 0xCC	; 204
     768:	4c e6       	ldi	r20, 0x6C	; 108
     76a:	50 e4       	ldi	r21, 0x40	; 64
     76c:	c7 01       	movw	r24, r14
     76e:	b6 01       	movw	r22, r12
     770:	0e 94 45 13 	call	0x268a	; 0x268a <__gesf2>
     774:	18 16       	cp	r1, r24
     776:	0c f4       	brge	.+2      	; 0x77a <SoC_ADC+0xc2>
     778:	7b c1       	rjmp	.+758    	; 0xa70 <SoC_ADC+0x3b8>
			soc = 50;
		} //end else if
		else if (volt < 3.70 && volt > 3.60) {
     77a:	2d ec       	ldi	r18, 0xCD	; 205
     77c:	3c ec       	ldi	r19, 0xCC	; 204
     77e:	4c e6       	ldi	r20, 0x6C	; 108
     780:	50 e4       	ldi	r21, 0x40	; 64
     782:	c7 01       	movw	r24, r14
     784:	b6 01       	movw	r22, r12
     786:	0e 94 27 12 	call	0x244e	; 0x244e <__cmpsf2>
     78a:	88 23       	and	r24, r24
     78c:	5c f4       	brge	.+22     	; 0x7a4 <SoC_ADC+0xec>
     78e:	26 e6       	ldi	r18, 0x66	; 102
     790:	36 e6       	ldi	r19, 0x66	; 102
     792:	46 e6       	ldi	r20, 0x66	; 102
     794:	50 e4       	ldi	r21, 0x40	; 64
     796:	c7 01       	movw	r24, r14
     798:	b6 01       	movw	r22, r12
     79a:	0e 94 45 13 	call	0x268a	; 0x268a <__gesf2>
     79e:	18 16       	cp	r1, r24
     7a0:	0c f4       	brge	.+2      	; 0x7a4 <SoC_ADC+0xec>
     7a2:	6b c1       	rjmp	.+726    	; 0xa7a <SoC_ADC+0x3c2>
			soc = 40;
		} //end else if
		else if (volt < 3.60 && volt > 3.5) {
     7a4:	26 e6       	ldi	r18, 0x66	; 102
     7a6:	36 e6       	ldi	r19, 0x66	; 102
     7a8:	46 e6       	ldi	r20, 0x66	; 102
     7aa:	50 e4       	ldi	r21, 0x40	; 64
     7ac:	c7 01       	movw	r24, r14
     7ae:	b6 01       	movw	r22, r12
     7b0:	0e 94 27 12 	call	0x244e	; 0x244e <__cmpsf2>
     7b4:	88 23       	and	r24, r24
     7b6:	5c f4       	brge	.+22     	; 0x7ce <SoC_ADC+0x116>
     7b8:	20 e0       	ldi	r18, 0x00	; 0
     7ba:	30 e0       	ldi	r19, 0x00	; 0
     7bc:	40 e6       	ldi	r20, 0x60	; 96
     7be:	50 e4       	ldi	r21, 0x40	; 64
     7c0:	c7 01       	movw	r24, r14
     7c2:	b6 01       	movw	r22, r12
     7c4:	0e 94 45 13 	call	0x268a	; 0x268a <__gesf2>
     7c8:	18 16       	cp	r1, r24
     7ca:	0c f4       	brge	.+2      	; 0x7ce <SoC_ADC+0x116>
     7cc:	5b c1       	rjmp	.+694    	; 0xa84 <SoC_ADC+0x3cc>
			soc = 30;
		} //end else if
		else if (volt < 3.50) {
     7ce:	20 e0       	ldi	r18, 0x00	; 0
     7d0:	30 e0       	ldi	r19, 0x00	; 0
     7d2:	40 e6       	ldi	r20, 0x60	; 96
     7d4:	50 e4       	ldi	r21, 0x40	; 64
     7d6:	c7 01       	movw	r24, r14
     7d8:	b6 01       	movw	r22, r12
     7da:	0e 94 27 12 	call	0x244e	; 0x244e <__cmpsf2>
     7de:	88 23       	and	r24, r24
     7e0:	0c f4       	brge	.+2      	; 0x7e4 <SoC_ADC+0x12c>
     7e2:	55 c1       	rjmp	.+682    	; 0xa8e <SoC_ADC+0x3d6>
			soc = 20;
		} //end else if
		else {
			UART0_putstring("Error Reading State of Charge \n\n\r");
     7e4:	83 e5       	ldi	r24, 0x53	; 83
     7e6:	95 e0       	ldi	r25, 0x05	; 5
     7e8:	0e 94 17 10 	call	0x202e	; 0x202e <UART0_putstring>
// Description: Temperature measurement via ADC.
/*========================================================================================*/

float SoC_ADC(float volt, float amp){
	// return value
	float soc = 0;
     7ec:	60 e0       	ldi	r22, 0x00	; 0
     7ee:	70 e0       	ldi	r23, 0x00	; 0
     7f0:	cb 01       	movw	r24, r22
     7f2:	9b c1       	rjmp	.+822    	; 0xb2a <SoC_ADC+0x472>
		} //end else if
		else {
			UART0_putstring("Error Reading State of Charge \n\n\r");
		} //end else
	}
	else if(amp > 0.6 && amp < 3){
     7f4:	2a e9       	ldi	r18, 0x9A	; 154
     7f6:	39 e9       	ldi	r19, 0x99	; 153
     7f8:	49 e1       	ldi	r20, 0x19	; 25
     7fa:	5f e3       	ldi	r21, 0x3F	; 63
     7fc:	c5 01       	movw	r24, r10
     7fe:	b4 01       	movw	r22, r8
     800:	0e 94 45 13 	call	0x268a	; 0x268a <__gesf2>
     804:	18 16       	cp	r1, r24
     806:	0c f0       	brlt	.+2      	; 0x80a <SoC_ADC+0x152>
     808:	92 c0       	rjmp	.+292    	; 0x92e <SoC_ADC+0x276>
     80a:	20 e0       	ldi	r18, 0x00	; 0
     80c:	30 e0       	ldi	r19, 0x00	; 0
     80e:	40 e4       	ldi	r20, 0x40	; 64
     810:	50 e4       	ldi	r21, 0x40	; 64
     812:	c5 01       	movw	r24, r10
     814:	b4 01       	movw	r22, r8
     816:	0e 94 27 12 	call	0x244e	; 0x244e <__cmpsf2>
     81a:	88 23       	and	r24, r24
     81c:	0c f0       	brlt	.+2      	; 0x820 <SoC_ADC+0x168>
     81e:	87 c0       	rjmp	.+270    	; 0x92e <SoC_ADC+0x276>
		if (volt > 3.75) {
     820:	20 e0       	ldi	r18, 0x00	; 0
     822:	30 e0       	ldi	r19, 0x00	; 0
     824:	40 e7       	ldi	r20, 0x70	; 112
     826:	50 e4       	ldi	r21, 0x40	; 64
     828:	c7 01       	movw	r24, r14
     82a:	b6 01       	movw	r22, r12
     82c:	0e 94 45 13 	call	0x268a	; 0x268a <__gesf2>
     830:	18 16       	cp	r1, r24
     832:	0c f4       	brge	.+2      	; 0x836 <SoC_ADC+0x17e>
     834:	31 c1       	rjmp	.+610    	; 0xa98 <SoC_ADC+0x3e0>
			soc = 80;
		} //end if
		else if (volt < 3.75 && volt > 3.65) {
     836:	20 e0       	ldi	r18, 0x00	; 0
     838:	30 e0       	ldi	r19, 0x00	; 0
     83a:	40 e7       	ldi	r20, 0x70	; 112
     83c:	50 e4       	ldi	r21, 0x40	; 64
     83e:	c7 01       	movw	r24, r14
     840:	b6 01       	movw	r22, r12
     842:	0e 94 27 12 	call	0x244e	; 0x244e <__cmpsf2>
     846:	88 23       	and	r24, r24
     848:	5c f4       	brge	.+22     	; 0x860 <SoC_ADC+0x1a8>
     84a:	2a e9       	ldi	r18, 0x9A	; 154
     84c:	39 e9       	ldi	r19, 0x99	; 153
     84e:	49 e6       	ldi	r20, 0x69	; 105
     850:	50 e4       	ldi	r21, 0x40	; 64
     852:	c7 01       	movw	r24, r14
     854:	b6 01       	movw	r22, r12
     856:	0e 94 45 13 	call	0x268a	; 0x268a <__gesf2>
     85a:	18 16       	cp	r1, r24
     85c:	0c f4       	brge	.+2      	; 0x860 <SoC_ADC+0x1a8>
     85e:	21 c1       	rjmp	.+578    	; 0xaa2 <SoC_ADC+0x3ea>
			soc = 70;
		} //end else if
		else if (volt < 3.65 && volt > 3.55) {
     860:	2a e9       	ldi	r18, 0x9A	; 154
     862:	39 e9       	ldi	r19, 0x99	; 153
     864:	49 e6       	ldi	r20, 0x69	; 105
     866:	50 e4       	ldi	r21, 0x40	; 64
     868:	c7 01       	movw	r24, r14
     86a:	b6 01       	movw	r22, r12
     86c:	0e 94 27 12 	call	0x244e	; 0x244e <__cmpsf2>
     870:	88 23       	and	r24, r24
     872:	5c f4       	brge	.+22     	; 0x88a <SoC_ADC+0x1d2>
     874:	23 e3       	ldi	r18, 0x33	; 51
     876:	33 e3       	ldi	r19, 0x33	; 51
     878:	43 e6       	ldi	r20, 0x63	; 99
     87a:	50 e4       	ldi	r21, 0x40	; 64
     87c:	c7 01       	movw	r24, r14
     87e:	b6 01       	movw	r22, r12
     880:	0e 94 45 13 	call	0x268a	; 0x268a <__gesf2>
     884:	18 16       	cp	r1, r24
     886:	0c f4       	brge	.+2      	; 0x88a <SoC_ADC+0x1d2>
     888:	11 c1       	rjmp	.+546    	; 0xaac <SoC_ADC+0x3f4>
			soc = 60;
		} //end else if
		else if (volt < 3.55 && volt > 3.45) {
     88a:	23 e3       	ldi	r18, 0x33	; 51
     88c:	33 e3       	ldi	r19, 0x33	; 51
     88e:	43 e6       	ldi	r20, 0x63	; 99
     890:	50 e4       	ldi	r21, 0x40	; 64
     892:	c7 01       	movw	r24, r14
     894:	b6 01       	movw	r22, r12
     896:	0e 94 27 12 	call	0x244e	; 0x244e <__cmpsf2>
     89a:	88 23       	and	r24, r24
     89c:	5c f4       	brge	.+22     	; 0x8b4 <SoC_ADC+0x1fc>
     89e:	2d ec       	ldi	r18, 0xCD	; 205
     8a0:	3c ec       	ldi	r19, 0xCC	; 204
     8a2:	4c e5       	ldi	r20, 0x5C	; 92
     8a4:	50 e4       	ldi	r21, 0x40	; 64
     8a6:	c7 01       	movw	r24, r14
     8a8:	b6 01       	movw	r22, r12
     8aa:	0e 94 45 13 	call	0x268a	; 0x268a <__gesf2>
     8ae:	18 16       	cp	r1, r24
     8b0:	0c f4       	brge	.+2      	; 0x8b4 <SoC_ADC+0x1fc>
     8b2:	01 c1       	rjmp	.+514    	; 0xab6 <SoC_ADC+0x3fe>
			soc = 50;
		} //end else if
 		else if (volt < 3.45 && volt > 3.35) {
     8b4:	2d ec       	ldi	r18, 0xCD	; 205
     8b6:	3c ec       	ldi	r19, 0xCC	; 204
     8b8:	4c e5       	ldi	r20, 0x5C	; 92
     8ba:	50 e4       	ldi	r21, 0x40	; 64
     8bc:	c7 01       	movw	r24, r14
     8be:	b6 01       	movw	r22, r12
     8c0:	0e 94 27 12 	call	0x244e	; 0x244e <__cmpsf2>
     8c4:	88 23       	and	r24, r24
     8c6:	5c f4       	brge	.+22     	; 0x8de <SoC_ADC+0x226>
     8c8:	26 e6       	ldi	r18, 0x66	; 102
     8ca:	36 e6       	ldi	r19, 0x66	; 102
     8cc:	46 e5       	ldi	r20, 0x56	; 86
     8ce:	50 e4       	ldi	r21, 0x40	; 64
     8d0:	c7 01       	movw	r24, r14
     8d2:	b6 01       	movw	r22, r12
     8d4:	0e 94 45 13 	call	0x268a	; 0x268a <__gesf2>
     8d8:	18 16       	cp	r1, r24
     8da:	0c f4       	brge	.+2      	; 0x8de <SoC_ADC+0x226>
     8dc:	f1 c0       	rjmp	.+482    	; 0xac0 <SoC_ADC+0x408>
			soc = 40;
		 } //end else if
		else if (volt < 3.35 && volt > 3.30) {
     8de:	26 e6       	ldi	r18, 0x66	; 102
     8e0:	36 e6       	ldi	r19, 0x66	; 102
     8e2:	46 e5       	ldi	r20, 0x56	; 86
     8e4:	50 e4       	ldi	r21, 0x40	; 64
     8e6:	c7 01       	movw	r24, r14
     8e8:	b6 01       	movw	r22, r12
     8ea:	0e 94 27 12 	call	0x244e	; 0x244e <__cmpsf2>
     8ee:	88 23       	and	r24, r24
     8f0:	5c f4       	brge	.+22     	; 0x908 <SoC_ADC+0x250>
     8f2:	23 e3       	ldi	r18, 0x33	; 51
     8f4:	33 e3       	ldi	r19, 0x33	; 51
     8f6:	43 e5       	ldi	r20, 0x53	; 83
     8f8:	50 e4       	ldi	r21, 0x40	; 64
     8fa:	c7 01       	movw	r24, r14
     8fc:	b6 01       	movw	r22, r12
     8fe:	0e 94 45 13 	call	0x268a	; 0x268a <__gesf2>
     902:	18 16       	cp	r1, r24
     904:	0c f4       	brge	.+2      	; 0x908 <SoC_ADC+0x250>
     906:	e1 c0       	rjmp	.+450    	; 0xaca <SoC_ADC+0x412>
			soc = 30;
		 } //end else if
		else if (volt < 3.30) {
     908:	23 e3       	ldi	r18, 0x33	; 51
     90a:	33 e3       	ldi	r19, 0x33	; 51
     90c:	43 e5       	ldi	r20, 0x53	; 83
     90e:	50 e4       	ldi	r21, 0x40	; 64
     910:	c7 01       	movw	r24, r14
     912:	b6 01       	movw	r22, r12
     914:	0e 94 27 12 	call	0x244e	; 0x244e <__cmpsf2>
     918:	88 23       	and	r24, r24
     91a:	0c f4       	brge	.+2      	; 0x91e <SoC_ADC+0x266>
     91c:	db c0       	rjmp	.+438    	; 0xad4 <SoC_ADC+0x41c>
			soc = 20;
		}
		else {
			UART0_putstring("Error Reading State of Charge \n\n\r");
     91e:	83 e5       	ldi	r24, 0x53	; 83
     920:	95 e0       	ldi	r25, 0x05	; 5
     922:	0e 94 17 10 	call	0x202e	; 0x202e <UART0_putstring>
// Description: Temperature measurement via ADC.
/*========================================================================================*/

float SoC_ADC(float volt, float amp){
	// return value
	float soc = 0;
     926:	60 e0       	ldi	r22, 0x00	; 0
     928:	70 e0       	ldi	r23, 0x00	; 0
     92a:	cb 01       	movw	r24, r22
     92c:	fe c0       	rjmp	.+508    	; 0xb2a <SoC_ADC+0x472>
		}
		else {
			UART0_putstring("Error Reading State of Charge \n\n\r");
		} //end else
	}
	else if(amp > 3){
     92e:	20 e0       	ldi	r18, 0x00	; 0
     930:	30 e0       	ldi	r19, 0x00	; 0
     932:	40 e4       	ldi	r20, 0x40	; 64
     934:	50 e4       	ldi	r21, 0x40	; 64
     936:	c5 01       	movw	r24, r10
     938:	b4 01       	movw	r22, r8
     93a:	0e 94 45 13 	call	0x268a	; 0x268a <__gesf2>
     93e:	18 16       	cp	r1, r24
     940:	0c f0       	brlt	.+2      	; 0x944 <SoC_ADC+0x28c>
     942:	cd c0       	rjmp	.+410    	; 0xade <SoC_ADC+0x426>
		if (volt > 3.80) {
     944:	23 e3       	ldi	r18, 0x33	; 51
     946:	33 e3       	ldi	r19, 0x33	; 51
     948:	43 e7       	ldi	r20, 0x73	; 115
     94a:	50 e4       	ldi	r21, 0x40	; 64
     94c:	c7 01       	movw	r24, r14
     94e:	b6 01       	movw	r22, r12
     950:	0e 94 45 13 	call	0x268a	; 0x268a <__gesf2>
     954:	18 16       	cp	r1, r24
     956:	0c f4       	brge	.+2      	; 0x95a <SoC_ADC+0x2a2>
     958:	c6 c0       	rjmp	.+396    	; 0xae6 <SoC_ADC+0x42e>
			soc = 80;
		} //end if
		else if (volt < 3.80 && volt > 3.75) {
     95a:	23 e3       	ldi	r18, 0x33	; 51
     95c:	33 e3       	ldi	r19, 0x33	; 51
     95e:	43 e7       	ldi	r20, 0x73	; 115
     960:	50 e4       	ldi	r21, 0x40	; 64
     962:	c7 01       	movw	r24, r14
     964:	b6 01       	movw	r22, r12
     966:	0e 94 27 12 	call	0x244e	; 0x244e <__cmpsf2>
     96a:	88 23       	and	r24, r24
     96c:	5c f4       	brge	.+22     	; 0x984 <SoC_ADC+0x2cc>
     96e:	20 e0       	ldi	r18, 0x00	; 0
     970:	30 e0       	ldi	r19, 0x00	; 0
     972:	40 e7       	ldi	r20, 0x70	; 112
     974:	50 e4       	ldi	r21, 0x40	; 64
     976:	c7 01       	movw	r24, r14
     978:	b6 01       	movw	r22, r12
     97a:	0e 94 45 13 	call	0x268a	; 0x268a <__gesf2>
     97e:	18 16       	cp	r1, r24
     980:	0c f4       	brge	.+2      	; 0x984 <SoC_ADC+0x2cc>
     982:	b6 c0       	rjmp	.+364    	; 0xaf0 <SoC_ADC+0x438>
			soc = 70;
		} //end else if
		else if (volt < 3.75 && volt > 3.65) {
     984:	20 e0       	ldi	r18, 0x00	; 0
     986:	30 e0       	ldi	r19, 0x00	; 0
     988:	40 e7       	ldi	r20, 0x70	; 112
     98a:	50 e4       	ldi	r21, 0x40	; 64
     98c:	c7 01       	movw	r24, r14
     98e:	b6 01       	movw	r22, r12
     990:	0e 94 27 12 	call	0x244e	; 0x244e <__cmpsf2>
     994:	88 23       	and	r24, r24
     996:	5c f4       	brge	.+22     	; 0x9ae <SoC_ADC+0x2f6>
     998:	2a e9       	ldi	r18, 0x9A	; 154
     99a:	39 e9       	ldi	r19, 0x99	; 153
     99c:	49 e6       	ldi	r20, 0x69	; 105
     99e:	50 e4       	ldi	r21, 0x40	; 64
     9a0:	c7 01       	movw	r24, r14
     9a2:	b6 01       	movw	r22, r12
     9a4:	0e 94 45 13 	call	0x268a	; 0x268a <__gesf2>
     9a8:	18 16       	cp	r1, r24
     9aa:	0c f4       	brge	.+2      	; 0x9ae <SoC_ADC+0x2f6>
     9ac:	a6 c0       	rjmp	.+332    	; 0xafa <SoC_ADC+0x442>
			soc = 60;
		} //end else if
		else if (volt < 3.65 && volt > 3.50) {
     9ae:	2a e9       	ldi	r18, 0x9A	; 154
     9b0:	39 e9       	ldi	r19, 0x99	; 153
     9b2:	49 e6       	ldi	r20, 0x69	; 105
     9b4:	50 e4       	ldi	r21, 0x40	; 64
     9b6:	c7 01       	movw	r24, r14
     9b8:	b6 01       	movw	r22, r12
     9ba:	0e 94 27 12 	call	0x244e	; 0x244e <__cmpsf2>
     9be:	88 23       	and	r24, r24
     9c0:	5c f4       	brge	.+22     	; 0x9d8 <SoC_ADC+0x320>
     9c2:	20 e0       	ldi	r18, 0x00	; 0
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	40 e6       	ldi	r20, 0x60	; 96
     9c8:	50 e4       	ldi	r21, 0x40	; 64
     9ca:	c7 01       	movw	r24, r14
     9cc:	b6 01       	movw	r22, r12
     9ce:	0e 94 45 13 	call	0x268a	; 0x268a <__gesf2>
     9d2:	18 16       	cp	r1, r24
     9d4:	0c f4       	brge	.+2      	; 0x9d8 <SoC_ADC+0x320>
     9d6:	96 c0       	rjmp	.+300    	; 0xb04 <SoC_ADC+0x44c>
			soc = 50;
		} //end else if
		else if (volt < 3.50 && volt > 3.40) {
     9d8:	20 e0       	ldi	r18, 0x00	; 0
     9da:	30 e0       	ldi	r19, 0x00	; 0
     9dc:	40 e6       	ldi	r20, 0x60	; 96
     9de:	50 e4       	ldi	r21, 0x40	; 64
     9e0:	c7 01       	movw	r24, r14
     9e2:	b6 01       	movw	r22, r12
     9e4:	0e 94 27 12 	call	0x244e	; 0x244e <__cmpsf2>
     9e8:	88 23       	and	r24, r24
     9ea:	5c f4       	brge	.+22     	; 0xa02 <SoC_ADC+0x34a>
     9ec:	2a e9       	ldi	r18, 0x9A	; 154
     9ee:	39 e9       	ldi	r19, 0x99	; 153
     9f0:	49 e5       	ldi	r20, 0x59	; 89
     9f2:	50 e4       	ldi	r21, 0x40	; 64
     9f4:	c7 01       	movw	r24, r14
     9f6:	b6 01       	movw	r22, r12
     9f8:	0e 94 45 13 	call	0x268a	; 0x268a <__gesf2>
     9fc:	18 16       	cp	r1, r24
     9fe:	0c f4       	brge	.+2      	; 0xa02 <SoC_ADC+0x34a>
     a00:	86 c0       	rjmp	.+268    	; 0xb0e <SoC_ADC+0x456>
			soc = 40;
		} //end else if
		else if (volt < 3.40 && volt > 3.25) {
     a02:	2a e9       	ldi	r18, 0x9A	; 154
     a04:	39 e9       	ldi	r19, 0x99	; 153
     a06:	49 e5       	ldi	r20, 0x59	; 89
     a08:	50 e4       	ldi	r21, 0x40	; 64
     a0a:	c7 01       	movw	r24, r14
     a0c:	b6 01       	movw	r22, r12
     a0e:	0e 94 27 12 	call	0x244e	; 0x244e <__cmpsf2>
     a12:	88 23       	and	r24, r24
     a14:	5c f4       	brge	.+22     	; 0xa2c <SoC_ADC+0x374>
     a16:	20 e0       	ldi	r18, 0x00	; 0
     a18:	30 e0       	ldi	r19, 0x00	; 0
     a1a:	40 e5       	ldi	r20, 0x50	; 80
     a1c:	50 e4       	ldi	r21, 0x40	; 64
     a1e:	c7 01       	movw	r24, r14
     a20:	b6 01       	movw	r22, r12
     a22:	0e 94 45 13 	call	0x268a	; 0x268a <__gesf2>
     a26:	18 16       	cp	r1, r24
     a28:	0c f4       	brge	.+2      	; 0xa2c <SoC_ADC+0x374>
     a2a:	76 c0       	rjmp	.+236    	; 0xb18 <SoC_ADC+0x460>
			soc = 30;
		} //end else if
		else if (volt < 3.25) {
     a2c:	20 e0       	ldi	r18, 0x00	; 0
     a2e:	30 e0       	ldi	r19, 0x00	; 0
     a30:	40 e5       	ldi	r20, 0x50	; 80
     a32:	50 e4       	ldi	r21, 0x40	; 64
     a34:	c7 01       	movw	r24, r14
     a36:	b6 01       	movw	r22, r12
     a38:	0e 94 27 12 	call	0x244e	; 0x244e <__cmpsf2>
     a3c:	88 23       	and	r24, r24
     a3e:	0c f4       	brge	.+2      	; 0xa42 <SoC_ADC+0x38a>
     a40:	70 c0       	rjmp	.+224    	; 0xb22 <SoC_ADC+0x46a>
			soc = 20;
		} //end else if
		else {
			UART0_putstring("Error Reading State of Charge \n\n\r");
     a42:	83 e5       	ldi	r24, 0x53	; 83
     a44:	95 e0       	ldi	r25, 0x05	; 5
     a46:	0e 94 17 10 	call	0x202e	; 0x202e <UART0_putstring>
// Description: Temperature measurement via ADC.
/*========================================================================================*/

float SoC_ADC(float volt, float amp){
	// return value
	float soc = 0;
     a4a:	60 e0       	ldi	r22, 0x00	; 0
     a4c:	70 e0       	ldi	r23, 0x00	; 0
     a4e:	cb 01       	movw	r24, r22
     a50:	6c c0       	rjmp	.+216    	; 0xb2a <SoC_ADC+0x472>
	
	
	// Lookup table
	if (amp < 0.6){
		if (volt > 4.00) {
			soc = 80;
     a52:	60 e0       	ldi	r22, 0x00	; 0
     a54:	70 e0       	ldi	r23, 0x00	; 0
     a56:	80 ea       	ldi	r24, 0xA0	; 160
     a58:	92 e4       	ldi	r25, 0x42	; 66
     a5a:	67 c0       	rjmp	.+206    	; 0xb2a <SoC_ADC+0x472>
		} //end if
		else if (volt < 4.00 && volt > 3.80) {
			soc = 70;
     a5c:	60 e0       	ldi	r22, 0x00	; 0
     a5e:	70 e0       	ldi	r23, 0x00	; 0
     a60:	8c e8       	ldi	r24, 0x8C	; 140
     a62:	92 e4       	ldi	r25, 0x42	; 66
     a64:	62 c0       	rjmp	.+196    	; 0xb2a <SoC_ADC+0x472>
		} //end else if
		else if (volt < 3.80 && volt > 3.75) {
			soc = 60;
     a66:	60 e0       	ldi	r22, 0x00	; 0
     a68:	70 e0       	ldi	r23, 0x00	; 0
     a6a:	80 e7       	ldi	r24, 0x70	; 112
     a6c:	92 e4       	ldi	r25, 0x42	; 66
     a6e:	5d c0       	rjmp	.+186    	; 0xb2a <SoC_ADC+0x472>
		} //end else if
		else if (volt < 3.75 && volt > 3.70) {
			soc = 50;
     a70:	60 e0       	ldi	r22, 0x00	; 0
     a72:	70 e0       	ldi	r23, 0x00	; 0
     a74:	88 e4       	ldi	r24, 0x48	; 72
     a76:	92 e4       	ldi	r25, 0x42	; 66
     a78:	58 c0       	rjmp	.+176    	; 0xb2a <SoC_ADC+0x472>
		} //end else if
		else if (volt < 3.70 && volt > 3.60) {
			soc = 40;
     a7a:	60 e0       	ldi	r22, 0x00	; 0
     a7c:	70 e0       	ldi	r23, 0x00	; 0
     a7e:	80 e2       	ldi	r24, 0x20	; 32
     a80:	92 e4       	ldi	r25, 0x42	; 66
     a82:	53 c0       	rjmp	.+166    	; 0xb2a <SoC_ADC+0x472>
		} //end else if
		else if (volt < 3.60 && volt > 3.5) {
			soc = 30;
     a84:	60 e0       	ldi	r22, 0x00	; 0
     a86:	70 e0       	ldi	r23, 0x00	; 0
     a88:	80 ef       	ldi	r24, 0xF0	; 240
     a8a:	91 e4       	ldi	r25, 0x41	; 65
     a8c:	4e c0       	rjmp	.+156    	; 0xb2a <SoC_ADC+0x472>
		} //end else if
		else if (volt < 3.50) {
			soc = 20;
     a8e:	60 e0       	ldi	r22, 0x00	; 0
     a90:	70 e0       	ldi	r23, 0x00	; 0
     a92:	80 ea       	ldi	r24, 0xA0	; 160
     a94:	91 e4       	ldi	r25, 0x41	; 65
     a96:	49 c0       	rjmp	.+146    	; 0xb2a <SoC_ADC+0x472>
			UART0_putstring("Error Reading State of Charge \n\n\r");
		} //end else
	}
	else if(amp > 0.6 && amp < 3){
		if (volt > 3.75) {
			soc = 80;
     a98:	60 e0       	ldi	r22, 0x00	; 0
     a9a:	70 e0       	ldi	r23, 0x00	; 0
     a9c:	80 ea       	ldi	r24, 0xA0	; 160
     a9e:	92 e4       	ldi	r25, 0x42	; 66
     aa0:	44 c0       	rjmp	.+136    	; 0xb2a <SoC_ADC+0x472>
		} //end if
		else if (volt < 3.75 && volt > 3.65) {
			soc = 70;
     aa2:	60 e0       	ldi	r22, 0x00	; 0
     aa4:	70 e0       	ldi	r23, 0x00	; 0
     aa6:	8c e8       	ldi	r24, 0x8C	; 140
     aa8:	92 e4       	ldi	r25, 0x42	; 66
     aaa:	3f c0       	rjmp	.+126    	; 0xb2a <SoC_ADC+0x472>
		} //end else if
		else if (volt < 3.65 && volt > 3.55) {
			soc = 60;
     aac:	60 e0       	ldi	r22, 0x00	; 0
     aae:	70 e0       	ldi	r23, 0x00	; 0
     ab0:	80 e7       	ldi	r24, 0x70	; 112
     ab2:	92 e4       	ldi	r25, 0x42	; 66
     ab4:	3a c0       	rjmp	.+116    	; 0xb2a <SoC_ADC+0x472>
		} //end else if
		else if (volt < 3.55 && volt > 3.45) {
			soc = 50;
     ab6:	60 e0       	ldi	r22, 0x00	; 0
     ab8:	70 e0       	ldi	r23, 0x00	; 0
     aba:	88 e4       	ldi	r24, 0x48	; 72
     abc:	92 e4       	ldi	r25, 0x42	; 66
     abe:	35 c0       	rjmp	.+106    	; 0xb2a <SoC_ADC+0x472>
		} //end else if
 		else if (volt < 3.45 && volt > 3.35) {
			soc = 40;
     ac0:	60 e0       	ldi	r22, 0x00	; 0
     ac2:	70 e0       	ldi	r23, 0x00	; 0
     ac4:	80 e2       	ldi	r24, 0x20	; 32
     ac6:	92 e4       	ldi	r25, 0x42	; 66
     ac8:	30 c0       	rjmp	.+96     	; 0xb2a <SoC_ADC+0x472>
		 } //end else if
		else if (volt < 3.35 && volt > 3.30) {
			soc = 30;
     aca:	60 e0       	ldi	r22, 0x00	; 0
     acc:	70 e0       	ldi	r23, 0x00	; 0
     ace:	80 ef       	ldi	r24, 0xF0	; 240
     ad0:	91 e4       	ldi	r25, 0x41	; 65
     ad2:	2b c0       	rjmp	.+86     	; 0xb2a <SoC_ADC+0x472>
		 } //end else if
		else if (volt < 3.30) {
			soc = 20;
     ad4:	60 e0       	ldi	r22, 0x00	; 0
     ad6:	70 e0       	ldi	r23, 0x00	; 0
     ad8:	80 ea       	ldi	r24, 0xA0	; 160
     ada:	91 e4       	ldi	r25, 0x41	; 65
     adc:	26 c0       	rjmp	.+76     	; 0xb2a <SoC_ADC+0x472>
// Description: Temperature measurement via ADC.
/*========================================================================================*/

float SoC_ADC(float volt, float amp){
	// return value
	float soc = 0;
     ade:	60 e0       	ldi	r22, 0x00	; 0
     ae0:	70 e0       	ldi	r23, 0x00	; 0
     ae2:	cb 01       	movw	r24, r22
     ae4:	22 c0       	rjmp	.+68     	; 0xb2a <SoC_ADC+0x472>
			UART0_putstring("Error Reading State of Charge \n\n\r");
		} //end else
	}
	else if(amp > 3){
		if (volt > 3.80) {
			soc = 80;
     ae6:	60 e0       	ldi	r22, 0x00	; 0
     ae8:	70 e0       	ldi	r23, 0x00	; 0
     aea:	80 ea       	ldi	r24, 0xA0	; 160
     aec:	92 e4       	ldi	r25, 0x42	; 66
     aee:	1d c0       	rjmp	.+58     	; 0xb2a <SoC_ADC+0x472>
		} //end if
		else if (volt < 3.80 && volt > 3.75) {
			soc = 70;
     af0:	60 e0       	ldi	r22, 0x00	; 0
     af2:	70 e0       	ldi	r23, 0x00	; 0
     af4:	8c e8       	ldi	r24, 0x8C	; 140
     af6:	92 e4       	ldi	r25, 0x42	; 66
     af8:	18 c0       	rjmp	.+48     	; 0xb2a <SoC_ADC+0x472>
		} //end else if
		else if (volt < 3.75 && volt > 3.65) {
			soc = 60;
     afa:	60 e0       	ldi	r22, 0x00	; 0
     afc:	70 e0       	ldi	r23, 0x00	; 0
     afe:	80 e7       	ldi	r24, 0x70	; 112
     b00:	92 e4       	ldi	r25, 0x42	; 66
     b02:	13 c0       	rjmp	.+38     	; 0xb2a <SoC_ADC+0x472>
		} //end else if
		else if (volt < 3.65 && volt > 3.50) {
			soc = 50;
     b04:	60 e0       	ldi	r22, 0x00	; 0
     b06:	70 e0       	ldi	r23, 0x00	; 0
     b08:	88 e4       	ldi	r24, 0x48	; 72
     b0a:	92 e4       	ldi	r25, 0x42	; 66
     b0c:	0e c0       	rjmp	.+28     	; 0xb2a <SoC_ADC+0x472>
		} //end else if
		else if (volt < 3.50 && volt > 3.40) {
			soc = 40;
     b0e:	60 e0       	ldi	r22, 0x00	; 0
     b10:	70 e0       	ldi	r23, 0x00	; 0
     b12:	80 e2       	ldi	r24, 0x20	; 32
     b14:	92 e4       	ldi	r25, 0x42	; 66
     b16:	09 c0       	rjmp	.+18     	; 0xb2a <SoC_ADC+0x472>
		} //end else if
		else if (volt < 3.40 && volt > 3.25) {
			soc = 30;
     b18:	60 e0       	ldi	r22, 0x00	; 0
     b1a:	70 e0       	ldi	r23, 0x00	; 0
     b1c:	80 ef       	ldi	r24, 0xF0	; 240
     b1e:	91 e4       	ldi	r25, 0x41	; 65
     b20:	04 c0       	rjmp	.+8      	; 0xb2a <SoC_ADC+0x472>
		} //end else if
		else if (volt < 3.25) {
			soc = 20;
     b22:	60 e0       	ldi	r22, 0x00	; 0
     b24:	70 e0       	ldi	r23, 0x00	; 0
     b26:	80 ea       	ldi	r24, 0xA0	; 160
     b28:	91 e4       	ldi	r25, 0x41	; 65
	}
	else{
		//UART0_putstring("Battery Charging");
	}
	return soc;
}
     b2a:	ff 90       	pop	r15
     b2c:	ef 90       	pop	r14
     b2e:	df 90       	pop	r13
     b30:	cf 90       	pop	r12
     b32:	bf 90       	pop	r11
     b34:	af 90       	pop	r10
     b36:	9f 90       	pop	r9
     b38:	8f 90       	pop	r8
     b3a:	08 95       	ret

00000b3c <fault_check>:
#include <stdint.h>

void fault_check(uint8_t watchdog){
	
	// Check the Watchdog reset bit
	if(watchdog && EEPROM_Read(0x0001)){
     b3c:	88 23       	and	r24, r24
     b3e:	d1 f1       	breq	.+116    	; 0xbb4 <fault_check+0x78>
     b40:	81 e0       	ldi	r24, 0x01	; 1
     b42:	90 e0       	ldi	r25, 0x00	; 0
     b44:	a6 d4       	rcall	.+2380   	; 0x1492 <EEPROM_Read>
     b46:	88 23       	and	r24, r24
     b48:	09 f4       	brne	.+2      	; 0xb4c <fault_check+0x10>
     b4a:	53 c0       	rjmp	.+166    	; 0xbf2 <fault_check+0xb6>
		EEPROM_Write(0x00, 0x0001); // Reset the bits to 0
     b4c:	61 e0       	ldi	r22, 0x01	; 1
     b4e:	70 e0       	ldi	r23, 0x00	; 0
     b50:	80 e0       	ldi	r24, 0x00	; 0
     b52:	95 d4       	rcall	.+2346   	; 0x147e <EEPROM_Write>
		UART0_putstring("A manual reset has occurred.");
     b54:	85 e7       	ldi	r24, 0x75	; 117
     b56:	95 e0       	ldi	r25, 0x05	; 5
     b58:	0e 94 17 10 	call	0x202e	; 0x202e <UART0_putstring>
		UART0_putchar('\r');
     b5c:	8d e0       	ldi	r24, 0x0D	; 13
     b5e:	0e 94 07 10 	call	0x200e	; 0x200e <UART0_putchar>
		UART0_putchar('\n');
     b62:	8a e0       	ldi	r24, 0x0A	; 10
     b64:	0e 94 07 10 	call	0x200e	; 0x200e <UART0_putchar>
		UART0_putchar('\n');
     b68:	8a e0       	ldi	r24, 0x0A	; 10
     b6a:	0c 94 07 10 	jmp	0x200e	; 0x200e <UART0_putchar>
     b6e:	08 95       	ret
	}
	else if(watchdog && !EEPROM_Read(0x0000)){
		UART0_putstring("A launch reset occurred.");
     b70:	82 e9       	ldi	r24, 0x92	; 146
     b72:	95 e0       	ldi	r25, 0x05	; 5
     b74:	0e 94 17 10 	call	0x202e	; 0x202e <UART0_putstring>
		UART0_putchar('\r');
     b78:	8d e0       	ldi	r24, 0x0D	; 13
     b7a:	0e 94 07 10 	call	0x200e	; 0x200e <UART0_putchar>
		UART0_putchar('\n');
     b7e:	8a e0       	ldi	r24, 0x0A	; 10
     b80:	0e 94 07 10 	call	0x200e	; 0x200e <UART0_putchar>
		UART0_putchar('\n');
     b84:	8a e0       	ldi	r24, 0x0A	; 10
     b86:	0c 94 07 10 	jmp	0x200e	; 0x200e <UART0_putchar>
     b8a:	08 95       	ret
	}
	// check the jtag reset bit
	else if(watchdog){
		UART0_putchar('\n');
     b8c:	8a e0       	ldi	r24, 0x0A	; 10
     b8e:	0e 94 07 10 	call	0x200e	; 0x200e <UART0_putchar>
		UART0_putchar('\r');
     b92:	8d e0       	ldi	r24, 0x0D	; 13
     b94:	0e 94 07 10 	call	0x200e	; 0x200e <UART0_putchar>
		UART0_putstring("A Fault occurred.");
     b98:	8b ea       	ldi	r24, 0xAB	; 171
     b9a:	95 e0       	ldi	r25, 0x05	; 5
     b9c:	0e 94 17 10 	call	0x202e	; 0x202e <UART0_putstring>
		UART0_putchar('\r');
     ba0:	8d e0       	ldi	r24, 0x0D	; 13
     ba2:	0e 94 07 10 	call	0x200e	; 0x200e <UART0_putchar>
		UART0_putchar('\n');
     ba6:	8a e0       	ldi	r24, 0x0A	; 10
     ba8:	0e 94 07 10 	call	0x200e	; 0x200e <UART0_putchar>
		UART0_putchar('\n');
     bac:	8a e0       	ldi	r24, 0x0A	; 10
     bae:	0c 94 07 10 	jmp	0x200e	; 0x200e <UART0_putchar>
     bb2:	08 95       	ret
	}
	else if(MCUSR & 0x10){
     bb4:	04 b6       	in	r0, 0x34	; 52
     bb6:	04 fe       	sbrs	r0, 4
     bb8:	0e c0       	rjmp	.+28     	; 0xbd6 <fault_check+0x9a>
		UART0_putstring("I have been reprogrammed.");
     bba:	8d eb       	ldi	r24, 0xBD	; 189
     bbc:	95 e0       	ldi	r25, 0x05	; 5
     bbe:	0e 94 17 10 	call	0x202e	; 0x202e <UART0_putstring>
		UART0_putchar('\r');
     bc2:	8d e0       	ldi	r24, 0x0D	; 13
     bc4:	0e 94 07 10 	call	0x200e	; 0x200e <UART0_putchar>
		UART0_putchar('\n');
     bc8:	8a e0       	ldi	r24, 0x0A	; 10
     bca:	0e 94 07 10 	call	0x200e	; 0x200e <UART0_putchar>
		UART0_putchar('\n');
     bce:	8a e0       	ldi	r24, 0x0A	; 10
     bd0:	0c 94 07 10 	jmp	0x200e	; 0x200e <UART0_putchar>
     bd4:	08 95       	ret
	}
	// assume a power reset if none of the other flags are found
	else{
		UART0_putstring("A power reset has occurred.");
     bd6:	87 ed       	ldi	r24, 0xD7	; 215
     bd8:	95 e0       	ldi	r25, 0x05	; 5
     bda:	0e 94 17 10 	call	0x202e	; 0x202e <UART0_putstring>
		UART0_putchar('\r');
     bde:	8d e0       	ldi	r24, 0x0D	; 13
     be0:	0e 94 07 10 	call	0x200e	; 0x200e <UART0_putchar>
		UART0_putchar('\n');
     be4:	8a e0       	ldi	r24, 0x0A	; 10
     be6:	0e 94 07 10 	call	0x200e	; 0x200e <UART0_putchar>
		UART0_putchar('\n');
     bea:	8a e0       	ldi	r24, 0x0A	; 10
     bec:	0c 94 07 10 	jmp	0x200e	; 0x200e <UART0_putchar>
	}
     bf0:	08 95       	ret
		UART0_putstring("A manual reset has occurred.");
		UART0_putchar('\r');
		UART0_putchar('\n');
		UART0_putchar('\n');
	}
	else if(watchdog && !EEPROM_Read(0x0000)){
     bf2:	80 e0       	ldi	r24, 0x00	; 0
     bf4:	90 e0       	ldi	r25, 0x00	; 0
     bf6:	4d d4       	rcall	.+2202   	; 0x1492 <EEPROM_Read>
     bf8:	81 11       	cpse	r24, r1
     bfa:	c8 cf       	rjmp	.-112    	; 0xb8c <fault_check+0x50>
     bfc:	b9 cf       	rjmp	.-142    	; 0xb70 <fault_check+0x34>

00000bfe <launch_pre>:
// Date: 2019-03-25
// Description: Initializes the launch bits to zero (8 bits).
/*========================================================================================*/

void launch_pre(){
	EEPROM_Write(0x00,0x0000);
     bfe:	60 e0       	ldi	r22, 0x00	; 0
     c00:	70 e0       	ldi	r23, 0x00	; 0
     c02:	80 e0       	ldi	r24, 0x00	; 0
     c04:	3c c4       	rjmp	.+2168   	; 0x147e <EEPROM_Write>
     c06:	08 95       	ret

00000c08 <launch_post>:
// Date: 2019-03-25
// Description: Sets the launch bits to 1 (8 bits).
/*========================================================================================*/

void launch_post(){
	EEPROM_Write(0xff,0x0000);
     c08:	60 e0       	ldi	r22, 0x00	; 0
     c0a:	70 e0       	ldi	r23, 0x00	; 0
     c0c:	8f ef       	ldi	r24, 0xFF	; 255
     c0e:	37 c4       	rjmp	.+2158   	; 0x147e <EEPROM_Write>
     c10:	08 95       	ret

00000c12 <launch_check>:
/*========================================================================================*/

uint8_t launch_check(){
	
	// Read from permanent memory
	uint8_t launch = EEPROM_Read(0x0000);
     c12:	80 e0       	ldi	r24, 0x00	; 0
     c14:	90 e0       	ldi	r25, 0x00	; 0
     c16:	3d d4       	rcall	.+2170   	; 0x1492 <EEPROM_Read>
	// Check mask
	uint8_t mask_check = 0x01;
	uint8_t sum = 0;
	int i = 0; // increment
	
	while(launch){
     c18:	88 23       	and	r24, r24
     c1a:	39 f0       	breq	.+14     	; 0xc2a <launch_check+0x18>
		launch = launch >> 1;
     c1c:	86 95       	lsr	r24
	// Check mask
	uint8_t mask_check = 0x01;
	uint8_t sum = 0;
	int i = 0; // increment
	
	while(launch){
     c1e:	39 f0       	breq	.+14     	; 0xc2e <launch_check+0x1c>
		launch = launch >> 1;
     c20:	86 95       	lsr	r24
	// Check mask
	uint8_t mask_check = 0x01;
	uint8_t sum = 0;
	int i = 0; // increment
	
	while(launch){
     c22:	39 f0       	breq	.+14     	; 0xc32 <launch_check+0x20>
     c24:	86 95       	lsr	r24
     c26:	39 f4       	brne	.+14     	; 0xc36 <launch_check+0x24>
     c28:	08 95       	ret
		sum += 1;
		if(sum > 3){
			return sum;
		}
	}
	return 0;
     c2a:	80 e0       	ldi	r24, 0x00	; 0
     c2c:	08 95       	ret
     c2e:	80 e0       	ldi	r24, 0x00	; 0
     c30:	08 95       	ret
     c32:	80 e0       	ldi	r24, 0x00	; 0
     c34:	08 95       	ret
	uint8_t sum = 0;
	int i = 0; // increment
	
	while(launch){
		launch = launch >> 1;
		sum += 1;
     c36:	84 e0       	ldi	r24, 0x04	; 4
		if(sum > 3){
			return sum;
		}
	}
	return 0;
}
     c38:	08 95       	ret

00000c3a <launch_reset>:
/*========================================================================================*/

void launch_reset(){
	
	// Reset the launch bits to 0x00
	launch_pre();
     c3a:	e1 df       	rcall	.-62     	; 0xbfe <launch_pre>
	/* Watchdog must be reset to ensure the clock starts at 0.
	/ This is especially important as we are shortening the timeout period
	*/
	
	// Watchdog reset
	wdt_reset(); 
     c3c:	a8 95       	wdr
	
	// Set the watchdog to System Reset Mode
	wdt_enable(SYSTEM_RESET_MODE);
     c3e:	81 e0       	ldi	r24, 0x01	; 1
     c40:	0e 94 6a 10 	call	0x20d4	; 0x20d4 <wdt_enable>
	
	// Change the tiemout period to 1.0s			 
	wdt_set_timeout_period(WDT_TIMEOUT_PERIOD_2KCLK); // timeout set from 1024k to 128k
     c44:	80 e0       	ldi	r24, 0x00	; 0
     c46:	0c 94 46 10 	jmp	0x208c	; 0x208c <wdt_set_timeout_period>
     c4a:	08 95       	ret

00000c4c <launch_timer>:
// Date: 2019-03-26
// Description: Uses the util/delay.h library to create a delay simulating the delay
//				that will be needed once the nano satellite is in space.
/*========================================================================================*/

void launch_timer(){
     c4c:	cf 93       	push	r28
	
	// Delay the start-up by 8 seconds
	int i = 9;
	UART0_putstring("Starting Launch Timer");
     c4e:	83 ef       	ldi	r24, 0xF3	; 243
     c50:	95 e0       	ldi	r25, 0x05	; 5
     c52:	0e 94 17 10 	call	0x202e	; 0x202e <UART0_putstring>
	UART0_putchar('\n');
     c56:	8a e0       	ldi	r24, 0x0A	; 10
     c58:	0e 94 07 10 	call	0x200e	; 0x200e <UART0_putchar>
	UART0_putchar('\r');
     c5c:	8d e0       	ldi	r24, 0x0D	; 13
     c5e:	0e 94 07 10 	call	0x200e	; 0x200e <UART0_putchar>
     c62:	c9 e3       	ldi	r28, 0x39	; 57
	while(i > 0){
		UART0_putchar(i + 0x30); // prints the character value of
     c64:	8c 2f       	mov	r24, r28
     c66:	0e 94 07 10 	call	0x200e	; 0x200e <UART0_putchar>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     c6a:	2f e3       	ldi	r18, 0x3F	; 63
     c6c:	8d e0       	ldi	r24, 0x0D	; 13
     c6e:	93 e0       	ldi	r25, 0x03	; 3
     c70:	21 50       	subi	r18, 0x01	; 1
     c72:	80 40       	sbci	r24, 0x00	; 0
     c74:	90 40       	sbci	r25, 0x00	; 0
     c76:	e1 f7       	brne	.-8      	; 0xc70 <launch_timer+0x24>
     c78:	00 c0       	rjmp	.+0      	; 0xc7a <launch_timer+0x2e>
     c7a:	00 00       	nop
		_delay_ms(1000);
		UART0_putchar('\n');
     c7c:	8a e0       	ldi	r24, 0x0A	; 10
     c7e:	0e 94 07 10 	call	0x200e	; 0x200e <UART0_putchar>
		UART0_putchar('\r');
     c82:	8d e0       	ldi	r24, 0x0D	; 13
     c84:	0e 94 07 10 	call	0x200e	; 0x200e <UART0_putchar>
     c88:	c1 50       	subi	r28, 0x01	; 1
	// Delay the start-up by 8 seconds
	int i = 9;
	UART0_putstring("Starting Launch Timer");
	UART0_putchar('\n');
	UART0_putchar('\r');
	while(i > 0){
     c8a:	c0 33       	cpi	r28, 0x30	; 48
     c8c:	59 f7       	brne	.-42     	; 0xc64 <launch_timer+0x18>
		_delay_ms(1000);
		UART0_putchar('\n');
		UART0_putchar('\r');
		i--; 
	}
	UART0_putstring("Timer complete. Entering normal operation.");
     c8e:	89 e0       	ldi	r24, 0x09	; 9
     c90:	96 e0       	ldi	r25, 0x06	; 6
     c92:	0e 94 17 10 	call	0x202e	; 0x202e <UART0_putstring>
	UART0_putchar('\n');
     c96:	8a e0       	ldi	r24, 0x0A	; 10
     c98:	0e 94 07 10 	call	0x200e	; 0x200e <UART0_putchar>
	UART0_putchar('\n');
     c9c:	8a e0       	ldi	r24, 0x0A	; 10
     c9e:	0e 94 07 10 	call	0x200e	; 0x200e <UART0_putchar>
	UART0_putchar('\r');
     ca2:	8d e0       	ldi	r24, 0x0D	; 13
     ca4:	0e 94 07 10 	call	0x200e	; 0x200e <UART0_putchar>
}
     ca8:	cf 91       	pop	r28
     caa:	08 95       	ret

00000cac <launch_state>:
/*========================================================================================*/

void launch_state(){
	
	// Check if the satellite has been launched
	if(launch_check()){
     cac:	b2 df       	rcall	.-156    	; 0xc12 <launch_check>
     cae:	88 23       	and	r24, r24
     cb0:	c1 f0       	breq	.+48     	; 0xce2 <launch_state+0x36>
		UART0_putstring("I have already been launched.");
     cb2:	84 e3       	ldi	r24, 0x34	; 52
     cb4:	96 e0       	ldi	r25, 0x06	; 6
     cb6:	0e 94 17 10 	call	0x202e	; 0x202e <UART0_putstring>
		UART0_putchar('\n');
     cba:	8a e0       	ldi	r24, 0x0A	; 10
     cbc:	0e 94 07 10 	call	0x200e	; 0x200e <UART0_putchar>
		UART0_putchar('\r');
     cc0:	8d e0       	ldi	r24, 0x0D	; 13
     cc2:	0e 94 07 10 	call	0x200e	; 0x200e <UART0_putchar>
		UART0_putstring("Returning to normal operation...");
     cc6:	82 e5       	ldi	r24, 0x52	; 82
     cc8:	96 e0       	ldi	r25, 0x06	; 6
     cca:	0e 94 17 10 	call	0x202e	; 0x202e <UART0_putstring>
		UART0_putchar('\n');
     cce:	8a e0       	ldi	r24, 0x0A	; 10
     cd0:	0e 94 07 10 	call	0x200e	; 0x200e <UART0_putchar>
		UART0_putchar('\n');
     cd4:	8a e0       	ldi	r24, 0x0A	; 10
     cd6:	0e 94 07 10 	call	0x200e	; 0x200e <UART0_putchar>
		UART0_putchar('\r');
     cda:	8d e0       	ldi	r24, 0x0D	; 13
     cdc:	0c 94 07 10 	jmp	0x200e	; 0x200e <UART0_putchar>
	}
	else{
		launch_timer();
     ce0:	08 95       	ret
		launch_post();
     ce2:	b4 df       	rcall	.-152    	; 0xc4c <launch_timer>
     ce4:	91 cf       	rjmp	.-222    	; 0xc08 <launch_post>
     ce6:	08 95       	ret

00000ce8 <Enable_3V3_1>:
// Description: Enables 3V3-1 rail power. Waits for transient to finish.
/*========================================================================================*/
void Enable_3V3_1(){

	// Set 5V rail for readings
	Set_GPIO(10);
     ce8:	8a e0       	ldi	r24, 0x0A	; 10
     cea:	90 e0       	ldi	r25, 0x00	; 0
     cec:	da d3       	rcall	.+1972   	; 0x14a2 <Set_GPIO>

	while(Volt_ADC(0) < 3.1){
     cee:	80 e0       	ldi	r24, 0x00	; 0
     cf0:	90 e0       	ldi	r25, 0x00	; 0
     cf2:	be da       	rcall	.-2692   	; 0x270 <Volt_ADC>
     cf4:	26 e6       	ldi	r18, 0x66	; 102
     cf6:	36 e6       	ldi	r19, 0x66	; 102
     cf8:	46 e4       	ldi	r20, 0x46	; 70
     cfa:	50 e4       	ldi	r21, 0x40	; 64
     cfc:	0e 94 27 12 	call	0x244e	; 0x244e <__cmpsf2>
     d00:	88 23       	and	r24, r24
     d02:	ac f3       	brlt	.-22     	; 0xcee <Enable_3V3_1+0x6>
		// Wait until 3V3-1 rail transient is finished
	}
}
     d04:	08 95       	ret

00000d06 <Enable_5V>:
// Description: Enables 5V rail power. Waits for transient to finish.
/*========================================================================================*/
void Enable_5V(){

	// Set 5V rail for readings
	Set_GPIO(11);
     d06:	8b e0       	ldi	r24, 0x0B	; 11
     d08:	90 e0       	ldi	r25, 0x00	; 0
     d0a:	cb d3       	rcall	.+1942   	; 0x14a2 <Set_GPIO>

	while(Volt_ADC(2) < 4.8){
     d0c:	82 e0       	ldi	r24, 0x02	; 2
     d0e:	90 e0       	ldi	r25, 0x00	; 0
     d10:	af da       	rcall	.-2722   	; 0x270 <Volt_ADC>
     d12:	2a e9       	ldi	r18, 0x9A	; 154
     d14:	39 e9       	ldi	r19, 0x99	; 153
     d16:	49 e9       	ldi	r20, 0x99	; 153
     d18:	50 e4       	ldi	r21, 0x40	; 64
     d1a:	0e 94 27 12 	call	0x244e	; 0x244e <__cmpsf2>
     d1e:	88 23       	and	r24, r24
     d20:	ac f3       	brlt	.-22     	; 0xd0c <Enable_5V+0x6>
		// Wait until 5V rail transient is finished
	}
}
     d22:	08 95       	ret

00000d24 <Enable_8V>:
// Description: Enables 8V rail power. Waits for transient to finish.
/*========================================================================================*/
void Enable_8V(){

	// Set 8V rail for readings
	Set_GPIO(16);
     d24:	80 e1       	ldi	r24, 0x10	; 16
     d26:	90 e0       	ldi	r25, 0x00	; 0
     d28:	bc d3       	rcall	.+1912   	; 0x14a2 <Set_GPIO>

	while(Volt_ADC(3) < 7.8){
     d2a:	83 e0       	ldi	r24, 0x03	; 3
     d2c:	90 e0       	ldi	r25, 0x00	; 0
     d2e:	a0 da       	rcall	.-2752   	; 0x270 <Volt_ADC>
     d30:	2a e9       	ldi	r18, 0x9A	; 154
     d32:	39 e9       	ldi	r19, 0x99	; 153
     d34:	49 ef       	ldi	r20, 0xF9	; 249
     d36:	50 e4       	ldi	r21, 0x40	; 64
     d38:	0e 94 27 12 	call	0x244e	; 0x244e <__cmpsf2>
     d3c:	88 23       	and	r24, r24
     d3e:	ac f3       	brlt	.-22     	; 0xd2a <Enable_8V+0x6>
		// Wait until 8V rail transient is finished
	}
}
     d40:	08 95       	ret

00000d42 <Enable_VBatt>:
/*========================================================================================*/

void Enable_VBatt(){

	// Enable VBatt to Rails
	Set_GPIO(21);
     d42:	85 e1       	ldi	r24, 0x15	; 21
     d44:	90 e0       	ldi	r25, 0x00	; 0
     d46:	ad d3       	rcall	.+1882   	; 0x14a2 <Set_GPIO>

	while(Volt_ADC(4) < 2.5){
     d48:	84 e0       	ldi	r24, 0x04	; 4
     d4a:	90 e0       	ldi	r25, 0x00	; 0
     d4c:	91 da       	rcall	.-2782   	; 0x270 <Volt_ADC>
     d4e:	20 e0       	ldi	r18, 0x00	; 0
     d50:	30 e0       	ldi	r19, 0x00	; 0
     d52:	40 e2       	ldi	r20, 0x20	; 32
     d54:	50 e4       	ldi	r21, 0x40	; 64
     d56:	0e 94 27 12 	call	0x244e	; 0x244e <__cmpsf2>
     d5a:	88 23       	and	r24, r24
     d5c:	ac f3       	brlt	.-22     	; 0xd48 <Enable_VBatt+0x6>
		// Wait until VBatt rail transient is finished
	}
}
     d5e:	08 95       	ret

00000d60 <Disable_3V3_1>:
	
	// 3V3-1 rail subsystem mask
	uint8_t mask_3V3_1 = 0b00100000;

	// Check for subsystems using the 3V3-1 rail
	if(power_state & mask_3V3_1){
     d60:	85 fd       	sbrc	r24, 5
     d62:	03 c0       	rjmp	.+6      	; 0xd6a <Disable_3V3_1+0xa>
		// Do not turn off the rail
	}
	else{
		Clear_GPIO(10); // turn 3V3-1 rail off if nothing is using the rail.
     d64:	8a e0       	ldi	r24, 0x0A	; 10
     d66:	90 e0       	ldi	r25, 0x00	; 0
     d68:	02 c4       	rjmp	.+2052   	; 0x156e <Clear_GPIO>
     d6a:	08 95       	ret

00000d6c <Disable_5V>:
	
	// 5V rail subsystem mask
	uint8_t mask_5V = 0b00110010;
	
	// Check for subsystems using the 5V rail
	if(power_state & mask_5V){
     d6c:	82 73       	andi	r24, 0x32	; 50
     d6e:	19 f4       	brne	.+6      	; 0xd76 <Disable_5V+0xa>
		// do not turn the rail off
	}
	else{
		Clear_GPIO(11); // turn off the 5V rail if nothing is using the rail.
     d70:	8b e0       	ldi	r24, 0x0B	; 11
     d72:	90 e0       	ldi	r25, 0x00	; 0
     d74:	fc c3       	rjmp	.+2040   	; 0x156e <Clear_GPIO>
     d76:	08 95       	ret

00000d78 <Disable_8V>:
	
	// 5V rail subsystem mask
	uint8_t mask_8V = 0b11000100;
	
	// Check for subsystems using the 5V rail
	if(power_state & mask_8V){
     d78:	84 7c       	andi	r24, 0xC4	; 196
     d7a:	19 f4       	brne	.+6      	; 0xd82 <Disable_8V+0xa>
		// do not turn the rail off
	}
	else{
		Clear_GPIO(16); // turn off the 5V rail if nothing is using the rail.
     d7c:	80 e1       	ldi	r24, 0x10	; 16
     d7e:	90 e0       	ldi	r25, 0x00	; 0
     d80:	f6 c3       	rjmp	.+2028   	; 0x156e <Clear_GPIO>
     d82:	08 95       	ret

00000d84 <Disable_VBatt>:
	
	// 5V rail subsystem mask
	uint8_t mask_VBatt = 0b00000001;
	
	// Check for subsystems using the 5V rail
	if(power_state & mask_VBatt){
     d84:	80 fd       	sbrc	r24, 0
     d86:	03 c0       	rjmp	.+6      	; 0xd8e <Disable_VBatt+0xa>
		// do not turn the rail off
	}
	else{
		Clear_GPIO(21); // turn off the 5V rail if nothing is using the rail.
     d88:	85 e1       	ldi	r24, 0x15	; 21
     d8a:	90 e0       	ldi	r25, 0x00	; 0
     d8c:	f0 c3       	rjmp	.+2016   	; 0x156e <Clear_GPIO>
     d8e:	08 95       	ret

00000d90 <heater_SWITCH>:
// Description: Switches power to Heaters based on current power state. Only one heater
//				can be turned on at a time. If none or more than one heater is set to be
//				turned on, all heaters are turned off.
/*========================================================================================*/

void heater_SWITCH(uint8_t power_state, uint8_t* power_pointer){
     d90:	0f 93       	push	r16
     d92:	1f 93       	push	r17
     d94:	cf 93       	push	r28
     d96:	c8 2f       	mov	r28, r24
     d98:	8b 01       	movw	r16, r22
	uint8_t mask_heater_8V = 0b00000100;
	
	// Check which of the heaters is turned on
	
	// Vbatt Heater
	if((power_state & mask_heater_VBatt) && !(power_state & (mask_heater_5V | mask_heater_8V))){
     d9a:	80 ff       	sbrs	r24, 0
     d9c:	11 c0       	rjmp	.+34     	; 0xdc0 <heater_SWITCH+0x30>
     d9e:	86 70       	andi	r24, 0x06	; 6
     da0:	79 f4       	brne	.+30     	; 0xdc0 <heater_SWITCH+0x30>
		Disable_5V(power_state); // disable 5V rail if not needed
     da2:	8c 2f       	mov	r24, r28
     da4:	e3 df       	rcall	.-58     	; 0xd6c <Disable_5V>
		Disable_8V(power_state); // disable 8V rail if not needed
     da6:	8c 2f       	mov	r24, r28
     da8:	e7 df       	rcall	.-50     	; 0xd78 <Disable_8V>
		Clear_GPIO(3); // Turn off 5V heater
     daa:	83 e0       	ldi	r24, 0x03	; 3
     dac:	90 e0       	ldi	r25, 0x00	; 0
     dae:	df d3       	rcall	.+1982   	; 0x156e <Clear_GPIO>
		Clear_GPIO(2); // Turn off 8V heater
     db0:	82 e0       	ldi	r24, 0x02	; 2
     db2:	90 e0       	ldi	r25, 0x00	; 0
     db4:	dc d3       	rcall	.+1976   	; 0x156e <Clear_GPIO>
		Enable_VBatt();
     db6:	c5 df       	rcall	.-118    	; 0xd42 <Enable_VBatt>
     db8:	80 e0       	ldi	r24, 0x00	; 0
		Set_GPIO(0);  // Enable VBatt heater
     dba:	90 e0       	ldi	r25, 0x00	; 0
     dbc:	72 d3       	rcall	.+1764   	; 0x14a2 <Set_GPIO>
     dbe:	3b c0       	rjmp	.+118    	; 0xe36 <heater_SWITCH+0xa6>
     dc0:	c1 ff       	sbrs	r28, 1
     dc2:	12 c0       	rjmp	.+36     	; 0xde8 <heater_SWITCH+0x58>
	}
	
	// 5V Heater
	else if((power_state & mask_heater_5V) && !(power_state & (mask_heater_VBatt | mask_heater_8V))){
     dc4:	8c 2f       	mov	r24, r28
     dc6:	85 70       	andi	r24, 0x05	; 5
     dc8:	79 f4       	brne	.+30     	; 0xde8 <heater_SWITCH+0x58>
		Disable_VBatt(power_state); // disable VBatt rail if not needed
     dca:	8c 2f       	mov	r24, r28
     dcc:	db df       	rcall	.-74     	; 0xd84 <Disable_VBatt>
		Disable_8V(power_state); // disable 8V rail if not needed
     dce:	8c 2f       	mov	r24, r28
		Clear_GPIO(0); // Turn off VBatt heater
     dd0:	d3 df       	rcall	.-90     	; 0xd78 <Disable_8V>
     dd2:	80 e0       	ldi	r24, 0x00	; 0
     dd4:	90 e0       	ldi	r25, 0x00	; 0
		Clear_GPIO(2); // Turn off 8V heater
     dd6:	cb d3       	rcall	.+1942   	; 0x156e <Clear_GPIO>
     dd8:	82 e0       	ldi	r24, 0x02	; 2
     dda:	90 e0       	ldi	r25, 0x00	; 0
     ddc:	c8 d3       	rcall	.+1936   	; 0x156e <Clear_GPIO>
		Enable_5V();
     dde:	93 df       	rcall	.-218    	; 0xd06 <Enable_5V>
		Set_GPIO(3); // Enable 5V heater
     de0:	83 e0       	ldi	r24, 0x03	; 3
     de2:	90 e0       	ldi	r25, 0x00	; 0
     de4:	5e d3       	rcall	.+1724   	; 0x14a2 <Set_GPIO>
     de6:	27 c0       	rjmp	.+78     	; 0xe36 <heater_SWITCH+0xa6>
	}
	
	// 8V Heater
	else if((power_state & mask_heater_8V) && !(power_state & (mask_heater_VBatt | mask_heater_5V))){
     de8:	c2 ff       	sbrs	r28, 2
     dea:	12 c0       	rjmp	.+36     	; 0xe10 <heater_SWITCH+0x80>
     dec:	8c 2f       	mov	r24, r28
		Disable_VBatt(power_state); // disable VBatt rail if not needed
     dee:	83 70       	andi	r24, 0x03	; 3
     df0:	79 f4       	brne	.+30     	; 0xe10 <heater_SWITCH+0x80>
		Disable_5V(power_state); // disable 5V rail if not needed
     df2:	8c 2f       	mov	r24, r28
     df4:	c7 df       	rcall	.-114    	; 0xd84 <Disable_VBatt>
		Clear_GPIO(0); // Turn off VBatt heater
     df6:	8c 2f       	mov	r24, r28
     df8:	b9 df       	rcall	.-142    	; 0xd6c <Disable_5V>
     dfa:	80 e0       	ldi	r24, 0x00	; 0
		Clear_GPIO(3); // Turn off 5V heater
     dfc:	90 e0       	ldi	r25, 0x00	; 0
     dfe:	b7 d3       	rcall	.+1902   	; 0x156e <Clear_GPIO>
     e00:	83 e0       	ldi	r24, 0x03	; 3
		Enable_8V();
     e02:	90 e0       	ldi	r25, 0x00	; 0
		Set_GPIO(2); // Enable 8V heater
     e04:	b4 d3       	rcall	.+1896   	; 0x156e <Clear_GPIO>
     e06:	8e df       	rcall	.-228    	; 0xd24 <Enable_8V>
     e08:	82 e0       	ldi	r24, 0x02	; 2
     e0a:	90 e0       	ldi	r25, 0x00	; 0
	}
	else{
		// Turn off all heaters
		Clear_GPIO(0);
     e0c:	4a d3       	rcall	.+1684   	; 0x14a2 <Set_GPIO>
     e0e:	13 c0       	rjmp	.+38     	; 0xe36 <heater_SWITCH+0xa6>
     e10:	80 e0       	ldi	r24, 0x00	; 0
     e12:	90 e0       	ldi	r25, 0x00	; 0
		Clear_GPIO(3);
     e14:	ac d3       	rcall	.+1880   	; 0x156e <Clear_GPIO>
     e16:	83 e0       	ldi	r24, 0x03	; 3
     e18:	90 e0       	ldi	r25, 0x00	; 0
     e1a:	a9 d3       	rcall	.+1874   	; 0x156e <Clear_GPIO>
		Clear_GPIO(2);
     e1c:	82 e0       	ldi	r24, 0x02	; 2
     e1e:	90 e0       	ldi	r25, 0x00	; 0
     e20:	a6 d3       	rcall	.+1868   	; 0x156e <Clear_GPIO>
     e22:	8c 2f       	mov	r24, r28
		
		// Turn off associated rails (rail logic is taken care of in the function)
		Disable_VBatt(power_state);
     e24:	af df       	rcall	.-162    	; 0xd84 <Disable_VBatt>
     e26:	8c 2f       	mov	r24, r28
     e28:	a1 df       	rcall	.-190    	; 0xd6c <Disable_5V>
		Disable_5V(power_state);
     e2a:	8c 2f       	mov	r24, r28
     e2c:	a5 df       	rcall	.-182    	; 0xd78 <Disable_8V>
     e2e:	f8 01       	movw	r30, r16
		Disable_8V(power_state);
     e30:	80 81       	ld	r24, Z
     e32:	88 7f       	andi	r24, 0xF8	; 248
     e34:	80 83       	st	Z, r24
		
		// Change power state as they are all turned off now
		power_pointer[0] &= 0b11111000;
     e36:	cf 91       	pop	r28
     e38:	1f 91       	pop	r17
     e3a:	0f 91       	pop	r16
     e3c:	08 95       	ret

00000e3e <obc_SWITCH>:
	}
}
     e3e:	83 ff       	sbrs	r24, 3
     e40:	04 c0       	rjmp	.+8      	; 0xe4a <obc_SWITCH+0xc>
     e42:	88 e1       	ldi	r24, 0x18	; 24
     e44:	90 e0       	ldi	r25, 0x00	; 0
	// OBC mask
	uint8_t mask_OBC = 0b00001000;
	
	// Turn on OBC if it is set to one
	if(power_state & mask_OBC){
		Set_GPIO(24); // turn on OBC
     e46:	2d c3       	rjmp	.+1626   	; 0x14a2 <Set_GPIO>
     e48:	08 95       	ret
	}
	else{
		Clear_GPIO(24); // turn off OBC
     e4a:	88 e1       	ldi	r24, 0x18	; 24
     e4c:	90 e0       	ldi	r25, 0x00	; 0
     e4e:	8f c3       	rjmp	.+1822   	; 0x156e <Clear_GPIO>
     e50:	08 95       	ret

00000e52 <imager_SWITCH>:
// Author: Chris Thomas
// Date: 2019-03-24
// Description: Switches power to Imager based on current power state.
/*========================================================================================*/

void imager_SWITCH(uint8_t power_state){
     e52:	cf 93       	push	r28
     e54:	c8 2f       	mov	r28, r24
	
	// Imager Mask
	uint8_t mask_imager = 0b00010000;
	
	// Turn on Imager subcomponents if power state calls for it
	if(power_state & mask_imager){
     e56:	84 ff       	sbrs	r24, 4
     e58:	08 c0       	rjmp	.+16     	; 0xe6a <imager_SWITCH+0x18>
		Enable_5V();
     e5a:	55 df       	rcall	.-342    	; 0xd06 <Enable_5V>
		Set_GPIO(23); // turn on imager beagle
     e5c:	87 e1       	ldi	r24, 0x17	; 23
     e5e:	90 e0       	ldi	r25, 0x00	; 0
     e60:	20 d3       	rcall	.+1600   	; 0x14a2 <Set_GPIO>
		Set_GPIO(22); // turn on camera 
     e62:	86 e1       	ldi	r24, 0x16	; 22
     e64:	90 e0       	ldi	r25, 0x00	; 0
     e66:	1d d3       	rcall	.+1594   	; 0x14a2 <Set_GPIO>
     e68:	08 c0       	rjmp	.+16     	; 0xe7a <imager_SWITCH+0x28>
	}
	else{
		Clear_GPIO(22); // turn off camera
     e6a:	86 e1       	ldi	r24, 0x16	; 22
     e6c:	90 e0       	ldi	r25, 0x00	; 0
     e6e:	7f d3       	rcall	.+1790   	; 0x156e <Clear_GPIO>
		Clear_GPIO(23); // turn off imager beagle
     e70:	87 e1       	ldi	r24, 0x17	; 23
     e72:	90 e0       	ldi	r25, 0x00	; 0
     e74:	7c d3       	rcall	.+1784   	; 0x156e <Clear_GPIO>
		Disable_5V(power_state); // turn off associated rail (5V)		
     e76:	8c 2f       	mov	r24, r28
     e78:	79 df       	rcall	.-270    	; 0xd6c <Disable_5V>
     e7a:	cf 91       	pop	r28
	}
}
     e7c:	08 95       	ret

00000e7e <grips_SWITCH>:
     e7e:	cf 93       	push	r28
// Author: Chris Thomas
// Date: 2019-03-24
// Description: Switches power to GRIPS based on current power state.
/*========================================================================================*/

void grips_SWITCH(uint8_t power_state){
     e80:	c8 2f       	mov	r28, r24
	
	// GRIPS mask
	uint8_t grips_mask = 0b00100000;
	
	// Turn on Grips subcomponents if power state calls for it
	if(power_state & grips_mask){
     e82:	85 ff       	sbrs	r24, 5
     e84:	09 c0       	rjmp	.+18     	; 0xe98 <grips_SWITCH+0x1a>
		Enable_5V();
     e86:	3f df       	rcall	.-386    	; 0xd06 <Enable_5V>
		Enable_3V3_1();
     e88:	2f df       	rcall	.-418    	; 0xce8 <Enable_3V3_1>
     e8a:	8b e1       	ldi	r24, 0x1B	; 27
		Set_GPIO(27); // turn on GNSS beagle
     e8c:	90 e0       	ldi	r25, 0x00	; 0
     e8e:	09 d3       	rcall	.+1554   	; 0x14a2 <Set_GPIO>
     e90:	8c e1       	ldi	r24, 0x1C	; 28
		Set_GPIO(28); // turn on OEM719
     e92:	90 e0       	ldi	r25, 0x00	; 0
     e94:	06 d3       	rcall	.+1548   	; 0x14a2 <Set_GPIO>
     e96:	0a c0       	rjmp	.+20     	; 0xeac <grips_SWITCH+0x2e>
     e98:	8c e1       	ldi	r24, 0x1C	; 28
	}
	else{
		Clear_GPIO(28); // turn off OEM719
     e9a:	90 e0       	ldi	r25, 0x00	; 0
     e9c:	68 d3       	rcall	.+1744   	; 0x156e <Clear_GPIO>
     e9e:	8b e1       	ldi	r24, 0x1B	; 27
		Clear_GPIO(27); // turn off GNSS beagle
     ea0:	90 e0       	ldi	r25, 0x00	; 0
     ea2:	65 d3       	rcall	.+1738   	; 0x156e <Clear_GPIO>
     ea4:	8c 2f       	mov	r24, r28
		Disable_3V3_1(power_state); // turn off 5V rail
     ea6:	5c df       	rcall	.-328    	; 0xd60 <Disable_3V3_1>
     ea8:	8c 2f       	mov	r24, r28
     eaa:	60 df       	rcall	.-320    	; 0xd6c <Disable_5V>
		Disable_5V(power_state); // turn off 3V3-1 rail
     eac:	cf 91       	pop	r28
     eae:	08 95       	ret

00000eb0 <sband_SWITCH>:
     eb0:	cf 93       	push	r28
	}
}
     eb2:	c8 2f       	mov	r28, r24
     eb4:	86 ff       	sbrs	r24, 6
	
	// SBand mask
	uint8_t mask_sband = 0b01000000;
	
	// Turn on SBand components if power stated calls for it
	if(power_state & mask_sband){
     eb6:	05 c0       	rjmp	.+10     	; 0xec2 <sband_SWITCH+0x12>
		Enable_8V();
     eb8:	35 df       	rcall	.-406    	; 0xd24 <Enable_8V>
		Set_GPIO(26); // turn on SBand
     eba:	8a e1       	ldi	r24, 0x1A	; 26
     ebc:	90 e0       	ldi	r25, 0x00	; 0
     ebe:	f1 d2       	rcall	.+1506   	; 0x14a2 <Set_GPIO>
     ec0:	05 c0       	rjmp	.+10     	; 0xecc <sband_SWITCH+0x1c>
	}
	else{
		Clear_GPIO(26); // turn off SBand
     ec2:	8a e1       	ldi	r24, 0x1A	; 26
     ec4:	90 e0       	ldi	r25, 0x00	; 0
		Disable_8V(power_state); // turn off 8V rail
     ec6:	53 d3       	rcall	.+1702   	; 0x156e <Clear_GPIO>
     ec8:	8c 2f       	mov	r24, r28
     eca:	56 df       	rcall	.-340    	; 0xd78 <Disable_8V>
	}
}
     ecc:	cf 91       	pop	r28
     ece:	08 95       	ret

00000ed0 <uhf_SWITCH>:
// Author: Chris Thomas
// Date: 2019-03-24
// Description: Switches power to UHF based on current power state.
/*========================================================================================*/

uhf_SWITCH(uint8_t power_state){
     ed0:	cf 93       	push	r28
     ed2:	c8 2f       	mov	r28, r24
	
	// UHF mask
	uint8_t mask_uhf = 0b10000000;
	
	// Turn on UHF components if power state calls for it
	if(power_state & mask_uhf){
     ed4:	88 23       	and	r24, r24
     ed6:	2c f4       	brge	.+10     	; 0xee2 <uhf_SWITCH+0x12>
		Enable_8V();
     ed8:	25 df       	rcall	.-438    	; 0xd24 <Enable_8V>
		Set_GPIO(25); // turn on UHF
     eda:	89 e1       	ldi	r24, 0x19	; 25
     edc:	90 e0       	ldi	r25, 0x00	; 0
     ede:	e1 d2       	rcall	.+1474   	; 0x14a2 <Set_GPIO>
     ee0:	05 c0       	rjmp	.+10     	; 0xeec <uhf_SWITCH+0x1c>
	}
	else{
		Clear_GPIO(25); // turn off UHF
     ee2:	89 e1       	ldi	r24, 0x19	; 25
     ee4:	90 e0       	ldi	r25, 0x00	; 0
		Disable_8V(power_state); // turn off 8V rail
     ee6:	43 d3       	rcall	.+1670   	; 0x156e <Clear_GPIO>
     ee8:	8c 2f       	mov	r24, r28
     eea:	46 df       	rcall	.-372    	; 0xd78 <Disable_8V>
	}
     eec:	cf 91       	pop	r28
     eee:	08 95       	ret

00000ef0 <Update_LOADS>:
// Description: Switches power to subsystems based on the current power state. The
//				power state is treated the same way whether the EPS is in autonomous or
//				manual mode.
/*========================================================================================*/

void Update_LOADS(uint8_t power_state, uint8_t* power_pointer){
     ef0:	cf 93       	push	r28
     ef2:	c8 2f       	mov	r28, r24
	
	// Heater switching
	heater_SWITCH(power_state, power_pointer);
     ef4:	4d df       	rcall	.-358    	; 0xd90 <heater_SWITCH>
	
	// OBC switching
	obc_SWITCH(power_state);
     ef6:	8c 2f       	mov	r24, r28
     ef8:	a2 df       	rcall	.-188    	; 0xe3e <obc_SWITCH>
	
	// Imager switching
	imager_SWITCH(power_state);
     efa:	8c 2f       	mov	r24, r28
     efc:	aa df       	rcall	.-172    	; 0xe52 <imager_SWITCH>
	
	// GRIPS switching
	grips_SWITCH(power_state);
     efe:	8c 2f       	mov	r24, r28
     f00:	be df       	rcall	.-132    	; 0xe7e <grips_SWITCH>
	
	// SBand switching
	sband_SWITCH(power_state);
     f02:	8c 2f       	mov	r24, r28
     f04:	d5 df       	rcall	.-86     	; 0xeb0 <sband_SWITCH>
     f06:	8c 2f       	mov	r24, r28
	
	// UHF switching
	uhf_SWITCH(power_state);
     f08:	e3 df       	rcall	.-58     	; 0xed0 <uhf_SWITCH>
     f0a:	cf 91       	pop	r28
     f0c:	08 95       	ret

00000f0e <pwrMatInit>:
	
}
     f0e:	fc 01       	movw	r30, r24
     f10:	81 e0       	ldi	r24, 0x01	; 1
// The structure for the power state matrix is
//
/*========================================================================================*/

void pwrMatInit(uint8_t* pwrMat){
	pwrMat[0] = 0b00000001;
     f12:	80 83       	st	Z, r24
	pwrMat[1] = 0b00000001;
     f14:	81 83       	std	Z+1, r24	; 0x01
	pwrMat[2] = 0b00000000;
     f16:	12 82       	std	Z+2, r1	; 0x02
	pwrMat[3] = 0b00000000;
     f18:	13 82       	std	Z+3, r1	; 0x03
	pwrMat[4] = 0b00000000;
     f1a:	14 82       	std	Z+4, r1	; 0x04
	pwrMat[5] = 0b00000000;
     f1c:	15 82       	std	Z+5, r1	; 0x05
	pwrMat[6] = 0b00000100;
     f1e:	84 e0       	ldi	r24, 0x04	; 4
     f20:	86 83       	std	Z+6, r24	; 0x06
	pwrMat[7] = 0b00001010;
     f22:	8a e0       	ldi	r24, 0x0A	; 10
     f24:	87 83       	std	Z+7, r24	; 0x07
	pwrMat[8] = 0b00001000;
     f26:	88 e0       	ldi	r24, 0x08	; 8
     f28:	80 87       	std	Z+8, r24	; 0x08
	pwrMat[9] = 0b00001000;
     f2a:	81 87       	std	Z+9, r24	; 0x09
	pwrMat[10] = 0b00011100;
     f2c:	8c e1       	ldi	r24, 0x1C	; 28
     f2e:	82 87       	std	Z+10, r24	; 0x0a
	pwrMat[11] = 0b00011010;
     f30:	8a e1       	ldi	r24, 0x1A	; 26
     f32:	83 87       	std	Z+11, r24	; 0x0b
	pwrMat[12] = 0b00011000;
     f34:	88 e1       	ldi	r24, 0x18	; 24
     f36:	84 87       	std	Z+12, r24	; 0x0c
	pwrMat[13] = 0b00011000;
     f38:	85 87       	std	Z+13, r24	; 0x0d
	pwrMat[14] = 0b00000000;
     f3a:	16 86       	std	Z+14, r1	; 0x0e
	pwrMat[15] = 0b10111100;
     f3c:	8c eb       	ldi	r24, 0xBC	; 188
     f3e:	87 87       	std	Z+15, r24	; 0x0f
	pwrMat[16] = 0b00111010;
     f40:	8a e3       	ldi	r24, 0x3A	; 58
     f42:	80 8b       	std	Z+16, r24	; 0x10
	pwrMat[17] = 0b00111000;
     f44:	88 e3       	ldi	r24, 0x38	; 56
     f46:	81 8b       	std	Z+17, r24	; 0x11
	pwrMat[18] = 0b00111000;
     f48:	82 8b       	std	Z+18, r24	; 0x12
	pwrMat[19] = 0b00000000;
     f4a:	13 8a       	std	Z+19, r1	; 0x13
	pwrMat[20] = 0b11111100;
     f4c:	8c ef       	ldi	r24, 0xFC	; 252
     f4e:	84 8b       	std	Z+20, r24	; 0x14
	pwrMat[21] = 0b11111010;
     f50:	8a ef       	ldi	r24, 0xFA	; 250
     f52:	85 8b       	std	Z+21, r24	; 0x15
	pwrMat[22] = 0b11111000;
     f54:	88 ef       	ldi	r24, 0xF8	; 248
     f56:	86 8b       	std	Z+22, r24	; 0x16
	pwrMat[23] = 0b11111000;
     f58:	87 8b       	std	Z+23, r24	; 0x17
	pwrMat[24] = 0b00000000;
     f5a:	10 8e       	std	Z+24, r1	; 0x18
     f5c:	08 95       	ret

00000f5e <PowerStateCheck>:
// Author: Kyle Andersen
// Date: 2019-03-20
// Description: 
/*========================================================================================*/

int PowerStateCheck(float SOC, float temp){
     f5e:	8f 92       	push	r8
     f60:	9f 92       	push	r9
     f62:	af 92       	push	r10
     f64:	bf 92       	push	r11
     f66:	cf 92       	push	r12
     f68:	df 92       	push	r13
     f6a:	ef 92       	push	r14
     f6c:	ff 92       	push	r15
     f6e:	cf 93       	push	r28
     f70:	6b 01       	movw	r12, r22
     f72:	7c 01       	movw	r14, r24
     f74:	49 01       	movw	r8, r18
     f76:	5a 01       	movw	r10, r20
	if(SOC < 20){
     f78:	20 e0       	ldi	r18, 0x00	; 0
     f7a:	30 e0       	ldi	r19, 0x00	; 0
     f7c:	40 ea       	ldi	r20, 0xA0	; 160
     f7e:	51 e4       	ldi	r21, 0x41	; 65
     f80:	0e 94 27 12 	call	0x244e	; 0x244e <__cmpsf2>
     f84:	88 23       	and	r24, r24
     f86:	0c f0       	brlt	.+2      	; 0xf8a <PowerStateCheck+0x2c>
     f88:	4f c0       	rjmp	.+158    	; 0x1028 <PowerStateCheck+0xca>
		if(temp >= 40){
     f8a:	20 e0       	ldi	r18, 0x00	; 0
     f8c:	30 e0       	ldi	r19, 0x00	; 0
     f8e:	40 e2       	ldi	r20, 0x20	; 32
     f90:	52 e4       	ldi	r21, 0x42	; 66
     f92:	c5 01       	movw	r24, r10
     f94:	b4 01       	movw	r22, r8
     f96:	0e 94 45 13 	call	0x268a	; 0x268a <__gesf2>
     f9a:	88 23       	and	r24, r24
     f9c:	0c f0       	brlt	.+2      	; 0xfa0 <PowerStateCheck+0x42>
     f9e:	c6 c1       	rjmp	.+908    	; 0x132c <PowerStateCheck+0x3ce>
			return 4;
		}//end else if
		else if(temp >= 30 && temp < 40){
     fa0:	20 e0       	ldi	r18, 0x00	; 0
     fa2:	30 e0       	ldi	r19, 0x00	; 0
     fa4:	40 ef       	ldi	r20, 0xF0	; 240
     fa6:	51 e4       	ldi	r21, 0x41	; 65
     fa8:	c5 01       	movw	r24, r10
     faa:	b4 01       	movw	r22, r8
     fac:	0e 94 45 13 	call	0x268a	; 0x268a <__gesf2>
     fb0:	88 23       	and	r24, r24
     fb2:	5c f0       	brlt	.+22     	; 0xfca <PowerStateCheck+0x6c>
     fb4:	20 e0       	ldi	r18, 0x00	; 0
     fb6:	30 e0       	ldi	r19, 0x00	; 0
     fb8:	40 e2       	ldi	r20, 0x20	; 32
     fba:	52 e4       	ldi	r21, 0x42	; 66
     fbc:	c5 01       	movw	r24, r10
     fbe:	b4 01       	movw	r22, r8
     fc0:	0e 94 27 12 	call	0x244e	; 0x244e <__cmpsf2>
     fc4:	88 23       	and	r24, r24
     fc6:	0c f4       	brge	.+2      	; 0xfca <PowerStateCheck+0x6c>
     fc8:	b4 c1       	rjmp	.+872    	; 0x1332 <PowerStateCheck+0x3d4>
			return 3;
		}//end else if
		else if(temp >= 15 && temp < 30){
     fca:	20 e0       	ldi	r18, 0x00	; 0
     fcc:	30 e0       	ldi	r19, 0x00	; 0
     fce:	40 e7       	ldi	r20, 0x70	; 112
     fd0:	51 e4       	ldi	r21, 0x41	; 65
     fd2:	c5 01       	movw	r24, r10
     fd4:	b4 01       	movw	r22, r8
     fd6:	0e 94 45 13 	call	0x268a	; 0x268a <__gesf2>
     fda:	88 23       	and	r24, r24
     fdc:	5c f0       	brlt	.+22     	; 0xff4 <PowerStateCheck+0x96>
     fde:	20 e0       	ldi	r18, 0x00	; 0
     fe0:	30 e0       	ldi	r19, 0x00	; 0
     fe2:	40 ef       	ldi	r20, 0xF0	; 240
     fe4:	51 e4       	ldi	r21, 0x41	; 65
     fe6:	c5 01       	movw	r24, r10
     fe8:	b4 01       	movw	r22, r8
     fea:	0e 94 27 12 	call	0x244e	; 0x244e <__cmpsf2>
     fee:	88 23       	and	r24, r24
     ff0:	0c f4       	brge	.+2      	; 0xff4 <PowerStateCheck+0x96>
     ff2:	a2 c1       	rjmp	.+836    	; 0x1338 <PowerStateCheck+0x3da>
			return 2;
		}//end else if
		else if(temp >= 0 && temp < 15){
     ff4:	20 e0       	ldi	r18, 0x00	; 0
     ff6:	30 e0       	ldi	r19, 0x00	; 0
     ff8:	a9 01       	movw	r20, r18
     ffa:	c5 01       	movw	r24, r10
     ffc:	b4 01       	movw	r22, r8
     ffe:	0e 94 45 13 	call	0x268a	; 0x268a <__gesf2>
    1002:	88 23       	and	r24, r24
    1004:	0c f4       	brge	.+2      	; 0x1008 <PowerStateCheck+0xaa>
    1006:	9b c1       	rjmp	.+822    	; 0x133e <PowerStateCheck+0x3e0>
/*========================================================================================*/

int PowerStateCheck(float SOC, float temp){
	if(SOC < 20){
		if(temp >= 40){
			return 4;
    1008:	c1 e0       	ldi	r28, 0x01	; 1
    100a:	f1 2c       	mov	r15, r1
    100c:	20 e0       	ldi	r18, 0x00	; 0
    100e:	30 e0       	ldi	r19, 0x00	; 0
    1010:	40 e7       	ldi	r20, 0x70	; 112
    1012:	51 e4       	ldi	r21, 0x41	; 65
    1014:	c5 01       	movw	r24, r10
    1016:	b4 01       	movw	r22, r8
    1018:	0e 94 27 12 	call	0x244e	; 0x244e <__cmpsf2>
    101c:	88 23       	and	r24, r24
    101e:	0c f0       	brlt	.+2      	; 0x1022 <PowerStateCheck+0xc4>
    1020:	c0 e0       	ldi	r28, 0x00	; 0
    1022:	8c 2f       	mov	r24, r28
    1024:	9f 2d       	mov	r25, r15
    1026:	ca c1       	rjmp	.+916    	; 0x13bc <PowerStateCheck+0x45e>
		}//end else if
		else{
			return 0;
		}//end else
	}//end if SOC < 20
	else if(SOC < 40 && SOC >= 20){
    1028:	20 e0       	ldi	r18, 0x00	; 0
    102a:	30 e0       	ldi	r19, 0x00	; 0
    102c:	40 e2       	ldi	r20, 0x20	; 32
    102e:	52 e4       	ldi	r21, 0x42	; 66
    1030:	c7 01       	movw	r24, r14
    1032:	b6 01       	movw	r22, r12
    1034:	0e 94 27 12 	call	0x244e	; 0x244e <__cmpsf2>
    1038:	88 23       	and	r24, r24
    103a:	0c f0       	brlt	.+2      	; 0x103e <PowerStateCheck+0xe0>
    103c:	5b c0       	rjmp	.+182    	; 0x10f4 <PowerStateCheck+0x196>
    103e:	20 e0       	ldi	r18, 0x00	; 0
    1040:	30 e0       	ldi	r19, 0x00	; 0
    1042:	40 ea       	ldi	r20, 0xA0	; 160
    1044:	51 e4       	ldi	r21, 0x41	; 65
    1046:	c7 01       	movw	r24, r14
    1048:	b6 01       	movw	r22, r12
    104a:	0e 94 45 13 	call	0x268a	; 0x268a <__gesf2>
    104e:	88 23       	and	r24, r24
    1050:	0c f4       	brge	.+2      	; 0x1054 <PowerStateCheck+0xf6>
    1052:	50 c0       	rjmp	.+160    	; 0x10f4 <PowerStateCheck+0x196>
		if(temp >= 40){
    1054:	20 e0       	ldi	r18, 0x00	; 0
    1056:	30 e0       	ldi	r19, 0x00	; 0
    1058:	40 e2       	ldi	r20, 0x20	; 32
    105a:	52 e4       	ldi	r21, 0x42	; 66
    105c:	c5 01       	movw	r24, r10
    105e:	b4 01       	movw	r22, r8
    1060:	0e 94 45 13 	call	0x268a	; 0x268a <__gesf2>
    1064:	88 23       	and	r24, r24
    1066:	0c f0       	brlt	.+2      	; 0x106a <PowerStateCheck+0x10c>
    1068:	6d c1       	rjmp	.+730    	; 0x1344 <PowerStateCheck+0x3e6>
			return 9;
		}//end else if
		else if(temp >= 30 && temp < 40){
    106a:	20 e0       	ldi	r18, 0x00	; 0
    106c:	30 e0       	ldi	r19, 0x00	; 0
    106e:	40 ef       	ldi	r20, 0xF0	; 240
    1070:	51 e4       	ldi	r21, 0x41	; 65
    1072:	c5 01       	movw	r24, r10
    1074:	b4 01       	movw	r22, r8
    1076:	0e 94 45 13 	call	0x268a	; 0x268a <__gesf2>
    107a:	88 23       	and	r24, r24
    107c:	5c f0       	brlt	.+22     	; 0x1094 <PowerStateCheck+0x136>
    107e:	20 e0       	ldi	r18, 0x00	; 0
    1080:	30 e0       	ldi	r19, 0x00	; 0
    1082:	40 e2       	ldi	r20, 0x20	; 32
    1084:	52 e4       	ldi	r21, 0x42	; 66
    1086:	c5 01       	movw	r24, r10
    1088:	b4 01       	movw	r22, r8
    108a:	0e 94 27 12 	call	0x244e	; 0x244e <__cmpsf2>
    108e:	88 23       	and	r24, r24
    1090:	0c f4       	brge	.+2      	; 0x1094 <PowerStateCheck+0x136>
    1092:	5b c1       	rjmp	.+694    	; 0x134a <PowerStateCheck+0x3ec>
			return 8;
		}//end else if
		else if(temp >= 15 && temp < 30){
    1094:	20 e0       	ldi	r18, 0x00	; 0
    1096:	30 e0       	ldi	r19, 0x00	; 0
    1098:	40 e7       	ldi	r20, 0x70	; 112
    109a:	51 e4       	ldi	r21, 0x41	; 65
    109c:	c5 01       	movw	r24, r10
    109e:	b4 01       	movw	r22, r8
    10a0:	0e 94 45 13 	call	0x268a	; 0x268a <__gesf2>
    10a4:	88 23       	and	r24, r24
    10a6:	5c f0       	brlt	.+22     	; 0x10be <PowerStateCheck+0x160>
    10a8:	20 e0       	ldi	r18, 0x00	; 0
    10aa:	30 e0       	ldi	r19, 0x00	; 0
    10ac:	40 ef       	ldi	r20, 0xF0	; 240
    10ae:	51 e4       	ldi	r21, 0x41	; 65
    10b0:	c5 01       	movw	r24, r10
    10b2:	b4 01       	movw	r22, r8
    10b4:	0e 94 27 12 	call	0x244e	; 0x244e <__cmpsf2>
    10b8:	88 23       	and	r24, r24
    10ba:	0c f4       	brge	.+2      	; 0x10be <PowerStateCheck+0x160>
    10bc:	49 c1       	rjmp	.+658    	; 0x1350 <PowerStateCheck+0x3f2>
			return 7;
		}//end else if
		else if(temp >= 0 && temp < 15){
    10be:	20 e0       	ldi	r18, 0x00	; 0
    10c0:	30 e0       	ldi	r19, 0x00	; 0
    10c2:	a9 01       	movw	r20, r18
    10c4:	c5 01       	movw	r24, r10
    10c6:	b4 01       	movw	r22, r8
    10c8:	0e 94 45 13 	call	0x268a	; 0x268a <__gesf2>
    10cc:	88 23       	and	r24, r24
    10ce:	0c f4       	brge	.+2      	; 0x10d2 <PowerStateCheck+0x174>
    10d0:	42 c1       	rjmp	.+644    	; 0x1356 <PowerStateCheck+0x3f8>
    10d2:	20 e0       	ldi	r18, 0x00	; 0
    10d4:	30 e0       	ldi	r19, 0x00	; 0
    10d6:	40 e7       	ldi	r20, 0x70	; 112
    10d8:	51 e4       	ldi	r21, 0x41	; 65
    10da:	c5 01       	movw	r24, r10
    10dc:	b4 01       	movw	r22, r8
    10de:	0e 94 27 12 	call	0x244e	; 0x244e <__cmpsf2>
			return 6;
		}//end else if
		else{
			return 5;
    10e2:	08 2e       	mov	r0, r24
    10e4:	00 0c       	add	r0, r0
    10e6:	99 0b       	sbc	r25, r25
    10e8:	88 27       	eor	r24, r24
    10ea:	99 0f       	add	r25, r25
    10ec:	88 1f       	adc	r24, r24
    10ee:	99 27       	eor	r25, r25
    10f0:	05 96       	adiw	r24, 0x05	; 5
    10f2:	64 c1       	rjmp	.+712    	; 0x13bc <PowerStateCheck+0x45e>
		}//end else
	}//end else if SOC < 40
	else if(SOC < 60 && SOC >= 40){
    10f4:	20 e0       	ldi	r18, 0x00	; 0
    10f6:	30 e0       	ldi	r19, 0x00	; 0
    10f8:	40 e7       	ldi	r20, 0x70	; 112
    10fa:	52 e4       	ldi	r21, 0x42	; 66
    10fc:	c7 01       	movw	r24, r14
    10fe:	b6 01       	movw	r22, r12
    1100:	0e 94 27 12 	call	0x244e	; 0x244e <__cmpsf2>
    1104:	88 23       	and	r24, r24
    1106:	0c f0       	brlt	.+2      	; 0x110a <PowerStateCheck+0x1ac>
    1108:	5b c0       	rjmp	.+182    	; 0x11c0 <PowerStateCheck+0x262>
    110a:	20 e0       	ldi	r18, 0x00	; 0
    110c:	30 e0       	ldi	r19, 0x00	; 0
    110e:	40 e2       	ldi	r20, 0x20	; 32
    1110:	52 e4       	ldi	r21, 0x42	; 66
    1112:	c7 01       	movw	r24, r14
    1114:	b6 01       	movw	r22, r12
    1116:	0e 94 45 13 	call	0x268a	; 0x268a <__gesf2>
    111a:	88 23       	and	r24, r24
    111c:	0c f4       	brge	.+2      	; 0x1120 <PowerStateCheck+0x1c2>
    111e:	42 c1       	rjmp	.+644    	; 0x13a4 <PowerStateCheck+0x446>
		if(temp >= 40){
    1120:	20 e0       	ldi	r18, 0x00	; 0
    1122:	30 e0       	ldi	r19, 0x00	; 0
    1124:	40 e2       	ldi	r20, 0x20	; 32
    1126:	52 e4       	ldi	r21, 0x42	; 66
    1128:	c5 01       	movw	r24, r10
    112a:	b4 01       	movw	r22, r8
    112c:	0e 94 45 13 	call	0x268a	; 0x268a <__gesf2>
    1130:	88 23       	and	r24, r24
    1132:	0c f0       	brlt	.+2      	; 0x1136 <PowerStateCheck+0x1d8>
    1134:	13 c1       	rjmp	.+550    	; 0x135c <PowerStateCheck+0x3fe>
			return 14;
		}//end else if
		else if(temp >= 30 && temp < 40){
    1136:	20 e0       	ldi	r18, 0x00	; 0
    1138:	30 e0       	ldi	r19, 0x00	; 0
    113a:	40 ef       	ldi	r20, 0xF0	; 240
    113c:	51 e4       	ldi	r21, 0x41	; 65
    113e:	c5 01       	movw	r24, r10
    1140:	b4 01       	movw	r22, r8
    1142:	0e 94 45 13 	call	0x268a	; 0x268a <__gesf2>
    1146:	88 23       	and	r24, r24
    1148:	5c f0       	brlt	.+22     	; 0x1160 <PowerStateCheck+0x202>
    114a:	20 e0       	ldi	r18, 0x00	; 0
    114c:	30 e0       	ldi	r19, 0x00	; 0
    114e:	40 e2       	ldi	r20, 0x20	; 32
    1150:	52 e4       	ldi	r21, 0x42	; 66
    1152:	c5 01       	movw	r24, r10
    1154:	b4 01       	movw	r22, r8
    1156:	0e 94 27 12 	call	0x244e	; 0x244e <__cmpsf2>
    115a:	88 23       	and	r24, r24
    115c:	0c f4       	brge	.+2      	; 0x1160 <PowerStateCheck+0x202>
    115e:	01 c1       	rjmp	.+514    	; 0x1362 <PowerStateCheck+0x404>
			return 13;
		}//end else if
		else if(temp >= 15 && temp < 30){
    1160:	20 e0       	ldi	r18, 0x00	; 0
    1162:	30 e0       	ldi	r19, 0x00	; 0
    1164:	40 e7       	ldi	r20, 0x70	; 112
    1166:	51 e4       	ldi	r21, 0x41	; 65
    1168:	c5 01       	movw	r24, r10
    116a:	b4 01       	movw	r22, r8
    116c:	0e 94 45 13 	call	0x268a	; 0x268a <__gesf2>
    1170:	88 23       	and	r24, r24
    1172:	5c f0       	brlt	.+22     	; 0x118a <PowerStateCheck+0x22c>
    1174:	20 e0       	ldi	r18, 0x00	; 0
    1176:	30 e0       	ldi	r19, 0x00	; 0
    1178:	40 ef       	ldi	r20, 0xF0	; 240
    117a:	51 e4       	ldi	r21, 0x41	; 65
    117c:	c5 01       	movw	r24, r10
    117e:	b4 01       	movw	r22, r8
    1180:	0e 94 27 12 	call	0x244e	; 0x244e <__cmpsf2>
    1184:	88 23       	and	r24, r24
    1186:	0c f4       	brge	.+2      	; 0x118a <PowerStateCheck+0x22c>
    1188:	ef c0       	rjmp	.+478    	; 0x1368 <PowerStateCheck+0x40a>
			return 12;
		}//end else if
		else if(temp >= 0 && temp < 15){
    118a:	20 e0       	ldi	r18, 0x00	; 0
    118c:	30 e0       	ldi	r19, 0x00	; 0
    118e:	a9 01       	movw	r20, r18
    1190:	c5 01       	movw	r24, r10
    1192:	b4 01       	movw	r22, r8
    1194:	0e 94 45 13 	call	0x268a	; 0x268a <__gesf2>
    1198:	88 23       	and	r24, r24
    119a:	0c f4       	brge	.+2      	; 0x119e <PowerStateCheck+0x240>
    119c:	e8 c0       	rjmp	.+464    	; 0x136e <PowerStateCheck+0x410>
    119e:	20 e0       	ldi	r18, 0x00	; 0
    11a0:	30 e0       	ldi	r19, 0x00	; 0
    11a2:	40 e7       	ldi	r20, 0x70	; 112
    11a4:	51 e4       	ldi	r21, 0x41	; 65
    11a6:	c5 01       	movw	r24, r10
    11a8:	b4 01       	movw	r22, r8
    11aa:	0e 94 27 12 	call	0x244e	; 0x244e <__cmpsf2>
			return 11;
		}//end else if
		else{
			return 10;
    11ae:	08 2e       	mov	r0, r24
    11b0:	00 0c       	add	r0, r0
    11b2:	99 0b       	sbc	r25, r25
    11b4:	88 27       	eor	r24, r24
    11b6:	99 0f       	add	r25, r25
    11b8:	88 1f       	adc	r24, r24
    11ba:	99 27       	eor	r25, r25
    11bc:	0a 96       	adiw	r24, 0x0a	; 10
    11be:	fe c0       	rjmp	.+508    	; 0x13bc <PowerStateCheck+0x45e>
		}//end else
	}//end if SOC < 60
	else if(SOC < 80 && SOC <= 60){
    11c0:	20 e0       	ldi	r18, 0x00	; 0
    11c2:	30 e0       	ldi	r19, 0x00	; 0
    11c4:	40 ea       	ldi	r20, 0xA0	; 160
    11c6:	52 e4       	ldi	r21, 0x42	; 66
    11c8:	c7 01       	movw	r24, r14
    11ca:	b6 01       	movw	r22, r12
    11cc:	0e 94 27 12 	call	0x244e	; 0x244e <__cmpsf2>
    11d0:	88 23       	and	r24, r24
    11d2:	0c f0       	brlt	.+2      	; 0x11d6 <PowerStateCheck+0x278>
    11d4:	5b c0       	rjmp	.+182    	; 0x128c <PowerStateCheck+0x32e>
    11d6:	20 e0       	ldi	r18, 0x00	; 0
    11d8:	30 e0       	ldi	r19, 0x00	; 0
    11da:	40 e7       	ldi	r20, 0x70	; 112
    11dc:	52 e4       	ldi	r21, 0x42	; 66
    11de:	c7 01       	movw	r24, r14
    11e0:	b6 01       	movw	r22, r12
    11e2:	0e 94 27 12 	call	0x244e	; 0x244e <__cmpsf2>
    11e6:	18 16       	cp	r1, r24
    11e8:	0c f4       	brge	.+2      	; 0x11ec <PowerStateCheck+0x28e>
    11ea:	50 c0       	rjmp	.+160    	; 0x128c <PowerStateCheck+0x32e>
		if(temp >= 40){
    11ec:	20 e0       	ldi	r18, 0x00	; 0
    11ee:	30 e0       	ldi	r19, 0x00	; 0
    11f0:	40 e2       	ldi	r20, 0x20	; 32
    11f2:	52 e4       	ldi	r21, 0x42	; 66
    11f4:	c5 01       	movw	r24, r10
    11f6:	b4 01       	movw	r22, r8
    11f8:	0e 94 45 13 	call	0x268a	; 0x268a <__gesf2>
    11fc:	88 23       	and	r24, r24
    11fe:	0c f0       	brlt	.+2      	; 0x1202 <PowerStateCheck+0x2a4>
    1200:	b9 c0       	rjmp	.+370    	; 0x1374 <PowerStateCheck+0x416>
			return 19;
		}//end else if
		else if(temp >= 30 && temp < 40){
    1202:	20 e0       	ldi	r18, 0x00	; 0
    1204:	30 e0       	ldi	r19, 0x00	; 0
    1206:	40 ef       	ldi	r20, 0xF0	; 240
    1208:	51 e4       	ldi	r21, 0x41	; 65
    120a:	c5 01       	movw	r24, r10
    120c:	b4 01       	movw	r22, r8
    120e:	0e 94 45 13 	call	0x268a	; 0x268a <__gesf2>
    1212:	88 23       	and	r24, r24
    1214:	5c f0       	brlt	.+22     	; 0x122c <PowerStateCheck+0x2ce>
    1216:	20 e0       	ldi	r18, 0x00	; 0
    1218:	30 e0       	ldi	r19, 0x00	; 0
    121a:	40 e2       	ldi	r20, 0x20	; 32
    121c:	52 e4       	ldi	r21, 0x42	; 66
    121e:	c5 01       	movw	r24, r10
    1220:	b4 01       	movw	r22, r8
    1222:	0e 94 27 12 	call	0x244e	; 0x244e <__cmpsf2>
    1226:	88 23       	and	r24, r24
    1228:	0c f4       	brge	.+2      	; 0x122c <PowerStateCheck+0x2ce>
    122a:	a7 c0       	rjmp	.+334    	; 0x137a <PowerStateCheck+0x41c>
			return 18;
		}//end else if
		else if(temp >= 15 && temp < 30){
    122c:	20 e0       	ldi	r18, 0x00	; 0
    122e:	30 e0       	ldi	r19, 0x00	; 0
    1230:	40 e7       	ldi	r20, 0x70	; 112
    1232:	51 e4       	ldi	r21, 0x41	; 65
    1234:	c5 01       	movw	r24, r10
    1236:	b4 01       	movw	r22, r8
    1238:	0e 94 45 13 	call	0x268a	; 0x268a <__gesf2>
    123c:	88 23       	and	r24, r24
    123e:	5c f0       	brlt	.+22     	; 0x1256 <PowerStateCheck+0x2f8>
    1240:	20 e0       	ldi	r18, 0x00	; 0
    1242:	30 e0       	ldi	r19, 0x00	; 0
    1244:	40 ef       	ldi	r20, 0xF0	; 240
    1246:	51 e4       	ldi	r21, 0x41	; 65
    1248:	c5 01       	movw	r24, r10
    124a:	b4 01       	movw	r22, r8
    124c:	0e 94 27 12 	call	0x244e	; 0x244e <__cmpsf2>
    1250:	88 23       	and	r24, r24
    1252:	0c f4       	brge	.+2      	; 0x1256 <PowerStateCheck+0x2f8>
    1254:	95 c0       	rjmp	.+298    	; 0x1380 <PowerStateCheck+0x422>
			return 17;
		}//end else if
		else if(temp >= 0 && temp < 15){
    1256:	20 e0       	ldi	r18, 0x00	; 0
    1258:	30 e0       	ldi	r19, 0x00	; 0
    125a:	a9 01       	movw	r20, r18
    125c:	c5 01       	movw	r24, r10
    125e:	b4 01       	movw	r22, r8
    1260:	0e 94 45 13 	call	0x268a	; 0x268a <__gesf2>
    1264:	88 23       	and	r24, r24
    1266:	0c f4       	brge	.+2      	; 0x126a <PowerStateCheck+0x30c>
    1268:	8e c0       	rjmp	.+284    	; 0x1386 <PowerStateCheck+0x428>
    126a:	20 e0       	ldi	r18, 0x00	; 0
    126c:	30 e0       	ldi	r19, 0x00	; 0
    126e:	40 e7       	ldi	r20, 0x70	; 112
    1270:	51 e4       	ldi	r21, 0x41	; 65
    1272:	c5 01       	movw	r24, r10
    1274:	b4 01       	movw	r22, r8
    1276:	0e 94 27 12 	call	0x244e	; 0x244e <__cmpsf2>
			return 16;
		}//end else if
		else{
			return 15;
    127a:	08 2e       	mov	r0, r24
    127c:	00 0c       	add	r0, r0
    127e:	99 0b       	sbc	r25, r25
    1280:	88 27       	eor	r24, r24
    1282:	99 0f       	add	r25, r25
    1284:	88 1f       	adc	r24, r24
    1286:	99 27       	eor	r25, r25
    1288:	0f 96       	adiw	r24, 0x0f	; 15
    128a:	98 c0       	rjmp	.+304    	; 0x13bc <PowerStateCheck+0x45e>
		}//end else
	}//end if SOC < 80
	else {
		if(temp >= 40){
    128c:	20 e0       	ldi	r18, 0x00	; 0
    128e:	30 e0       	ldi	r19, 0x00	; 0
    1290:	40 e2       	ldi	r20, 0x20	; 32
    1292:	52 e4       	ldi	r21, 0x42	; 66
    1294:	c5 01       	movw	r24, r10
    1296:	b4 01       	movw	r22, r8
    1298:	0e 94 45 13 	call	0x268a	; 0x268a <__gesf2>
    129c:	88 23       	and	r24, r24
    129e:	0c f0       	brlt	.+2      	; 0x12a2 <PowerStateCheck+0x344>
    12a0:	75 c0       	rjmp	.+234    	; 0x138c <PowerStateCheck+0x42e>
			return 24;
		}//end else if
		else if(temp >= 30 && temp < 40){
    12a2:	20 e0       	ldi	r18, 0x00	; 0
    12a4:	30 e0       	ldi	r19, 0x00	; 0
    12a6:	40 ef       	ldi	r20, 0xF0	; 240
    12a8:	51 e4       	ldi	r21, 0x41	; 65
    12aa:	c5 01       	movw	r24, r10
    12ac:	b4 01       	movw	r22, r8
    12ae:	0e 94 45 13 	call	0x268a	; 0x268a <__gesf2>
    12b2:	88 23       	and	r24, r24
    12b4:	5c f0       	brlt	.+22     	; 0x12cc <PowerStateCheck+0x36e>
    12b6:	20 e0       	ldi	r18, 0x00	; 0
    12b8:	30 e0       	ldi	r19, 0x00	; 0
    12ba:	40 e2       	ldi	r20, 0x20	; 32
    12bc:	52 e4       	ldi	r21, 0x42	; 66
    12be:	c5 01       	movw	r24, r10
    12c0:	b4 01       	movw	r22, r8
    12c2:	0e 94 27 12 	call	0x244e	; 0x244e <__cmpsf2>
    12c6:	88 23       	and	r24, r24
    12c8:	0c f4       	brge	.+2      	; 0x12cc <PowerStateCheck+0x36e>
    12ca:	63 c0       	rjmp	.+198    	; 0x1392 <PowerStateCheck+0x434>
			return 23;
		}//end else if
		else if(temp >= 15 && temp < 30){
    12cc:	20 e0       	ldi	r18, 0x00	; 0
    12ce:	30 e0       	ldi	r19, 0x00	; 0
    12d0:	40 e7       	ldi	r20, 0x70	; 112
    12d2:	51 e4       	ldi	r21, 0x41	; 65
    12d4:	c5 01       	movw	r24, r10
    12d6:	b4 01       	movw	r22, r8
    12d8:	0e 94 45 13 	call	0x268a	; 0x268a <__gesf2>
    12dc:	88 23       	and	r24, r24
    12de:	5c f0       	brlt	.+22     	; 0x12f6 <PowerStateCheck+0x398>
    12e0:	20 e0       	ldi	r18, 0x00	; 0
    12e2:	30 e0       	ldi	r19, 0x00	; 0
    12e4:	40 ef       	ldi	r20, 0xF0	; 240
    12e6:	51 e4       	ldi	r21, 0x41	; 65
    12e8:	c5 01       	movw	r24, r10
    12ea:	b4 01       	movw	r22, r8
    12ec:	0e 94 27 12 	call	0x244e	; 0x244e <__cmpsf2>
    12f0:	88 23       	and	r24, r24
    12f2:	0c f4       	brge	.+2      	; 0x12f6 <PowerStateCheck+0x398>
    12f4:	51 c0       	rjmp	.+162    	; 0x1398 <PowerStateCheck+0x43a>
			return 22;
		}//end else if
		else if(temp >= 0 && temp < 15){
    12f6:	20 e0       	ldi	r18, 0x00	; 0
    12f8:	30 e0       	ldi	r19, 0x00	; 0
    12fa:	a9 01       	movw	r20, r18
    12fc:	c5 01       	movw	r24, r10
    12fe:	b4 01       	movw	r22, r8
    1300:	0e 94 45 13 	call	0x268a	; 0x268a <__gesf2>
    1304:	88 23       	and	r24, r24
    1306:	0c f4       	brge	.+2      	; 0x130a <PowerStateCheck+0x3ac>
    1308:	4a c0       	rjmp	.+148    	; 0x139e <PowerStateCheck+0x440>
    130a:	20 e0       	ldi	r18, 0x00	; 0
    130c:	30 e0       	ldi	r19, 0x00	; 0
    130e:	40 e7       	ldi	r20, 0x70	; 112
    1310:	51 e4       	ldi	r21, 0x41	; 65
    1312:	c5 01       	movw	r24, r10
    1314:	b4 01       	movw	r22, r8
    1316:	0e 94 27 12 	call	0x244e	; 0x244e <__cmpsf2>
			return 21;
		}//end else if
		else{
			return 20;
    131a:	08 2e       	mov	r0, r24
    131c:	00 0c       	add	r0, r0
    131e:	99 0b       	sbc	r25, r25
    1320:	88 27       	eor	r24, r24
    1322:	99 0f       	add	r25, r25
    1324:	88 1f       	adc	r24, r24
    1326:	99 27       	eor	r25, r25
    1328:	44 96       	adiw	r24, 0x14	; 20
    132a:	48 c0       	rjmp	.+144    	; 0x13bc <PowerStateCheck+0x45e>
/*========================================================================================*/

int PowerStateCheck(float SOC, float temp){
	if(SOC < 20){
		if(temp >= 40){
			return 4;
    132c:	84 e0       	ldi	r24, 0x04	; 4
    132e:	90 e0       	ldi	r25, 0x00	; 0
    1330:	45 c0       	rjmp	.+138    	; 0x13bc <PowerStateCheck+0x45e>
		}//end else if
		else if(temp >= 30 && temp < 40){
			return 3;
    1332:	83 e0       	ldi	r24, 0x03	; 3
    1334:	90 e0       	ldi	r25, 0x00	; 0
    1336:	42 c0       	rjmp	.+132    	; 0x13bc <PowerStateCheck+0x45e>
		}//end else if
		else if(temp >= 15 && temp < 30){
			return 2;
    1338:	82 e0       	ldi	r24, 0x02	; 2
    133a:	90 e0       	ldi	r25, 0x00	; 0
    133c:	3f c0       	rjmp	.+126    	; 0x13bc <PowerStateCheck+0x45e>
		}//end else if
		else if(temp >= 0 && temp < 15){
			return 1;
		}//end else if
		else{
			return 0;
    133e:	80 e0       	ldi	r24, 0x00	; 0
    1340:	90 e0       	ldi	r25, 0x00	; 0
    1342:	3c c0       	rjmp	.+120    	; 0x13bc <PowerStateCheck+0x45e>
		}//end else
	}//end if SOC < 20
	else if(SOC < 40 && SOC >= 20){
		if(temp >= 40){
			return 9;
    1344:	89 e0       	ldi	r24, 0x09	; 9
    1346:	90 e0       	ldi	r25, 0x00	; 0
    1348:	39 c0       	rjmp	.+114    	; 0x13bc <PowerStateCheck+0x45e>
		}//end else if
		else if(temp >= 30 && temp < 40){
			return 8;
    134a:	88 e0       	ldi	r24, 0x08	; 8
    134c:	90 e0       	ldi	r25, 0x00	; 0
    134e:	36 c0       	rjmp	.+108    	; 0x13bc <PowerStateCheck+0x45e>
		}//end else if
		else if(temp >= 15 && temp < 30){
			return 7;
    1350:	87 e0       	ldi	r24, 0x07	; 7
    1352:	90 e0       	ldi	r25, 0x00	; 0
    1354:	33 c0       	rjmp	.+102    	; 0x13bc <PowerStateCheck+0x45e>
		}//end else if
		else if(temp >= 0 && temp < 15){
			return 6;
		}//end else if
		else{
			return 5;
    1356:	85 e0       	ldi	r24, 0x05	; 5
    1358:	90 e0       	ldi	r25, 0x00	; 0
    135a:	30 c0       	rjmp	.+96     	; 0x13bc <PowerStateCheck+0x45e>
		}//end else
	}//end else if SOC < 40
	else if(SOC < 60 && SOC >= 40){
		if(temp >= 40){
			return 14;
    135c:	8e e0       	ldi	r24, 0x0E	; 14
    135e:	90 e0       	ldi	r25, 0x00	; 0
    1360:	2d c0       	rjmp	.+90     	; 0x13bc <PowerStateCheck+0x45e>
		}//end else if
		else if(temp >= 30 && temp < 40){
			return 13;
    1362:	8d e0       	ldi	r24, 0x0D	; 13
    1364:	90 e0       	ldi	r25, 0x00	; 0
    1366:	2a c0       	rjmp	.+84     	; 0x13bc <PowerStateCheck+0x45e>
		}//end else if
		else if(temp >= 15 && temp < 30){
			return 12;
    1368:	8c e0       	ldi	r24, 0x0C	; 12
    136a:	90 e0       	ldi	r25, 0x00	; 0
    136c:	27 c0       	rjmp	.+78     	; 0x13bc <PowerStateCheck+0x45e>
		}//end else if
		else if(temp >= 0 && temp < 15){
			return 11;
		}//end else if
		else{
			return 10;
    136e:	8a e0       	ldi	r24, 0x0A	; 10
    1370:	90 e0       	ldi	r25, 0x00	; 0
    1372:	24 c0       	rjmp	.+72     	; 0x13bc <PowerStateCheck+0x45e>
		}//end else
	}//end if SOC < 60
	else if(SOC < 80 && SOC <= 60){
		if(temp >= 40){
			return 19;
    1374:	83 e1       	ldi	r24, 0x13	; 19
    1376:	90 e0       	ldi	r25, 0x00	; 0
    1378:	21 c0       	rjmp	.+66     	; 0x13bc <PowerStateCheck+0x45e>
		}//end else if
		else if(temp >= 30 && temp < 40){
			return 18;
    137a:	82 e1       	ldi	r24, 0x12	; 18
    137c:	90 e0       	ldi	r25, 0x00	; 0
    137e:	1e c0       	rjmp	.+60     	; 0x13bc <PowerStateCheck+0x45e>
		}//end else if
		else if(temp >= 15 && temp < 30){
			return 17;
    1380:	81 e1       	ldi	r24, 0x11	; 17
    1382:	90 e0       	ldi	r25, 0x00	; 0
    1384:	1b c0       	rjmp	.+54     	; 0x13bc <PowerStateCheck+0x45e>
		}//end else if
		else if(temp >= 0 && temp < 15){
			return 16;
		}//end else if
		else{
			return 15;
    1386:	8f e0       	ldi	r24, 0x0F	; 15
    1388:	90 e0       	ldi	r25, 0x00	; 0
    138a:	18 c0       	rjmp	.+48     	; 0x13bc <PowerStateCheck+0x45e>
		}//end else
	}//end if SOC < 80
	else {
		if(temp >= 40){
			return 24;
    138c:	88 e1       	ldi	r24, 0x18	; 24
    138e:	90 e0       	ldi	r25, 0x00	; 0
    1390:	15 c0       	rjmp	.+42     	; 0x13bc <PowerStateCheck+0x45e>
		}//end else if
		else if(temp >= 30 && temp < 40){
			return 23;
    1392:	87 e1       	ldi	r24, 0x17	; 23
    1394:	90 e0       	ldi	r25, 0x00	; 0
    1396:	12 c0       	rjmp	.+36     	; 0x13bc <PowerStateCheck+0x45e>
		}//end else if
		else if(temp >= 15 && temp < 30){
			return 22;
    1398:	86 e1       	ldi	r24, 0x16	; 22
    139a:	90 e0       	ldi	r25, 0x00	; 0
    139c:	0f c0       	rjmp	.+30     	; 0x13bc <PowerStateCheck+0x45e>
		}//end else if
		else if(temp >= 0 && temp < 15){
			return 21;
		}//end else if
		else{
			return 20;
    139e:	84 e1       	ldi	r24, 0x14	; 20
    13a0:	90 e0       	ldi	r25, 0x00	; 0
    13a2:	0c c0       	rjmp	.+24     	; 0x13bc <PowerStateCheck+0x45e>
		}//end else if
		else{
			return 10;
		}//end else
	}//end if SOC < 60
	else if(SOC < 80 && SOC <= 60){
    13a4:	20 e0       	ldi	r18, 0x00	; 0
    13a6:	30 e0       	ldi	r19, 0x00	; 0
    13a8:	40 ea       	ldi	r20, 0xA0	; 160
    13aa:	52 e4       	ldi	r21, 0x42	; 66
    13ac:	c7 01       	movw	r24, r14
    13ae:	b6 01       	movw	r22, r12
    13b0:	0e 94 27 12 	call	0x244e	; 0x244e <__cmpsf2>
    13b4:	88 23       	and	r24, r24
    13b6:	0c f4       	brge	.+2      	; 0x13ba <PowerStateCheck+0x45c>
    13b8:	19 cf       	rjmp	.-462    	; 0x11ec <PowerStateCheck+0x28e>
    13ba:	68 cf       	rjmp	.-304    	; 0x128c <PowerStateCheck+0x32e>
		}//end else if
		else{
			return 20;
		}//end else
	}//end else SOC > 80
}//end PowerStateCheck
    13bc:	cf 91       	pop	r28
    13be:	ff 90       	pop	r15
    13c0:	ef 90       	pop	r14
    13c2:	df 90       	pop	r13
    13c4:	cf 90       	pop	r12
    13c6:	bf 90       	pop	r11
    13c8:	af 90       	pop	r10
    13ca:	9f 90       	pop	r9
    13cc:	8f 90       	pop	r8
    13ce:	08 95       	ret

000013d0 <Update_STATE>:
// Date: 2019-03-25
// Description: Updates to the state to character array form for ease of use as it is
//				impossbile to read individual bits in a unsigned integer.
/*========================================================================================*/

void Update_STATE(char* power, uint8_t state){
    13d0:	fc 01       	movw	r30, r24
    13d2:	ac 01       	movw	r20, r24
    13d4:	48 5f       	subi	r20, 0xF8	; 248
    13d6:	5f 4f       	sbci	r21, 0xFF	; 255
	power[6] => SBand   Power
	power[7] => UHF     Power	
	*/
	
	// 8 bit mask to check the state of each position
	uint8_t mask = 0x01;
    13d8:	91 e0       	ldi	r25, 0x01	; 1
		if (mask & state){
			power[i] = 'y';
			mask = mask << 1; // shift left once
		}
		else{
			power[i] = 'n';
    13da:	3e e6       	ldi	r19, 0x6E	; 110
	uint8_t mask = 0x01;
	// keep track of the first index
	
	while(i < 8){
		if (mask & state){
			power[i] = 'y';
    13dc:	89 e7       	ldi	r24, 0x79	; 121
	// 8 bit mask to check the state of each position
	uint8_t mask = 0x01;
	// keep track of the first index
	
	while(i < 8){
		if (mask & state){
    13de:	26 2f       	mov	r18, r22
    13e0:	29 23       	and	r18, r25
    13e2:	19 f0       	breq	.+6      	; 0x13ea <Update_STATE+0x1a>
			power[i] = 'y';
    13e4:	80 83       	st	Z, r24
			mask = mask << 1; // shift left once
    13e6:	99 0f       	add	r25, r25
    13e8:	02 c0       	rjmp	.+4      	; 0x13ee <Update_STATE+0x1e>
		}
		else{
			power[i] = 'n';
    13ea:	30 83       	st	Z, r19
			mask = mask << 1; // shift left once
    13ec:	99 0f       	add	r25, r25
    13ee:	31 96       	adiw	r30, 0x01	; 1
	
	// 8 bit mask to check the state of each position
	uint8_t mask = 0x01;
	// keep track of the first index
	
	while(i < 8){
    13f0:	e4 17       	cp	r30, r20
    13f2:	f5 07       	cpc	r31, r21
    13f4:	a1 f7       	brne	.-24     	; 0x13de <Update_STATE+0xe>
			power[i] = 'n';
			mask = mask << 1; // shift left once
		}
		i++;
	}
}
    13f6:	08 95       	ret

000013f8 <Manual_STATE>:
// Date: 2019-03-27
// Description: Converts the power state from array of characters to an unsigned integer.
//				Unsigned integers are used instead of character arrays for speed.
/*========================================================================================*/

void Manual_STATE(char* power, uint8_t* power_state){
    13f8:	db 01       	movw	r26, r22
    13fa:	fc 01       	movw	r30, r24
    13fc:	ac 01       	movw	r20, r24
    13fe:	48 5f       	subi	r20, 0xF8	; 248
    1400:	5f 4f       	sbci	r21, 0xFF	; 255
	// String Index
	int i = 0;
	
	// 8 bit mask to check the state of each position
	uint8_t mask = 0x01;
	uint8_t new_mask = 0xff;
    1402:	3f ef       	ldi	r19, 0xFF	; 255
	
	// String Index
	int i = 0;
	
	// 8 bit mask to check the state of each position
	uint8_t mask = 0x01;
    1404:	91 e0       	ldi	r25, 0x01	; 1
	uint8_t new_mask = 0xff;
	// keep track of the first index
	
	while(i < 8){
		if (power[i] == 'y'){
    1406:	21 91       	ld	r18, Z+
    1408:	29 37       	cpi	r18, 0x79	; 121
    140a:	29 f4       	brne	.+10     	; 0x1416 <Manual_STATE+0x1e>
			power_state[0] |= mask;
    140c:	8c 91       	ld	r24, X
    140e:	89 2b       	or	r24, r25
    1410:	8c 93       	st	X, r24
			mask = mask << 1; // shift left once
    1412:	99 0f       	add	r25, r25
    1414:	05 c0       	rjmp	.+10     	; 0x1420 <Manual_STATE+0x28>
		}
		else{
			new_mask ^= mask;
    1416:	39 27       	eor	r19, r25
			power_state[0] &= new_mask;
    1418:	2c 91       	ld	r18, X
    141a:	23 23       	and	r18, r19
    141c:	2c 93       	st	X, r18
			mask = mask << 1; // shift left once
    141e:	99 0f       	add	r25, r25
	// 8 bit mask to check the state of each position
	uint8_t mask = 0x01;
	uint8_t new_mask = 0xff;
	// keep track of the first index
	
	while(i < 8){
    1420:	e4 17       	cp	r30, r20
    1422:	f5 07       	cpc	r31, r21
    1424:	81 f7       	brne	.-32     	; 0x1406 <Manual_STATE+0xe>
			power_state[0] &= new_mask;
			mask = mask << 1; // shift left once
		}
		i++;
	}
}
    1426:	08 95       	ret

00001428 <pwrMatChange>:
// Author: Chris Thomas
// Date: 2019-03-27
// Description: Converts the power state from array of characters to an unsigned integer.
/*========================================================================================*/

void pwrMatChange(uint8_t height, uint8_t width, uint8_t* newPwrMat){
    1428:	ef 92       	push	r14
    142a:	ff 92       	push	r15
    142c:	1f 93       	push	r17
    142e:	cf 93       	push	r28
    1430:	df 93       	push	r29
    1432:	cd b7       	in	r28, 0x3d	; 61
    1434:	de b7       	in	r29, 0x3e	; 62
    1436:	29 97       	sbiw	r28, 0x09	; 9
    1438:	0f b6       	in	r0, 0x3f	; 63
    143a:	f8 94       	cli
    143c:	de bf       	out	0x3e, r29	; 62
    143e:	0f be       	out	0x3f, r0	; 63
    1440:	cd bf       	out	0x3d, r28	; 61
	// Char array & uint_8 for new power states
	char input[9];
	uint8_t* new_state;
	
	// Enter the new power states into the matrix
	while(i < size){
    1442:	86 9f       	mul	r24, r22
    1444:	80 2d       	mov	r24, r0
    1446:	11 24       	eor	r1, r1
    1448:	88 23       	and	r24, r24
    144a:	69 f0       	breq	.+26     	; 0x1466 <pwrMatChange+0x3e>
    144c:	7a 01       	movw	r14, r20
		UART0_getstring(input);
    144e:	ce 01       	movw	r24, r28
    1450:	01 96       	adiw	r24, 0x01	; 1
    1452:	fb d5       	rcall	.+3062   	; 0x204a <UART0_getstring>
		Manual_STATE(input, new_state);
    1454:	10 e0       	ldi	r17, 0x00	; 0
    1456:	61 2f       	mov	r22, r17
    1458:	70 e0       	ldi	r23, 0x00	; 0
    145a:	ce 01       	movw	r24, r28
    145c:	01 96       	adiw	r24, 0x01	; 1
    145e:	cc df       	rcall	.-104    	; 0x13f8 <Manual_STATE>
		newPwrMat[i] = new_state;
    1460:	f7 01       	movw	r30, r14
    1462:	10 83       	st	Z, r17
    1464:	f4 cf       	rjmp	.-24     	; 0x144e <pwrMatChange+0x26>
	}
	
    1466:	29 96       	adiw	r28, 0x09	; 9
    1468:	0f b6       	in	r0, 0x3f	; 63
    146a:	f8 94       	cli
    146c:	de bf       	out	0x3e, r29	; 62
    146e:	0f be       	out	0x3f, r0	; 63
    1470:	cd bf       	out	0x3d, r28	; 61
    1472:	df 91       	pop	r29
    1474:	cf 91       	pop	r28
    1476:	1f 91       	pop	r17
    1478:	ff 90       	pop	r15
    147a:	ef 90       	pop	r14
    147c:	08 95       	ret

0000147e <EEPROM_Write>:
/*========================================================================================*/

void EEPROM_Write(uint8_t launch_bits, uint16_t address){
	
	// Wait for previous read/write cycle to be finished
	while(EECR & 0x02);
    147e:	f9 99       	sbic	0x1f, 1	; 31
    1480:	fe cf       	rjmp	.-4      	; 0x147e <EEPROM_Write>
	
	// Select EEPROM Address (first address)
	EEAR = address; // first address
    1482:	72 bd       	out	0x22, r23	; 34
    1484:	61 bd       	out	0x21, r22	; 33
	
	// Write to data Register
	EEDR = launch_bits;
    1486:	80 bd       	out	0x20, r24	; 32
	
	// Master Write Enable
	EECR = 0x04;
    1488:	84 e0       	ldi	r24, 0x04	; 4
    148a:	8f bb       	out	0x1f, r24	; 31
	
	// Write Enable
	EECR = 0x02;
    148c:	82 e0       	ldi	r24, 0x02	; 2
    148e:	8f bb       	out	0x1f, r24	; 31
    1490:	08 95       	ret

00001492 <EEPROM_Read>:
/*========================================================================================*/

uint8_t EEPROM_Read(uint16_t address){
	
	// Wait for previous read/write cycle to be finished
	while(EECR & 0x02);
    1492:	f9 99       	sbic	0x1f, 1	; 31
    1494:	fe cf       	rjmp	.-4      	; 0x1492 <EEPROM_Read>
	
	// Select EEPROM Address (first address)
	EEAR = address;
    1496:	92 bd       	out	0x22, r25	; 34
    1498:	81 bd       	out	0x21, r24	; 33
	
	// Read Enable
	EECR = 0x01;
    149a:	81 e0       	ldi	r24, 0x01	; 1
    149c:	8f bb       	out	0x1f, r24	; 31
	
	return EEDR;
    149e:	80 b5       	in	r24, 0x20	; 32
	
}
    14a0:	08 95       	ret

000014a2 <Set_GPIO>:
void Set_GPIO(int gpio_num){
	
	int gpio = 0x01; // initialize gpio selection to bit 0
	
	// PORT H
	if (gpio_num < 7){
    14a2:	87 30       	cpi	r24, 0x07	; 7
    14a4:	91 05       	cpc	r25, r1
    14a6:	7c f4       	brge	.+30     	; 0x14c6 <Set_GPIO+0x24>
		gpio = gpio << gpio_num; // shift to correct bit
		PORTH |= gpio; // set selected pin high
    14a8:	e2 e0       	ldi	r30, 0x02	; 2
    14aa:	f1 e0       	ldi	r31, 0x01	; 1
    14ac:	40 81       	ld	r20, Z
    14ae:	21 e0       	ldi	r18, 0x01	; 1
    14b0:	30 e0       	ldi	r19, 0x00	; 0
    14b2:	b9 01       	movw	r22, r18
    14b4:	02 c0       	rjmp	.+4      	; 0x14ba <Set_GPIO+0x18>
    14b6:	66 0f       	add	r22, r22
    14b8:	77 1f       	adc	r23, r23
    14ba:	8a 95       	dec	r24
    14bc:	e2 f7       	brpl	.-8      	; 0x14b6 <Set_GPIO+0x14>
    14be:	cb 01       	movw	r24, r22
    14c0:	84 2b       	or	r24, r20
    14c2:	80 83       	st	Z, r24
    14c4:	08 95       	ret
	}
	// PORT L
	else if (gpio_num >= 7 && gpio_num < 10){
    14c6:	9c 01       	movw	r18, r24
    14c8:	27 50       	subi	r18, 0x07	; 7
    14ca:	31 09       	sbc	r19, r1
    14cc:	23 30       	cpi	r18, 0x03	; 3
    14ce:	31 05       	cpc	r19, r1
    14d0:	80 f4       	brcc	.+32     	; 0x14f2 <Set_GPIO+0x50>
		gpio = gpio << (gpio_num - 6); // shift to correct bit
		PORTL |= gpio; // set selected pin high
    14d2:	eb e0       	ldi	r30, 0x0B	; 11
    14d4:	f1 e0       	ldi	r31, 0x01	; 1
    14d6:	40 81       	ld	r20, Z
    14d8:	06 97       	sbiw	r24, 0x06	; 6
    14da:	21 e0       	ldi	r18, 0x01	; 1
    14dc:	30 e0       	ldi	r19, 0x00	; 0
    14de:	b9 01       	movw	r22, r18
    14e0:	02 c0       	rjmp	.+4      	; 0x14e6 <Set_GPIO+0x44>
    14e2:	66 0f       	add	r22, r22
    14e4:	77 1f       	adc	r23, r23
    14e6:	8a 95       	dec	r24
    14e8:	e2 f7       	brpl	.-8      	; 0x14e2 <Set_GPIO+0x40>
    14ea:	cb 01       	movw	r24, r22
    14ec:	84 2b       	or	r24, r20
    14ee:	80 83       	st	Z, r24
    14f0:	08 95       	ret
	}
	// PORT A
	else if(gpio_num >= 10 && gpio_num < 14){
    14f2:	9c 01       	movw	r18, r24
    14f4:	2a 50       	subi	r18, 0x0A	; 10
    14f6:	31 09       	sbc	r19, r1
    14f8:	24 30       	cpi	r18, 0x04	; 4
    14fa:	31 05       	cpc	r19, r1
    14fc:	70 f4       	brcc	.+28     	; 0x151a <Set_GPIO+0x78>
		gpio = gpio << (gpio_num - 6); // shift to correct bit
		PORTA |= gpio; // set selected pin high
    14fe:	42 b1       	in	r20, 0x02	; 2
    1500:	06 97       	sbiw	r24, 0x06	; 6
    1502:	21 e0       	ldi	r18, 0x01	; 1
    1504:	30 e0       	ldi	r19, 0x00	; 0
    1506:	b9 01       	movw	r22, r18
    1508:	02 c0       	rjmp	.+4      	; 0x150e <Set_GPIO+0x6c>
    150a:	66 0f       	add	r22, r22
    150c:	77 1f       	adc	r23, r23
    150e:	8a 95       	dec	r24
    1510:	e2 f7       	brpl	.-8      	; 0x150a <Set_GPIO+0x68>
    1512:	cb 01       	movw	r24, r22
    1514:	84 2b       	or	r24, r20
    1516:	82 b9       	out	0x02, r24	; 2
    1518:	08 95       	ret
	}
	// PORT J
	else if(gpio_num >= 14 && gpio_num < 21){
    151a:	9c 01       	movw	r18, r24
    151c:	2e 50       	subi	r18, 0x0E	; 14
    151e:	31 09       	sbc	r19, r1
    1520:	27 30       	cpi	r18, 0x07	; 7
    1522:	31 05       	cpc	r19, r1
    1524:	80 f4       	brcc	.+32     	; 0x1546 <Set_GPIO+0xa4>
		gpio = gpio << (gpio_num - 14); // shift to correct bit
		PORTJ |= gpio; // set selected pin high
    1526:	e5 e0       	ldi	r30, 0x05	; 5
    1528:	f1 e0       	ldi	r31, 0x01	; 1
    152a:	40 81       	ld	r20, Z
    152c:	c9 01       	movw	r24, r18
    152e:	21 e0       	ldi	r18, 0x01	; 1
    1530:	30 e0       	ldi	r19, 0x00	; 0
    1532:	b9 01       	movw	r22, r18
    1534:	02 c0       	rjmp	.+4      	; 0x153a <Set_GPIO+0x98>
    1536:	66 0f       	add	r22, r22
    1538:	77 1f       	adc	r23, r23
    153a:	8a 95       	dec	r24
    153c:	e2 f7       	brpl	.-8      	; 0x1536 <Set_GPIO+0x94>
    153e:	cb 01       	movw	r24, r22
    1540:	84 2b       	or	r24, r20
    1542:	80 83       	st	Z, r24
    1544:	08 95       	ret
	}
	// PORT C
	else if (gpio_num >= 21 && gpio_num < 29){
    1546:	9c 01       	movw	r18, r24
    1548:	25 51       	subi	r18, 0x15	; 21
    154a:	31 09       	sbc	r19, r1
    154c:	28 30       	cpi	r18, 0x08	; 8
    154e:	31 05       	cpc	r19, r1
    1550:	68 f4       	brcc	.+26     	; 0x156c <Set_GPIO+0xca>
		gpio = gpio << (gpio_num - 21); // shift to correct bit
		PORTC |= gpio; // set selected pin high
    1552:	48 b1       	in	r20, 0x08	; 8
    1554:	c9 01       	movw	r24, r18
    1556:	21 e0       	ldi	r18, 0x01	; 1
    1558:	30 e0       	ldi	r19, 0x00	; 0
    155a:	b9 01       	movw	r22, r18
    155c:	02 c0       	rjmp	.+4      	; 0x1562 <Set_GPIO+0xc0>
    155e:	66 0f       	add	r22, r22
    1560:	77 1f       	adc	r23, r23
    1562:	8a 95       	dec	r24
    1564:	e2 f7       	brpl	.-8      	; 0x155e <Set_GPIO+0xbc>
    1566:	cb 01       	movw	r24, r22
    1568:	84 2b       	or	r24, r20
    156a:	88 b9       	out	0x08, r24	; 8
    156c:	08 95       	ret

0000156e <Clear_GPIO>:
	
	int gpio = 0x01; // initialize gpio selection to bit 0
	int gpio_mask = 0xFE; //gpio mask
	
	// PORT H
	if (gpio_num < 7){
    156e:	87 30       	cpi	r24, 0x07	; 7
    1570:	91 05       	cpc	r25, r1
    1572:	84 f4       	brge	.+32     	; 0x1594 <Clear_GPIO+0x26>
		gpio = gpio << gpio_num; // shift to correct bit
		PORTH &= (gpio^gpio_mask); // use mask to clear bit
    1574:	e2 e0       	ldi	r30, 0x02	; 2
    1576:	f1 e0       	ldi	r31, 0x01	; 1
    1578:	90 81       	ld	r25, Z
    157a:	41 e0       	ldi	r20, 0x01	; 1
    157c:	50 e0       	ldi	r21, 0x00	; 0
    157e:	02 c0       	rjmp	.+4      	; 0x1584 <Clear_GPIO+0x16>
    1580:	44 0f       	add	r20, r20
    1582:	55 1f       	adc	r21, r21
    1584:	8a 95       	dec	r24
    1586:	e2 f7       	brpl	.-8      	; 0x1580 <Clear_GPIO+0x12>
    1588:	2e ef       	ldi	r18, 0xFE	; 254
    158a:	84 2f       	mov	r24, r20
    158c:	82 27       	eor	r24, r18
    158e:	89 23       	and	r24, r25
    1590:	80 83       	st	Z, r24
    1592:	08 95       	ret
	}
	// PORT L
	else if (gpio_num >= 7 && gpio_num < 10){
    1594:	9c 01       	movw	r18, r24
    1596:	27 50       	subi	r18, 0x07	; 7
    1598:	31 09       	sbc	r19, r1
    159a:	23 30       	cpi	r18, 0x03	; 3
    159c:	31 05       	cpc	r19, r1
    159e:	90 f4       	brcc	.+36     	; 0x15c4 <Clear_GPIO+0x56>
		gpio = gpio << (gpio_num - 6); // shift to correct bit
		PORTL &= (gpio^gpio_mask); // use mask to clear bit
    15a0:	eb e0       	ldi	r30, 0x0B	; 11
    15a2:	f1 e0       	ldi	r31, 0x01	; 1
    15a4:	20 81       	ld	r18, Z
    15a6:	ac 01       	movw	r20, r24
    15a8:	46 50       	subi	r20, 0x06	; 6
    15aa:	51 09       	sbc	r21, r1
    15ac:	81 e0       	ldi	r24, 0x01	; 1
    15ae:	90 e0       	ldi	r25, 0x00	; 0
    15b0:	02 c0       	rjmp	.+4      	; 0x15b6 <Clear_GPIO+0x48>
    15b2:	88 0f       	add	r24, r24
    15b4:	99 1f       	adc	r25, r25
    15b6:	4a 95       	dec	r20
    15b8:	e2 f7       	brpl	.-8      	; 0x15b2 <Clear_GPIO+0x44>
    15ba:	9e ef       	ldi	r25, 0xFE	; 254
    15bc:	89 27       	eor	r24, r25
    15be:	82 23       	and	r24, r18
    15c0:	80 83       	st	Z, r24
    15c2:	08 95       	ret
	}
	// PORT A
	else if(gpio_num >= 10 && gpio_num < 14){
    15c4:	9c 01       	movw	r18, r24
    15c6:	2a 50       	subi	r18, 0x0A	; 10
    15c8:	31 09       	sbc	r19, r1
    15ca:	24 30       	cpi	r18, 0x04	; 4
    15cc:	31 05       	cpc	r19, r1
    15ce:	80 f4       	brcc	.+32     	; 0x15f0 <Clear_GPIO+0x82>
		gpio = gpio << (gpio_num - 6); // shift to correct bit
		PORTA &= (gpio^gpio_mask); // use mask to clear bit
    15d0:	22 b1       	in	r18, 0x02	; 2
    15d2:	ac 01       	movw	r20, r24
    15d4:	46 50       	subi	r20, 0x06	; 6
    15d6:	51 09       	sbc	r21, r1
    15d8:	81 e0       	ldi	r24, 0x01	; 1
    15da:	90 e0       	ldi	r25, 0x00	; 0
    15dc:	02 c0       	rjmp	.+4      	; 0x15e2 <Clear_GPIO+0x74>
    15de:	88 0f       	add	r24, r24
    15e0:	99 1f       	adc	r25, r25
    15e2:	4a 95       	dec	r20
    15e4:	e2 f7       	brpl	.-8      	; 0x15de <Clear_GPIO+0x70>
    15e6:	9e ef       	ldi	r25, 0xFE	; 254
    15e8:	89 27       	eor	r24, r25
    15ea:	82 23       	and	r24, r18
    15ec:	82 b9       	out	0x02, r24	; 2
    15ee:	08 95       	ret
	}
	// PORT J
	else if(gpio_num >= 14 && gpio_num < 21){
    15f0:	9c 01       	movw	r18, r24
    15f2:	2e 50       	subi	r18, 0x0E	; 14
    15f4:	31 09       	sbc	r19, r1
    15f6:	27 30       	cpi	r18, 0x07	; 7
    15f8:	31 05       	cpc	r19, r1
    15fa:	90 f4       	brcc	.+36     	; 0x1620 <Clear_GPIO+0xb2>
		gpio = gpio << (gpio_num - 14); // shift to correct bit
		PORTJ &= (gpio^gpio_mask); // use mask to clear bit
    15fc:	e5 e0       	ldi	r30, 0x05	; 5
    15fe:	f1 e0       	ldi	r31, 0x01	; 1
    1600:	20 81       	ld	r18, Z
    1602:	ac 01       	movw	r20, r24
    1604:	4e 50       	subi	r20, 0x0E	; 14
    1606:	51 09       	sbc	r21, r1
    1608:	81 e0       	ldi	r24, 0x01	; 1
    160a:	90 e0       	ldi	r25, 0x00	; 0
    160c:	02 c0       	rjmp	.+4      	; 0x1612 <Clear_GPIO+0xa4>
    160e:	88 0f       	add	r24, r24
    1610:	99 1f       	adc	r25, r25
    1612:	4a 95       	dec	r20
    1614:	e2 f7       	brpl	.-8      	; 0x160e <Clear_GPIO+0xa0>
    1616:	9e ef       	ldi	r25, 0xFE	; 254
    1618:	89 27       	eor	r24, r25
    161a:	82 23       	and	r24, r18
    161c:	80 83       	st	Z, r24
    161e:	08 95       	ret
	}
	// PORT C
	else if (gpio_num >= 21 && gpio_num < 29){
    1620:	9c 01       	movw	r18, r24
    1622:	25 51       	subi	r18, 0x15	; 21
    1624:	31 09       	sbc	r19, r1
    1626:	28 30       	cpi	r18, 0x08	; 8
    1628:	31 05       	cpc	r19, r1
    162a:	78 f4       	brcc	.+30     	; 0x164a <Clear_GPIO+0xdc>
		gpio = gpio << (gpio_num - 21); // shift to correct bit
		PORTC &= (gpio^gpio_mask); // use mask to clear bit
    162c:	28 b1       	in	r18, 0x08	; 8
    162e:	45 97       	sbiw	r24, 0x15	; 21
    1630:	41 e0       	ldi	r20, 0x01	; 1
    1632:	50 e0       	ldi	r21, 0x00	; 0
    1634:	ba 01       	movw	r22, r20
    1636:	02 c0       	rjmp	.+4      	; 0x163c <Clear_GPIO+0xce>
    1638:	66 0f       	add	r22, r22
    163a:	77 1f       	adc	r23, r23
    163c:	8a 95       	dec	r24
    163e:	e2 f7       	brpl	.-8      	; 0x1638 <Clear_GPIO+0xca>
    1640:	cb 01       	movw	r24, r22
    1642:	9e ef       	ldi	r25, 0xFE	; 254
    1644:	89 27       	eor	r24, r25
    1646:	82 23       	and	r24, r18
    1648:	88 b9       	out	0x08, r24	; 8
    164a:	08 95       	ret

0000164c <Update_TELEM>:
// Author: Chris Thomas
// Date: 2019-02-03
// Description: Updates telemetry information for OBC. Voltage, current and temperature.
/*========================================================================================*/

void Update_TELEM(double* telem, uint8_t power_state){
    164c:	1f 93       	push	r17
    164e:	cf 93       	push	r28
    1650:	df 93       	push	r29
    1652:	ec 01       	movw	r28, r24
    1654:	16 2f       	mov	r17, r22
	
	// Set 5V rail for readings (needed for current sensors)
	
	// RE-ENABLE FOR DEMOOOOOOOOOOO//////
	Enable_5V();
    1656:	57 db       	rcall	.-2386   	; 0xd06 <Enable_5V>
	
	//Enable_5V();
	// ^^^^^^^^^^^
	
	// Ammeter measurements
	telem[0] = Amp_ADC(2); // 3V3-1 rail current
    1658:	82 e0       	ldi	r24, 0x02	; 2
    165a:	90 e0       	ldi	r25, 0x00	; 0
    165c:	0e 94 a1 01 	call	0x342	; 0x342 <Amp_ADC>
    1660:	68 83       	st	Y, r22
    1662:	79 83       	std	Y+1, r23	; 0x01
    1664:	8a 83       	std	Y+2, r24	; 0x02
    1666:	9b 83       	std	Y+3, r25	; 0x03
	telem[1] = Amp_ADC(3); // 3V3-2 rail current
    1668:	83 e0       	ldi	r24, 0x03	; 3
    166a:	90 e0       	ldi	r25, 0x00	; 0
    166c:	0e 94 a1 01 	call	0x342	; 0x342 <Amp_ADC>
    1670:	6c 83       	std	Y+4, r22	; 0x04
    1672:	7d 83       	std	Y+5, r23	; 0x05
    1674:	8e 83       	std	Y+6, r24	; 0x06
    1676:	9f 83       	std	Y+7, r25	; 0x07
	telem[2] = Amp_ADC(1); // 5V rail current
    1678:	81 e0       	ldi	r24, 0x01	; 1
    167a:	90 e0       	ldi	r25, 0x00	; 0
    167c:	0e 94 a1 01 	call	0x342	; 0x342 <Amp_ADC>
    1680:	68 87       	std	Y+8, r22	; 0x08
    1682:	79 87       	std	Y+9, r23	; 0x09
    1684:	8a 87       	std	Y+10, r24	; 0x0a
    1686:	9b 87       	std	Y+11, r25	; 0x0b
	telem[3] = Amp_ADC(0); // 8V rail current
    1688:	80 e0       	ldi	r24, 0x00	; 0
    168a:	90 e0       	ldi	r25, 0x00	; 0
    168c:	0e 94 a1 01 	call	0x342	; 0x342 <Amp_ADC>
    1690:	6c 87       	std	Y+12, r22	; 0x0c
    1692:	7d 87       	std	Y+13, r23	; 0x0d
    1694:	8e 87       	std	Y+14, r24	; 0x0e
    1696:	9f 87       	std	Y+15, r25	; 0x0f
	telem[4] = Amp_ADC(5); // VBatt rail current
    1698:	85 e0       	ldi	r24, 0x05	; 5
    169a:	90 e0       	ldi	r25, 0x00	; 0
    169c:	0e 94 a1 01 	call	0x342	; 0x342 <Amp_ADC>
    16a0:	68 8b       	std	Y+16, r22	; 0x10
    16a2:	79 8b       	std	Y+17, r23	; 0x11
    16a4:	8a 8b       	std	Y+18, r24	; 0x12
    16a6:	9b 8b       	std	Y+19, r25	; 0x13
	telem[5] = Amp_ADC(4); // Solar panel current
    16a8:	84 e0       	ldi	r24, 0x04	; 4
    16aa:	90 e0       	ldi	r25, 0x00	; 0
    16ac:	0e 94 a1 01 	call	0x342	; 0x342 <Amp_ADC>
    16b0:	6c 8b       	std	Y+20, r22	; 0x14
    16b2:	7d 8b       	std	Y+21, r23	; 0x15
    16b4:	8e 8b       	std	Y+22, r24	; 0x16
    16b6:	9f 8b       	std	Y+23, r25	; 0x17
	
	// Voltmeter measurements
	telem[6] = Volt_ADC(0); // 3V3-1 rail voltage
    16b8:	80 e0       	ldi	r24, 0x00	; 0
    16ba:	90 e0       	ldi	r25, 0x00	; 0
    16bc:	0e 94 38 01 	call	0x270	; 0x270 <Volt_ADC>
    16c0:	68 8f       	std	Y+24, r22	; 0x18
    16c2:	79 8f       	std	Y+25, r23	; 0x19
    16c4:	8a 8f       	std	Y+26, r24	; 0x1a
    16c6:	9b 8f       	std	Y+27, r25	; 0x1b
	telem[7] = Volt_ADC(1); // 3V3-2 rail voltage
    16c8:	81 e0       	ldi	r24, 0x01	; 1
    16ca:	90 e0       	ldi	r25, 0x00	; 0
    16cc:	0e 94 38 01 	call	0x270	; 0x270 <Volt_ADC>
    16d0:	6c 8f       	std	Y+28, r22	; 0x1c
    16d2:	7d 8f       	std	Y+29, r23	; 0x1d
    16d4:	8e 8f       	std	Y+30, r24	; 0x1e
    16d6:	9f 8f       	std	Y+31, r25	; 0x1f
	telem[8] = Volt_ADC(2); // 5V rail voltage
    16d8:	82 e0       	ldi	r24, 0x02	; 2
    16da:	90 e0       	ldi	r25, 0x00	; 0
    16dc:	0e 94 38 01 	call	0x270	; 0x270 <Volt_ADC>
    16e0:	68 a3       	std	Y+32, r22	; 0x20
    16e2:	79 a3       	std	Y+33, r23	; 0x21
    16e4:	8a a3       	std	Y+34, r24	; 0x22
    16e6:	9b a3       	std	Y+35, r25	; 0x23
	telem[9] = Volt_ADC(3); // 8V-1 rail voltage
    16e8:	83 e0       	ldi	r24, 0x03	; 3
    16ea:	90 e0       	ldi	r25, 0x00	; 0
    16ec:	0e 94 38 01 	call	0x270	; 0x270 <Volt_ADC>
    16f0:	6c a3       	std	Y+36, r22	; 0x24
    16f2:	7d a3       	std	Y+37, r23	; 0x25
    16f4:	8e a3       	std	Y+38, r24	; 0x26
    16f6:	9f a3       	std	Y+39, r25	; 0x27
	telem[10] = Volt_ADC(4); // VBatt rail voltage
    16f8:	84 e0       	ldi	r24, 0x04	; 4
    16fa:	90 e0       	ldi	r25, 0x00	; 0
    16fc:	0e 94 38 01 	call	0x270	; 0x270 <Volt_ADC>
    1700:	68 a7       	std	Y+40, r22	; 0x28
    1702:	79 a7       	std	Y+41, r23	; 0x29
    1704:	8a a7       	std	Y+42, r24	; 0x2a
    1706:	9b a7       	std	Y+43, r25	; 0x2b
	telem[11] = Temp_ADC(); // Battery temperature
    1708:	0e 94 64 02 	call	0x4c8	; 0x4c8 <Temp_ADC>
    170c:	6c a7       	std	Y+44, r22	; 0x2c
    170e:	7d a7       	std	Y+45, r23	; 0x2d
    1710:	8e a7       	std	Y+46, r24	; 0x2e
    1712:	9f a7       	std	Y+47, r25	; 0x2f
	
	// Disable 5V rail
	Disable_5V(power_state);	
    1714:	81 2f       	mov	r24, r17
    1716:	2a db       	rcall	.-2476   	; 0xd6c <Disable_5V>
}
    1718:	df 91       	pop	r29
    171a:	cf 91       	pop	r28
    171c:	1f 91       	pop	r17
    171e:	08 95       	ret

00001720 <Update_OBC>:
// Author: Chris Thomas
// Date: 2019-02-03
// Description: Updates the telemetry information to the OBC.
/*========================================================================================*/

void Update_OBC(double* telem, char* power, uint8_t state_num, uint8_t mode){
    1720:	2f 92       	push	r2
    1722:	3f 92       	push	r3
    1724:	4f 92       	push	r4
    1726:	5f 92       	push	r5
    1728:	6f 92       	push	r6
    172a:	7f 92       	push	r7
    172c:	8f 92       	push	r8
    172e:	9f 92       	push	r9
    1730:	af 92       	push	r10
    1732:	bf 92       	push	r11
    1734:	cf 92       	push	r12
    1736:	df 92       	push	r13
    1738:	ef 92       	push	r14
    173a:	ff 92       	push	r15
    173c:	0f 93       	push	r16
    173e:	1f 93       	push	r17
    1740:	cf 93       	push	r28
    1742:	df 93       	push	r29
    1744:	cd b7       	in	r28, 0x3d	; 61
    1746:	de b7       	in	r29, 0x3e	; 62
    1748:	c3 5b       	subi	r28, 0xB3	; 179
    174a:	d2 40       	sbci	r29, 0x02	; 2
    174c:	0f b6       	in	r0, 0x3f	; 63
    174e:	f8 94       	cli
    1750:	de bf       	out	0x3e, r29	; 62
    1752:	0f be       	out	0x3f, r0	; 63
    1754:	cd bf       	out	0x3d, r28	; 61
    1756:	c0 55       	subi	r28, 0x50	; 80
    1758:	dd 4f       	sbci	r29, 0xFD	; 253
    175a:	99 83       	std	Y+1, r25	; 0x01
    175c:	88 83       	st	Y, r24
    175e:	c0 5b       	subi	r28, 0xB0	; 176
    1760:	d2 40       	sbci	r29, 0x02	; 2
    1762:	c6 55       	subi	r28, 0x56	; 86
    1764:	dd 4f       	sbci	r29, 0xFD	; 253
    1766:	79 83       	std	Y+1, r23	; 0x01
    1768:	68 83       	st	Y, r22
    176a:	ca 5a       	subi	r28, 0xAA	; 170
    176c:	d2 40       	sbci	r29, 0x02	; 2
    176e:	c4 55       	subi	r28, 0x54	; 84
    1770:	dd 4f       	sbci	r29, 0xFD	; 253
    1772:	48 83       	st	Y, r20
    1774:	cc 5a       	subi	r28, 0xAC	; 172
    1776:	d2 40       	sbci	r29, 0x02	; 2
    1778:	c3 55       	subi	r28, 0x53	; 83
    177a:	dd 4f       	sbci	r29, 0xFD	; 253
    177c:	28 83       	st	Y, r18
    177e:	cd 5a       	subi	r28, 0xAD	; 173
    1780:	d2 40       	sbci	r29, 0x02	; 2
	// Prints a border to the Putty
	char stars[100] = "/********************************************************************CubeSat EPS"; // left side of border
    1782:	81 e5       	ldi	r24, 0x51	; 81
    1784:	e9 e1       	ldi	r30, 0x19	; 25
    1786:	f2 e0       	ldi	r31, 0x02	; 2
    1788:	de 01       	movw	r26, r28
    178a:	11 96       	adiw	r26, 0x01	; 1
    178c:	01 90       	ld	r0, Z+
    178e:	0d 92       	st	X+, r0
    1790:	8a 95       	dec	r24
    1792:	e1 f7       	brne	.-8      	; 0x178c <Update_OBC+0x6c>
    1794:	fe 01       	movw	r30, r28
    1796:	ee 5a       	subi	r30, 0xAE	; 174
    1798:	ff 4f       	sbci	r31, 0xFF	; 255
    179a:	83 e1       	ldi	r24, 0x13	; 19
    179c:	df 01       	movw	r26, r30
    179e:	1d 92       	st	X+, r1
    17a0:	8a 95       	dec	r24
    17a2:	e9 f7       	brne	.-6      	; 0x179e <Update_OBC+0x7e>
	char stars2[100] = "********************************************************************/"; // right side of border
    17a4:	86 e4       	ldi	r24, 0x46	; 70
    17a6:	ed e7       	ldi	r30, 0x7D	; 125
    17a8:	f2 e0       	ldi	r31, 0x02	; 2
    17aa:	de 01       	movw	r26, r28
    17ac:	ab 59       	subi	r26, 0x9B	; 155
    17ae:	bf 4f       	sbci	r27, 0xFF	; 255
    17b0:	01 90       	ld	r0, Z+
    17b2:	0d 92       	st	X+, r0
    17b4:	8a 95       	dec	r24
    17b6:	e1 f7       	brne	.-8      	; 0x17b0 <Update_OBC+0x90>
    17b8:	fe 01       	movw	r30, r28
    17ba:	e5 55       	subi	r30, 0x55	; 85
    17bc:	ff 4f       	sbci	r31, 0xFF	; 255
    17be:	8e e1       	ldi	r24, 0x1E	; 30
    17c0:	df 01       	movw	r26, r30
    17c2:	1d 92       	st	X+, r1
    17c4:	8a 95       	dec	r24
    17c6:	e9 f7       	brne	.-6      	; 0x17c2 <Update_OBC+0xa2>
	char* border; // complete border top and bottom
	border = strcat(stars,stars2);
    17c8:	be 01       	movw	r22, r28
    17ca:	6b 59       	subi	r22, 0x9B	; 155
    17cc:	7f 4f       	sbci	r23, 0xFF	; 255
    17ce:	ce 01       	movw	r24, r28
    17d0:	01 96       	adiw	r24, 0x01	; 1
    17d2:	0e 94 24 18 	call	0x3048	; 0x3048 <strcat>
	
	// Print border
	UART0_putstring(border);
    17d6:	2b d4       	rcall	.+2134   	; 0x202e <UART0_putstring>
	
	// Spacing
	UART0_putchar('\n');
    17d8:	8a e0       	ldi	r24, 0x0A	; 10
    17da:	19 d4       	rcall	.+2098   	; 0x200e <UART0_putchar>
	UART0_putchar('\n');
    17dc:	8a e0       	ldi	r24, 0x0A	; 10
    17de:	17 d4       	rcall	.+2094   	; 0x200e <UART0_putchar>
	UART0_putchar('\r');
    17e0:	8d e0       	ldi	r24, 0x0D	; 13
    17e2:	15 d4       	rcall	.+2090   	; 0x200e <UART0_putchar>
    17e4:	80 ea       	ldi	r24, 0xA0	; 160
	
	// String Initializations
	char loads[8][20] = {"Heater 1 (VBatt)", "Heater 2 (5V)", "Heater 3 (8V)", 
    17e6:	e1 ee       	ldi	r30, 0xE1	; 225
    17e8:	f2 e0       	ldi	r31, 0x02	; 2
    17ea:	de 01       	movw	r26, r28
    17ec:	a7 53       	subi	r26, 0x37	; 55
    17ee:	bf 4f       	sbci	r27, 0xFF	; 255
    17f0:	01 90       	ld	r0, Z+
    17f2:	0d 92       	st	X+, r0
    17f4:	8a 95       	dec	r24
    17f6:	e1 f7       	brne	.-8      	; 0x17f0 <Update_OBC+0xd0>
    17f8:	80 ef       	ldi	r24, 0xF0	; 240
						 "OBC", "Imager", "GRIPS", "S-Band", "UHF"};
						 
	char sensors[12][20] = {"3V3-1 Rail [A]", "3V3-2 Rail [A]", "5V Rail [A]", 
    17fa:	e1 e8       	ldi	r30, 0x81	; 129
    17fc:	f3 e0       	ldi	r31, 0x03	; 3
    17fe:	de 01       	movw	r26, r28
    1800:	a7 59       	subi	r26, 0x97	; 151
    1802:	be 4f       	sbci	r27, 0xFE	; 254
    1804:	01 90       	ld	r0, Z+
    1806:	0d 92       	st	X+, r0
    1808:	8a 95       	dec	r24
    180a:	e1 f7       	brne	.-8      	; 0x1804 <Update_OBC+0xe4>
    180c:	82 e4       	ldi	r24, 0x42	; 66
							"8V Rail [A]", "Battery Rail [A]", "Solar Input [A]",
							"3V3-1 Rail [V]", "3V3-2 Rail [V]", "5V Rail [V]", "8V Rail [V]",
							"Battery Rail [V]", "Temperature [C]"};
							
	char sections[3][22] = {"CURRENT", "VOLTAGE", "LOADS"};
    180e:	e1 e7       	ldi	r30, 0x71	; 113
    1810:	f4 e0       	ldi	r31, 0x04	; 4
    1812:	de 01       	movw	r26, r28
    1814:	a7 5a       	subi	r26, 0xA7	; 167
    1816:	bd 4f       	sbci	r27, 0xFD	; 253
    1818:	01 90       	ld	r0, Z+
    181a:	0d 92       	st	X+, r0
    181c:	8a 95       	dec	r24
    181e:	e1 f7       	brne	.-8      	; 0x1818 <Update_OBC+0xf8>
    1820:	fe 01       	movw	r30, r28
    1822:	e7 59       	subi	r30, 0x97	; 151
    1824:	fe 4f       	sbci	r31, 0xFE	; 254
    1826:	7f 01       	movw	r14, r30
    1828:	aa 24       	eor	r10, r10
    182a:	a3 94       	inc	r10
    182c:	b1 2c       	mov	r11, r1
    182e:	c1 2c       	mov	r12, r1
    1830:	d1 2c       	mov	r13, r1
    1832:	21 2c       	mov	r2, r1
	int spaces2 = 0; // for inner loops
	int l_incr = 0; // load increment (8)
	int s_incr = 0; // sensor increment (12)
	int i = 0; // increment for telemetry (0 to 6, then 6 to 12)
	char measure[10]; // used for sprintf
	int section_incr = 0; // used for the section titles
    1834:	31 2c       	mov	r3, r1
    1836:	61 2c       	mov	r6, r1
	int spacing = 20;
	int spaces = 0;
	int spaces2 = 0; // for inner loops
	int l_incr = 0; // load increment (8)
	int s_incr = 0; // sensor increment (12)
	int i = 0; // increment for telemetry (0 to 6, then 6 to 12)
    1838:	71 2c       	mov	r7, r1
    183a:	c2 55       	subi	r28, 0x52	; 82
	char sections[3][22] = {"CURRENT", "VOLTAGE", "LOADS"};
							
	// Doing to the spacing correctly						
	int spacing = 20;
	int spaces = 0;
	int spaces2 = 0; // for inner loops
    183c:	dd 4f       	sbci	r29, 0xFD	; 253
    183e:	19 82       	std	Y+1, r1	; 0x01
    1840:	18 82       	st	Y, r1
    1842:	ce 5a       	subi	r28, 0xAE	; 174
    1844:	d2 40       	sbci	r29, 0x02	; 2
    1846:	00 e0       	ldi	r16, 0x00	; 0
							
	char sections[3][22] = {"CURRENT", "VOLTAGE", "LOADS"};
							
	// Doing to the spacing correctly						
	int spacing = 20;
	int spaces = 0;
    1848:	10 e0       	ldi	r17, 0x00	; 0
    184a:	0f 2e       	mov	r0, r31
			UART0_putchar(' ');
			spaces--;
		}
		UART0_putstring(sensors[s_incr]);
		s_incr++;
		spaces = spacing - strlen(sensors[s_incr - 1]);
    184c:	f4 e1       	ldi	r31, 0x14	; 20
    184e:	8f 2e       	mov	r8, r31
    1850:	91 2c       	mov	r9, r1
    1852:	f0 2d       	mov	r31, r0
    1854:	2e 01       	movw	r4, r28
			while(i < s_incr){
				while(spaces2){
					UART0_putchar(' ');
					spaces2--;
				}
				sprintf(measure,"%.3f",telem[i]);
    1856:	f5 e6       	ldi	r31, 0x65	; 101
    1858:	4f 1a       	sub	r4, r31
    185a:	fd ef       	ldi	r31, 0xFD	; 253
    185c:	5f 0a       	sbc	r5, r31
    185e:	ce 54       	subi	r28, 0x4E	; 78
    1860:	dd 4f       	sbci	r29, 0xFD	; 253
    1862:	48 82       	st	Y, r4
    1864:	c2 5b       	subi	r28, 0xB2	; 178
    1866:	d2 40       	sbci	r29, 0x02	; 2
    1868:	cd 54       	subi	r28, 0x4D	; 77
    186a:	dd 4f       	sbci	r29, 0xFD	; 253
    186c:	58 82       	st	Y, r5
    186e:	c3 5b       	subi	r28, 0xB3	; 179
    1870:	d2 40       	sbci	r29, 0x02	; 2
    1872:	c6 01       	movw	r24, r12
    1874:	26 e0       	ldi	r18, 0x06	; 6
	// Print the telemetry information
	while (s_incr < 12){
		
		// Switch lines after 6 titles are written and write
		// data on the next line
		if (s_incr == 6){
    1876:	c2 16       	cp	r12, r18
    1878:	d1 04       	cpc	r13, r1
    187a:	09 f0       	breq	.+2      	; 0x187e <Update_OBC+0x15e>
    187c:	db c1       	rjmp	.+950    	; 0x1c34 <Update_OBC+0x514>
			UART0_putchar('\n');
    187e:	8a e0       	ldi	r24, 0x0A	; 10
    1880:	c6 d3       	rcall	.+1932   	; 0x200e <UART0_putchar>
    1882:	8d e0       	ldi	r24, 0x0D	; 13
			UART0_putchar('\r');
    1884:	c4 d3       	rcall	.+1928   	; 0x200e <UART0_putchar>
    1886:	36 e0       	ldi	r19, 0x06	; 6
    1888:	63 16       	cp	r6, r19
			// print values
			while(i < s_incr){
    188a:	71 04       	cpc	r7, r1
    188c:	0c f0       	brlt	.+2      	; 0x1890 <Update_OBC+0x170>
    188e:	63 c0       	rjmp	.+198    	; 0x1956 <Update_OBC+0x236>
    1890:	83 01       	movw	r16, r6
    1892:	00 0f       	add	r16, r16
    1894:	11 1f       	adc	r17, r17
    1896:	00 0f       	add	r16, r16
    1898:	11 1f       	adc	r17, r17
    189a:	c0 55       	subi	r28, 0x50	; 80
    189c:	dd 4f       	sbci	r29, 0xFD	; 253
    189e:	88 81       	ld	r24, Y
    18a0:	99 81       	ldd	r25, Y+1	; 0x01
    18a2:	c0 5b       	subi	r28, 0xB0	; 176
    18a4:	d2 40       	sbci	r29, 0x02	; 2
    18a6:	08 0f       	add	r16, r24
    18a8:	19 1f       	adc	r17, r25
    18aa:	4b c0       	rjmp	.+150    	; 0x1942 <Update_OBC+0x222>
    18ac:	80 e2       	ldi	r24, 0x20	; 32
				while(spaces2){
					UART0_putchar(' ');
    18ae:	af d3       	rcall	.+1886   	; 0x200e <UART0_putchar>
    18b0:	c2 55       	subi	r28, 0x52	; 82
    18b2:	dd 4f       	sbci	r29, 0xFD	; 253
					spaces2--;
    18b4:	a8 81       	ld	r26, Y
    18b6:	b9 81       	ldd	r27, Y+1	; 0x01
    18b8:	ce 5a       	subi	r28, 0xAE	; 174
    18ba:	d2 40       	sbci	r29, 0x02	; 2
    18bc:	11 97       	sbiw	r26, 0x01	; 1
    18be:	c2 55       	subi	r28, 0x52	; 82
    18c0:	dd 4f       	sbci	r29, 0xFD	; 253
    18c2:	b9 83       	std	Y+1, r27	; 0x01
    18c4:	a8 83       	st	Y, r26
    18c6:	ce 5a       	subi	r28, 0xAE	; 174
    18c8:	d2 40       	sbci	r29, 0x02	; 2
    18ca:	ab 2b       	or	r26, r27
    18cc:	79 f7       	brne	.-34     	; 0x18ac <Update_OBC+0x18c>
		if (s_incr == 6){
			UART0_putchar('\n');
			UART0_putchar('\r');
			// print values
			while(i < s_incr){
				while(spaces2){
    18ce:	f8 01       	movw	r30, r16
    18d0:	80 81       	ld	r24, Z
					UART0_putchar(' ');
					spaces2--;
				}
				sprintf(measure,"%.3f",telem[i]);
    18d2:	91 81       	ldd	r25, Z+1	; 0x01
    18d4:	22 81       	ldd	r18, Z+2	; 0x02
    18d6:	33 81       	ldd	r19, Z+3	; 0x03
    18d8:	0c 5f       	subi	r16, 0xFC	; 252
    18da:	1f 4f       	sbci	r17, 0xFF	; 255
    18dc:	3f 93       	push	r19
    18de:	2f 93       	push	r18
    18e0:	9f 93       	push	r25
    18e2:	8f 93       	push	r24
    18e4:	23 e7       	ldi	r18, 0x73	; 115
    18e6:	36 e0       	ldi	r19, 0x06	; 6
    18e8:	3f 93       	push	r19
    18ea:	2f 93       	push	r18
    18ec:	5f 92       	push	r5
    18ee:	4f 92       	push	r4
    18f0:	0e 94 7f 18 	call	0x30fe	; 0x30fe <sprintf>
    18f4:	ce 54       	subi	r28, 0x4E	; 78
    18f6:	dd 4f       	sbci	r29, 0xFD	; 253
				UART0_putstring(measure);
    18f8:	88 81       	ld	r24, Y
    18fa:	c2 5b       	subi	r28, 0xB2	; 178
    18fc:	d2 40       	sbci	r29, 0x02	; 2
    18fe:	cd 54       	subi	r28, 0x4D	; 77
    1900:	dd 4f       	sbci	r29, 0xFD	; 253
    1902:	98 81       	ld	r25, Y
    1904:	c3 5b       	subi	r28, 0xB3	; 179
    1906:	d2 40       	sbci	r29, 0x02	; 2
    1908:	92 d3       	rcall	.+1828   	; 0x202e <UART0_putstring>
    190a:	9f ef       	ldi	r25, 0xFF	; 255
    190c:	69 1a       	sub	r6, r25
				i++;
    190e:	79 0a       	sbc	r7, r25
    1910:	f2 01       	movw	r30, r4
    1912:	01 90       	ld	r0, Z+
				spaces2 = spacing - strlen(measure);
    1914:	00 20       	and	r0, r0
    1916:	e9 f7       	brne	.-6      	; 0x1912 <Update_OBC+0x1f2>
    1918:	31 97       	sbiw	r30, 0x01	; 1
    191a:	e4 19       	sub	r30, r4
    191c:	f5 09       	sbc	r31, r5
    191e:	d4 01       	movw	r26, r8
    1920:	ae 1b       	sub	r26, r30
    1922:	bf 0b       	sbc	r27, r31
    1924:	c2 55       	subi	r28, 0x52	; 82
    1926:	dd 4f       	sbci	r29, 0xFD	; 253
    1928:	b9 83       	std	Y+1, r27	; 0x01
    192a:	a8 83       	st	Y, r26
    192c:	ce 5a       	subi	r28, 0xAE	; 174
    192e:	d2 40       	sbci	r29, 0x02	; 2
    1930:	0f b6       	in	r0, 0x3f	; 63
    1932:	f8 94       	cli
		// data on the next line
		if (s_incr == 6){
			UART0_putchar('\n');
			UART0_putchar('\r');
			// print values
			while(i < s_incr){
    1934:	de bf       	out	0x3e, r29	; 62
    1936:	0f be       	out	0x3f, r0	; 63
    1938:	cd bf       	out	0x3d, r28	; 61
    193a:	f6 e0       	ldi	r31, 0x06	; 6
    193c:	6f 16       	cp	r6, r31
    193e:	71 04       	cpc	r7, r1
    1940:	51 f0       	breq	.+20     	; 0x1956 <Update_OBC+0x236>
    1942:	c2 55       	subi	r28, 0x52	; 82
    1944:	dd 4f       	sbci	r29, 0xFD	; 253
				while(spaces2){
    1946:	28 81       	ld	r18, Y
    1948:	39 81       	ldd	r19, Y+1	; 0x01
    194a:	ce 5a       	subi	r28, 0xAE	; 174
    194c:	d2 40       	sbci	r29, 0x02	; 2
    194e:	23 2b       	or	r18, r19
    1950:	09 f0       	breq	.+2      	; 0x1954 <Update_OBC+0x234>
    1952:	ac cf       	rjmp	.-168    	; 0x18ac <Update_OBC+0x18c>
				sprintf(measure,"%.3f",telem[i]);
				UART0_putstring(measure);
				i++;
				spaces2 = spacing - strlen(measure);
			}
			UART0_putchar('\n');
    1954:	bc cf       	rjmp	.-136    	; 0x18ce <Update_OBC+0x1ae>
    1956:	8a e0       	ldi	r24, 0x0A	; 10
    1958:	5a d3       	rcall	.+1716   	; 0x200e <UART0_putchar>
			UART0_putchar('\n');
    195a:	8a e0       	ldi	r24, 0x0A	; 10
    195c:	58 d3       	rcall	.+1712   	; 0x200e <UART0_putchar>
    195e:	8d e0       	ldi	r24, 0x0D	; 13
			UART0_putchar('\r');
    1960:	56 d3       	rcall	.+1708   	; 0x200e <UART0_putchar>
    1962:	36 e1       	ldi	r19, 0x16	; 22
    1964:	32 9d       	mul	r19, r2
			UART0_putchar('\n');
			UART0_putchar('\r');
			section_incr++;
		}
		else if(s_incr == 6){
			UART0_putstring(sections[section_incr]);
    1966:	c0 01       	movw	r24, r0
    1968:	33 9d       	mul	r19, r3
    196a:	90 0d       	add	r25, r0
    196c:	11 24       	eor	r1, r1
    196e:	a9 e5       	ldi	r26, 0x59	; 89
    1970:	b2 e0       	ldi	r27, 0x02	; 2
    1972:	ac 0f       	add	r26, r28
    1974:	bd 1f       	adc	r27, r29
    1976:	8a 0f       	add	r24, r26
    1978:	9b 1f       	adc	r25, r27
			UART0_putchar('\n');
    197a:	59 d3       	rcall	.+1714   	; 0x202e <UART0_putstring>
    197c:	8a e0       	ldi	r24, 0x0A	; 10
    197e:	47 d3       	rcall	.+1678   	; 0x200e <UART0_putchar>
			UART0_putchar('\n');
    1980:	8a e0       	ldi	r24, 0x0A	; 10
    1982:	45 d3       	rcall	.+1674   	; 0x200e <UART0_putchar>
    1984:	8d e0       	ldi	r24, 0x0D	; 13
			UART0_putchar('\r');
    1986:	43 d3       	rcall	.+1670   	; 0x200e <UART0_putchar>
    1988:	bf ef       	ldi	r27, 0xFF	; 255
    198a:	2b 1a       	sub	r2, r27
			section_incr++;
    198c:	3b 0a       	sbc	r3, r27
    198e:	56 c1       	rjmp	.+684    	; 0x1c3c <Update_OBC+0x51c>
    1990:	e6 e1       	ldi	r30, 0x16	; 22
		}
		
		// Put the titles in normally
		// re-initialize the spaces
		if(s_incr == 0){
			UART0_putstring(sections[section_incr]);
    1992:	e2 9d       	mul	r30, r2
    1994:	c0 01       	movw	r24, r0
    1996:	e3 9d       	mul	r30, r3
    1998:	90 0d       	add	r25, r0
    199a:	11 24       	eor	r1, r1
    199c:	29 e5       	ldi	r18, 0x59	; 89
    199e:	32 e0       	ldi	r19, 0x02	; 2
    19a0:	2c 0f       	add	r18, r28
    19a2:	3d 1f       	adc	r19, r29
    19a4:	82 0f       	add	r24, r18
    19a6:	93 1f       	adc	r25, r19
    19a8:	42 d3       	rcall	.+1668   	; 0x202e <UART0_putstring>
			UART0_putchar('\n');
    19aa:	8a e0       	ldi	r24, 0x0A	; 10
    19ac:	30 d3       	rcall	.+1632   	; 0x200e <UART0_putchar>
			UART0_putchar('\n');
    19ae:	8a e0       	ldi	r24, 0x0A	; 10
    19b0:	2e d3       	rcall	.+1628   	; 0x200e <UART0_putchar>
    19b2:	8d e0       	ldi	r24, 0x0D	; 13
			UART0_putchar('\r');
    19b4:	2c d3       	rcall	.+1624   	; 0x200e <UART0_putchar>
    19b6:	3f ef       	ldi	r19, 0xFF	; 255
			section_incr++;
    19b8:	23 1a       	sub	r2, r19
    19ba:	33 0a       	sbc	r3, r19
    19bc:	01 15       	cp	r16, r1
			UART0_putchar('\n');
			UART0_putchar('\n');
			UART0_putchar('\r');
			section_incr++;
		}
		while(spaces){
    19be:	11 05       	cpc	r17, r1
    19c0:	21 f4       	brne	.+8      	; 0x19ca <Update_OBC+0x2aa>
    19c2:	3c c1       	rjmp	.+632    	; 0x1c3c <Update_OBC+0x51c>
    19c4:	01 15       	cp	r16, r1
    19c6:	11 05       	cpc	r17, r1
    19c8:	29 f0       	breq	.+10     	; 0x19d4 <Update_OBC+0x2b4>
    19ca:	80 e2       	ldi	r24, 0x20	; 32
			UART0_putchar(' ');
    19cc:	20 d3       	rcall	.+1600   	; 0x200e <UART0_putchar>
    19ce:	01 50       	subi	r16, 0x01	; 1
    19d0:	11 09       	sbc	r17, r1
			spaces--;
    19d2:	d9 f7       	brne	.-10     	; 0x19ca <Update_OBC+0x2aa>
			UART0_putchar('\n');
			UART0_putchar('\n');
			UART0_putchar('\r');
			section_incr++;
		}
		while(spaces){
    19d4:	c7 01       	movw	r24, r14
			UART0_putchar(' ');
			spaces--;
		}
		UART0_putstring(sensors[s_incr]);
    19d6:	2b d3       	rcall	.+1622   	; 0x202e <UART0_putstring>
    19d8:	f7 01       	movw	r30, r14
		s_incr++;
		spaces = spacing - strlen(sensors[s_incr - 1]);
    19da:	01 90       	ld	r0, Z+
    19dc:	00 20       	and	r0, r0
    19de:	e9 f7       	brne	.-6      	; 0x19da <Update_OBC+0x2ba>
    19e0:	31 97       	sbiw	r30, 0x01	; 1
    19e2:	ee 19       	sub	r30, r14
    19e4:	ff 09       	sbc	r31, r15
    19e6:	84 01       	movw	r16, r8
    19e8:	0e 1b       	sub	r16, r30
    19ea:	1f 0b       	sbc	r17, r31
    19ec:	8c e0       	ldi	r24, 0x0C	; 12
		
		// Print the second round of telemetry data
		if (s_incr == 12){
    19ee:	a8 16       	cp	r10, r24
    19f0:	b1 04       	cpc	r11, r1
    19f2:	09 f0       	breq	.+2      	; 0x19f6 <Update_OBC+0x2d6>
    19f4:	5f c0       	rjmp	.+190    	; 0x1ab4 <Update_OBC+0x394>
    19f6:	8a e0       	ldi	r24, 0x0A	; 10
			spaces2 = 0; // re-initialize spaces to 0
			UART0_putchar('\n');
    19f8:	0a d3       	rcall	.+1556   	; 0x200e <UART0_putchar>
    19fa:	8d e0       	ldi	r24, 0x0D	; 13
    19fc:	08 d3       	rcall	.+1552   	; 0x200e <UART0_putchar>
			UART0_putchar('\r');
    19fe:	9c e0       	ldi	r25, 0x0C	; 12
    1a00:	69 16       	cp	r6, r25
    1a02:	71 04       	cpc	r7, r1
			// print values
			while(i < s_incr){
    1a04:	0c f0       	brlt	.+2      	; 0x1a08 <Update_OBC+0x2e8>
    1a06:	64 c0       	rjmp	.+200    	; 0x1ad0 <Update_OBC+0x3b0>
    1a08:	83 01       	movw	r16, r6
    1a0a:	00 0f       	add	r16, r16
    1a0c:	11 1f       	adc	r17, r17
    1a0e:	00 0f       	add	r16, r16
    1a10:	11 1f       	adc	r17, r17
    1a12:	c0 55       	subi	r28, 0x50	; 80
    1a14:	dd 4f       	sbci	r29, 0xFD	; 253
    1a16:	a8 81       	ld	r26, Y
    1a18:	b9 81       	ldd	r27, Y+1	; 0x01
    1a1a:	c0 5b       	subi	r28, 0xB0	; 176
    1a1c:	d2 40       	sbci	r29, 0x02	; 2
    1a1e:	0a 0f       	add	r16, r26
    1a20:	1b 1f       	adc	r17, r27
    1a22:	0f 2e       	mov	r0, r31
    1a24:	f8 e7       	ldi	r31, 0x78	; 120
				while(spaces2){
					UART0_putchar(' ');
					spaces2--;
				}
				sprintf(measure,"%.2f",telem[i]);
    1a26:	af 2e       	mov	r10, r31
    1a28:	f6 e0       	ldi	r31, 0x06	; 6
    1a2a:	bf 2e       	mov	r11, r31
    1a2c:	f0 2d       	mov	r31, r0
    1a2e:	7e 01       	movw	r14, r28
    1a30:	b5 e6       	ldi	r27, 0x65	; 101
    1a32:	eb 1a       	sub	r14, r27
    1a34:	bd ef       	ldi	r27, 0xFD	; 253
    1a36:	fb 0a       	sbc	r15, r27
    1a38:	0f 2e       	mov	r0, r31
    1a3a:	f4 e1       	ldi	r31, 0x14	; 20
				UART0_putstring(measure);
				i++;
				spaces2 = spacing - strlen(measure);
    1a3c:	8f 2e       	mov	r8, r31
    1a3e:	91 2c       	mov	r9, r1
    1a40:	f0 2d       	mov	r31, r0
    1a42:	06 c0       	rjmp	.+12     	; 0x1a50 <Update_OBC+0x330>
    1a44:	80 e2       	ldi	r24, 0x20	; 32
    1a46:	e3 d2       	rcall	.+1478   	; 0x200e <UART0_putchar>
			UART0_putchar('\n');
			UART0_putchar('\r');
			// print values
			while(i < s_incr){
				while(spaces2){
					UART0_putchar(' ');
    1a48:	e1 e0       	ldi	r30, 0x01	; 1
    1a4a:	ce 1a       	sub	r12, r30
    1a4c:	d1 08       	sbc	r13, r1
					spaces2--;
    1a4e:	d1 f7       	brne	.-12     	; 0x1a44 <Update_OBC+0x324>
    1a50:	d8 01       	movw	r26, r16
    1a52:	8c 91       	ld	r24, X
				}
				sprintf(measure,"%.2f",telem[i]);
    1a54:	11 96       	adiw	r26, 0x01	; 1
    1a56:	9c 91       	ld	r25, X
    1a58:	11 97       	sbiw	r26, 0x01	; 1
    1a5a:	12 96       	adiw	r26, 0x02	; 2
    1a5c:	2c 91       	ld	r18, X
    1a5e:	12 97       	sbiw	r26, 0x02	; 2
    1a60:	13 96       	adiw	r26, 0x03	; 3
    1a62:	3c 91       	ld	r19, X
    1a64:	0c 5f       	subi	r16, 0xFC	; 252
    1a66:	1f 4f       	sbci	r17, 0xFF	; 255
    1a68:	3f 93       	push	r19
    1a6a:	2f 93       	push	r18
    1a6c:	9f 93       	push	r25
    1a6e:	8f 93       	push	r24
    1a70:	bf 92       	push	r11
    1a72:	af 92       	push	r10
    1a74:	ff 92       	push	r15
    1a76:	ef 92       	push	r14
    1a78:	0e 94 7f 18 	call	0x30fe	; 0x30fe <sprintf>
    1a7c:	c7 01       	movw	r24, r14
    1a7e:	d7 d2       	rcall	.+1454   	; 0x202e <UART0_putstring>
				UART0_putstring(measure);
    1a80:	bf ef       	ldi	r27, 0xFF	; 255
    1a82:	6b 1a       	sub	r6, r27
    1a84:	7b 0a       	sbc	r7, r27
				i++;
    1a86:	f7 01       	movw	r30, r14
    1a88:	01 90       	ld	r0, Z+
    1a8a:	00 20       	and	r0, r0
				spaces2 = spacing - strlen(measure);
    1a8c:	e9 f7       	brne	.-6      	; 0x1a88 <Update_OBC+0x368>
    1a8e:	31 97       	sbiw	r30, 0x01	; 1
    1a90:	ee 19       	sub	r30, r14
    1a92:	ff 09       	sbc	r31, r15
    1a94:	64 01       	movw	r12, r8
    1a96:	ce 1a       	sub	r12, r30
    1a98:	df 0a       	sbc	r13, r31
    1a9a:	0f b6       	in	r0, 0x3f	; 63
    1a9c:	f8 94       	cli
    1a9e:	de bf       	out	0x3e, r29	; 62
		if (s_incr == 12){
			spaces2 = 0; // re-initialize spaces to 0
			UART0_putchar('\n');
			UART0_putchar('\r');
			// print values
			while(i < s_incr){
    1aa0:	0f be       	out	0x3f, r0	; 63
    1aa2:	cd bf       	out	0x3d, r28	; 61
    1aa4:	fc e0       	ldi	r31, 0x0C	; 12
    1aa6:	6f 16       	cp	r6, r31
    1aa8:	71 04       	cpc	r7, r1
    1aaa:	91 f0       	breq	.+36     	; 0x1ad0 <Update_OBC+0x3b0>
    1aac:	c1 14       	cp	r12, r1
				while(spaces2){
    1aae:	d1 04       	cpc	r13, r1
    1ab0:	49 f6       	brne	.-110    	; 0x1a44 <Update_OBC+0x324>
    1ab2:	ce cf       	rjmp	.-100    	; 0x1a50 <Update_OBC+0x330>
    1ab4:	2f ef       	ldi	r18, 0xFF	; 255
    1ab6:	c2 1a       	sub	r12, r18
    1ab8:	d2 0a       	sbc	r13, r18
    1aba:	3f ef       	ldi	r19, 0xFF	; 255
    1abc:	a3 1a       	sub	r10, r19
    1abe:	b3 0a       	sbc	r11, r19
    1ac0:	84 e1       	ldi	r24, 0x14	; 20
    1ac2:	e8 0e       	add	r14, r24
    1ac4:	f1 1c       	adc	r15, r1
	int i = 0; // increment for telemetry (0 to 6, then 6 to 12)
	char measure[10]; // used for sprintf
	int section_incr = 0; // used for the section titles
	
	// Print the telemetry information
	while (s_incr < 12){
    1ac6:	9c e0       	ldi	r25, 0x0C	; 12
    1ac8:	c9 16       	cp	r12, r25
    1aca:	d1 04       	cpc	r13, r1
	}
	
	
	// Print the Load Titles
	spaces = 0; // re initialize spaces
	UART0_putchar('\n');
    1acc:	09 f0       	breq	.+2      	; 0x1ad0 <Update_OBC+0x3b0>
    1ace:	d1 ce       	rjmp	.-606    	; 0x1872 <Update_OBC+0x152>
    1ad0:	8a e0       	ldi	r24, 0x0A	; 10
	UART0_putchar('\n');
    1ad2:	9d d2       	rcall	.+1338   	; 0x200e <UART0_putchar>
    1ad4:	8a e0       	ldi	r24, 0x0A	; 10
    1ad6:	9b d2       	rcall	.+1334   	; 0x200e <UART0_putchar>
	UART0_putchar('\r');
    1ad8:	8d e0       	ldi	r24, 0x0D	; 13
    1ada:	99 d2       	rcall	.+1330   	; 0x200e <UART0_putchar>
    1adc:	26 e1       	ldi	r18, 0x16	; 22
	UART0_putstring(sections[section_incr]);
    1ade:	22 9d       	mul	r18, r2
    1ae0:	c0 01       	movw	r24, r0
    1ae2:	23 9d       	mul	r18, r3
    1ae4:	90 0d       	add	r25, r0
    1ae6:	11 24       	eor	r1, r1
    1ae8:	a9 e5       	ldi	r26, 0x59	; 89
    1aea:	b2 e0       	ldi	r27, 0x02	; 2
    1aec:	ac 0f       	add	r26, r28
    1aee:	bd 1f       	adc	r27, r29
    1af0:	8a 0f       	add	r24, r26
    1af2:	9b 1f       	adc	r25, r27
    1af4:	9c d2       	rcall	.+1336   	; 0x202e <UART0_putstring>
    1af6:	8a e0       	ldi	r24, 0x0A	; 10
	UART0_putchar('\n');
    1af8:	8a d2       	rcall	.+1300   	; 0x200e <UART0_putchar>
    1afa:	8a e0       	ldi	r24, 0x0A	; 10
	UART0_putchar('\n');
    1afc:	88 d2       	rcall	.+1296   	; 0x200e <UART0_putchar>
    1afe:	8d e0       	ldi	r24, 0x0D	; 13
    1b00:	86 d2       	rcall	.+1292   	; 0x200e <UART0_putchar>
	UART0_putchar('\r');
    1b02:	8e 01       	movw	r16, r28
    1b04:	07 53       	subi	r16, 0x37	; 55
    1b06:	1f 4f       	sbci	r17, 0xFF	; 255
    1b08:	6e 01       	movw	r12, r28
    1b0a:	bb ea       	ldi	r27, 0xAB	; 171
    1b0c:	cb 1a       	sub	r12, r27
    1b0e:	be ef       	ldi	r27, 0xFE	; 254
    1b10:	db 0a       	sbc	r13, r27
    1b12:	0f 2e       	mov	r0, r31
    1b14:	f4 e1       	ldi	r31, 0x14	; 20
    1b16:	ef 2e       	mov	r14, r31
			UART0_putchar(' ');
			spaces--;
		}
		UART0_putstring(loads[l_incr]);
		l_incr++;
		spaces = spacing - strlen(loads[l_incr - 1]);
    1b18:	f1 2c       	mov	r15, r1
    1b1a:	f0 2d       	mov	r31, r0
    1b1c:	08 c0       	rjmp	.+16     	; 0x1b2e <Update_OBC+0x40e>
    1b1e:	80 e2       	ldi	r24, 0x20	; 32
	UART0_putchar('\n');
	UART0_putchar('\n');
	UART0_putchar('\r');
	while(l_incr < 8){
		while(spaces){
			UART0_putchar(' ');
    1b20:	76 d2       	rcall	.+1260   	; 0x200e <UART0_putchar>
    1b22:	e1 e0       	ldi	r30, 0x01	; 1
    1b24:	ae 1a       	sub	r10, r30
			spaces--;
    1b26:	b1 08       	sbc	r11, r1
    1b28:	d1 f7       	brne	.-12     	; 0x1b1e <Update_OBC+0x3fe>
    1b2a:	0c 5e       	subi	r16, 0xEC	; 236
	UART0_putstring(sections[section_incr]);
	UART0_putchar('\n');
	UART0_putchar('\n');
	UART0_putchar('\r');
	while(l_incr < 8){
		while(spaces){
    1b2c:	1f 4f       	sbci	r17, 0xFF	; 255
    1b2e:	c8 01       	movw	r24, r16
    1b30:	7e d2       	rcall	.+1276   	; 0x202e <UART0_putstring>
			UART0_putchar(' ');
			spaces--;
		}
		UART0_putstring(loads[l_incr]);
    1b32:	f8 01       	movw	r30, r16
    1b34:	01 90       	ld	r0, Z+
		l_incr++;
		spaces = spacing - strlen(loads[l_incr - 1]);
    1b36:	00 20       	and	r0, r0
    1b38:	e9 f7       	brne	.-6      	; 0x1b34 <Update_OBC+0x414>
    1b3a:	31 97       	sbiw	r30, 0x01	; 1
    1b3c:	e0 1b       	sub	r30, r16
    1b3e:	f1 0b       	sbc	r31, r17
    1b40:	57 01       	movw	r10, r14
    1b42:	ae 1a       	sub	r10, r30
    1b44:	bf 0a       	sbc	r11, r31
    1b46:	c0 16       	cp	r12, r16
    1b48:	d1 06       	cpc	r13, r17
	UART0_putchar('\r');
	UART0_putstring(sections[section_incr]);
	UART0_putchar('\n');
	UART0_putchar('\n');
	UART0_putchar('\r');
	while(l_incr < 8){
    1b4a:	21 f0       	breq	.+8      	; 0x1b54 <Update_OBC+0x434>
    1b4c:	a1 14       	cp	r10, r1
		while(spaces){
    1b4e:	b1 04       	cpc	r11, r1
    1b50:	31 f7       	brne	.-52     	; 0x1b1e <Update_OBC+0x3fe>
    1b52:	eb cf       	rjmp	.-42     	; 0x1b2a <Update_OBC+0x40a>
	
	// Print the load states
	// Print the Load Titles
	l_incr = 0; // reset load increment to 0
	spaces = 0; // re initialize spaces
	UART0_putchar('\n');
    1b54:	8a e0       	ldi	r24, 0x0A	; 10
    1b56:	5b d2       	rcall	.+1206   	; 0x200e <UART0_putchar>
    1b58:	8d e0       	ldi	r24, 0x0D	; 13
	UART0_putchar('\r');
    1b5a:	59 d2       	rcall	.+1202   	; 0x200e <UART0_putchar>
    1b5c:	c6 55       	subi	r28, 0x56	; 86
    1b5e:	dd 4f       	sbci	r29, 0xFD	; 253
    1b60:	e8 80       	ld	r14, Y
    1b62:	f9 80       	ldd	r15, Y+1	; 0x01
    1b64:	ca 5a       	subi	r28, 0xAA	; 170
    1b66:	d2 40       	sbci	r29, 0x02	; 2
    1b68:	37 01       	movw	r6, r14
    1b6a:	f8 e0       	ldi	r31, 0x08	; 8
    1b6c:	6f 0e       	add	r6, r31
	while(l_incr < 8){
		while(spaces){
			UART0_putchar(' ');
    1b6e:	71 1c       	adc	r7, r1
    1b70:	05 c0       	rjmp	.+10     	; 0x1b7c <Update_OBC+0x45c>
			spaces--;
    1b72:	80 e2       	ldi	r24, 0x20	; 32
    1b74:	4c d2       	rcall	.+1176   	; 0x200e <UART0_putchar>
	l_incr = 0; // reset load increment to 0
	spaces = 0; // re initialize spaces
	UART0_putchar('\n');
	UART0_putchar('\r');
	while(l_incr < 8){
		while(spaces){
    1b76:	01 50       	subi	r16, 0x01	; 1
			UART0_putchar(' ');
			spaces--;
		}
		if(power[l_incr] == 'y'){
    1b78:	11 09       	sbc	r17, r1
    1b7a:	d9 f7       	brne	.-10     	; 0x1b72 <Update_OBC+0x452>
    1b7c:	d7 01       	movw	r26, r14
    1b7e:	8d 91       	ld	r24, X+
    1b80:	7d 01       	movw	r14, r26
			UART0_putstring("ON");
    1b82:	89 37       	cpi	r24, 0x79	; 121
    1b84:	31 f4       	brne	.+12     	; 0x1b92 <Update_OBC+0x472>
    1b86:	8d e7       	ldi	r24, 0x7D	; 125
    1b88:	96 e0       	ldi	r25, 0x06	; 6
			spaces = spacing - 2;			
    1b8a:	51 d2       	rcall	.+1186   	; 0x202e <UART0_putstring>
    1b8c:	02 e1       	ldi	r16, 0x12	; 18
    1b8e:	10 e0       	ldi	r17, 0x00	; 0
		}
		else{
			UART0_putstring("OFF");
    1b90:	05 c0       	rjmp	.+10     	; 0x1b9c <Update_OBC+0x47c>
    1b92:	80 e8       	ldi	r24, 0x80	; 128
    1b94:	96 e0       	ldi	r25, 0x06	; 6
			spaces = spacing - 3;
    1b96:	4b d2       	rcall	.+1174   	; 0x202e <UART0_putstring>
	// Print the Load Titles
	l_incr = 0; // reset load increment to 0
	spaces = 0; // re initialize spaces
	UART0_putchar('\n');
	UART0_putchar('\r');
	while(l_incr < 8){
    1b98:	01 e1       	ldi	r16, 0x11	; 17
    1b9a:	10 e0       	ldi	r17, 0x00	; 0
			UART0_putstring("OFF");
			spaces = spacing - 3;
		}
		l_incr++;
	}
	UART0_putchar('\n');
    1b9c:	6e 14       	cp	r6, r14
    1b9e:	7f 04       	cpc	r7, r15
	UART0_putchar('\n');
    1ba0:	41 f7       	brne	.-48     	; 0x1b72 <Update_OBC+0x452>
    1ba2:	8a e0       	ldi	r24, 0x0A	; 10
	UART0_putchar('\r');
    1ba4:	34 d2       	rcall	.+1128   	; 0x200e <UART0_putchar>
    1ba6:	8a e0       	ldi	r24, 0x0A	; 10
	
	// Print the State Number
	char state[5]; // character array for sprintf()
	UART0_putstring("STATE #");
    1ba8:	32 d2       	rcall	.+1124   	; 0x200e <UART0_putchar>
    1baa:	8d e0       	ldi	r24, 0x0D	; 13
    1bac:	30 d2       	rcall	.+1120   	; 0x200e <UART0_putchar>
    1bae:	84 e8       	ldi	r24, 0x84	; 132
	UART0_putchar('\n');
    1bb0:	96 e0       	ldi	r25, 0x06	; 6
    1bb2:	3d d2       	rcall	.+1146   	; 0x202e <UART0_putstring>
    1bb4:	8a e0       	ldi	r24, 0x0A	; 10
	UART0_putchar('\r');
    1bb6:	2b d2       	rcall	.+1110   	; 0x200e <UART0_putchar>
    1bb8:	8d e0       	ldi	r24, 0x0D	; 13
    1bba:	29 d2       	rcall	.+1106   	; 0x200e <UART0_putchar>
	sprintf(state,"%d",state_num);
    1bbc:	1f 92       	push	r1
    1bbe:	c4 55       	subi	r28, 0x54	; 84
    1bc0:	dd 4f       	sbci	r29, 0xFD	; 253
    1bc2:	b8 81       	ld	r27, Y
    1bc4:	cc 5a       	subi	r28, 0xAC	; 172
    1bc6:	d2 40       	sbci	r29, 0x02	; 2
    1bc8:	bf 93       	push	r27
    1bca:	8c e8       	ldi	r24, 0x8C	; 140
    1bcc:	96 e0       	ldi	r25, 0x06	; 6
    1bce:	9f 93       	push	r25
    1bd0:	8f 93       	push	r24
    1bd2:	8e 01       	movw	r16, r28
    1bd4:	0b 55       	subi	r16, 0x5B	; 91
	UART0_putstring(state);
    1bd6:	1d 4f       	sbci	r17, 0xFD	; 253
    1bd8:	1f 93       	push	r17
	UART0_putchar('\n');
    1bda:	0f 93       	push	r16
    1bdc:	0e 94 7f 18 	call	0x30fe	; 0x30fe <sprintf>
	UART0_putchar('\n');
    1be0:	c8 01       	movw	r24, r16
    1be2:	25 d2       	rcall	.+1098   	; 0x202e <UART0_putstring>
    1be4:	8a e0       	ldi	r24, 0x0A	; 10
	UART0_putchar('\r');
    1be6:	13 d2       	rcall	.+1062   	; 0x200e <UART0_putchar>
    1be8:	8a e0       	ldi	r24, 0x0A	; 10
    1bea:	11 d2       	rcall	.+1058   	; 0x200e <UART0_putchar>
	
	// Print the mode of operation (auto/manual)
	UART0_putstring("MODE");
    1bec:	8d e0       	ldi	r24, 0x0D	; 13
    1bee:	0f d2       	rcall	.+1054   	; 0x200e <UART0_putchar>
    1bf0:	8f e8       	ldi	r24, 0x8F	; 143
    1bf2:	96 e0       	ldi	r25, 0x06	; 6
	UART0_putchar('\n');
    1bf4:	1c d2       	rcall	.+1080   	; 0x202e <UART0_putstring>
    1bf6:	8a e0       	ldi	r24, 0x0A	; 10
    1bf8:	0a d2       	rcall	.+1044   	; 0x200e <UART0_putchar>
	UART0_putchar('\r');
    1bfa:	8d e0       	ldi	r24, 0x0D	; 13
    1bfc:	08 d2       	rcall	.+1040   	; 0x200e <UART0_putchar>
    1bfe:	0f 90       	pop	r0
	if(mode){
    1c00:	0f 90       	pop	r0
    1c02:	0f 90       	pop	r0
    1c04:	0f 90       	pop	r0
    1c06:	0f 90       	pop	r0
    1c08:	0f 90       	pop	r0
    1c0a:	c3 55       	subi	r28, 0x53	; 83
    1c0c:	dd 4f       	sbci	r29, 0xFD	; 253
    1c0e:	e8 81       	ld	r30, Y
    1c10:	cd 5a       	subi	r28, 0xAD	; 173
    1c12:	d2 40       	sbci	r29, 0x02	; 2
    1c14:	ee 23       	and	r30, r30
    1c16:	21 f0       	breq	.+8      	; 0x1c20 <Update_OBC+0x500>
    1c18:	84 e9       	ldi	r24, 0x94	; 148
		UART0_putstring("Autonomous");
    1c1a:	96 e0       	ldi	r25, 0x06	; 6
    1c1c:	08 d2       	rcall	.+1040   	; 0x202e <UART0_putstring>
    1c1e:	03 c0       	rjmp	.+6      	; 0x1c26 <Update_OBC+0x506>
    1c20:	8f e9       	ldi	r24, 0x9F	; 159
    1c22:	96 e0       	ldi	r25, 0x06	; 6
	}
	else{
		UART0_putstring("Manual");
    1c24:	04 d2       	rcall	.+1032   	; 0x202e <UART0_putstring>
    1c26:	8a e0       	ldi	r24, 0x0A	; 10
    1c28:	f2 d1       	rcall	.+996    	; 0x200e <UART0_putchar>
    1c2a:	8a e0       	ldi	r24, 0x0A	; 10
	}
	UART0_putchar('\n');
    1c2c:	f0 d1       	rcall	.+992    	; 0x200e <UART0_putchar>
    1c2e:	8d e0       	ldi	r24, 0x0D	; 13
    1c30:	ee d1       	rcall	.+988    	; 0x200e <UART0_putchar>
	UART0_putchar('\n');
    1c32:	11 c0       	rjmp	.+34     	; 0x1c56 <Update_OBC+0x536>
    1c34:	89 2b       	or	r24, r25
    1c36:	09 f0       	breq	.+2      	; 0x1c3a <Update_OBC+0x51a>
	UART0_putchar('\r');
    1c38:	c5 ce       	rjmp	.-630    	; 0x19c4 <Update_OBC+0x2a4>
    1c3a:	aa ce       	rjmp	.-684    	; 0x1990 <Update_OBC+0x270>
    1c3c:	c7 01       	movw	r24, r14
}
    1c3e:	f7 d1       	rcall	.+1006   	; 0x202e <UART0_putstring>
			spaces = 0; // reset for next line of titles
		}
		
		// Put the titles in normally
		// re-initialize the spaces
		if(s_incr == 0){
    1c40:	f7 01       	movw	r30, r14
    1c42:	01 90       	ld	r0, Z+
    1c44:	00 20       	and	r0, r0
    1c46:	e9 f7       	brne	.-6      	; 0x1c42 <Update_OBC+0x522>
		}
		while(spaces){
			UART0_putchar(' ');
			spaces--;
		}
		UART0_putstring(sensors[s_incr]);
    1c48:	31 97       	sbiw	r30, 0x01	; 1
    1c4a:	ee 19       	sub	r30, r14
    1c4c:	ff 09       	sbc	r31, r15
		s_incr++;
		spaces = spacing - strlen(sensors[s_incr - 1]);
    1c4e:	84 01       	movw	r16, r8
    1c50:	0e 1b       	sub	r16, r30
    1c52:	1f 0b       	sbc	r17, r31
    1c54:	2f cf       	rjmp	.-418    	; 0x1ab4 <Update_OBC+0x394>
    1c56:	cd 54       	subi	r28, 0x4D	; 77
    1c58:	dd 4f       	sbci	r29, 0xFD	; 253
    1c5a:	0f b6       	in	r0, 0x3f	; 63
    1c5c:	f8 94       	cli
    1c5e:	de bf       	out	0x3e, r29	; 62
    1c60:	0f be       	out	0x3f, r0	; 63
    1c62:	cd bf       	out	0x3d, r28	; 61
		UART0_putstring("Manual");
	}
	UART0_putchar('\n');
	UART0_putchar('\n');
	UART0_putchar('\r');
}
    1c64:	df 91       	pop	r29
    1c66:	cf 91       	pop	r28
    1c68:	1f 91       	pop	r17
    1c6a:	0f 91       	pop	r16
    1c6c:	ff 90       	pop	r15
    1c6e:	ef 90       	pop	r14
    1c70:	df 90       	pop	r13
    1c72:	cf 90       	pop	r12
    1c74:	bf 90       	pop	r11
    1c76:	af 90       	pop	r10
    1c78:	9f 90       	pop	r9
    1c7a:	8f 90       	pop	r8
    1c7c:	7f 90       	pop	r7
    1c7e:	6f 90       	pop	r6
    1c80:	5f 90       	pop	r5
    1c82:	4f 90       	pop	r4
    1c84:	3f 90       	pop	r3
    1c86:	2f 90       	pop	r2
    1c88:	08 95       	ret

00001c8a <Manual_RESET>:
    1c8a:	61 e0       	ldi	r22, 0x01	; 1
    1c8c:	70 e0       	ldi	r23, 0x00	; 0
    1c8e:	8f ef       	ldi	r24, 0xFF	; 255
    1c90:	f6 db       	rcall	.-2068   	; 0x147e <EEPROM_Write>
    1c92:	a8 95       	wdr
    1c94:	81 e0       	ldi	r24, 0x01	; 1
    1c96:	1e d2       	rcall	.+1084   	; 0x20d4 <wdt_enable>
	
	// Set the watchdog to System Reset Mode
	wdt_enable(SYSTEM_RESET_MODE);
	
	// Change the tiemout period to 1.0s			 
	wdt_set_timeout_period(WDT_TIMEOUT_PERIOD_2KCLK); // timeout set from 1024k to 128k
    1c98:	80 e0       	ldi	r24, 0x00	; 0
    1c9a:	f8 c1       	rjmp	.+1008   	; 0x208c <wdt_set_timeout_period>
    1c9c:	08 95       	ret

00001c9e <commandDecode>:
    1c9e:	4f 92       	push	r4
//
// Author: Ben Wedemire & Chris Thomas
// Date: 2019-03-17
// Description: Decodes commands from the OBC and calls their corresponding function.		
/*========================================================================================*/
void commandDecode (double* telem, uint8_t* mode, uint8_t* power_state, char* power, uint8_t* newPwrMat, uint8_t state_num){
    1ca0:	5f 92       	push	r5
    1ca2:	6f 92       	push	r6
    1ca4:	7f 92       	push	r7
    1ca6:	8f 92       	push	r8
    1ca8:	9f 92       	push	r9
    1caa:	af 92       	push	r10
    1cac:	bf 92       	push	r11
    1cae:	cf 92       	push	r12
    1cb0:	df 92       	push	r13
    1cb2:	ef 92       	push	r14
    1cb4:	ff 92       	push	r15
    1cb6:	0f 93       	push	r16
    1cb8:	1f 93       	push	r17
    1cba:	cf 93       	push	r28
    1cbc:	df 93       	push	r29
    1cbe:	cd b7       	in	r28, 0x3d	; 61
    1cc0:	de b7       	in	r29, 0x3e	; 62
    1cc2:	c0 5a       	subi	r28, 0xA0	; 160
    1cc4:	d1 09       	sbc	r29, r1
    1cc6:	0f b6       	in	r0, 0x3f	; 63
    1cc8:	f8 94       	cli
    1cca:	de bf       	out	0x3e, r29	; 62
    1ccc:	0f be       	out	0x3f, r0	; 63
    1cce:	cd bf       	out	0x3d, r28	; 61
    1cd0:	3c 01       	movw	r6, r24
    1cd2:	5b 01       	movw	r10, r22
    1cd4:	6a 01       	movw	r12, r20
    1cd6:	49 01       	movw	r8, r18
    1cd8:	28 01       	movw	r4, r16
	
	// Erase the first echoed letter
	UART0_putchar('\b'); // ascii code for backspace
    1cda:	88 e0       	ldi	r24, 0x08	; 8
    1cdc:	98 d1       	rcall	.+816    	; 0x200e <UART0_putchar>
	
	// List of OBC Commands
	// OBC Commands
	char obc_command[8][20] = {"TelemRqt", "SubSysRqt",
    1cde:	80 ea       	ldi	r24, 0xA0	; 160
    1ce0:	e3 eb       	ldi	r30, 0xB3	; 179
    1ce2:	f4 e0       	ldi	r31, 0x04	; 4
    1ce4:	de 01       	movw	r26, r28
    1ce6:	11 96       	adiw	r26, 0x01	; 1
    1ce8:	01 90       	ld	r0, Z+
    1cea:	0d 92       	st	X+, r0
    1cec:	8a 95       	dec	r24
    1cee:	e1 f7       	brne	.-8      	; 0x1ce8 <commandDecode+0x4a>
							   
	// Print list of commands for the user
	int i = 0; // increment
	
	// Printing the list cleanly
	UART0_putstring("List of available OBC Commands: ");
    1cf0:	86 ea       	ldi	r24, 0xA6	; 166
    1cf2:	96 e0       	ldi	r25, 0x06	; 6
    1cf4:	9c d1       	rcall	.+824    	; 0x202e <UART0_putstring>
	UART0_putchar('\n');
    1cf6:	8a e0       	ldi	r24, 0x0A	; 10
    1cf8:	8a d1       	rcall	.+788    	; 0x200e <UART0_putchar>
	UART0_putchar('\n');
    1cfa:	8a e0       	ldi	r24, 0x0A	; 10
    1cfc:	88 d1       	rcall	.+784    	; 0x200e <UART0_putchar>
	UART0_putchar('\r');
    1cfe:	8d e0       	ldi	r24, 0x0D	; 13
    1d00:	86 d1       	rcall	.+780    	; 0x200e <UART0_putchar>
    1d02:	8e 01       	movw	r16, r28
    1d04:	0f 5f       	subi	r16, 0xFF	; 255
    1d06:	1f 4f       	sbci	r17, 0xFF	; 255
    1d08:	0f 2e       	mov	r0, r31
    1d0a:	f1 e3       	ldi	r31, 0x31	; 49
    1d0c:	ff 2e       	mov	r15, r31
    1d0e:	f0 2d       	mov	r31, r0
	// print all seven commands
	while(i < 8){
		UART0_putchar(0x31 + i); // the '1' plus the command index
    1d10:	8f 2d       	mov	r24, r15
    1d12:	7d d1       	rcall	.+762    	; 0x200e <UART0_putchar>
		UART0_putstring(" -> ");
    1d14:	87 ec       	ldi	r24, 0xC7	; 199
    1d16:	96 e0       	ldi	r25, 0x06	; 6
		UART0_putstring(obc_command[i]);
    1d18:	8a d1       	rcall	.+788    	; 0x202e <UART0_putstring>
    1d1a:	c8 01       	movw	r24, r16
    1d1c:	88 d1       	rcall	.+784    	; 0x202e <UART0_putstring>
		UART0_putchar('\n');
    1d1e:	8a e0       	ldi	r24, 0x0A	; 10
    1d20:	76 d1       	rcall	.+748    	; 0x200e <UART0_putchar>
    1d22:	8d e0       	ldi	r24, 0x0D	; 13
		UART0_putchar('\r');
    1d24:	74 d1       	rcall	.+744    	; 0x200e <UART0_putchar>
    1d26:	f3 94       	inc	r15
    1d28:	0c 5e       	subi	r16, 0xEC	; 236
    1d2a:	1f 4f       	sbci	r17, 0xFF	; 255
	UART0_putstring("List of available OBC Commands: ");
	UART0_putchar('\n');
	UART0_putchar('\n');
	UART0_putchar('\r');
	// print all seven commands
	while(i < 8){
    1d2c:	89 e3       	ldi	r24, 0x39	; 57
    1d2e:	f8 12       	cpse	r15, r24
		UART0_putchar('\r');
		i++;
	}
	
	// Prompt the User
	UART0_putchar('\n');
    1d30:	ef cf       	rjmp	.-34     	; 0x1d10 <commandDecode+0x72>
    1d32:	8a e0       	ldi	r24, 0x0A	; 10
	UART0_putstring("Enter the desired command:");
    1d34:	6c d1       	rcall	.+728    	; 0x200e <UART0_putchar>
    1d36:	8c ec       	ldi	r24, 0xCC	; 204
    1d38:	96 e0       	ldi	r25, 0x06	; 6
	UART0_putchar('\n');
    1d3a:	79 d1       	rcall	.+754    	; 0x202e <UART0_putstring>
    1d3c:	8a e0       	ldi	r24, 0x0A	; 10
	UART0_putchar('\n');
    1d3e:	67 d1       	rcall	.+718    	; 0x200e <UART0_putchar>
    1d40:	8a e0       	ldi	r24, 0x0A	; 10
	UART0_putchar('\r');
    1d42:	65 d1       	rcall	.+714    	; 0x200e <UART0_putchar>
    1d44:	8d e0       	ldi	r24, 0x0D	; 13
	UART0_putstring("> ");		
    1d46:	63 d1       	rcall	.+710    	; 0x200e <UART0_putchar>
    1d48:	89 ec       	ldi	r24, 0xC9	; 201
    1d4a:	96 e0       	ldi	r25, 0x06	; 6
		UART0_putchar('\n');
		UART0_putchar('\r');
		
		// Print the selected Command
		UART0_putstring("You have Selected: ");
		UART0_putstring(obc_command[com_ind]);
    1d4c:	70 d1       	rcall	.+736    	; 0x202e <UART0_putstring>
    1d4e:	0f 2e       	mov	r0, r31
    1d50:	f4 e1       	ldi	r31, 0x14	; 20
    1d52:	ff 2e       	mov	r15, r31
	
	// Check for command in list, if not in list, prompt user again
	
	while(incorrect){
		// Receive command index from OBC
		int com_ind = UART0_getchar() - 0x31; // negate the '0' char value to get the index
    1d54:	f0 2d       	mov	r31, r0
    1d56:	63 d1       	rcall	.+710    	; 0x201e <UART0_getchar>
    1d58:	18 2f       	mov	r17, r24
		UART0_putchar('\n');
    1d5a:	8a e0       	ldi	r24, 0x0A	; 10
    1d5c:	58 d1       	rcall	.+688    	; 0x200e <UART0_putchar>
    1d5e:	8a e0       	ldi	r24, 0x0A	; 10
		UART0_putchar('\n');
    1d60:	56 d1       	rcall	.+684    	; 0x200e <UART0_putchar>
    1d62:	8d e0       	ldi	r24, 0x0D	; 13
    1d64:	54 d1       	rcall	.+680    	; 0x200e <UART0_putchar>
		UART0_putchar('\r');
    1d66:	87 ee       	ldi	r24, 0xE7	; 231
    1d68:	96 e0       	ldi	r25, 0x06	; 6
		
		// Print the selected Command
		UART0_putstring("You have Selected: ");
    1d6a:	61 d1       	rcall	.+706    	; 0x202e <UART0_putstring>
    1d6c:	81 2f       	mov	r24, r17
    1d6e:	11 0f       	add	r17, r17
		UART0_putstring(obc_command[com_ind]);
    1d70:	99 0b       	sbc	r25, r25
    1d72:	c1 97       	sbiw	r24, 0x31	; 49
    1d74:	f8 9e       	mul	r15, r24
    1d76:	80 01       	movw	r16, r0
    1d78:	f9 9e       	mul	r15, r25
    1d7a:	10 0d       	add	r17, r0
    1d7c:	11 24       	eor	r1, r1
    1d7e:	e1 e0       	ldi	r30, 0x01	; 1
    1d80:	f0 e0       	ldi	r31, 0x00	; 0
    1d82:	ec 0f       	add	r30, r28
    1d84:	fd 1f       	adc	r31, r29
    1d86:	0e 0f       	add	r16, r30
    1d88:	1f 1f       	adc	r17, r31
    1d8a:	c8 01       	movw	r24, r16
    1d8c:	50 d1       	rcall	.+672    	; 0x202e <UART0_putstring>
		UART0_putchar('\n');
    1d8e:	8a e0       	ldi	r24, 0x0A	; 10
    1d90:	3e d1       	rcall	.+636    	; 0x200e <UART0_putchar>
		UART0_putchar('\n');
    1d92:	8a e0       	ldi	r24, 0x0A	; 10
    1d94:	3c d1       	rcall	.+632    	; 0x200e <UART0_putchar>
    1d96:	8d e0       	ldi	r24, 0x0D	; 13
		UART0_putchar('\r');
    1d98:	3a d1       	rcall	.+628    	; 0x200e <UART0_putchar>
    1d9a:	6b ef       	ldi	r22, 0xFB	; 251
			
		incorrect = 0; // assume the user inputs the correct command until it isn't found
			
		if (strcmp(obc_command[com_ind], "TelemRqt") == 0) {
    1d9c:	76 e0       	ldi	r23, 0x06	; 6
    1d9e:	c8 01       	movw	r24, r16
    1da0:	0e 94 2f 18 	call	0x305e	; 0x305e <strcmp>
    1da4:	89 2b       	or	r24, r25
    1da6:	99 f4       	brne	.+38     	; 0x1dce <commandDecode+0x130>
    1da8:	84 e0       	ldi	r24, 0x04	; 4
			UART0_putstring("Updating Telemetry Information");
    1daa:	97 e0       	ldi	r25, 0x07	; 7
    1dac:	40 d1       	rcall	.+640    	; 0x202e <UART0_putstring>
    1dae:	8a e0       	ldi	r24, 0x0A	; 10
    1db0:	2e d1       	rcall	.+604    	; 0x200e <UART0_putchar>
			UART0_putchar('\n');
    1db2:	8a e0       	ldi	r24, 0x0A	; 10
    1db4:	2c d1       	rcall	.+600    	; 0x200e <UART0_putchar>
    1db6:	8d e0       	ldi	r24, 0x0D	; 13
			UART0_putchar('\n');
    1db8:	2a d1       	rcall	.+596    	; 0x200e <UART0_putchar>
    1dba:	6c 2d       	mov	r22, r12
			UART0_putchar('\r');
    1dbc:	c3 01       	movw	r24, r6
    1dbe:	46 dc       	rcall	.-1908   	; 0x164c <Update_TELEM>
			Update_TELEM(telem, power_state);
    1dc0:	f5 01       	movw	r30, r10
    1dc2:	20 81       	ld	r18, Z
    1dc4:	4e 2d       	mov	r20, r14
			Update_OBC(telem, power, state_num, mode[0]);
    1dc6:	b4 01       	movw	r22, r8
    1dc8:	c3 01       	movw	r24, r6
    1dca:	aa dc       	rcall	.-1708   	; 0x1720 <Update_OBC>
    1dcc:	c0 c0       	rjmp	.+384    	; 0x1f4e <commandDecode+0x2b0>
    1dce:	63 e2       	ldi	r22, 0x23	; 35
			//send telem
		} //end if
		else if (strcmp(obc_command[com_ind], "SubSysRqt") == 0) {	
    1dd0:	77 e0       	ldi	r23, 0x07	; 7
    1dd2:	c8 01       	movw	r24, r16
    1dd4:	0e 94 2f 18 	call	0x305e	; 0x305e <strcmp>
    1dd8:	89 2b       	or	r24, r25
			if(!mode[0]){
    1dda:	09 f0       	breq	.+2      	; 0x1dde <commandDecode+0x140>
    1ddc:	33 c0       	rjmp	.+102    	; 0x1e44 <commandDecode+0x1a6>
    1dde:	f5 01       	movw	r30, r10
				// power_state = some new value (input yet to be determined, handle in GUI)
				UART0_putstring("Enter the desired state: ");
    1de0:	80 81       	ld	r24, Z
    1de2:	81 11       	cpse	r24, r1
				UART0_putchar('\n');
    1de4:	1c c0       	rjmp	.+56     	; 0x1e1e <commandDecode+0x180>
    1de6:	8d e2       	ldi	r24, 0x2D	; 45
				UART0_putchar('\n');
    1de8:	97 e0       	ldi	r25, 0x07	; 7
    1dea:	21 d1       	rcall	.+578    	; 0x202e <UART0_putstring>
				UART0_putchar('\r');
    1dec:	8a e0       	ldi	r24, 0x0A	; 10
    1dee:	0f d1       	rcall	.+542    	; 0x200e <UART0_putchar>
				UART0_putstring("> ");	
    1df0:	8a e0       	ldi	r24, 0x0A	; 10
    1df2:	0d d1       	rcall	.+538    	; 0x200e <UART0_putchar>
				UART0_getstring(power);
    1df4:	8d e0       	ldi	r24, 0x0D	; 13
    1df6:	0b d1       	rcall	.+534    	; 0x200e <UART0_putchar>
    1df8:	89 ec       	ldi	r24, 0xC9	; 201
				Manual_STATE(power, power_state);
    1dfa:	96 e0       	ldi	r25, 0x06	; 6
    1dfc:	18 d1       	rcall	.+560    	; 0x202e <UART0_putstring>
    1dfe:	c4 01       	movw	r24, r8
    1e00:	24 d1       	rcall	.+584    	; 0x204a <UART0_getstring>
				//UART0_putstring(power);  *****---->>> Putty echo now enabled not need
				Update_LOADS(power_state[0], power_state);
    1e02:	b6 01       	movw	r22, r12
    1e04:	c4 01       	movw	r24, r8
    1e06:	f8 da       	rcall	.-2576   	; 0x13f8 <Manual_STATE>
    1e08:	b6 01       	movw	r22, r12
				UART0_putchar('\n');
    1e0a:	f6 01       	movw	r30, r12
    1e0c:	80 81       	ld	r24, Z
				UART0_putchar('\n');
    1e0e:	70 d8       	rcall	.-3872   	; 0xef0 <Update_LOADS>
    1e10:	8a e0       	ldi	r24, 0x0A	; 10
				UART0_putchar('\r');
    1e12:	fd d0       	rcall	.+506    	; 0x200e <UART0_putchar>
    1e14:	8a e0       	ldi	r24, 0x0A	; 10
			}
			else{
				UART0_putstring("I am currently in Autonomous mode.");
    1e16:	fb d0       	rcall	.+502    	; 0x200e <UART0_putchar>
    1e18:	8d e0       	ldi	r24, 0x0D	; 13
				UART0_putchar('\n');
    1e1a:	f9 d0       	rcall	.+498    	; 0x200e <UART0_putchar>
    1e1c:	98 c0       	rjmp	.+304    	; 0x1f4e <commandDecode+0x2b0>
				UART0_putchar('\n');
    1e1e:	87 e4       	ldi	r24, 0x47	; 71
    1e20:	97 e0       	ldi	r25, 0x07	; 7
				UART0_putchar('\r');
    1e22:	05 d1       	rcall	.+522    	; 0x202e <UART0_putstring>
    1e24:	8a e0       	ldi	r24, 0x0A	; 10
				UART0_putstring("Select ModeChange [5] before attempting to change the power state.");
    1e26:	f3 d0       	rcall	.+486    	; 0x200e <UART0_putchar>
    1e28:	8a e0       	ldi	r24, 0x0A	; 10
    1e2a:	f1 d0       	rcall	.+482    	; 0x200e <UART0_putchar>
				UART0_putchar('\n');
    1e2c:	8d e0       	ldi	r24, 0x0D	; 13
    1e2e:	ef d0       	rcall	.+478    	; 0x200e <UART0_putchar>
				UART0_putchar('\n');
    1e30:	8a e6       	ldi	r24, 0x6A	; 106
    1e32:	97 e0       	ldi	r25, 0x07	; 7
    1e34:	fc d0       	rcall	.+504    	; 0x202e <UART0_putstring>
				UART0_putchar('\r');
    1e36:	8a e0       	ldi	r24, 0x0A	; 10
    1e38:	ea d0       	rcall	.+468    	; 0x200e <UART0_putchar>
    1e3a:	8a e0       	ldi	r24, 0x0A	; 10
				// Tell the user the EPS is still in autonomous mode and it must be changed
			}
		} //else if
		else if (strcmp(obc_command[com_ind], "PwrMatEdit") == 0) {
    1e3c:	e8 d0       	rcall	.+464    	; 0x200e <UART0_putchar>
    1e3e:	8d e0       	ldi	r24, 0x0D	; 13
    1e40:	e6 d0       	rcall	.+460    	; 0x200e <UART0_putchar>
    1e42:	85 c0       	rjmp	.+266    	; 0x1f4e <commandDecode+0x2b0>
    1e44:	6d ea       	ldi	r22, 0xAD	; 173
    1e46:	77 e0       	ldi	r23, 0x07	; 7
    1e48:	c8 01       	movw	r24, r16
			UART0_putstring("Enter the first dimension (rows): ");
    1e4a:	0e 94 2f 18 	call	0x305e	; 0x305e <strcmp>
    1e4e:	89 2b       	or	r24, r25
    1e50:	41 f5       	brne	.+80     	; 0x1ea2 <commandDecode+0x204>
			UART0_putchar('\n');
    1e52:	88 eb       	ldi	r24, 0xB8	; 184
    1e54:	97 e0       	ldi	r25, 0x07	; 7
    1e56:	eb d0       	rcall	.+470    	; 0x202e <UART0_putstring>
			UART0_putchar('\n');
    1e58:	8a e0       	ldi	r24, 0x0A	; 10
    1e5a:	d9 d0       	rcall	.+434    	; 0x200e <UART0_putchar>
    1e5c:	8a e0       	ldi	r24, 0x0A	; 10
			UART0_putchar('\r');
    1e5e:	d7 d0       	rcall	.+430    	; 0x200e <UART0_putchar>
    1e60:	8d e0       	ldi	r24, 0x0D	; 13
    1e62:	d5 d0       	rcall	.+426    	; 0x200e <UART0_putchar>
			UART0_putstring("> "); 
    1e64:	89 ec       	ldi	r24, 0xC9	; 201
    1e66:	96 e0       	ldi	r25, 0x06	; 6
    1e68:	e2 d0       	rcall	.+452    	; 0x202e <UART0_putstring>
    1e6a:	d9 d0       	rcall	.+434    	; 0x201e <UART0_getchar>
			char dim1 = UART0_getchar();
    1e6c:	18 2f       	mov	r17, r24
    1e6e:	8a e0       	ldi	r24, 0x0A	; 10
			UART0_putchar('\n');
    1e70:	ce d0       	rcall	.+412    	; 0x200e <UART0_putchar>
    1e72:	8a e0       	ldi	r24, 0x0A	; 10
			UART0_putchar('\n');
    1e74:	cc d0       	rcall	.+408    	; 0x200e <UART0_putchar>
    1e76:	8d e0       	ldi	r24, 0x0D	; 13
			UART0_putchar('\r'); 
    1e78:	ca d0       	rcall	.+404    	; 0x200e <UART0_putchar>
    1e7a:	8b ed       	ldi	r24, 0xDB	; 219
			UART0_putstring("Enter the second dimension (columns): ");
    1e7c:	97 e0       	ldi	r25, 0x07	; 7
    1e7e:	d7 d0       	rcall	.+430    	; 0x202e <UART0_putstring>
    1e80:	8a e0       	ldi	r24, 0x0A	; 10
    1e82:	c5 d0       	rcall	.+394    	; 0x200e <UART0_putchar>
			UART0_putchar('\n');
    1e84:	8a e0       	ldi	r24, 0x0A	; 10
    1e86:	c3 d0       	rcall	.+390    	; 0x200e <UART0_putchar>
    1e88:	8d e0       	ldi	r24, 0x0D	; 13
			UART0_putchar('\n');
    1e8a:	c1 d0       	rcall	.+386    	; 0x200e <UART0_putchar>
    1e8c:	89 ec       	ldi	r24, 0xC9	; 201
    1e8e:	96 e0       	ldi	r25, 0x06	; 6
			UART0_putchar('\r');
    1e90:	ce d0       	rcall	.+412    	; 0x202e <UART0_putstring>
    1e92:	c5 d0       	rcall	.+394    	; 0x201e <UART0_getchar>
    1e94:	60 ed       	ldi	r22, 0xD0	; 208
			UART0_putstring("> ");
    1e96:	68 0f       	add	r22, r24
    1e98:	a2 01       	movw	r20, r4
    1e9a:	80 ed       	ldi	r24, 0xD0	; 208
    1e9c:	81 0f       	add	r24, r17
			char dim2 = UART0_getchar();
    1e9e:	c4 da       	rcall	.-2680   	; 0x1428 <pwrMatChange>
    1ea0:	56 c0       	rjmp	.+172    	; 0x1f4e <commandDecode+0x2b0>
			pwrMatChange(dim1 - 0x30, dim2 - 0x30, newPwrMat);
    1ea2:	62 e0       	ldi	r22, 0x02	; 2
    1ea4:	78 e0       	ldi	r23, 0x08	; 8
    1ea6:	c8 01       	movw	r24, r16
    1ea8:	0e 94 2f 18 	call	0x305e	; 0x305e <strcmp>
		} //end else if
		else if (strcmp(obc_command[com_ind], "PwrStateRqt") == 0) {
    1eac:	89 2b       	or	r24, r25
    1eae:	09 f4       	brne	.+2      	; 0x1eb2 <commandDecode+0x214>
    1eb0:	4e c0       	rjmp	.+156    	; 0x1f4e <commandDecode+0x2b0>
    1eb2:	6e e0       	ldi	r22, 0x0E	; 14
    1eb4:	78 e0       	ldi	r23, 0x08	; 8
    1eb6:	c8 01       	movw	r24, r16
    1eb8:	0e 94 2f 18 	call	0x305e	; 0x305e <strcmp>
			//send the power state matrix cell to the obc
		} //end else if
		else if (strcmp(obc_command[com_ind], "ModeChange") == 0) {
    1ebc:	89 2b       	or	r24, r25
    1ebe:	b9 f4       	brne	.+46     	; 0x1eee <commandDecode+0x250>
    1ec0:	f5 01       	movw	r30, r10
    1ec2:	80 81       	ld	r24, Z
			// The character 0 must be sent to go into manual mode
			mode[0] = !mode[0]; // toggle the current mode
    1ec4:	91 e0       	ldi	r25, 0x01	; 1
    1ec6:	81 11       	cpse	r24, r1
    1ec8:	90 e0       	ldi	r25, 0x00	; 0
    1eca:	f5 01       	movw	r30, r10
			if(!mode[0]){
    1ecc:	90 83       	st	Z, r25
    1ece:	88 23       	and	r24, r24
				UART0_putstring("I am now in Manual mode.");
    1ed0:	21 f0       	breq	.+8      	; 0x1eda <commandDecode+0x23c>
    1ed2:	89 e1       	ldi	r24, 0x19	; 25
    1ed4:	98 e0       	ldi	r25, 0x08	; 8
    1ed6:	ab d0       	rcall	.+342    	; 0x202e <UART0_putstring>
    1ed8:	03 c0       	rjmp	.+6      	; 0x1ee0 <commandDecode+0x242>
			}
			else{
				UART0_putstring("I am now in Autonomous mode.");
    1eda:	82 e3       	ldi	r24, 0x32	; 50
    1edc:	98 e0       	ldi	r25, 0x08	; 8
    1ede:	a7 d0       	rcall	.+334    	; 0x202e <UART0_putstring>
    1ee0:	8a e0       	ldi	r24, 0x0A	; 10
			}
			UART0_putchar('\n');
    1ee2:	95 d0       	rcall	.+298    	; 0x200e <UART0_putchar>
    1ee4:	8a e0       	ldi	r24, 0x0A	; 10
    1ee6:	93 d0       	rcall	.+294    	; 0x200e <UART0_putchar>
			UART0_putchar('\n');
    1ee8:	8d e0       	ldi	r24, 0x0D	; 13
    1eea:	91 d0       	rcall	.+290    	; 0x200e <UART0_putchar>
    1eec:	30 c0       	rjmp	.+96     	; 0x1f4e <commandDecode+0x2b0>
			UART0_putchar('\r');
    1eee:	6f e4       	ldi	r22, 0x4F	; 79
    1ef0:	78 e0       	ldi	r23, 0x08	; 8
    1ef2:	c8 01       	movw	r24, r16
    1ef4:	0e 94 2f 18 	call	0x305e	; 0x305e <strcmp>
			//change or update the mode of the micro
			// In this state do not update the power state, simply remain in the one specified
			// Have an SOC thing here
		} //end else if
		else if (strcmp(obc_command[com_ind], "LaunchReset") == 0) {
    1ef8:	89 2b       	or	r24, r25
    1efa:	19 f4       	brne	.+6      	; 0x1f02 <commandDecode+0x264>
    1efc:	0e 94 1d 06 	call	0xc3a	; 0xc3a <launch_reset>
    1f00:	26 c0       	rjmp	.+76     	; 0x1f4e <commandDecode+0x2b0>
    1f02:	6b e5       	ldi	r22, 0x5B	; 91
			launch_reset();
    1f04:	78 e0       	ldi	r23, 0x08	; 8
    1f06:	c8 01       	movw	r24, r16
    1f08:	0e 94 2f 18 	call	0x305e	; 0x305e <strcmp>
			//reset the system to a pre-launch config
			// Use the watchdog to reset the system
		} //end else if
		else if (strcmp(obc_command[com_ind], "HelloCheck") == 0) {
    1f0c:	89 2b       	or	r24, r25
    1f0e:	51 f4       	brne	.+20     	; 0x1f24 <commandDecode+0x286>
    1f10:	86 e6       	ldi	r24, 0x66	; 102
    1f12:	98 e0       	ldi	r25, 0x08	; 8
    1f14:	8c d0       	rcall	.+280    	; 0x202e <UART0_putstring>
    1f16:	8a e0       	ldi	r24, 0x0A	; 10
			UART0_putstring("Oh Hello, I am CubeSat EPS. What's your Zodiac sign?");
    1f18:	7a d0       	rcall	.+244    	; 0x200e <UART0_putchar>
    1f1a:	8a e0       	ldi	r24, 0x0A	; 10
    1f1c:	78 d0       	rcall	.+240    	; 0x200e <UART0_putchar>
    1f1e:	8d e0       	ldi	r24, 0x0D	; 13
			UART0_putchar('\n');
    1f20:	76 d0       	rcall	.+236    	; 0x200e <UART0_putchar>
    1f22:	15 c0       	rjmp	.+42     	; 0x1f4e <commandDecode+0x2b0>
    1f24:	65 e5       	ldi	r22, 0x55	; 85
			UART0_putchar('\n');
    1f26:	78 e0       	ldi	r23, 0x08	; 8
    1f28:	c8 01       	movw	r24, r16
    1f2a:	0e 94 2f 18 	call	0x305e	; 0x305e <strcmp>
			UART0_putchar('\r');
    1f2e:	89 2b       	or	r24, r25
    1f30:	11 f4       	brne	.+4      	; 0x1f36 <commandDecode+0x298>
    1f32:	ab de       	rcall	.-682    	; 0x1c8a <Manual_RESET>
		} //end else if
		else if(strcmp(obc_command[com_ind], "Reset") == 0){
    1f34:	0c c0       	rjmp	.+24     	; 0x1f4e <commandDecode+0x2b0>
    1f36:	8b e9       	ldi	r24, 0x9B	; 155
    1f38:	98 e0       	ldi	r25, 0x08	; 8
    1f3a:	79 d0       	rcall	.+242    	; 0x202e <UART0_putstring>
    1f3c:	8a e0       	ldi	r24, 0x0A	; 10
    1f3e:	67 d0       	rcall	.+206    	; 0x200e <UART0_putchar>
    1f40:	8a e0       	ldi	r24, 0x0A	; 10
			Manual_RESET(); // Reset the EPS without changing launch state
    1f42:	65 d0       	rcall	.+202    	; 0x200e <UART0_putchar>
    1f44:	8d e0       	ldi	r24, 0x0D	; 13
    1f46:	63 d0       	rcall	.+198    	; 0x200e <UART0_putchar>
		}
		else {
			incorrect = 1;
			UART0_putstring("Command Unrecognized. Please Try again.");
    1f48:	8e e3       	ldi	r24, 0x3E	; 62
    1f4a:	61 d0       	rcall	.+194    	; 0x200e <UART0_putchar>
    1f4c:	04 cf       	rjmp	.-504    	; 0x1d56 <commandDecode+0xb8>
    1f4e:	c0 56       	subi	r28, 0x60	; 96
			UART0_putchar('\n');
    1f50:	df 4f       	sbci	r29, 0xFF	; 255
    1f52:	0f b6       	in	r0, 0x3f	; 63
    1f54:	f8 94       	cli
			UART0_putchar('\n');
    1f56:	de bf       	out	0x3e, r29	; 62
    1f58:	0f be       	out	0x3f, r0	; 63
    1f5a:	cd bf       	out	0x3d, r28	; 61
			UART0_putchar('\r');
    1f5c:	df 91       	pop	r29
    1f5e:	cf 91       	pop	r28
    1f60:	1f 91       	pop	r17
			UART0_putchar('>');
    1f62:	0f 91       	pop	r16
    1f64:	ff 90       	pop	r15
    1f66:	ef 90       	pop	r14
    1f68:	df 90       	pop	r13
			//UART0_putstring(strcat("Error! The following command isn't recognized: ", obc_command));
		} //end else
	} //end while
} //end commandDecode
    1f6a:	cf 90       	pop	r12
    1f6c:	bf 90       	pop	r11
    1f6e:	af 90       	pop	r10
    1f70:	9f 90       	pop	r9
    1f72:	8f 90       	pop	r8
    1f74:	7f 90       	pop	r7
    1f76:	6f 90       	pop	r6
    1f78:	5f 90       	pop	r5
    1f7a:	4f 90       	pop	r4
    1f7c:	08 95       	ret

00001f7e <GPIO_init>:

void GPIO_init(){
	
	// Initializing the PORTs
	
	DDRH = 0x7F; // PORTH pins 0-6 set as outputs
    1f7e:	8f e7       	ldi	r24, 0x7F	; 127
    1f80:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <__TEXT_REGION_LENGTH__+0x7e0101>
	DDRL = 0x0E; // PORTL pins 1-3 set as outputs
    1f84:	9e e0       	ldi	r25, 0x0E	; 14
    1f86:	90 93 0a 01 	sts	0x010A, r25	; 0x80010a <__TEXT_REGION_LENGTH__+0x7e010a>
	DDRA = 0xF0; // PORTA pins 4-7 set as outputs
    1f8a:	90 ef       	ldi	r25, 0xF0	; 240
    1f8c:	91 b9       	out	0x01, r25	; 1
	DDRJ = 0x7F; // PORTJ pins 0-6 set as outputs
    1f8e:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <__TEXT_REGION_LENGTH__+0x7e0104>
	DDRC = 0xFF; // PORTC pins 0-7 set as outputs
    1f92:	8f ef       	ldi	r24, 0xFF	; 255
    1f94:	87 b9       	out	0x07, r24	; 7
	
	// Set Output as Low
	PORTH = 0x02; // pin 1 set high to inhibit temperature measurement
    1f96:	82 e0       	ldi	r24, 0x02	; 2
    1f98:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <__TEXT_REGION_LENGTH__+0x7e0102>
	PORTL = 0x00;
    1f9c:	10 92 0b 01 	sts	0x010B, r1	; 0x80010b <__TEXT_REGION_LENGTH__+0x7e010b>
	PORTA = 0x00;
    1fa0:	12 b8       	out	0x02, r1	; 2
	PORTJ = 0x00; 
    1fa2:	10 92 05 01 	sts	0x0105, r1	; 0x800105 <__TEXT_REGION_LENGTH__+0x7e0105>
	PORTC = 0x00;
    1fa6:	18 b8       	out	0x08, r1	; 8
    1fa8:	08 95       	ret

00001faa <ADC_init>:
/*========================================================================================*/

void ADC_init(){
	
	// Enable as Input
	DDRF = 0x00;
    1faa:	10 ba       	out	0x10, r1	; 16
	
	// Enable the 1.1V internal reference
	//ADMUX |= ((REFS1 << 0) | (REFS0 << 0)); // set the first bit to 1
	ADMUX = 0x00;
    1fac:	10 92 7c 00 	sts	0x007C, r1	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>
	
	// Enable the ADC via the status control register & enable interrupt
	//ADCSRA |= (ADEN << 1) | (ADPS2 << 1) | (ADPS0 << 1) | (ADIE << 1);
	ADCSRA = 0x85;
    1fb0:	85 e8       	ldi	r24, 0x85	; 133
    1fb2:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
    1fb6:	08 95       	ret

00001fb8 <CLK_init>:
/*========================================================================================*/

CLK_init(){
	
	// Enable Timer 1
	TCCR1B = 0x04;
    1fb8:	84 e0       	ldi	r24, 0x04	; 4
    1fba:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
	
	// Enable Output Compare Interrupt
	TIMSK1 = 0x02;
    1fbe:	82 e0       	ldi	r24, 0x02	; 2
    1fc0:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__TEXT_REGION_LENGTH__+0x7e006f>
	
	// Set Counter to 65,536 clock cycles (MAX)
	OCR1A = 0xff;
    1fc4:	8f ef       	ldi	r24, 0xFF	; 255
    1fc6:	90 e0       	ldi	r25, 0x00	; 0
    1fc8:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
    1fcc:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
	
	// Set clock to 0
	TCNT1 = 0x0000;
    1fd0:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
    1fd4:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
    1fd8:	08 95       	ret

00001fda <UART0_init>:
/*========================================================================================*/

void UART0_init(){
	
	// Using the values from set baud tool
	UBRR0H = UBRRH_VALUE;
    1fda:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
	UBRR0L = UBRRL_VALUE;
    1fde:	8c e0       	ldi	r24, 0x0C	; 12
    1fe0:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
	
	// Enable TX & RX and Enable RX complete interrupt
	UCSR0B = 0x98; // enabling bits 4 & 3 (RX & TX) ****** RE-ENABLE INTERRUPT!!!!!!!
    1fe4:	88 e9       	ldi	r24, 0x98	; 152
    1fe6:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
	
	
	// Set up the format 8bit no parity
	UCSR0C = 0x06; // enable 8 bit chars
    1fea:	86 e0       	ldi	r24, 0x06	; 6
    1fec:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7e00c2>
    1ff0:	08 95       	ret

00001ff2 <WD_init>:
/*========================================================================================*/

void WD_init(){
	
	// Reset the MCU reset flag
	MCUSR &= 0xf7; // changes bit 3 to 0
    1ff2:	84 b7       	in	r24, 0x34	; 52
    1ff4:	87 7f       	andi	r24, 0xF7	; 247
    1ff6:	84 bf       	out	0x34, r24	; 52
	
	// Enable the interrupt/system reset mode
	wdt_enable(INTERRUPT_SYSTEM_RESET_MODE);
    1ff8:	82 e0       	ldi	r24, 0x02	; 2
    1ffa:	6c d0       	rcall	.+216    	; 0x20d4 <wdt_enable>
	
	// Set pre-scaler to 8s
	wdt_set_timeout_period(WDT_TIMEOUT_PERIOD_1024KCLK);
    1ffc:	89 e0       	ldi	r24, 0x09	; 9
    1ffe:	46 c0       	rjmp	.+140    	; 0x208c <wdt_set_timeout_period>
    2000:	08 95       	ret

00002002 <ALL_init>:
/*========================================================================================*/

void ALL_init(){
	
	// Initialize GPIO
	GPIO_init();
    2002:	bd df       	rcall	.-134    	; 0x1f7e <GPIO_init>
	
	// Initialize the ADC
	ADC_init();
    2004:	d2 df       	rcall	.-92     	; 0x1faa <ADC_init>
	
	// Initialize UART
	UART0_init();
    2006:	e9 df       	rcall	.-46     	; 0x1fda <UART0_init>
	
	// Initialize Timer (CLK) *** NOT during testing ***
	CLK_init();
    2008:	d7 df       	rcall	.-82     	; 0x1fb8 <CLK_init>
    200a:	f3 cf       	rjmp	.-26     	; 0x1ff2 <WD_init>
	
	// Initialize Watchdog Timer
	WD_init();
    200c:	08 95       	ret

0000200e <UART0_putchar>:
    200e:	e0 ec       	ldi	r30, 0xC0	; 192
    2010:	f0 e0       	ldi	r31, 0x00	; 0
/*========================================================================================*/

void UART0_putchar(char h){
	
	// wait for transmit buffer to be empty
	while(! (UCSR0A & (1 << UDRE0)));
    2012:	90 81       	ld	r25, Z
    2014:	95 ff       	sbrs	r25, 5
    2016:	fd cf       	rjmp	.-6      	; 0x2012 <UART0_putchar+0x4>
	
	// Put data to be transmitted into buffer
	UDR0 = h; // write to the data register
    2018:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
    201c:	08 95       	ret

0000201e <UART0_getchar>:
/*========================================================================================*/

char UART0_getchar(){
	
	// wait for data to be received
	while (!( UCSR0A & (1 << RXC0)));
    201e:	e0 ec       	ldi	r30, 0xC0	; 192
    2020:	f0 e0       	ldi	r31, 0x00	; 0
    2022:	80 81       	ld	r24, Z
    2024:	88 23       	and	r24, r24
    2026:	ec f7       	brge	.-6      	; 0x2022 <UART0_getchar+0x4>
	
	// return the received character
	return UDR0;
    2028:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
	
}
    202c:	08 95       	ret

0000202e <UART0_putstring>:
// Author: Chris Thomas
// Date: 2019-03-13
// Description: Writes strings via UART0 using putchar.
/*========================================================================================*/

void UART0_putstring(char *string){
    202e:	cf 93       	push	r28
    2030:	df 93       	push	r29
    2032:	ec 01       	movw	r28, r24
	while(*string){
    2034:	88 81       	ld	r24, Y
    2036:	88 23       	and	r24, r24
    2038:	29 f0       	breq	.+10     	; 0x2044 <UART0_putstring+0x16>
    203a:	21 96       	adiw	r28, 0x01	; 1
		UART0_putchar(*string++);
    203c:	e8 df       	rcall	.-48     	; 0x200e <UART0_putchar>
// Date: 2019-03-13
// Description: Writes strings via UART0 using putchar.
/*========================================================================================*/

void UART0_putstring(char *string){
	while(*string){
    203e:	89 91       	ld	r24, Y+
    2040:	81 11       	cpse	r24, r1
    2042:	fc cf       	rjmp	.-8      	; 0x203c <UART0_putstring+0xe>
		UART0_putchar(*string++);
	}
}
    2044:	df 91       	pop	r29
    2046:	cf 91       	pop	r28
    2048:	08 95       	ret

0000204a <UART0_getstring>:
// Date: 2019-03-13
// Description: Reads strings via UART0 using getchar.
/*========================================================================================*/


void UART0_getstring(char* message){
    204a:	ef 92       	push	r14
    204c:	ff 92       	push	r15
    204e:	0f 93       	push	r16
    2050:	1f 93       	push	r17
    2052:	cf 93       	push	r28
    2054:	df 93       	push	r29
    2056:	7c 01       	movw	r14, r24
	char prev;
	int i = 0;
	
	// Check the first value for the terminator ' ' (SPACE)
	prev = UART0_getchar();
    2058:	e2 df       	rcall	.-60     	; 0x201e <UART0_getchar>
	
	// Check previous value for terminator (SPACE)
	while(prev != 0x0D){
    205a:	8d 30       	cpi	r24, 0x0D	; 13
    205c:	59 f0       	breq	.+22     	; 0x2074 <UART0_getstring+0x2a>
    205e:	87 01       	movw	r16, r14
    2060:	c0 e0       	ldi	r28, 0x00	; 0
    2062:	d0 e0       	ldi	r29, 0x00	; 0
		message[i] = prev; // save the char if it isn't the terminator
    2064:	f8 01       	movw	r30, r16
    2066:	81 93       	st	Z+, r24
    2068:	8f 01       	movw	r16, r30
		i++;
		prev = UART0_getchar();
    206a:	21 96       	adiw	r28, 0x01	; 1
    206c:	d8 df       	rcall	.-80     	; 0x201e <UART0_getchar>
	
	// Check the first value for the terminator ' ' (SPACE)
	prev = UART0_getchar();
	
	// Check previous value for terminator (SPACE)
	while(prev != 0x0D){
    206e:	8d 30       	cpi	r24, 0x0D	; 13
    2070:	c9 f7       	brne	.-14     	; 0x2064 <UART0_getstring+0x1a>
    2072:	02 c0       	rjmp	.+4      	; 0x2078 <UART0_getstring+0x2e>
/*========================================================================================*/


void UART0_getstring(char* message){
	char prev;
	int i = 0;
    2074:	c0 e0       	ldi	r28, 0x00	; 0
    2076:	d0 e0       	ldi	r29, 0x00	; 0
	while(prev != 0x0D){
		message[i] = prev; // save the char if it isn't the terminator
		i++;
		prev = UART0_getchar();
	}
	message[i] = '\0';
    2078:	ce 0d       	add	r28, r14
    207a:	df 1d       	adc	r29, r15
    207c:	18 82       	st	Y, r1
    207e:	df 91       	pop	r29
    2080:	cf 91       	pop	r28
    2082:	1f 91       	pop	r17
    2084:	0f 91       	pop	r16
    2086:	ff 90       	pop	r15
    2088:	ef 90       	pop	r14
    208a:	08 95       	ret

0000208c <wdt_set_timeout_period>:
 *  This function is written in asm where ever the time is critical
 *
 *  \param  to_period  WDT timeout period
 */
void wdt_set_timeout_period(enum wdt_timeout_period to_period)
{
    208c:	cf 93       	push	r28
    208e:	df 93       	push	r29
    2090:	1f 92       	push	r1
    2092:	cd b7       	in	r28, 0x3d	; 61
    2094:	de b7       	in	r29, 0x3e	; 62
	/* Store the prescale value to temp register */
#if defined (__GNUC__)
	asm ("MOV R19,R24");
    2096:	38 2f       	mov	r19, r24
#else
#error Unsupported compiler.
#endif

	/* Mask for WDP3 */
	if (to_period & MASK_PRESCALE_WPD3) {
    2098:	83 ff       	sbrs	r24, 3
    209a:	02 c0       	rjmp	.+4      	; 0x20a0 <wdt_set_timeout_period+0x14>
		asm ("LDI R21,0x20");
    209c:	50 e2       	ldi	r21, 0x20	; 32
    209e:	01 c0       	rjmp	.+2      	; 0x20a2 <wdt_set_timeout_period+0x16>
	} else {
		asm ("LDI R21,0x00");
    20a0:	50 e0       	ldi	r21, 0x00	; 0

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    20a2:	8f b7       	in	r24, 0x3f	; 63
    20a4:	89 83       	std	Y+1, r24	; 0x01
	cpu_irq_disable();
    20a6:	f8 94       	cli
	return flags;
    20a8:	89 81       	ldd	r24, Y+1	; 0x01

	/* Disable Global interrupt */
	uint8_t sreg = cpu_irq_save();

	/* Reset Watchdog timer */
	wdt_reset();
    20aa:	a8 95       	wdr

	asm ("LDI R17,0xD8");
    20ac:	18 ed       	ldi	r17, 0xD8	; 216
	asm ("LDS R18,0x60");   /* WDTCSR Address = 0x60 */
    20ae:	20 91 60 00 	lds	r18, 0x0060	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
	asm ("AND R17,R18");
    20b2:	12 23       	and	r17, r18
	asm ("STS 0x60,R17");   /* WDTCSR Address = 0x60 */
    20b4:	10 93 60 00 	sts	0x0060, r17	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
	/* Load the new prescale value */
	asm ("LDI R20,0x18");
    20b8:	48 e1       	ldi	r20, 0x18	; 24
	asm ("LDI R18,0x07");
    20ba:	27 e0       	ldi	r18, 0x07	; 7
	asm ("AND R19,R18");
    20bc:	32 23       	and	r19, r18
	asm ("OR R19,R21");
    20be:	35 2b       	or	r19, r21
	asm ("OR R19,R17");
    20c0:	31 2b       	or	r19, r17
	/* Write logical one to WDCE and WDE */
	asm ("STS 0x60,R20");   /* WDTCSR Address = 0x60 */
    20c2:	40 93 60 00 	sts	0x0060, r20	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
	/* Write new prescale setting */
	asm ("STS 0x60,R19");   /* WDTCSR Address = 0x60 */
    20c6:	30 93 60 00 	sts	0x0060, r19	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    20ca:	8f bf       	out	0x3f, r24	; 63

	/* Restore Global interrupt */
	cpu_irq_restore(sreg);
}
    20cc:	0f 90       	pop	r0
    20ce:	df 91       	pop	r29
    20d0:	cf 91       	pop	r28
    20d2:	08 95       	ret

000020d4 <wdt_enable>:
 * This function is written in asm where ever the time is critical
 *
 * \param mode WDT timer mode selection
 */
void wdt_enable(enum wdt_mode_select mode)
{
    20d4:	cf 93       	push	r28
    20d6:	df 93       	push	r29
    20d8:	1f 92       	push	r1
    20da:	cd b7       	in	r28, 0x3d	; 61
    20dc:	de b7       	in	r29, 0x3e	; 62

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    20de:	9f b7       	in	r25, 0x3f	; 63
    20e0:	99 83       	std	Y+1, r25	; 0x01
	cpu_irq_disable();
    20e2:	f8 94       	cli
	return flags;
    20e4:	29 81       	ldd	r18, Y+1	; 0x01
	/* Disable Global interrupt */
	uint8_t sreg = cpu_irq_save();

	/* Reset Watchdog timer */
	wdt_reset();
    20e6:	a8 95       	wdr
 ***\param  none
 */
static inline void wdt_reset_flag_clear(void)
{
	/* Clear WDRF flag in MCUSR */
	MCUSR &= ~WDRF_bm;
    20e8:	94 b7       	in	r25, 0x34	; 52
    20ea:	97 7f       	andi	r25, 0xF7	; 247
    20ec:	94 bf       	out	0x34, r25	; 52

	/* Clear WDRF flag in MCUSR */
	wdt_reset_flag_clear();

	/*System reset mode */
	if (mode == SYSTEM_RESET_MODE) {
    20ee:	81 30       	cpi	r24, 0x01	; 1
    20f0:	59 f4       	brne	.+22     	; 0x2108 <wdt_enable+0x34>
		/* Write logical zero to WDIE */
		asm ("LDI R17,0xBF");
    20f2:	1f eb       	ldi	r17, 0xBF	; 191
		asm ("LDS R18,0x60"); /* WDTCSR Address = 0x60 */
    20f4:	20 91 60 00 	lds	r18, 0x0060	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
		asm ("AND R17,R18");
    20f8:	12 23       	and	r17, r18
		asm ("STS 0x60,R17"); /* WDTCSR Address = 0x60 */
    20fa:	10 93 60 00 	sts	0x0060, r17	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
		/* Write WDIF,WDE and WDCE to logical one */
		asm ("LDI R18,0x98");
    20fe:	28 e9       	ldi	r18, 0x98	; 152
		asm ("OR R18,R17");
    2100:	21 2b       	or	r18, r17
		asm ("STS 0x60,R18"); /* WDTCSR Address = 0x60 */
    2102:	20 93 60 00 	sts	0x0060, r18	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
    2106:	1c c0       	rjmp	.+56     	; 0x2140 <wdt_enable+0x6c>
	}
	/* Interrupt mode */
	else if (mode == INTERRUPT_MODE) {
    2108:	81 11       	cpse	r24, r1
    210a:	0e c0       	rjmp	.+28     	; 0x2128 <wdt_enable+0x54>
		/* Write logical zero to WDE */
		asm ("LDI R17,0xF7");
    210c:	17 ef       	ldi	r17, 0xF7	; 247
		asm ("LDS R18,0x60"); /* WDTCSR Address = 0x60 */
    210e:	20 91 60 00 	lds	r18, 0x0060	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
		asm ("AND R17,R18");
    2112:	12 23       	and	r17, r18
		asm ("STS 0x60,R17"); /* WDTCSR Address = 0x60 */
    2114:	10 93 60 00 	sts	0x0060, r17	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
		asm ("LDI R20,0x18");
    2118:	48 e1       	ldi	r20, 0x18	; 24
		asm ("LDI R19,0xD0");
    211a:	30 ed       	ldi	r19, 0xD0	; 208
		asm ("OR R19,R17");
    211c:	31 2b       	or	r19, r17
		/* Write logical one to WDCE and WDE */
		asm ("STS 0x60,R20"); /* WDTCSR Address = 0x60 */
    211e:	40 93 60 00 	sts	0x0060, r20	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
		/* Write WDIF,WDIE and WDCE to logical one */
		asm ("STS 0x60,R19"); /* WDTCSR Address = 0x60 */
    2122:	30 93 60 00 	sts	0x0060, r19	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
    2126:	0c c0       	rjmp	.+24     	; 0x2140 <wdt_enable+0x6c>
	}
	/* Interrupt and System reset mode */
	else if (mode == INTERRUPT_SYSTEM_RESET_MODE) {
    2128:	82 30       	cpi	r24, 0x02	; 2
    212a:	51 f4       	brne	.+20     	; 0x2140 <wdt_enable+0x6c>
		/* Write logical zero to WDE */
		asm ("LDI R17,0xF7");
    212c:	17 ef       	ldi	r17, 0xF7	; 247
		asm ("LDS R18,0x60"); /* WDTCSR Address = 0x60 */
    212e:	20 91 60 00 	lds	r18, 0x0060	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
		asm ("AND R17,R18");
    2132:	12 23       	and	r17, r18
		asm ("STS 0x60,R17"); /* WDTCSR Address = 0x60 */
    2134:	10 93 60 00 	sts	0x0060, r17	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
		/* Write logical one to WDCE, WDIE,WDIF and WDE */
		asm ("LDI R18,0xD8");
    2138:	28 ed       	ldi	r18, 0xD8	; 216
		asm ("OR R18,R17");
    213a:	21 2b       	or	r18, r17
		asm ("STS 0x60,R18"); /* WDTCSR Address = 0x60 */
    213c:	20 93 60 00 	sts	0x0060, r18	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    2140:	2f bf       	out	0x3f, r18	; 63
	}

	/* Restore Global interrupt */
	cpu_irq_restore(sreg);
}
    2142:	0f 90       	pop	r0
    2144:	df 91       	pop	r29
    2146:	cf 91       	pop	r28
    2148:	08 95       	ret

0000214a <__vector_17>:
// Date: 2019-03-18
// Description: Interrupt occurs when timer register overflow flag is set, and
//				calls for telemetry data to be updated.
/*========================================================================================*/

ISR(TIMER1_COMPA_vect){
    214a:	1f 92       	push	r1
    214c:	0f 92       	push	r0
    214e:	0f b6       	in	r0, 0x3f	; 63
    2150:	0f 92       	push	r0
    2152:	11 24       	eor	r1, r1
    2154:	2f 93       	push	r18
    2156:	3f 93       	push	r19
    2158:	4f 93       	push	r20
    215a:	5f 93       	push	r21
    215c:	6f 93       	push	r22
    215e:	7f 93       	push	r23
    2160:	8f 93       	push	r24
    2162:	9f 93       	push	r25
    2164:	af 93       	push	r26
    2166:	bf 93       	push	r27
    2168:	ef 93       	push	r30
    216a:	ff 93       	push	r31
	
	// Disable Interrupts
	cli();
    216c:	f8 94       	cli
	
	// Update Telemetry information
	Update_TELEM(telem, power_state[0]);
    216e:	60 91 c6 08 	lds	r22, 0x08C6	; 0x8008c6 <power_state>
    2172:	8b ef       	ldi	r24, 0xFB	; 251
    2174:	98 e0       	ldi	r25, 0x08	; 8
    2176:	6a da       	rcall	.-2860   	; 0x164c <Update_TELEM>
	
	// Check Power State
	temp = telem[11];
    2178:	eb ef       	ldi	r30, 0xFB	; 251
    217a:	f8 e0       	ldi	r31, 0x08	; 8
    217c:	84 a5       	ldd	r24, Z+44	; 0x2c
    217e:	95 a5       	ldd	r25, Z+45	; 0x2d
    2180:	a6 a5       	ldd	r26, Z+46	; 0x2e
    2182:	b7 a5       	ldd	r27, Z+47	; 0x2f
    2184:	80 93 cd 08 	sts	0x08CD, r24	; 0x8008cd <temp>
    2188:	90 93 ce 08 	sts	0x08CE, r25	; 0x8008ce <temp+0x1>
    218c:	a0 93 cf 08 	sts	0x08CF, r26	; 0x8008cf <temp+0x2>
    2190:	b0 93 d0 08 	sts	0x08D0, r27	; 0x8008d0 <temp+0x3>
	soc = SoC_ADC(telem[10],telem[4]);
    2194:	20 89       	ldd	r18, Z+16	; 0x10
    2196:	31 89       	ldd	r19, Z+17	; 0x11
    2198:	42 89       	ldd	r20, Z+18	; 0x12
    219a:	53 89       	ldd	r21, Z+19	; 0x13
    219c:	60 a5       	ldd	r22, Z+40	; 0x28
    219e:	71 a5       	ldd	r23, Z+41	; 0x29
    21a0:	82 a5       	ldd	r24, Z+42	; 0x2a
    21a2:	93 a5       	ldd	r25, Z+43	; 0x2b
    21a4:	0e 94 5c 03 	call	0x6b8	; 0x6b8 <SoC_ADC>
    21a8:	60 93 d5 08 	sts	0x08D5, r22	; 0x8008d5 <soc>
    21ac:	70 93 d6 08 	sts	0x08D6, r23	; 0x8008d6 <soc+0x1>
    21b0:	80 93 d7 08 	sts	0x08D7, r24	; 0x8008d7 <soc+0x2>
    21b4:	90 93 d8 08 	sts	0x08D8, r25	; 0x8008d8 <soc+0x3>
	
	if(mode[0]){
    21b8:	20 91 00 02 	lds	r18, 0x0200	; 0x800200 <__data_start>
    21bc:	22 23       	and	r18, r18
    21be:	39 f1       	breq	.+78     	; 0x220e <__stack+0xf>
		// Update power state
		state_num = PowerStateCheck(soc, temp);
    21c0:	20 91 cd 08 	lds	r18, 0x08CD	; 0x8008cd <temp>
    21c4:	30 91 ce 08 	lds	r19, 0x08CE	; 0x8008ce <temp+0x1>
    21c8:	40 91 cf 08 	lds	r20, 0x08CF	; 0x8008cf <temp+0x2>
    21cc:	50 91 d0 08 	lds	r21, 0x08D0	; 0x8008d0 <temp+0x3>
    21d0:	0e 94 af 07 	call	0xf5e	; 0xf5e <PowerStateCheck>
    21d4:	90 93 c8 08 	sts	0x08C8, r25	; 0x8008c8 <state_num+0x1>
    21d8:	80 93 c7 08 	sts	0x08C7, r24	; 0x8008c7 <state_num>
		power_state[0] = pwrMat[state_num];
    21dc:	fc 01       	movw	r30, r24
    21de:	e7 52       	subi	r30, 0x27	; 39
    21e0:	f7 4f       	sbci	r31, 0xF7	; 247
    21e2:	60 81       	ld	r22, Z
    21e4:	60 93 c6 08 	sts	0x08C6, r22	; 0x8008c6 <power_state>
		// Update the state of the loads
		Update_STATE(power, power_state[0]);
    21e8:	82 ef       	ldi	r24, 0xF2	; 242
    21ea:	98 e0       	ldi	r25, 0x08	; 8
    21ec:	f1 d8       	rcall	.-3614   	; 0x13d0 <Update_STATE>
		Update_LOADS(power_state[0], power_state);
    21ee:	66 ec       	ldi	r22, 0xC6	; 198
    21f0:	78 e0       	ldi	r23, 0x08	; 8
    21f2:	80 91 c6 08 	lds	r24, 0x08C6	; 0x8008c6 <power_state>
    21f6:	0e 94 78 07 	call	0xef0	; 0xef0 <Update_LOADS>
		Update_OBC(telem, power, state_num, mode[0]);
    21fa:	20 91 00 02 	lds	r18, 0x0200	; 0x800200 <__data_start>
    21fe:	40 91 c7 08 	lds	r20, 0x08C7	; 0x8008c7 <state_num>
    2202:	62 ef       	ldi	r22, 0xF2	; 242
    2204:	78 e0       	ldi	r23, 0x08	; 8
    2206:	8b ef       	ldi	r24, 0xFB	; 251
    2208:	98 e0       	ldi	r25, 0x08	; 8
    220a:	8a da       	rcall	.-2796   	; 0x1720 <Update_OBC>
    220c:	14 c0       	rjmp	.+40     	; 0x2236 <__stack+0x37>
	}
	else{
		Update_STATE(power, power_state[0]);
    220e:	60 91 c6 08 	lds	r22, 0x08C6	; 0x8008c6 <power_state>
    2212:	82 ef       	ldi	r24, 0xF2	; 242
    2214:	98 e0       	ldi	r25, 0x08	; 8
    2216:	dc d8       	rcall	.-3656   	; 0x13d0 <Update_STATE>
		Update_LOADS(power_state[0], power_state);
    2218:	66 ec       	ldi	r22, 0xC6	; 198
    221a:	78 e0       	ldi	r23, 0x08	; 8
    221c:	80 91 c6 08 	lds	r24, 0x08C6	; 0x8008c6 <power_state>
    2220:	0e 94 78 07 	call	0xef0	; 0xef0 <Update_LOADS>
		Update_OBC(telem, power, state_num, mode[0]);
    2224:	20 91 00 02 	lds	r18, 0x0200	; 0x800200 <__data_start>
    2228:	40 91 c7 08 	lds	r20, 0x08C7	; 0x8008c7 <state_num>
    222c:	62 ef       	ldi	r22, 0xF2	; 242
    222e:	78 e0       	ldi	r23, 0x08	; 8
    2230:	8b ef       	ldi	r24, 0xFB	; 251
    2232:	98 e0       	ldi	r25, 0x08	; 8
    2234:	75 da       	rcall	.-2838   	; 0x1720 <Update_OBC>
	
	// Print the state of charge and power matrix index
	
	
	// Save previous states for less computation
	prev_state[0] = power_state[0];
    2236:	80 91 c6 08 	lds	r24, 0x08C6	; 0x8008c6 <power_state>
    223a:	80 93 c5 08 	sts	0x08C5, r24	; 0x8008c5 <prev_state>
	prev_temp  = temp;
    223e:	80 91 cd 08 	lds	r24, 0x08CD	; 0x8008cd <temp>
    2242:	90 91 ce 08 	lds	r25, 0x08CE	; 0x8008ce <temp+0x1>
    2246:	a0 91 cf 08 	lds	r26, 0x08CF	; 0x8008cf <temp+0x2>
    224a:	b0 91 d0 08 	lds	r27, 0x08D0	; 0x8008d0 <temp+0x3>
    224e:	80 93 c9 08 	sts	0x08C9, r24	; 0x8008c9 <prev_temp>
    2252:	90 93 ca 08 	sts	0x08CA, r25	; 0x8008ca <prev_temp+0x1>
    2256:	a0 93 cb 08 	sts	0x08CB, r26	; 0x8008cb <prev_temp+0x2>
    225a:	b0 93 cc 08 	sts	0x08CC, r27	; 0x8008cc <prev_temp+0x3>
	prev_soc = soc;
    225e:	80 91 d5 08 	lds	r24, 0x08D5	; 0x8008d5 <soc>
    2262:	90 91 d6 08 	lds	r25, 0x08D6	; 0x8008d6 <soc+0x1>
    2266:	a0 91 d7 08 	lds	r26, 0x08D7	; 0x8008d7 <soc+0x2>
    226a:	b0 91 d8 08 	lds	r27, 0x08D8	; 0x8008d8 <soc+0x3>
    226e:	80 93 d1 08 	sts	0x08D1, r24	; 0x8008d1 <prev_soc>
    2272:	90 93 d2 08 	sts	0x08D2, r25	; 0x8008d2 <prev_soc+0x1>
    2276:	a0 93 d3 08 	sts	0x08D3, r26	; 0x8008d3 <prev_soc+0x2>
    227a:	b0 93 d4 08 	sts	0x08D4, r27	; 0x8008d4 <prev_soc+0x3>
	
	// Re-enable interrupts
	sei();
    227e:	78 94       	sei
		
}
    2280:	ff 91       	pop	r31
    2282:	ef 91       	pop	r30
    2284:	bf 91       	pop	r27
    2286:	af 91       	pop	r26
    2288:	9f 91       	pop	r25
    228a:	8f 91       	pop	r24
    228c:	7f 91       	pop	r23
    228e:	6f 91       	pop	r22
    2290:	5f 91       	pop	r21
    2292:	4f 91       	pop	r20
    2294:	3f 91       	pop	r19
    2296:	2f 91       	pop	r18
    2298:	0f 90       	pop	r0
    229a:	0f be       	out	0x3f, r0	; 63
    229c:	0f 90       	pop	r0
    229e:	1f 90       	pop	r1
    22a0:	18 95       	reti

000022a2 <__vector_25>:

ISR(USART0_RX_vect){
    22a2:	1f 92       	push	r1
    22a4:	0f 92       	push	r0
    22a6:	0f b6       	in	r0, 0x3f	; 63
    22a8:	0f 92       	push	r0
    22aa:	11 24       	eor	r1, r1
    22ac:	ef 92       	push	r14
    22ae:	0f 93       	push	r16
    22b0:	1f 93       	push	r17
    22b2:	2f 93       	push	r18
    22b4:	3f 93       	push	r19
    22b6:	4f 93       	push	r20
    22b8:	5f 93       	push	r21
    22ba:	6f 93       	push	r22
    22bc:	7f 93       	push	r23
    22be:	8f 93       	push	r24
    22c0:	9f 93       	push	r25
    22c2:	af 93       	push	r26
    22c4:	bf 93       	push	r27
    22c6:	ef 93       	push	r30
    22c8:	ff 93       	push	r31
	
	cli();
    22ca:	f8 94       	cli
	
	//wdt_disable();
	
	fake = UART0_getchar();
    22cc:	a8 de       	rcall	.-688    	; 0x201e <UART0_getchar>
    22ce:	80 93 30 09 	sts	0x0930, r24	; 0x800930 <fake>
	commandDecode(telem, mode, power_state, power, newPwrMat, state_num);
    22d2:	e0 90 c7 08 	lds	r14, 0x08C7	; 0x8008c7 <state_num>
    22d6:	0b e2       	ldi	r16, 0x2B	; 43
    22d8:	19 e0       	ldi	r17, 0x09	; 9
    22da:	22 ef       	ldi	r18, 0xF2	; 242
    22dc:	38 e0       	ldi	r19, 0x08	; 8
    22de:	46 ec       	ldi	r20, 0xC6	; 198
    22e0:	58 e0       	ldi	r21, 0x08	; 8
    22e2:	60 e0       	ldi	r22, 0x00	; 0
    22e4:	72 e0       	ldi	r23, 0x02	; 2
    22e6:	8b ef       	ldi	r24, 0xFB	; 251
    22e8:	98 e0       	ldi	r25, 0x08	; 8
    22ea:	d9 dc       	rcall	.-1614   	; 0x1c9e <commandDecode>
	
	//wdt_enable(INTERRUPT_SYSTEM_RESET_MODE);
	
	sei();
    22ec:	78 94       	sei
}
    22ee:	ff 91       	pop	r31
    22f0:	ef 91       	pop	r30
    22f2:	bf 91       	pop	r27
    22f4:	af 91       	pop	r26
    22f6:	9f 91       	pop	r25
    22f8:	8f 91       	pop	r24
    22fa:	7f 91       	pop	r23
    22fc:	6f 91       	pop	r22
    22fe:	5f 91       	pop	r21
    2300:	4f 91       	pop	r20
    2302:	3f 91       	pop	r19
    2304:	2f 91       	pop	r18
    2306:	1f 91       	pop	r17
    2308:	0f 91       	pop	r16
    230a:	ef 90       	pop	r14
    230c:	0f 90       	pop	r0
    230e:	0f be       	out	0x3f, r0	; 63
    2310:	0f 90       	pop	r0
    2312:	1f 90       	pop	r1
    2314:	18 95       	reti

00002316 <__vector_12>:

ISR(WDT_vect){
    2316:	1f 92       	push	r1
    2318:	0f 92       	push	r0
    231a:	0f b6       	in	r0, 0x3f	; 63
    231c:	0f 92       	push	r0
    231e:	11 24       	eor	r1, r1
    2320:	2f 93       	push	r18
    2322:	3f 93       	push	r19
    2324:	4f 93       	push	r20
    2326:	5f 93       	push	r21
    2328:	6f 93       	push	r22
    232a:	7f 93       	push	r23
    232c:	8f 93       	push	r24
    232e:	9f 93       	push	r25
    2330:	af 93       	push	r26
    2332:	bf 93       	push	r27
    2334:	ef 93       	push	r30
    2336:	ff 93       	push	r31
	cli();
    2338:	f8 94       	cli
	WD_init();
    233a:	5b de       	rcall	.-842    	; 0x1ff2 <WD_init>
	sei();
    233c:	78 94       	sei
}
    233e:	ff 91       	pop	r31
    2340:	ef 91       	pop	r30
    2342:	bf 91       	pop	r27
    2344:	af 91       	pop	r26
    2346:	9f 91       	pop	r25
    2348:	8f 91       	pop	r24
    234a:	7f 91       	pop	r23
    234c:	6f 91       	pop	r22
    234e:	5f 91       	pop	r21
    2350:	4f 91       	pop	r20
    2352:	3f 91       	pop	r19
    2354:	2f 91       	pop	r18
    2356:	0f 90       	pop	r0
    2358:	0f be       	out	0x3f, r0	; 63
    235a:	0f 90       	pop	r0
    235c:	1f 90       	pop	r1
    235e:	18 95       	reti

00002360 <main>:

int main(void){
	
	// Check the Watchdog right away
	watchdog = MCUSR & 0x08;
    2360:	84 b7       	in	r24, 0x34	; 52
    2362:	88 70       	andi	r24, 0x08	; 8
    2364:	80 93 c4 08 	sts	0x08C4, r24	; 0x8008c4 <__data_end>

	// Now initialize all peripherals
	ALL_init();
    2368:	4c de       	rcall	.-872    	; 0x2002 <ALL_init>
	
	// Disable Interrupts upon start
	cli();
    236a:	f8 94       	cli
	
	// Check the reason for reset
	fault_check(watchdog);
    236c:	80 91 c4 08 	lds	r24, 0x08C4	; 0x8008c4 <__data_end>
    2370:	0e 94 9e 05 	call	0xb3c	; 0xb3c <fault_check>
	
	// Check State of Launch
	launch_state();	
    2374:	0e 94 56 06 	call	0xcac	; 0xcac <launch_state>
	
	// Update power state matrix
	pwrMatInit(pwrMat);
    2378:	89 ed       	ldi	r24, 0xD9	; 217
    237a:	98 e0       	ldi	r25, 0x08	; 8
    237c:	0e 94 87 07 	call	0xf0e	; 0xf0e <pwrMatInit>
	
	//****** RE-Enable ******//
	sei();
    2380:	78 94       	sei
    2382:	ff cf       	rjmp	.-2      	; 0x2382 <main+0x22>

00002384 <__subsf3>:
    2384:	50 58       	subi	r21, 0x80	; 128

00002386 <__addsf3>:
    2386:	bb 27       	eor	r27, r27
    2388:	aa 27       	eor	r26, r26
    238a:	0e d0       	rcall	.+28     	; 0x23a8 <__addsf3x>
    238c:	44 c1       	rjmp	.+648    	; 0x2616 <__fp_round>
    238e:	35 d1       	rcall	.+618    	; 0x25fa <__fp_pscA>
    2390:	30 f0       	brcs	.+12     	; 0x239e <__addsf3+0x18>
    2392:	3a d1       	rcall	.+628    	; 0x2608 <__fp_pscB>
    2394:	20 f0       	brcs	.+8      	; 0x239e <__addsf3+0x18>
    2396:	31 f4       	brne	.+12     	; 0x23a4 <__addsf3+0x1e>
    2398:	9f 3f       	cpi	r25, 0xFF	; 255
    239a:	11 f4       	brne	.+4      	; 0x23a0 <__addsf3+0x1a>
    239c:	1e f4       	brtc	.+6      	; 0x23a4 <__addsf3+0x1e>
    239e:	2a c1       	rjmp	.+596    	; 0x25f4 <__fp_nan>
    23a0:	0e f4       	brtc	.+2      	; 0x23a4 <__addsf3+0x1e>
    23a2:	e0 95       	com	r30
    23a4:	e7 fb       	bst	r30, 7
    23a6:	20 c1       	rjmp	.+576    	; 0x25e8 <__fp_inf>

000023a8 <__addsf3x>:
    23a8:	e9 2f       	mov	r30, r25
    23aa:	46 d1       	rcall	.+652    	; 0x2638 <__fp_split3>
    23ac:	80 f3       	brcs	.-32     	; 0x238e <__addsf3+0x8>
    23ae:	ba 17       	cp	r27, r26
    23b0:	62 07       	cpc	r22, r18
    23b2:	73 07       	cpc	r23, r19
    23b4:	84 07       	cpc	r24, r20
    23b6:	95 07       	cpc	r25, r21
    23b8:	18 f0       	brcs	.+6      	; 0x23c0 <__addsf3x+0x18>
    23ba:	71 f4       	brne	.+28     	; 0x23d8 <__addsf3x+0x30>
    23bc:	9e f5       	brtc	.+102    	; 0x2424 <__addsf3x+0x7c>
    23be:	5e c1       	rjmp	.+700    	; 0x267c <__fp_zero>
    23c0:	0e f4       	brtc	.+2      	; 0x23c4 <__addsf3x+0x1c>
    23c2:	e0 95       	com	r30
    23c4:	0b 2e       	mov	r0, r27
    23c6:	ba 2f       	mov	r27, r26
    23c8:	a0 2d       	mov	r26, r0
    23ca:	0b 01       	movw	r0, r22
    23cc:	b9 01       	movw	r22, r18
    23ce:	90 01       	movw	r18, r0
    23d0:	0c 01       	movw	r0, r24
    23d2:	ca 01       	movw	r24, r20
    23d4:	a0 01       	movw	r20, r0
    23d6:	11 24       	eor	r1, r1
    23d8:	ff 27       	eor	r31, r31
    23da:	59 1b       	sub	r21, r25
    23dc:	99 f0       	breq	.+38     	; 0x2404 <__addsf3x+0x5c>
    23de:	59 3f       	cpi	r21, 0xF9	; 249
    23e0:	50 f4       	brcc	.+20     	; 0x23f6 <__addsf3x+0x4e>
    23e2:	50 3e       	cpi	r21, 0xE0	; 224
    23e4:	68 f1       	brcs	.+90     	; 0x2440 <__addsf3x+0x98>
    23e6:	1a 16       	cp	r1, r26
    23e8:	f0 40       	sbci	r31, 0x00	; 0
    23ea:	a2 2f       	mov	r26, r18
    23ec:	23 2f       	mov	r18, r19
    23ee:	34 2f       	mov	r19, r20
    23f0:	44 27       	eor	r20, r20
    23f2:	58 5f       	subi	r21, 0xF8	; 248
    23f4:	f3 cf       	rjmp	.-26     	; 0x23dc <__addsf3x+0x34>
    23f6:	46 95       	lsr	r20
    23f8:	37 95       	ror	r19
    23fa:	27 95       	ror	r18
    23fc:	a7 95       	ror	r26
    23fe:	f0 40       	sbci	r31, 0x00	; 0
    2400:	53 95       	inc	r21
    2402:	c9 f7       	brne	.-14     	; 0x23f6 <__addsf3x+0x4e>
    2404:	7e f4       	brtc	.+30     	; 0x2424 <__addsf3x+0x7c>
    2406:	1f 16       	cp	r1, r31
    2408:	ba 0b       	sbc	r27, r26
    240a:	62 0b       	sbc	r22, r18
    240c:	73 0b       	sbc	r23, r19
    240e:	84 0b       	sbc	r24, r20
    2410:	ba f0       	brmi	.+46     	; 0x2440 <__addsf3x+0x98>
    2412:	91 50       	subi	r25, 0x01	; 1
    2414:	a1 f0       	breq	.+40     	; 0x243e <__addsf3x+0x96>
    2416:	ff 0f       	add	r31, r31
    2418:	bb 1f       	adc	r27, r27
    241a:	66 1f       	adc	r22, r22
    241c:	77 1f       	adc	r23, r23
    241e:	88 1f       	adc	r24, r24
    2420:	c2 f7       	brpl	.-16     	; 0x2412 <__addsf3x+0x6a>
    2422:	0e c0       	rjmp	.+28     	; 0x2440 <__addsf3x+0x98>
    2424:	ba 0f       	add	r27, r26
    2426:	62 1f       	adc	r22, r18
    2428:	73 1f       	adc	r23, r19
    242a:	84 1f       	adc	r24, r20
    242c:	48 f4       	brcc	.+18     	; 0x2440 <__addsf3x+0x98>
    242e:	87 95       	ror	r24
    2430:	77 95       	ror	r23
    2432:	67 95       	ror	r22
    2434:	b7 95       	ror	r27
    2436:	f7 95       	ror	r31
    2438:	9e 3f       	cpi	r25, 0xFE	; 254
    243a:	08 f0       	brcs	.+2      	; 0x243e <__addsf3x+0x96>
    243c:	b3 cf       	rjmp	.-154    	; 0x23a4 <__addsf3+0x1e>
    243e:	93 95       	inc	r25
    2440:	88 0f       	add	r24, r24
    2442:	08 f0       	brcs	.+2      	; 0x2446 <__addsf3x+0x9e>
    2444:	99 27       	eor	r25, r25
    2446:	ee 0f       	add	r30, r30
    2448:	97 95       	ror	r25
    244a:	87 95       	ror	r24
    244c:	08 95       	ret

0000244e <__cmpsf2>:
    244e:	a8 d0       	rcall	.+336    	; 0x25a0 <__fp_cmp>
    2450:	08 f4       	brcc	.+2      	; 0x2454 <__cmpsf2+0x6>
    2452:	81 e0       	ldi	r24, 0x01	; 1
    2454:	08 95       	ret

00002456 <__divsf3>:
    2456:	0c d0       	rcall	.+24     	; 0x2470 <__divsf3x>
    2458:	de c0       	rjmp	.+444    	; 0x2616 <__fp_round>
    245a:	d6 d0       	rcall	.+428    	; 0x2608 <__fp_pscB>
    245c:	40 f0       	brcs	.+16     	; 0x246e <__divsf3+0x18>
    245e:	cd d0       	rcall	.+410    	; 0x25fa <__fp_pscA>
    2460:	30 f0       	brcs	.+12     	; 0x246e <__divsf3+0x18>
    2462:	21 f4       	brne	.+8      	; 0x246c <__divsf3+0x16>
    2464:	5f 3f       	cpi	r21, 0xFF	; 255
    2466:	19 f0       	breq	.+6      	; 0x246e <__divsf3+0x18>
    2468:	bf c0       	rjmp	.+382    	; 0x25e8 <__fp_inf>
    246a:	51 11       	cpse	r21, r1
    246c:	08 c1       	rjmp	.+528    	; 0x267e <__fp_szero>
    246e:	c2 c0       	rjmp	.+388    	; 0x25f4 <__fp_nan>

00002470 <__divsf3x>:
    2470:	e3 d0       	rcall	.+454    	; 0x2638 <__fp_split3>
    2472:	98 f3       	brcs	.-26     	; 0x245a <__divsf3+0x4>

00002474 <__divsf3_pse>:
    2474:	99 23       	and	r25, r25
    2476:	c9 f3       	breq	.-14     	; 0x246a <__divsf3+0x14>
    2478:	55 23       	and	r21, r21
    247a:	b1 f3       	breq	.-20     	; 0x2468 <__divsf3+0x12>
    247c:	95 1b       	sub	r25, r21
    247e:	55 0b       	sbc	r21, r21
    2480:	bb 27       	eor	r27, r27
    2482:	aa 27       	eor	r26, r26
    2484:	62 17       	cp	r22, r18
    2486:	73 07       	cpc	r23, r19
    2488:	84 07       	cpc	r24, r20
    248a:	38 f0       	brcs	.+14     	; 0x249a <__divsf3_pse+0x26>
    248c:	9f 5f       	subi	r25, 0xFF	; 255
    248e:	5f 4f       	sbci	r21, 0xFF	; 255
    2490:	22 0f       	add	r18, r18
    2492:	33 1f       	adc	r19, r19
    2494:	44 1f       	adc	r20, r20
    2496:	aa 1f       	adc	r26, r26
    2498:	a9 f3       	breq	.-22     	; 0x2484 <__divsf3_pse+0x10>
    249a:	33 d0       	rcall	.+102    	; 0x2502 <__divsf3_pse+0x8e>
    249c:	0e 2e       	mov	r0, r30
    249e:	3a f0       	brmi	.+14     	; 0x24ae <__divsf3_pse+0x3a>
    24a0:	e0 e8       	ldi	r30, 0x80	; 128
    24a2:	30 d0       	rcall	.+96     	; 0x2504 <__divsf3_pse+0x90>
    24a4:	91 50       	subi	r25, 0x01	; 1
    24a6:	50 40       	sbci	r21, 0x00	; 0
    24a8:	e6 95       	lsr	r30
    24aa:	00 1c       	adc	r0, r0
    24ac:	ca f7       	brpl	.-14     	; 0x24a0 <__divsf3_pse+0x2c>
    24ae:	29 d0       	rcall	.+82     	; 0x2502 <__divsf3_pse+0x8e>
    24b0:	fe 2f       	mov	r31, r30
    24b2:	27 d0       	rcall	.+78     	; 0x2502 <__divsf3_pse+0x8e>
    24b4:	66 0f       	add	r22, r22
    24b6:	77 1f       	adc	r23, r23
    24b8:	88 1f       	adc	r24, r24
    24ba:	bb 1f       	adc	r27, r27
    24bc:	26 17       	cp	r18, r22
    24be:	37 07       	cpc	r19, r23
    24c0:	48 07       	cpc	r20, r24
    24c2:	ab 07       	cpc	r26, r27
    24c4:	b0 e8       	ldi	r27, 0x80	; 128
    24c6:	09 f0       	breq	.+2      	; 0x24ca <__divsf3_pse+0x56>
    24c8:	bb 0b       	sbc	r27, r27
    24ca:	80 2d       	mov	r24, r0
    24cc:	bf 01       	movw	r22, r30
    24ce:	ff 27       	eor	r31, r31
    24d0:	93 58       	subi	r25, 0x83	; 131
    24d2:	5f 4f       	sbci	r21, 0xFF	; 255
    24d4:	2a f0       	brmi	.+10     	; 0x24e0 <__divsf3_pse+0x6c>
    24d6:	9e 3f       	cpi	r25, 0xFE	; 254
    24d8:	51 05       	cpc	r21, r1
    24da:	68 f0       	brcs	.+26     	; 0x24f6 <__divsf3_pse+0x82>
    24dc:	85 c0       	rjmp	.+266    	; 0x25e8 <__fp_inf>
    24de:	cf c0       	rjmp	.+414    	; 0x267e <__fp_szero>
    24e0:	5f 3f       	cpi	r21, 0xFF	; 255
    24e2:	ec f3       	brlt	.-6      	; 0x24de <__divsf3_pse+0x6a>
    24e4:	98 3e       	cpi	r25, 0xE8	; 232
    24e6:	dc f3       	brlt	.-10     	; 0x24de <__divsf3_pse+0x6a>
    24e8:	86 95       	lsr	r24
    24ea:	77 95       	ror	r23
    24ec:	67 95       	ror	r22
    24ee:	b7 95       	ror	r27
    24f0:	f7 95       	ror	r31
    24f2:	9f 5f       	subi	r25, 0xFF	; 255
    24f4:	c9 f7       	brne	.-14     	; 0x24e8 <__divsf3_pse+0x74>
    24f6:	88 0f       	add	r24, r24
    24f8:	91 1d       	adc	r25, r1
    24fa:	96 95       	lsr	r25
    24fc:	87 95       	ror	r24
    24fe:	97 f9       	bld	r25, 7
    2500:	08 95       	ret
    2502:	e1 e0       	ldi	r30, 0x01	; 1
    2504:	66 0f       	add	r22, r22
    2506:	77 1f       	adc	r23, r23
    2508:	88 1f       	adc	r24, r24
    250a:	bb 1f       	adc	r27, r27
    250c:	62 17       	cp	r22, r18
    250e:	73 07       	cpc	r23, r19
    2510:	84 07       	cpc	r24, r20
    2512:	ba 07       	cpc	r27, r26
    2514:	20 f0       	brcs	.+8      	; 0x251e <__divsf3_pse+0xaa>
    2516:	62 1b       	sub	r22, r18
    2518:	73 0b       	sbc	r23, r19
    251a:	84 0b       	sbc	r24, r20
    251c:	ba 0b       	sbc	r27, r26
    251e:	ee 1f       	adc	r30, r30
    2520:	88 f7       	brcc	.-30     	; 0x2504 <__divsf3_pse+0x90>
    2522:	e0 95       	com	r30
    2524:	08 95       	ret

00002526 <__floatunsisf>:
    2526:	e8 94       	clt
    2528:	09 c0       	rjmp	.+18     	; 0x253c <__floatsisf+0x12>

0000252a <__floatsisf>:
    252a:	97 fb       	bst	r25, 7
    252c:	3e f4       	brtc	.+14     	; 0x253c <__floatsisf+0x12>
    252e:	90 95       	com	r25
    2530:	80 95       	com	r24
    2532:	70 95       	com	r23
    2534:	61 95       	neg	r22
    2536:	7f 4f       	sbci	r23, 0xFF	; 255
    2538:	8f 4f       	sbci	r24, 0xFF	; 255
    253a:	9f 4f       	sbci	r25, 0xFF	; 255
    253c:	99 23       	and	r25, r25
    253e:	a9 f0       	breq	.+42     	; 0x256a <__floatsisf+0x40>
    2540:	f9 2f       	mov	r31, r25
    2542:	96 e9       	ldi	r25, 0x96	; 150
    2544:	bb 27       	eor	r27, r27
    2546:	93 95       	inc	r25
    2548:	f6 95       	lsr	r31
    254a:	87 95       	ror	r24
    254c:	77 95       	ror	r23
    254e:	67 95       	ror	r22
    2550:	b7 95       	ror	r27
    2552:	f1 11       	cpse	r31, r1
    2554:	f8 cf       	rjmp	.-16     	; 0x2546 <__floatsisf+0x1c>
    2556:	fa f4       	brpl	.+62     	; 0x2596 <__floatsisf+0x6c>
    2558:	bb 0f       	add	r27, r27
    255a:	11 f4       	brne	.+4      	; 0x2560 <__floatsisf+0x36>
    255c:	60 ff       	sbrs	r22, 0
    255e:	1b c0       	rjmp	.+54     	; 0x2596 <__floatsisf+0x6c>
    2560:	6f 5f       	subi	r22, 0xFF	; 255
    2562:	7f 4f       	sbci	r23, 0xFF	; 255
    2564:	8f 4f       	sbci	r24, 0xFF	; 255
    2566:	9f 4f       	sbci	r25, 0xFF	; 255
    2568:	16 c0       	rjmp	.+44     	; 0x2596 <__floatsisf+0x6c>
    256a:	88 23       	and	r24, r24
    256c:	11 f0       	breq	.+4      	; 0x2572 <__floatsisf+0x48>
    256e:	96 e9       	ldi	r25, 0x96	; 150
    2570:	11 c0       	rjmp	.+34     	; 0x2594 <__floatsisf+0x6a>
    2572:	77 23       	and	r23, r23
    2574:	21 f0       	breq	.+8      	; 0x257e <__floatsisf+0x54>
    2576:	9e e8       	ldi	r25, 0x8E	; 142
    2578:	87 2f       	mov	r24, r23
    257a:	76 2f       	mov	r23, r22
    257c:	05 c0       	rjmp	.+10     	; 0x2588 <__floatsisf+0x5e>
    257e:	66 23       	and	r22, r22
    2580:	71 f0       	breq	.+28     	; 0x259e <__floatsisf+0x74>
    2582:	96 e8       	ldi	r25, 0x86	; 134
    2584:	86 2f       	mov	r24, r22
    2586:	70 e0       	ldi	r23, 0x00	; 0
    2588:	60 e0       	ldi	r22, 0x00	; 0
    258a:	2a f0       	brmi	.+10     	; 0x2596 <__floatsisf+0x6c>
    258c:	9a 95       	dec	r25
    258e:	66 0f       	add	r22, r22
    2590:	77 1f       	adc	r23, r23
    2592:	88 1f       	adc	r24, r24
    2594:	da f7       	brpl	.-10     	; 0x258c <__floatsisf+0x62>
    2596:	88 0f       	add	r24, r24
    2598:	96 95       	lsr	r25
    259a:	87 95       	ror	r24
    259c:	97 f9       	bld	r25, 7
    259e:	08 95       	ret

000025a0 <__fp_cmp>:
    25a0:	99 0f       	add	r25, r25
    25a2:	00 08       	sbc	r0, r0
    25a4:	55 0f       	add	r21, r21
    25a6:	aa 0b       	sbc	r26, r26
    25a8:	e0 e8       	ldi	r30, 0x80	; 128
    25aa:	fe ef       	ldi	r31, 0xFE	; 254
    25ac:	16 16       	cp	r1, r22
    25ae:	17 06       	cpc	r1, r23
    25b0:	e8 07       	cpc	r30, r24
    25b2:	f9 07       	cpc	r31, r25
    25b4:	c0 f0       	brcs	.+48     	; 0x25e6 <__fp_cmp+0x46>
    25b6:	12 16       	cp	r1, r18
    25b8:	13 06       	cpc	r1, r19
    25ba:	e4 07       	cpc	r30, r20
    25bc:	f5 07       	cpc	r31, r21
    25be:	98 f0       	brcs	.+38     	; 0x25e6 <__fp_cmp+0x46>
    25c0:	62 1b       	sub	r22, r18
    25c2:	73 0b       	sbc	r23, r19
    25c4:	84 0b       	sbc	r24, r20
    25c6:	95 0b       	sbc	r25, r21
    25c8:	39 f4       	brne	.+14     	; 0x25d8 <__fp_cmp+0x38>
    25ca:	0a 26       	eor	r0, r26
    25cc:	61 f0       	breq	.+24     	; 0x25e6 <__fp_cmp+0x46>
    25ce:	23 2b       	or	r18, r19
    25d0:	24 2b       	or	r18, r20
    25d2:	25 2b       	or	r18, r21
    25d4:	21 f4       	brne	.+8      	; 0x25de <__fp_cmp+0x3e>
    25d6:	08 95       	ret
    25d8:	0a 26       	eor	r0, r26
    25da:	09 f4       	brne	.+2      	; 0x25de <__fp_cmp+0x3e>
    25dc:	a1 40       	sbci	r26, 0x01	; 1
    25de:	a6 95       	lsr	r26
    25e0:	8f ef       	ldi	r24, 0xFF	; 255
    25e2:	81 1d       	adc	r24, r1
    25e4:	81 1d       	adc	r24, r1
    25e6:	08 95       	ret

000025e8 <__fp_inf>:
    25e8:	97 f9       	bld	r25, 7
    25ea:	9f 67       	ori	r25, 0x7F	; 127
    25ec:	80 e8       	ldi	r24, 0x80	; 128
    25ee:	70 e0       	ldi	r23, 0x00	; 0
    25f0:	60 e0       	ldi	r22, 0x00	; 0
    25f2:	08 95       	ret

000025f4 <__fp_nan>:
    25f4:	9f ef       	ldi	r25, 0xFF	; 255
    25f6:	80 ec       	ldi	r24, 0xC0	; 192
    25f8:	08 95       	ret

000025fa <__fp_pscA>:
    25fa:	00 24       	eor	r0, r0
    25fc:	0a 94       	dec	r0
    25fe:	16 16       	cp	r1, r22
    2600:	17 06       	cpc	r1, r23
    2602:	18 06       	cpc	r1, r24
    2604:	09 06       	cpc	r0, r25
    2606:	08 95       	ret

00002608 <__fp_pscB>:
    2608:	00 24       	eor	r0, r0
    260a:	0a 94       	dec	r0
    260c:	12 16       	cp	r1, r18
    260e:	13 06       	cpc	r1, r19
    2610:	14 06       	cpc	r1, r20
    2612:	05 06       	cpc	r0, r21
    2614:	08 95       	ret

00002616 <__fp_round>:
    2616:	09 2e       	mov	r0, r25
    2618:	03 94       	inc	r0
    261a:	00 0c       	add	r0, r0
    261c:	11 f4       	brne	.+4      	; 0x2622 <__fp_round+0xc>
    261e:	88 23       	and	r24, r24
    2620:	52 f0       	brmi	.+20     	; 0x2636 <__fp_round+0x20>
    2622:	bb 0f       	add	r27, r27
    2624:	40 f4       	brcc	.+16     	; 0x2636 <__fp_round+0x20>
    2626:	bf 2b       	or	r27, r31
    2628:	11 f4       	brne	.+4      	; 0x262e <__fp_round+0x18>
    262a:	60 ff       	sbrs	r22, 0
    262c:	04 c0       	rjmp	.+8      	; 0x2636 <__fp_round+0x20>
    262e:	6f 5f       	subi	r22, 0xFF	; 255
    2630:	7f 4f       	sbci	r23, 0xFF	; 255
    2632:	8f 4f       	sbci	r24, 0xFF	; 255
    2634:	9f 4f       	sbci	r25, 0xFF	; 255
    2636:	08 95       	ret

00002638 <__fp_split3>:
    2638:	57 fd       	sbrc	r21, 7
    263a:	90 58       	subi	r25, 0x80	; 128
    263c:	44 0f       	add	r20, r20
    263e:	55 1f       	adc	r21, r21
    2640:	59 f0       	breq	.+22     	; 0x2658 <__fp_splitA+0x10>
    2642:	5f 3f       	cpi	r21, 0xFF	; 255
    2644:	71 f0       	breq	.+28     	; 0x2662 <__fp_splitA+0x1a>
    2646:	47 95       	ror	r20

00002648 <__fp_splitA>:
    2648:	88 0f       	add	r24, r24
    264a:	97 fb       	bst	r25, 7
    264c:	99 1f       	adc	r25, r25
    264e:	61 f0       	breq	.+24     	; 0x2668 <__fp_splitA+0x20>
    2650:	9f 3f       	cpi	r25, 0xFF	; 255
    2652:	79 f0       	breq	.+30     	; 0x2672 <__fp_splitA+0x2a>
    2654:	87 95       	ror	r24
    2656:	08 95       	ret
    2658:	12 16       	cp	r1, r18
    265a:	13 06       	cpc	r1, r19
    265c:	14 06       	cpc	r1, r20
    265e:	55 1f       	adc	r21, r21
    2660:	f2 cf       	rjmp	.-28     	; 0x2646 <__fp_split3+0xe>
    2662:	46 95       	lsr	r20
    2664:	f1 df       	rcall	.-30     	; 0x2648 <__fp_splitA>
    2666:	08 c0       	rjmp	.+16     	; 0x2678 <__fp_splitA+0x30>
    2668:	16 16       	cp	r1, r22
    266a:	17 06       	cpc	r1, r23
    266c:	18 06       	cpc	r1, r24
    266e:	99 1f       	adc	r25, r25
    2670:	f1 cf       	rjmp	.-30     	; 0x2654 <__fp_splitA+0xc>
    2672:	86 95       	lsr	r24
    2674:	71 05       	cpc	r23, r1
    2676:	61 05       	cpc	r22, r1
    2678:	08 94       	sec
    267a:	08 95       	ret

0000267c <__fp_zero>:
    267c:	e8 94       	clt

0000267e <__fp_szero>:
    267e:	bb 27       	eor	r27, r27
    2680:	66 27       	eor	r22, r22
    2682:	77 27       	eor	r23, r23
    2684:	cb 01       	movw	r24, r22
    2686:	97 f9       	bld	r25, 7
    2688:	08 95       	ret

0000268a <__gesf2>:
    268a:	8a df       	rcall	.-236    	; 0x25a0 <__fp_cmp>
    268c:	08 f4       	brcc	.+2      	; 0x2690 <__gesf2+0x6>
    268e:	8f ef       	ldi	r24, 0xFF	; 255
    2690:	08 95       	ret

00002692 <__mulsf3>:
    2692:	0b d0       	rcall	.+22     	; 0x26aa <__mulsf3x>
    2694:	c0 cf       	rjmp	.-128    	; 0x2616 <__fp_round>
    2696:	b1 df       	rcall	.-158    	; 0x25fa <__fp_pscA>
    2698:	28 f0       	brcs	.+10     	; 0x26a4 <__mulsf3+0x12>
    269a:	b6 df       	rcall	.-148    	; 0x2608 <__fp_pscB>
    269c:	18 f0       	brcs	.+6      	; 0x26a4 <__mulsf3+0x12>
    269e:	95 23       	and	r25, r21
    26a0:	09 f0       	breq	.+2      	; 0x26a4 <__mulsf3+0x12>
    26a2:	a2 cf       	rjmp	.-188    	; 0x25e8 <__fp_inf>
    26a4:	a7 cf       	rjmp	.-178    	; 0x25f4 <__fp_nan>
    26a6:	11 24       	eor	r1, r1
    26a8:	ea cf       	rjmp	.-44     	; 0x267e <__fp_szero>

000026aa <__mulsf3x>:
    26aa:	c6 df       	rcall	.-116    	; 0x2638 <__fp_split3>
    26ac:	a0 f3       	brcs	.-24     	; 0x2696 <__mulsf3+0x4>

000026ae <__mulsf3_pse>:
    26ae:	95 9f       	mul	r25, r21
    26b0:	d1 f3       	breq	.-12     	; 0x26a6 <__mulsf3+0x14>
    26b2:	95 0f       	add	r25, r21
    26b4:	50 e0       	ldi	r21, 0x00	; 0
    26b6:	55 1f       	adc	r21, r21
    26b8:	62 9f       	mul	r22, r18
    26ba:	f0 01       	movw	r30, r0
    26bc:	72 9f       	mul	r23, r18
    26be:	bb 27       	eor	r27, r27
    26c0:	f0 0d       	add	r31, r0
    26c2:	b1 1d       	adc	r27, r1
    26c4:	63 9f       	mul	r22, r19
    26c6:	aa 27       	eor	r26, r26
    26c8:	f0 0d       	add	r31, r0
    26ca:	b1 1d       	adc	r27, r1
    26cc:	aa 1f       	adc	r26, r26
    26ce:	64 9f       	mul	r22, r20
    26d0:	66 27       	eor	r22, r22
    26d2:	b0 0d       	add	r27, r0
    26d4:	a1 1d       	adc	r26, r1
    26d6:	66 1f       	adc	r22, r22
    26d8:	82 9f       	mul	r24, r18
    26da:	22 27       	eor	r18, r18
    26dc:	b0 0d       	add	r27, r0
    26de:	a1 1d       	adc	r26, r1
    26e0:	62 1f       	adc	r22, r18
    26e2:	73 9f       	mul	r23, r19
    26e4:	b0 0d       	add	r27, r0
    26e6:	a1 1d       	adc	r26, r1
    26e8:	62 1f       	adc	r22, r18
    26ea:	83 9f       	mul	r24, r19
    26ec:	a0 0d       	add	r26, r0
    26ee:	61 1d       	adc	r22, r1
    26f0:	22 1f       	adc	r18, r18
    26f2:	74 9f       	mul	r23, r20
    26f4:	33 27       	eor	r19, r19
    26f6:	a0 0d       	add	r26, r0
    26f8:	61 1d       	adc	r22, r1
    26fa:	23 1f       	adc	r18, r19
    26fc:	84 9f       	mul	r24, r20
    26fe:	60 0d       	add	r22, r0
    2700:	21 1d       	adc	r18, r1
    2702:	82 2f       	mov	r24, r18
    2704:	76 2f       	mov	r23, r22
    2706:	6a 2f       	mov	r22, r26
    2708:	11 24       	eor	r1, r1
    270a:	9f 57       	subi	r25, 0x7F	; 127
    270c:	50 40       	sbci	r21, 0x00	; 0
    270e:	8a f0       	brmi	.+34     	; 0x2732 <__mulsf3_pse+0x84>
    2710:	e1 f0       	breq	.+56     	; 0x274a <__mulsf3_pse+0x9c>
    2712:	88 23       	and	r24, r24
    2714:	4a f0       	brmi	.+18     	; 0x2728 <__mulsf3_pse+0x7a>
    2716:	ee 0f       	add	r30, r30
    2718:	ff 1f       	adc	r31, r31
    271a:	bb 1f       	adc	r27, r27
    271c:	66 1f       	adc	r22, r22
    271e:	77 1f       	adc	r23, r23
    2720:	88 1f       	adc	r24, r24
    2722:	91 50       	subi	r25, 0x01	; 1
    2724:	50 40       	sbci	r21, 0x00	; 0
    2726:	a9 f7       	brne	.-22     	; 0x2712 <__mulsf3_pse+0x64>
    2728:	9e 3f       	cpi	r25, 0xFE	; 254
    272a:	51 05       	cpc	r21, r1
    272c:	70 f0       	brcs	.+28     	; 0x274a <__mulsf3_pse+0x9c>
    272e:	5c cf       	rjmp	.-328    	; 0x25e8 <__fp_inf>
    2730:	a6 cf       	rjmp	.-180    	; 0x267e <__fp_szero>
    2732:	5f 3f       	cpi	r21, 0xFF	; 255
    2734:	ec f3       	brlt	.-6      	; 0x2730 <__mulsf3_pse+0x82>
    2736:	98 3e       	cpi	r25, 0xE8	; 232
    2738:	dc f3       	brlt	.-10     	; 0x2730 <__mulsf3_pse+0x82>
    273a:	86 95       	lsr	r24
    273c:	77 95       	ror	r23
    273e:	67 95       	ror	r22
    2740:	b7 95       	ror	r27
    2742:	f7 95       	ror	r31
    2744:	e7 95       	ror	r30
    2746:	9f 5f       	subi	r25, 0xFF	; 255
    2748:	c1 f7       	brne	.-16     	; 0x273a <__mulsf3_pse+0x8c>
    274a:	fe 2b       	or	r31, r30
    274c:	88 0f       	add	r24, r24
    274e:	91 1d       	adc	r25, r1
    2750:	96 95       	lsr	r25
    2752:	87 95       	ror	r24
    2754:	97 f9       	bld	r25, 7
    2756:	08 95       	ret

00002758 <vfprintf>:
    2758:	a0 e1       	ldi	r26, 0x10	; 16
    275a:	b0 e0       	ldi	r27, 0x00	; 0
    275c:	e1 eb       	ldi	r30, 0xB1	; 177
    275e:	f3 e1       	ldi	r31, 0x13	; 19
    2760:	59 c3       	rjmp	.+1714   	; 0x2e14 <__prologue_saves__>
    2762:	7c 01       	movw	r14, r24
    2764:	1b 01       	movw	r2, r22
    2766:	6a 01       	movw	r12, r20
    2768:	fc 01       	movw	r30, r24
    276a:	17 82       	std	Z+7, r1	; 0x07
    276c:	16 82       	std	Z+6, r1	; 0x06
    276e:	83 81       	ldd	r24, Z+3	; 0x03
    2770:	81 ff       	sbrs	r24, 1
    2772:	2a c3       	rjmp	.+1620   	; 0x2dc8 <vfprintf+0x670>
    2774:	9e 01       	movw	r18, r28
    2776:	2f 5f       	subi	r18, 0xFF	; 255
    2778:	3f 4f       	sbci	r19, 0xFF	; 255
    277a:	39 01       	movw	r6, r18
    277c:	f7 01       	movw	r30, r14
    277e:	93 81       	ldd	r25, Z+3	; 0x03
    2780:	f1 01       	movw	r30, r2
    2782:	93 fd       	sbrc	r25, 3
    2784:	85 91       	lpm	r24, Z+
    2786:	93 ff       	sbrs	r25, 3
    2788:	81 91       	ld	r24, Z+
    278a:	1f 01       	movw	r2, r30
    278c:	88 23       	and	r24, r24
    278e:	09 f4       	brne	.+2      	; 0x2792 <vfprintf+0x3a>
    2790:	17 c3       	rjmp	.+1582   	; 0x2dc0 <vfprintf+0x668>
    2792:	85 32       	cpi	r24, 0x25	; 37
    2794:	39 f4       	brne	.+14     	; 0x27a4 <vfprintf+0x4c>
    2796:	93 fd       	sbrc	r25, 3
    2798:	85 91       	lpm	r24, Z+
    279a:	93 ff       	sbrs	r25, 3
    279c:	81 91       	ld	r24, Z+
    279e:	1f 01       	movw	r2, r30
    27a0:	85 32       	cpi	r24, 0x25	; 37
    27a2:	31 f4       	brne	.+12     	; 0x27b0 <vfprintf+0x58>
    27a4:	b7 01       	movw	r22, r14
    27a6:	90 e0       	ldi	r25, 0x00	; 0
    27a8:	6e d4       	rcall	.+2268   	; 0x3086 <fputc>
    27aa:	56 01       	movw	r10, r12
    27ac:	65 01       	movw	r12, r10
    27ae:	e6 cf       	rjmp	.-52     	; 0x277c <vfprintf+0x24>
    27b0:	10 e0       	ldi	r17, 0x00	; 0
    27b2:	51 2c       	mov	r5, r1
    27b4:	91 2c       	mov	r9, r1
    27b6:	ff e1       	ldi	r31, 0x1F	; 31
    27b8:	f9 15       	cp	r31, r9
    27ba:	d8 f0       	brcs	.+54     	; 0x27f2 <vfprintf+0x9a>
    27bc:	8b 32       	cpi	r24, 0x2B	; 43
    27be:	79 f0       	breq	.+30     	; 0x27de <vfprintf+0x86>
    27c0:	38 f4       	brcc	.+14     	; 0x27d0 <vfprintf+0x78>
    27c2:	80 32       	cpi	r24, 0x20	; 32
    27c4:	79 f0       	breq	.+30     	; 0x27e4 <vfprintf+0x8c>
    27c6:	83 32       	cpi	r24, 0x23	; 35
    27c8:	a1 f4       	brne	.+40     	; 0x27f2 <vfprintf+0x9a>
    27ca:	f9 2d       	mov	r31, r9
    27cc:	f0 61       	ori	r31, 0x10	; 16
    27ce:	2e c0       	rjmp	.+92     	; 0x282c <vfprintf+0xd4>
    27d0:	8d 32       	cpi	r24, 0x2D	; 45
    27d2:	61 f0       	breq	.+24     	; 0x27ec <vfprintf+0x94>
    27d4:	80 33       	cpi	r24, 0x30	; 48
    27d6:	69 f4       	brne	.+26     	; 0x27f2 <vfprintf+0x9a>
    27d8:	29 2d       	mov	r18, r9
    27da:	21 60       	ori	r18, 0x01	; 1
    27dc:	2d c0       	rjmp	.+90     	; 0x2838 <vfprintf+0xe0>
    27de:	39 2d       	mov	r19, r9
    27e0:	32 60       	ori	r19, 0x02	; 2
    27e2:	93 2e       	mov	r9, r19
    27e4:	89 2d       	mov	r24, r9
    27e6:	84 60       	ori	r24, 0x04	; 4
    27e8:	98 2e       	mov	r9, r24
    27ea:	2a c0       	rjmp	.+84     	; 0x2840 <vfprintf+0xe8>
    27ec:	e9 2d       	mov	r30, r9
    27ee:	e8 60       	ori	r30, 0x08	; 8
    27f0:	15 c0       	rjmp	.+42     	; 0x281c <vfprintf+0xc4>
    27f2:	97 fc       	sbrc	r9, 7
    27f4:	2d c0       	rjmp	.+90     	; 0x2850 <vfprintf+0xf8>
    27f6:	20 ed       	ldi	r18, 0xD0	; 208
    27f8:	28 0f       	add	r18, r24
    27fa:	2a 30       	cpi	r18, 0x0A	; 10
    27fc:	88 f4       	brcc	.+34     	; 0x2820 <vfprintf+0xc8>
    27fe:	96 fe       	sbrs	r9, 6
    2800:	06 c0       	rjmp	.+12     	; 0x280e <vfprintf+0xb6>
    2802:	3a e0       	ldi	r19, 0x0A	; 10
    2804:	13 9f       	mul	r17, r19
    2806:	20 0d       	add	r18, r0
    2808:	11 24       	eor	r1, r1
    280a:	12 2f       	mov	r17, r18
    280c:	19 c0       	rjmp	.+50     	; 0x2840 <vfprintf+0xe8>
    280e:	8a e0       	ldi	r24, 0x0A	; 10
    2810:	58 9e       	mul	r5, r24
    2812:	20 0d       	add	r18, r0
    2814:	11 24       	eor	r1, r1
    2816:	52 2e       	mov	r5, r18
    2818:	e9 2d       	mov	r30, r9
    281a:	e0 62       	ori	r30, 0x20	; 32
    281c:	9e 2e       	mov	r9, r30
    281e:	10 c0       	rjmp	.+32     	; 0x2840 <vfprintf+0xe8>
    2820:	8e 32       	cpi	r24, 0x2E	; 46
    2822:	31 f4       	brne	.+12     	; 0x2830 <vfprintf+0xd8>
    2824:	96 fc       	sbrc	r9, 6
    2826:	cc c2       	rjmp	.+1432   	; 0x2dc0 <vfprintf+0x668>
    2828:	f9 2d       	mov	r31, r9
    282a:	f0 64       	ori	r31, 0x40	; 64
    282c:	9f 2e       	mov	r9, r31
    282e:	08 c0       	rjmp	.+16     	; 0x2840 <vfprintf+0xe8>
    2830:	8c 36       	cpi	r24, 0x6C	; 108
    2832:	21 f4       	brne	.+8      	; 0x283c <vfprintf+0xe4>
    2834:	29 2d       	mov	r18, r9
    2836:	20 68       	ori	r18, 0x80	; 128
    2838:	92 2e       	mov	r9, r18
    283a:	02 c0       	rjmp	.+4      	; 0x2840 <vfprintf+0xe8>
    283c:	88 36       	cpi	r24, 0x68	; 104
    283e:	41 f4       	brne	.+16     	; 0x2850 <vfprintf+0xf8>
    2840:	f1 01       	movw	r30, r2
    2842:	93 fd       	sbrc	r25, 3
    2844:	85 91       	lpm	r24, Z+
    2846:	93 ff       	sbrs	r25, 3
    2848:	81 91       	ld	r24, Z+
    284a:	1f 01       	movw	r2, r30
    284c:	81 11       	cpse	r24, r1
    284e:	b3 cf       	rjmp	.-154    	; 0x27b6 <vfprintf+0x5e>
    2850:	9b eb       	ldi	r25, 0xBB	; 187
    2852:	98 0f       	add	r25, r24
    2854:	93 30       	cpi	r25, 0x03	; 3
    2856:	20 f4       	brcc	.+8      	; 0x2860 <vfprintf+0x108>
    2858:	99 2d       	mov	r25, r9
    285a:	90 61       	ori	r25, 0x10	; 16
    285c:	80 5e       	subi	r24, 0xE0	; 224
    285e:	07 c0       	rjmp	.+14     	; 0x286e <vfprintf+0x116>
    2860:	9b e9       	ldi	r25, 0x9B	; 155
    2862:	98 0f       	add	r25, r24
    2864:	93 30       	cpi	r25, 0x03	; 3
    2866:	08 f0       	brcs	.+2      	; 0x286a <vfprintf+0x112>
    2868:	59 c1       	rjmp	.+690    	; 0x2b1c <vfprintf+0x3c4>
    286a:	99 2d       	mov	r25, r9
    286c:	9f 7e       	andi	r25, 0xEF	; 239
    286e:	96 ff       	sbrs	r25, 6
    2870:	16 e0       	ldi	r17, 0x06	; 6
    2872:	9f 73       	andi	r25, 0x3F	; 63
    2874:	99 2e       	mov	r9, r25
    2876:	85 36       	cpi	r24, 0x65	; 101
    2878:	19 f4       	brne	.+6      	; 0x2880 <vfprintf+0x128>
    287a:	90 64       	ori	r25, 0x40	; 64
    287c:	99 2e       	mov	r9, r25
    287e:	08 c0       	rjmp	.+16     	; 0x2890 <vfprintf+0x138>
    2880:	86 36       	cpi	r24, 0x66	; 102
    2882:	21 f4       	brne	.+8      	; 0x288c <vfprintf+0x134>
    2884:	39 2f       	mov	r19, r25
    2886:	30 68       	ori	r19, 0x80	; 128
    2888:	93 2e       	mov	r9, r19
    288a:	02 c0       	rjmp	.+4      	; 0x2890 <vfprintf+0x138>
    288c:	11 11       	cpse	r17, r1
    288e:	11 50       	subi	r17, 0x01	; 1
    2890:	97 fe       	sbrs	r9, 7
    2892:	07 c0       	rjmp	.+14     	; 0x28a2 <vfprintf+0x14a>
    2894:	1c 33       	cpi	r17, 0x3C	; 60
    2896:	50 f4       	brcc	.+20     	; 0x28ac <vfprintf+0x154>
    2898:	44 24       	eor	r4, r4
    289a:	43 94       	inc	r4
    289c:	41 0e       	add	r4, r17
    289e:	27 e0       	ldi	r18, 0x07	; 7
    28a0:	0b c0       	rjmp	.+22     	; 0x28b8 <vfprintf+0x160>
    28a2:	18 30       	cpi	r17, 0x08	; 8
    28a4:	38 f0       	brcs	.+14     	; 0x28b4 <vfprintf+0x15c>
    28a6:	27 e0       	ldi	r18, 0x07	; 7
    28a8:	17 e0       	ldi	r17, 0x07	; 7
    28aa:	05 c0       	rjmp	.+10     	; 0x28b6 <vfprintf+0x15e>
    28ac:	27 e0       	ldi	r18, 0x07	; 7
    28ae:	9c e3       	ldi	r25, 0x3C	; 60
    28b0:	49 2e       	mov	r4, r25
    28b2:	02 c0       	rjmp	.+4      	; 0x28b8 <vfprintf+0x160>
    28b4:	21 2f       	mov	r18, r17
    28b6:	41 2c       	mov	r4, r1
    28b8:	56 01       	movw	r10, r12
    28ba:	84 e0       	ldi	r24, 0x04	; 4
    28bc:	a8 0e       	add	r10, r24
    28be:	b1 1c       	adc	r11, r1
    28c0:	f6 01       	movw	r30, r12
    28c2:	60 81       	ld	r22, Z
    28c4:	71 81       	ldd	r23, Z+1	; 0x01
    28c6:	82 81       	ldd	r24, Z+2	; 0x02
    28c8:	93 81       	ldd	r25, Z+3	; 0x03
    28ca:	04 2d       	mov	r16, r4
    28cc:	a3 01       	movw	r20, r6
    28ce:	d9 d2       	rcall	.+1458   	; 0x2e82 <__ftoa_engine>
    28d0:	6c 01       	movw	r12, r24
    28d2:	f9 81       	ldd	r31, Y+1	; 0x01
    28d4:	fc 87       	std	Y+12, r31	; 0x0c
    28d6:	f0 ff       	sbrs	r31, 0
    28d8:	02 c0       	rjmp	.+4      	; 0x28de <vfprintf+0x186>
    28da:	f3 ff       	sbrs	r31, 3
    28dc:	06 c0       	rjmp	.+12     	; 0x28ea <vfprintf+0x192>
    28de:	91 fc       	sbrc	r9, 1
    28e0:	06 c0       	rjmp	.+12     	; 0x28ee <vfprintf+0x196>
    28e2:	92 fe       	sbrs	r9, 2
    28e4:	06 c0       	rjmp	.+12     	; 0x28f2 <vfprintf+0x19a>
    28e6:	00 e2       	ldi	r16, 0x20	; 32
    28e8:	05 c0       	rjmp	.+10     	; 0x28f4 <vfprintf+0x19c>
    28ea:	0d e2       	ldi	r16, 0x2D	; 45
    28ec:	03 c0       	rjmp	.+6      	; 0x28f4 <vfprintf+0x19c>
    28ee:	0b e2       	ldi	r16, 0x2B	; 43
    28f0:	01 c0       	rjmp	.+2      	; 0x28f4 <vfprintf+0x19c>
    28f2:	00 e0       	ldi	r16, 0x00	; 0
    28f4:	8c 85       	ldd	r24, Y+12	; 0x0c
    28f6:	8c 70       	andi	r24, 0x0C	; 12
    28f8:	19 f0       	breq	.+6      	; 0x2900 <vfprintf+0x1a8>
    28fa:	01 11       	cpse	r16, r1
    28fc:	43 c2       	rjmp	.+1158   	; 0x2d84 <vfprintf+0x62c>
    28fe:	80 c2       	rjmp	.+1280   	; 0x2e00 <vfprintf+0x6a8>
    2900:	97 fe       	sbrs	r9, 7
    2902:	10 c0       	rjmp	.+32     	; 0x2924 <vfprintf+0x1cc>
    2904:	4c 0c       	add	r4, r12
    2906:	fc 85       	ldd	r31, Y+12	; 0x0c
    2908:	f4 ff       	sbrs	r31, 4
    290a:	04 c0       	rjmp	.+8      	; 0x2914 <vfprintf+0x1bc>
    290c:	8a 81       	ldd	r24, Y+2	; 0x02
    290e:	81 33       	cpi	r24, 0x31	; 49
    2910:	09 f4       	brne	.+2      	; 0x2914 <vfprintf+0x1bc>
    2912:	4a 94       	dec	r4
    2914:	14 14       	cp	r1, r4
    2916:	74 f5       	brge	.+92     	; 0x2974 <vfprintf+0x21c>
    2918:	28 e0       	ldi	r18, 0x08	; 8
    291a:	24 15       	cp	r18, r4
    291c:	78 f5       	brcc	.+94     	; 0x297c <vfprintf+0x224>
    291e:	88 e0       	ldi	r24, 0x08	; 8
    2920:	48 2e       	mov	r4, r24
    2922:	2c c0       	rjmp	.+88     	; 0x297c <vfprintf+0x224>
    2924:	96 fc       	sbrc	r9, 6
    2926:	2a c0       	rjmp	.+84     	; 0x297c <vfprintf+0x224>
    2928:	81 2f       	mov	r24, r17
    292a:	90 e0       	ldi	r25, 0x00	; 0
    292c:	8c 15       	cp	r24, r12
    292e:	9d 05       	cpc	r25, r13
    2930:	9c f0       	brlt	.+38     	; 0x2958 <vfprintf+0x200>
    2932:	3c ef       	ldi	r19, 0xFC	; 252
    2934:	c3 16       	cp	r12, r19
    2936:	3f ef       	ldi	r19, 0xFF	; 255
    2938:	d3 06       	cpc	r13, r19
    293a:	74 f0       	brlt	.+28     	; 0x2958 <vfprintf+0x200>
    293c:	89 2d       	mov	r24, r9
    293e:	80 68       	ori	r24, 0x80	; 128
    2940:	98 2e       	mov	r9, r24
    2942:	0a c0       	rjmp	.+20     	; 0x2958 <vfprintf+0x200>
    2944:	e2 e0       	ldi	r30, 0x02	; 2
    2946:	f0 e0       	ldi	r31, 0x00	; 0
    2948:	ec 0f       	add	r30, r28
    294a:	fd 1f       	adc	r31, r29
    294c:	e1 0f       	add	r30, r17
    294e:	f1 1d       	adc	r31, r1
    2950:	80 81       	ld	r24, Z
    2952:	80 33       	cpi	r24, 0x30	; 48
    2954:	19 f4       	brne	.+6      	; 0x295c <vfprintf+0x204>
    2956:	11 50       	subi	r17, 0x01	; 1
    2958:	11 11       	cpse	r17, r1
    295a:	f4 cf       	rjmp	.-24     	; 0x2944 <vfprintf+0x1ec>
    295c:	97 fe       	sbrs	r9, 7
    295e:	0e c0       	rjmp	.+28     	; 0x297c <vfprintf+0x224>
    2960:	44 24       	eor	r4, r4
    2962:	43 94       	inc	r4
    2964:	41 0e       	add	r4, r17
    2966:	81 2f       	mov	r24, r17
    2968:	90 e0       	ldi	r25, 0x00	; 0
    296a:	c8 16       	cp	r12, r24
    296c:	d9 06       	cpc	r13, r25
    296e:	2c f4       	brge	.+10     	; 0x297a <vfprintf+0x222>
    2970:	1c 19       	sub	r17, r12
    2972:	04 c0       	rjmp	.+8      	; 0x297c <vfprintf+0x224>
    2974:	44 24       	eor	r4, r4
    2976:	43 94       	inc	r4
    2978:	01 c0       	rjmp	.+2      	; 0x297c <vfprintf+0x224>
    297a:	10 e0       	ldi	r17, 0x00	; 0
    297c:	97 fe       	sbrs	r9, 7
    297e:	06 c0       	rjmp	.+12     	; 0x298c <vfprintf+0x234>
    2980:	1c 14       	cp	r1, r12
    2982:	1d 04       	cpc	r1, r13
    2984:	34 f4       	brge	.+12     	; 0x2992 <vfprintf+0x23a>
    2986:	c6 01       	movw	r24, r12
    2988:	01 96       	adiw	r24, 0x01	; 1
    298a:	05 c0       	rjmp	.+10     	; 0x2996 <vfprintf+0x23e>
    298c:	85 e0       	ldi	r24, 0x05	; 5
    298e:	90 e0       	ldi	r25, 0x00	; 0
    2990:	02 c0       	rjmp	.+4      	; 0x2996 <vfprintf+0x23e>
    2992:	81 e0       	ldi	r24, 0x01	; 1
    2994:	90 e0       	ldi	r25, 0x00	; 0
    2996:	01 11       	cpse	r16, r1
    2998:	01 96       	adiw	r24, 0x01	; 1
    299a:	11 23       	and	r17, r17
    299c:	31 f0       	breq	.+12     	; 0x29aa <vfprintf+0x252>
    299e:	21 2f       	mov	r18, r17
    29a0:	30 e0       	ldi	r19, 0x00	; 0
    29a2:	2f 5f       	subi	r18, 0xFF	; 255
    29a4:	3f 4f       	sbci	r19, 0xFF	; 255
    29a6:	82 0f       	add	r24, r18
    29a8:	93 1f       	adc	r25, r19
    29aa:	25 2d       	mov	r18, r5
    29ac:	30 e0       	ldi	r19, 0x00	; 0
    29ae:	82 17       	cp	r24, r18
    29b0:	93 07       	cpc	r25, r19
    29b2:	14 f4       	brge	.+4      	; 0x29b8 <vfprintf+0x260>
    29b4:	58 1a       	sub	r5, r24
    29b6:	01 c0       	rjmp	.+2      	; 0x29ba <vfprintf+0x262>
    29b8:	51 2c       	mov	r5, r1
    29ba:	89 2d       	mov	r24, r9
    29bc:	89 70       	andi	r24, 0x09	; 9
    29be:	41 f4       	brne	.+16     	; 0x29d0 <vfprintf+0x278>
    29c0:	55 20       	and	r5, r5
    29c2:	31 f0       	breq	.+12     	; 0x29d0 <vfprintf+0x278>
    29c4:	b7 01       	movw	r22, r14
    29c6:	80 e2       	ldi	r24, 0x20	; 32
    29c8:	90 e0       	ldi	r25, 0x00	; 0
    29ca:	5d d3       	rcall	.+1722   	; 0x3086 <fputc>
    29cc:	5a 94       	dec	r5
    29ce:	f8 cf       	rjmp	.-16     	; 0x29c0 <vfprintf+0x268>
    29d0:	00 23       	and	r16, r16
    29d2:	21 f0       	breq	.+8      	; 0x29dc <vfprintf+0x284>
    29d4:	b7 01       	movw	r22, r14
    29d6:	80 2f       	mov	r24, r16
    29d8:	90 e0       	ldi	r25, 0x00	; 0
    29da:	55 d3       	rcall	.+1706   	; 0x3086 <fputc>
    29dc:	93 fc       	sbrc	r9, 3
    29de:	08 c0       	rjmp	.+16     	; 0x29f0 <vfprintf+0x298>
    29e0:	55 20       	and	r5, r5
    29e2:	31 f0       	breq	.+12     	; 0x29f0 <vfprintf+0x298>
    29e4:	b7 01       	movw	r22, r14
    29e6:	80 e3       	ldi	r24, 0x30	; 48
    29e8:	90 e0       	ldi	r25, 0x00	; 0
    29ea:	4d d3       	rcall	.+1690   	; 0x3086 <fputc>
    29ec:	5a 94       	dec	r5
    29ee:	f8 cf       	rjmp	.-16     	; 0x29e0 <vfprintf+0x288>
    29f0:	97 fe       	sbrs	r9, 7
    29f2:	4a c0       	rjmp	.+148    	; 0x2a88 <vfprintf+0x330>
    29f4:	46 01       	movw	r8, r12
    29f6:	d7 fe       	sbrs	r13, 7
    29f8:	02 c0       	rjmp	.+4      	; 0x29fe <vfprintf+0x2a6>
    29fa:	81 2c       	mov	r8, r1
    29fc:	91 2c       	mov	r9, r1
    29fe:	c6 01       	movw	r24, r12
    2a00:	88 19       	sub	r24, r8
    2a02:	99 09       	sbc	r25, r9
    2a04:	f3 01       	movw	r30, r6
    2a06:	e8 0f       	add	r30, r24
    2a08:	f9 1f       	adc	r31, r25
    2a0a:	fe 87       	std	Y+14, r31	; 0x0e
    2a0c:	ed 87       	std	Y+13, r30	; 0x0d
    2a0e:	96 01       	movw	r18, r12
    2a10:	24 19       	sub	r18, r4
    2a12:	31 09       	sbc	r19, r1
    2a14:	38 8b       	std	Y+16, r19	; 0x10
    2a16:	2f 87       	std	Y+15, r18	; 0x0f
    2a18:	01 2f       	mov	r16, r17
    2a1a:	10 e0       	ldi	r17, 0x00	; 0
    2a1c:	11 95       	neg	r17
    2a1e:	01 95       	neg	r16
    2a20:	11 09       	sbc	r17, r1
    2a22:	3f ef       	ldi	r19, 0xFF	; 255
    2a24:	83 16       	cp	r8, r19
    2a26:	93 06       	cpc	r9, r19
    2a28:	21 f4       	brne	.+8      	; 0x2a32 <vfprintf+0x2da>
    2a2a:	b7 01       	movw	r22, r14
    2a2c:	8e e2       	ldi	r24, 0x2E	; 46
    2a2e:	90 e0       	ldi	r25, 0x00	; 0
    2a30:	2a d3       	rcall	.+1620   	; 0x3086 <fputc>
    2a32:	c8 14       	cp	r12, r8
    2a34:	d9 04       	cpc	r13, r9
    2a36:	4c f0       	brlt	.+18     	; 0x2a4a <vfprintf+0x2f2>
    2a38:	8f 85       	ldd	r24, Y+15	; 0x0f
    2a3a:	98 89       	ldd	r25, Y+16	; 0x10
    2a3c:	88 15       	cp	r24, r8
    2a3e:	99 05       	cpc	r25, r9
    2a40:	24 f4       	brge	.+8      	; 0x2a4a <vfprintf+0x2f2>
    2a42:	ed 85       	ldd	r30, Y+13	; 0x0d
    2a44:	fe 85       	ldd	r31, Y+14	; 0x0e
    2a46:	81 81       	ldd	r24, Z+1	; 0x01
    2a48:	01 c0       	rjmp	.+2      	; 0x2a4c <vfprintf+0x2f4>
    2a4a:	80 e3       	ldi	r24, 0x30	; 48
    2a4c:	f1 e0       	ldi	r31, 0x01	; 1
    2a4e:	8f 1a       	sub	r8, r31
    2a50:	91 08       	sbc	r9, r1
    2a52:	2d 85       	ldd	r18, Y+13	; 0x0d
    2a54:	3e 85       	ldd	r19, Y+14	; 0x0e
    2a56:	2f 5f       	subi	r18, 0xFF	; 255
    2a58:	3f 4f       	sbci	r19, 0xFF	; 255
    2a5a:	3e 87       	std	Y+14, r19	; 0x0e
    2a5c:	2d 87       	std	Y+13, r18	; 0x0d
    2a5e:	80 16       	cp	r8, r16
    2a60:	91 06       	cpc	r9, r17
    2a62:	24 f0       	brlt	.+8      	; 0x2a6c <vfprintf+0x314>
    2a64:	b7 01       	movw	r22, r14
    2a66:	90 e0       	ldi	r25, 0x00	; 0
    2a68:	0e d3       	rcall	.+1564   	; 0x3086 <fputc>
    2a6a:	db cf       	rjmp	.-74     	; 0x2a22 <vfprintf+0x2ca>
    2a6c:	c8 14       	cp	r12, r8
    2a6e:	d9 04       	cpc	r13, r9
    2a70:	41 f4       	brne	.+16     	; 0x2a82 <vfprintf+0x32a>
    2a72:	9a 81       	ldd	r25, Y+2	; 0x02
    2a74:	96 33       	cpi	r25, 0x36	; 54
    2a76:	20 f4       	brcc	.+8      	; 0x2a80 <vfprintf+0x328>
    2a78:	95 33       	cpi	r25, 0x35	; 53
    2a7a:	19 f4       	brne	.+6      	; 0x2a82 <vfprintf+0x32a>
    2a7c:	3c 85       	ldd	r19, Y+12	; 0x0c
    2a7e:	34 ff       	sbrs	r19, 4
    2a80:	81 e3       	ldi	r24, 0x31	; 49
    2a82:	b7 01       	movw	r22, r14
    2a84:	90 e0       	ldi	r25, 0x00	; 0
    2a86:	48 c0       	rjmp	.+144    	; 0x2b18 <vfprintf+0x3c0>
    2a88:	8a 81       	ldd	r24, Y+2	; 0x02
    2a8a:	81 33       	cpi	r24, 0x31	; 49
    2a8c:	19 f0       	breq	.+6      	; 0x2a94 <vfprintf+0x33c>
    2a8e:	9c 85       	ldd	r25, Y+12	; 0x0c
    2a90:	9f 7e       	andi	r25, 0xEF	; 239
    2a92:	9c 87       	std	Y+12, r25	; 0x0c
    2a94:	b7 01       	movw	r22, r14
    2a96:	90 e0       	ldi	r25, 0x00	; 0
    2a98:	f6 d2       	rcall	.+1516   	; 0x3086 <fputc>
    2a9a:	11 11       	cpse	r17, r1
    2a9c:	05 c0       	rjmp	.+10     	; 0x2aa8 <vfprintf+0x350>
    2a9e:	94 fc       	sbrc	r9, 4
    2aa0:	16 c0       	rjmp	.+44     	; 0x2ace <vfprintf+0x376>
    2aa2:	85 e6       	ldi	r24, 0x65	; 101
    2aa4:	90 e0       	ldi	r25, 0x00	; 0
    2aa6:	15 c0       	rjmp	.+42     	; 0x2ad2 <vfprintf+0x37a>
    2aa8:	b7 01       	movw	r22, r14
    2aaa:	8e e2       	ldi	r24, 0x2E	; 46
    2aac:	90 e0       	ldi	r25, 0x00	; 0
    2aae:	eb d2       	rcall	.+1494   	; 0x3086 <fputc>
    2ab0:	1e 5f       	subi	r17, 0xFE	; 254
    2ab2:	82 e0       	ldi	r24, 0x02	; 2
    2ab4:	01 e0       	ldi	r16, 0x01	; 1
    2ab6:	08 0f       	add	r16, r24
    2ab8:	f3 01       	movw	r30, r6
    2aba:	e8 0f       	add	r30, r24
    2abc:	f1 1d       	adc	r31, r1
    2abe:	80 81       	ld	r24, Z
    2ac0:	b7 01       	movw	r22, r14
    2ac2:	90 e0       	ldi	r25, 0x00	; 0
    2ac4:	e0 d2       	rcall	.+1472   	; 0x3086 <fputc>
    2ac6:	80 2f       	mov	r24, r16
    2ac8:	01 13       	cpse	r16, r17
    2aca:	f4 cf       	rjmp	.-24     	; 0x2ab4 <vfprintf+0x35c>
    2acc:	e8 cf       	rjmp	.-48     	; 0x2a9e <vfprintf+0x346>
    2ace:	85 e4       	ldi	r24, 0x45	; 69
    2ad0:	90 e0       	ldi	r25, 0x00	; 0
    2ad2:	b7 01       	movw	r22, r14
    2ad4:	d8 d2       	rcall	.+1456   	; 0x3086 <fputc>
    2ad6:	d7 fc       	sbrc	r13, 7
    2ad8:	06 c0       	rjmp	.+12     	; 0x2ae6 <vfprintf+0x38e>
    2ada:	c1 14       	cp	r12, r1
    2adc:	d1 04       	cpc	r13, r1
    2ade:	41 f4       	brne	.+16     	; 0x2af0 <vfprintf+0x398>
    2ae0:	ec 85       	ldd	r30, Y+12	; 0x0c
    2ae2:	e4 ff       	sbrs	r30, 4
    2ae4:	05 c0       	rjmp	.+10     	; 0x2af0 <vfprintf+0x398>
    2ae6:	d1 94       	neg	r13
    2ae8:	c1 94       	neg	r12
    2aea:	d1 08       	sbc	r13, r1
    2aec:	8d e2       	ldi	r24, 0x2D	; 45
    2aee:	01 c0       	rjmp	.+2      	; 0x2af2 <vfprintf+0x39a>
    2af0:	8b e2       	ldi	r24, 0x2B	; 43
    2af2:	b7 01       	movw	r22, r14
    2af4:	90 e0       	ldi	r25, 0x00	; 0
    2af6:	c7 d2       	rcall	.+1422   	; 0x3086 <fputc>
    2af8:	80 e3       	ldi	r24, 0x30	; 48
    2afa:	2a e0       	ldi	r18, 0x0A	; 10
    2afc:	c2 16       	cp	r12, r18
    2afe:	d1 04       	cpc	r13, r1
    2b00:	2c f0       	brlt	.+10     	; 0x2b0c <vfprintf+0x3b4>
    2b02:	8f 5f       	subi	r24, 0xFF	; 255
    2b04:	fa e0       	ldi	r31, 0x0A	; 10
    2b06:	cf 1a       	sub	r12, r31
    2b08:	d1 08       	sbc	r13, r1
    2b0a:	f7 cf       	rjmp	.-18     	; 0x2afa <vfprintf+0x3a2>
    2b0c:	b7 01       	movw	r22, r14
    2b0e:	90 e0       	ldi	r25, 0x00	; 0
    2b10:	ba d2       	rcall	.+1396   	; 0x3086 <fputc>
    2b12:	b7 01       	movw	r22, r14
    2b14:	c6 01       	movw	r24, r12
    2b16:	c0 96       	adiw	r24, 0x30	; 48
    2b18:	b6 d2       	rcall	.+1388   	; 0x3086 <fputc>
    2b1a:	49 c1       	rjmp	.+658    	; 0x2dae <vfprintf+0x656>
    2b1c:	83 36       	cpi	r24, 0x63	; 99
    2b1e:	31 f0       	breq	.+12     	; 0x2b2c <vfprintf+0x3d4>
    2b20:	83 37       	cpi	r24, 0x73	; 115
    2b22:	79 f0       	breq	.+30     	; 0x2b42 <vfprintf+0x3ea>
    2b24:	83 35       	cpi	r24, 0x53	; 83
    2b26:	09 f0       	breq	.+2      	; 0x2b2a <vfprintf+0x3d2>
    2b28:	52 c0       	rjmp	.+164    	; 0x2bce <vfprintf+0x476>
    2b2a:	1f c0       	rjmp	.+62     	; 0x2b6a <vfprintf+0x412>
    2b2c:	56 01       	movw	r10, r12
    2b2e:	32 e0       	ldi	r19, 0x02	; 2
    2b30:	a3 0e       	add	r10, r19
    2b32:	b1 1c       	adc	r11, r1
    2b34:	f6 01       	movw	r30, r12
    2b36:	80 81       	ld	r24, Z
    2b38:	89 83       	std	Y+1, r24	; 0x01
    2b3a:	01 e0       	ldi	r16, 0x01	; 1
    2b3c:	10 e0       	ldi	r17, 0x00	; 0
    2b3e:	63 01       	movw	r12, r6
    2b40:	11 c0       	rjmp	.+34     	; 0x2b64 <vfprintf+0x40c>
    2b42:	56 01       	movw	r10, r12
    2b44:	f2 e0       	ldi	r31, 0x02	; 2
    2b46:	af 0e       	add	r10, r31
    2b48:	b1 1c       	adc	r11, r1
    2b4a:	f6 01       	movw	r30, r12
    2b4c:	c0 80       	ld	r12, Z
    2b4e:	d1 80       	ldd	r13, Z+1	; 0x01
    2b50:	96 fe       	sbrs	r9, 6
    2b52:	03 c0       	rjmp	.+6      	; 0x2b5a <vfprintf+0x402>
    2b54:	61 2f       	mov	r22, r17
    2b56:	70 e0       	ldi	r23, 0x00	; 0
    2b58:	02 c0       	rjmp	.+4      	; 0x2b5e <vfprintf+0x406>
    2b5a:	6f ef       	ldi	r22, 0xFF	; 255
    2b5c:	7f ef       	ldi	r23, 0xFF	; 255
    2b5e:	c6 01       	movw	r24, r12
    2b60:	87 d2       	rcall	.+1294   	; 0x3070 <strnlen>
    2b62:	8c 01       	movw	r16, r24
    2b64:	f9 2d       	mov	r31, r9
    2b66:	ff 77       	andi	r31, 0x7F	; 127
    2b68:	13 c0       	rjmp	.+38     	; 0x2b90 <vfprintf+0x438>
    2b6a:	56 01       	movw	r10, r12
    2b6c:	22 e0       	ldi	r18, 0x02	; 2
    2b6e:	a2 0e       	add	r10, r18
    2b70:	b1 1c       	adc	r11, r1
    2b72:	f6 01       	movw	r30, r12
    2b74:	c0 80       	ld	r12, Z
    2b76:	d1 80       	ldd	r13, Z+1	; 0x01
    2b78:	96 fe       	sbrs	r9, 6
    2b7a:	03 c0       	rjmp	.+6      	; 0x2b82 <vfprintf+0x42a>
    2b7c:	61 2f       	mov	r22, r17
    2b7e:	70 e0       	ldi	r23, 0x00	; 0
    2b80:	02 c0       	rjmp	.+4      	; 0x2b86 <vfprintf+0x42e>
    2b82:	6f ef       	ldi	r22, 0xFF	; 255
    2b84:	7f ef       	ldi	r23, 0xFF	; 255
    2b86:	c6 01       	movw	r24, r12
    2b88:	54 d2       	rcall	.+1192   	; 0x3032 <strnlen_P>
    2b8a:	8c 01       	movw	r16, r24
    2b8c:	f9 2d       	mov	r31, r9
    2b8e:	f0 68       	ori	r31, 0x80	; 128
    2b90:	9f 2e       	mov	r9, r31
    2b92:	f3 fd       	sbrc	r31, 3
    2b94:	18 c0       	rjmp	.+48     	; 0x2bc6 <vfprintf+0x46e>
    2b96:	85 2d       	mov	r24, r5
    2b98:	90 e0       	ldi	r25, 0x00	; 0
    2b9a:	08 17       	cp	r16, r24
    2b9c:	19 07       	cpc	r17, r25
    2b9e:	98 f4       	brcc	.+38     	; 0x2bc6 <vfprintf+0x46e>
    2ba0:	b7 01       	movw	r22, r14
    2ba2:	80 e2       	ldi	r24, 0x20	; 32
    2ba4:	90 e0       	ldi	r25, 0x00	; 0
    2ba6:	6f d2       	rcall	.+1246   	; 0x3086 <fputc>
    2ba8:	5a 94       	dec	r5
    2baa:	f5 cf       	rjmp	.-22     	; 0x2b96 <vfprintf+0x43e>
    2bac:	f6 01       	movw	r30, r12
    2bae:	97 fc       	sbrc	r9, 7
    2bb0:	85 91       	lpm	r24, Z+
    2bb2:	97 fe       	sbrs	r9, 7
    2bb4:	81 91       	ld	r24, Z+
    2bb6:	6f 01       	movw	r12, r30
    2bb8:	b7 01       	movw	r22, r14
    2bba:	90 e0       	ldi	r25, 0x00	; 0
    2bbc:	64 d2       	rcall	.+1224   	; 0x3086 <fputc>
    2bbe:	51 10       	cpse	r5, r1
    2bc0:	5a 94       	dec	r5
    2bc2:	01 50       	subi	r16, 0x01	; 1
    2bc4:	11 09       	sbc	r17, r1
    2bc6:	01 15       	cp	r16, r1
    2bc8:	11 05       	cpc	r17, r1
    2bca:	81 f7       	brne	.-32     	; 0x2bac <vfprintf+0x454>
    2bcc:	f0 c0       	rjmp	.+480    	; 0x2dae <vfprintf+0x656>
    2bce:	84 36       	cpi	r24, 0x64	; 100
    2bd0:	11 f0       	breq	.+4      	; 0x2bd6 <vfprintf+0x47e>
    2bd2:	89 36       	cpi	r24, 0x69	; 105
    2bd4:	59 f5       	brne	.+86     	; 0x2c2c <vfprintf+0x4d4>
    2bd6:	56 01       	movw	r10, r12
    2bd8:	97 fe       	sbrs	r9, 7
    2bda:	09 c0       	rjmp	.+18     	; 0x2bee <vfprintf+0x496>
    2bdc:	24 e0       	ldi	r18, 0x04	; 4
    2bde:	a2 0e       	add	r10, r18
    2be0:	b1 1c       	adc	r11, r1
    2be2:	f6 01       	movw	r30, r12
    2be4:	60 81       	ld	r22, Z
    2be6:	71 81       	ldd	r23, Z+1	; 0x01
    2be8:	82 81       	ldd	r24, Z+2	; 0x02
    2bea:	93 81       	ldd	r25, Z+3	; 0x03
    2bec:	0a c0       	rjmp	.+20     	; 0x2c02 <vfprintf+0x4aa>
    2bee:	f2 e0       	ldi	r31, 0x02	; 2
    2bf0:	af 0e       	add	r10, r31
    2bf2:	b1 1c       	adc	r11, r1
    2bf4:	f6 01       	movw	r30, r12
    2bf6:	60 81       	ld	r22, Z
    2bf8:	71 81       	ldd	r23, Z+1	; 0x01
    2bfa:	07 2e       	mov	r0, r23
    2bfc:	00 0c       	add	r0, r0
    2bfe:	88 0b       	sbc	r24, r24
    2c00:	99 0b       	sbc	r25, r25
    2c02:	f9 2d       	mov	r31, r9
    2c04:	ff 76       	andi	r31, 0x6F	; 111
    2c06:	9f 2e       	mov	r9, r31
    2c08:	97 ff       	sbrs	r25, 7
    2c0a:	09 c0       	rjmp	.+18     	; 0x2c1e <vfprintf+0x4c6>
    2c0c:	90 95       	com	r25
    2c0e:	80 95       	com	r24
    2c10:	70 95       	com	r23
    2c12:	61 95       	neg	r22
    2c14:	7f 4f       	sbci	r23, 0xFF	; 255
    2c16:	8f 4f       	sbci	r24, 0xFF	; 255
    2c18:	9f 4f       	sbci	r25, 0xFF	; 255
    2c1a:	f0 68       	ori	r31, 0x80	; 128
    2c1c:	9f 2e       	mov	r9, r31
    2c1e:	2a e0       	ldi	r18, 0x0A	; 10
    2c20:	30 e0       	ldi	r19, 0x00	; 0
    2c22:	a3 01       	movw	r20, r6
    2c24:	8b d2       	rcall	.+1302   	; 0x313c <__ultoa_invert>
    2c26:	c8 2e       	mov	r12, r24
    2c28:	c6 18       	sub	r12, r6
    2c2a:	3e c0       	rjmp	.+124    	; 0x2ca8 <vfprintf+0x550>
    2c2c:	09 2d       	mov	r16, r9
    2c2e:	85 37       	cpi	r24, 0x75	; 117
    2c30:	21 f4       	brne	.+8      	; 0x2c3a <vfprintf+0x4e2>
    2c32:	0f 7e       	andi	r16, 0xEF	; 239
    2c34:	2a e0       	ldi	r18, 0x0A	; 10
    2c36:	30 e0       	ldi	r19, 0x00	; 0
    2c38:	1d c0       	rjmp	.+58     	; 0x2c74 <vfprintf+0x51c>
    2c3a:	09 7f       	andi	r16, 0xF9	; 249
    2c3c:	8f 36       	cpi	r24, 0x6F	; 111
    2c3e:	91 f0       	breq	.+36     	; 0x2c64 <vfprintf+0x50c>
    2c40:	18 f4       	brcc	.+6      	; 0x2c48 <vfprintf+0x4f0>
    2c42:	88 35       	cpi	r24, 0x58	; 88
    2c44:	59 f0       	breq	.+22     	; 0x2c5c <vfprintf+0x504>
    2c46:	bc c0       	rjmp	.+376    	; 0x2dc0 <vfprintf+0x668>
    2c48:	80 37       	cpi	r24, 0x70	; 112
    2c4a:	19 f0       	breq	.+6      	; 0x2c52 <vfprintf+0x4fa>
    2c4c:	88 37       	cpi	r24, 0x78	; 120
    2c4e:	11 f0       	breq	.+4      	; 0x2c54 <vfprintf+0x4fc>
    2c50:	b7 c0       	rjmp	.+366    	; 0x2dc0 <vfprintf+0x668>
    2c52:	00 61       	ori	r16, 0x10	; 16
    2c54:	04 ff       	sbrs	r16, 4
    2c56:	09 c0       	rjmp	.+18     	; 0x2c6a <vfprintf+0x512>
    2c58:	04 60       	ori	r16, 0x04	; 4
    2c5a:	07 c0       	rjmp	.+14     	; 0x2c6a <vfprintf+0x512>
    2c5c:	94 fe       	sbrs	r9, 4
    2c5e:	08 c0       	rjmp	.+16     	; 0x2c70 <vfprintf+0x518>
    2c60:	06 60       	ori	r16, 0x06	; 6
    2c62:	06 c0       	rjmp	.+12     	; 0x2c70 <vfprintf+0x518>
    2c64:	28 e0       	ldi	r18, 0x08	; 8
    2c66:	30 e0       	ldi	r19, 0x00	; 0
    2c68:	05 c0       	rjmp	.+10     	; 0x2c74 <vfprintf+0x51c>
    2c6a:	20 e1       	ldi	r18, 0x10	; 16
    2c6c:	30 e0       	ldi	r19, 0x00	; 0
    2c6e:	02 c0       	rjmp	.+4      	; 0x2c74 <vfprintf+0x51c>
    2c70:	20 e1       	ldi	r18, 0x10	; 16
    2c72:	32 e0       	ldi	r19, 0x02	; 2
    2c74:	56 01       	movw	r10, r12
    2c76:	07 ff       	sbrs	r16, 7
    2c78:	09 c0       	rjmp	.+18     	; 0x2c8c <vfprintf+0x534>
    2c7a:	84 e0       	ldi	r24, 0x04	; 4
    2c7c:	a8 0e       	add	r10, r24
    2c7e:	b1 1c       	adc	r11, r1
    2c80:	f6 01       	movw	r30, r12
    2c82:	60 81       	ld	r22, Z
    2c84:	71 81       	ldd	r23, Z+1	; 0x01
    2c86:	82 81       	ldd	r24, Z+2	; 0x02
    2c88:	93 81       	ldd	r25, Z+3	; 0x03
    2c8a:	08 c0       	rjmp	.+16     	; 0x2c9c <vfprintf+0x544>
    2c8c:	f2 e0       	ldi	r31, 0x02	; 2
    2c8e:	af 0e       	add	r10, r31
    2c90:	b1 1c       	adc	r11, r1
    2c92:	f6 01       	movw	r30, r12
    2c94:	60 81       	ld	r22, Z
    2c96:	71 81       	ldd	r23, Z+1	; 0x01
    2c98:	80 e0       	ldi	r24, 0x00	; 0
    2c9a:	90 e0       	ldi	r25, 0x00	; 0
    2c9c:	a3 01       	movw	r20, r6
    2c9e:	4e d2       	rcall	.+1180   	; 0x313c <__ultoa_invert>
    2ca0:	c8 2e       	mov	r12, r24
    2ca2:	c6 18       	sub	r12, r6
    2ca4:	0f 77       	andi	r16, 0x7F	; 127
    2ca6:	90 2e       	mov	r9, r16
    2ca8:	96 fe       	sbrs	r9, 6
    2caa:	0b c0       	rjmp	.+22     	; 0x2cc2 <vfprintf+0x56a>
    2cac:	09 2d       	mov	r16, r9
    2cae:	0e 7f       	andi	r16, 0xFE	; 254
    2cb0:	c1 16       	cp	r12, r17
    2cb2:	50 f4       	brcc	.+20     	; 0x2cc8 <vfprintf+0x570>
    2cb4:	94 fe       	sbrs	r9, 4
    2cb6:	0a c0       	rjmp	.+20     	; 0x2ccc <vfprintf+0x574>
    2cb8:	92 fc       	sbrc	r9, 2
    2cba:	08 c0       	rjmp	.+16     	; 0x2ccc <vfprintf+0x574>
    2cbc:	09 2d       	mov	r16, r9
    2cbe:	0e 7e       	andi	r16, 0xEE	; 238
    2cc0:	05 c0       	rjmp	.+10     	; 0x2ccc <vfprintf+0x574>
    2cc2:	dc 2c       	mov	r13, r12
    2cc4:	09 2d       	mov	r16, r9
    2cc6:	03 c0       	rjmp	.+6      	; 0x2cce <vfprintf+0x576>
    2cc8:	dc 2c       	mov	r13, r12
    2cca:	01 c0       	rjmp	.+2      	; 0x2cce <vfprintf+0x576>
    2ccc:	d1 2e       	mov	r13, r17
    2cce:	04 ff       	sbrs	r16, 4
    2cd0:	0d c0       	rjmp	.+26     	; 0x2cec <vfprintf+0x594>
    2cd2:	fe 01       	movw	r30, r28
    2cd4:	ec 0d       	add	r30, r12
    2cd6:	f1 1d       	adc	r31, r1
    2cd8:	80 81       	ld	r24, Z
    2cda:	80 33       	cpi	r24, 0x30	; 48
    2cdc:	11 f4       	brne	.+4      	; 0x2ce2 <vfprintf+0x58a>
    2cde:	09 7e       	andi	r16, 0xE9	; 233
    2ce0:	09 c0       	rjmp	.+18     	; 0x2cf4 <vfprintf+0x59c>
    2ce2:	02 ff       	sbrs	r16, 2
    2ce4:	06 c0       	rjmp	.+12     	; 0x2cf2 <vfprintf+0x59a>
    2ce6:	d3 94       	inc	r13
    2ce8:	d3 94       	inc	r13
    2cea:	04 c0       	rjmp	.+8      	; 0x2cf4 <vfprintf+0x59c>
    2cec:	80 2f       	mov	r24, r16
    2cee:	86 78       	andi	r24, 0x86	; 134
    2cf0:	09 f0       	breq	.+2      	; 0x2cf4 <vfprintf+0x59c>
    2cf2:	d3 94       	inc	r13
    2cf4:	03 fd       	sbrc	r16, 3
    2cf6:	10 c0       	rjmp	.+32     	; 0x2d18 <vfprintf+0x5c0>
    2cf8:	00 ff       	sbrs	r16, 0
    2cfa:	06 c0       	rjmp	.+12     	; 0x2d08 <vfprintf+0x5b0>
    2cfc:	1c 2d       	mov	r17, r12
    2cfe:	d5 14       	cp	r13, r5
    2d00:	78 f4       	brcc	.+30     	; 0x2d20 <vfprintf+0x5c8>
    2d02:	15 0d       	add	r17, r5
    2d04:	1d 19       	sub	r17, r13
    2d06:	0c c0       	rjmp	.+24     	; 0x2d20 <vfprintf+0x5c8>
    2d08:	d5 14       	cp	r13, r5
    2d0a:	50 f4       	brcc	.+20     	; 0x2d20 <vfprintf+0x5c8>
    2d0c:	b7 01       	movw	r22, r14
    2d0e:	80 e2       	ldi	r24, 0x20	; 32
    2d10:	90 e0       	ldi	r25, 0x00	; 0
    2d12:	b9 d1       	rcall	.+882    	; 0x3086 <fputc>
    2d14:	d3 94       	inc	r13
    2d16:	f8 cf       	rjmp	.-16     	; 0x2d08 <vfprintf+0x5b0>
    2d18:	d5 14       	cp	r13, r5
    2d1a:	10 f4       	brcc	.+4      	; 0x2d20 <vfprintf+0x5c8>
    2d1c:	5d 18       	sub	r5, r13
    2d1e:	01 c0       	rjmp	.+2      	; 0x2d22 <vfprintf+0x5ca>
    2d20:	51 2c       	mov	r5, r1
    2d22:	04 ff       	sbrs	r16, 4
    2d24:	0f c0       	rjmp	.+30     	; 0x2d44 <vfprintf+0x5ec>
    2d26:	b7 01       	movw	r22, r14
    2d28:	80 e3       	ldi	r24, 0x30	; 48
    2d2a:	90 e0       	ldi	r25, 0x00	; 0
    2d2c:	ac d1       	rcall	.+856    	; 0x3086 <fputc>
    2d2e:	02 ff       	sbrs	r16, 2
    2d30:	16 c0       	rjmp	.+44     	; 0x2d5e <vfprintf+0x606>
    2d32:	01 fd       	sbrc	r16, 1
    2d34:	03 c0       	rjmp	.+6      	; 0x2d3c <vfprintf+0x5e4>
    2d36:	88 e7       	ldi	r24, 0x78	; 120
    2d38:	90 e0       	ldi	r25, 0x00	; 0
    2d3a:	02 c0       	rjmp	.+4      	; 0x2d40 <vfprintf+0x5e8>
    2d3c:	88 e5       	ldi	r24, 0x58	; 88
    2d3e:	90 e0       	ldi	r25, 0x00	; 0
    2d40:	b7 01       	movw	r22, r14
    2d42:	0c c0       	rjmp	.+24     	; 0x2d5c <vfprintf+0x604>
    2d44:	80 2f       	mov	r24, r16
    2d46:	86 78       	andi	r24, 0x86	; 134
    2d48:	51 f0       	breq	.+20     	; 0x2d5e <vfprintf+0x606>
    2d4a:	01 ff       	sbrs	r16, 1
    2d4c:	02 c0       	rjmp	.+4      	; 0x2d52 <vfprintf+0x5fa>
    2d4e:	8b e2       	ldi	r24, 0x2B	; 43
    2d50:	01 c0       	rjmp	.+2      	; 0x2d54 <vfprintf+0x5fc>
    2d52:	80 e2       	ldi	r24, 0x20	; 32
    2d54:	07 fd       	sbrc	r16, 7
    2d56:	8d e2       	ldi	r24, 0x2D	; 45
    2d58:	b7 01       	movw	r22, r14
    2d5a:	90 e0       	ldi	r25, 0x00	; 0
    2d5c:	94 d1       	rcall	.+808    	; 0x3086 <fputc>
    2d5e:	c1 16       	cp	r12, r17
    2d60:	30 f4       	brcc	.+12     	; 0x2d6e <vfprintf+0x616>
    2d62:	b7 01       	movw	r22, r14
    2d64:	80 e3       	ldi	r24, 0x30	; 48
    2d66:	90 e0       	ldi	r25, 0x00	; 0
    2d68:	8e d1       	rcall	.+796    	; 0x3086 <fputc>
    2d6a:	11 50       	subi	r17, 0x01	; 1
    2d6c:	f8 cf       	rjmp	.-16     	; 0x2d5e <vfprintf+0x606>
    2d6e:	ca 94       	dec	r12
    2d70:	f3 01       	movw	r30, r6
    2d72:	ec 0d       	add	r30, r12
    2d74:	f1 1d       	adc	r31, r1
    2d76:	80 81       	ld	r24, Z
    2d78:	b7 01       	movw	r22, r14
    2d7a:	90 e0       	ldi	r25, 0x00	; 0
    2d7c:	84 d1       	rcall	.+776    	; 0x3086 <fputc>
    2d7e:	c1 10       	cpse	r12, r1
    2d80:	f6 cf       	rjmp	.-20     	; 0x2d6e <vfprintf+0x616>
    2d82:	15 c0       	rjmp	.+42     	; 0x2dae <vfprintf+0x656>
    2d84:	f4 e0       	ldi	r31, 0x04	; 4
    2d86:	f5 15       	cp	r31, r5
    2d88:	50 f5       	brcc	.+84     	; 0x2dde <vfprintf+0x686>
    2d8a:	84 e0       	ldi	r24, 0x04	; 4
    2d8c:	58 1a       	sub	r5, r24
    2d8e:	93 fe       	sbrs	r9, 3
    2d90:	1e c0       	rjmp	.+60     	; 0x2dce <vfprintf+0x676>
    2d92:	01 11       	cpse	r16, r1
    2d94:	25 c0       	rjmp	.+74     	; 0x2de0 <vfprintf+0x688>
    2d96:	2c 85       	ldd	r18, Y+12	; 0x0c
    2d98:	23 ff       	sbrs	r18, 3
    2d9a:	27 c0       	rjmp	.+78     	; 0x2dea <vfprintf+0x692>
    2d9c:	04 ee       	ldi	r16, 0xE4	; 228
    2d9e:	10 e0       	ldi	r17, 0x00	; 0
    2da0:	39 2d       	mov	r19, r9
    2da2:	30 71       	andi	r19, 0x10	; 16
    2da4:	93 2e       	mov	r9, r19
    2da6:	f8 01       	movw	r30, r16
    2da8:	84 91       	lpm	r24, Z
    2daa:	81 11       	cpse	r24, r1
    2dac:	21 c0       	rjmp	.+66     	; 0x2df0 <vfprintf+0x698>
    2dae:	55 20       	and	r5, r5
    2db0:	09 f4       	brne	.+2      	; 0x2db4 <vfprintf+0x65c>
    2db2:	fc cc       	rjmp	.-1544   	; 0x27ac <vfprintf+0x54>
    2db4:	b7 01       	movw	r22, r14
    2db6:	80 e2       	ldi	r24, 0x20	; 32
    2db8:	90 e0       	ldi	r25, 0x00	; 0
    2dba:	65 d1       	rcall	.+714    	; 0x3086 <fputc>
    2dbc:	5a 94       	dec	r5
    2dbe:	f7 cf       	rjmp	.-18     	; 0x2dae <vfprintf+0x656>
    2dc0:	f7 01       	movw	r30, r14
    2dc2:	86 81       	ldd	r24, Z+6	; 0x06
    2dc4:	97 81       	ldd	r25, Z+7	; 0x07
    2dc6:	23 c0       	rjmp	.+70     	; 0x2e0e <vfprintf+0x6b6>
    2dc8:	8f ef       	ldi	r24, 0xFF	; 255
    2dca:	9f ef       	ldi	r25, 0xFF	; 255
    2dcc:	20 c0       	rjmp	.+64     	; 0x2e0e <vfprintf+0x6b6>
    2dce:	b7 01       	movw	r22, r14
    2dd0:	80 e2       	ldi	r24, 0x20	; 32
    2dd2:	90 e0       	ldi	r25, 0x00	; 0
    2dd4:	58 d1       	rcall	.+688    	; 0x3086 <fputc>
    2dd6:	5a 94       	dec	r5
    2dd8:	51 10       	cpse	r5, r1
    2dda:	f9 cf       	rjmp	.-14     	; 0x2dce <vfprintf+0x676>
    2ddc:	da cf       	rjmp	.-76     	; 0x2d92 <vfprintf+0x63a>
    2dde:	51 2c       	mov	r5, r1
    2de0:	b7 01       	movw	r22, r14
    2de2:	80 2f       	mov	r24, r16
    2de4:	90 e0       	ldi	r25, 0x00	; 0
    2de6:	4f d1       	rcall	.+670    	; 0x3086 <fputc>
    2de8:	d6 cf       	rjmp	.-84     	; 0x2d96 <vfprintf+0x63e>
    2dea:	08 ee       	ldi	r16, 0xE8	; 232
    2dec:	10 e0       	ldi	r17, 0x00	; 0
    2dee:	d8 cf       	rjmp	.-80     	; 0x2da0 <vfprintf+0x648>
    2df0:	91 10       	cpse	r9, r1
    2df2:	80 52       	subi	r24, 0x20	; 32
    2df4:	b7 01       	movw	r22, r14
    2df6:	90 e0       	ldi	r25, 0x00	; 0
    2df8:	46 d1       	rcall	.+652    	; 0x3086 <fputc>
    2dfa:	0f 5f       	subi	r16, 0xFF	; 255
    2dfc:	1f 4f       	sbci	r17, 0xFF	; 255
    2dfe:	d3 cf       	rjmp	.-90     	; 0x2da6 <vfprintf+0x64e>
    2e00:	23 e0       	ldi	r18, 0x03	; 3
    2e02:	25 15       	cp	r18, r5
    2e04:	10 f4       	brcc	.+4      	; 0x2e0a <vfprintf+0x6b2>
    2e06:	83 e0       	ldi	r24, 0x03	; 3
    2e08:	c1 cf       	rjmp	.-126    	; 0x2d8c <vfprintf+0x634>
    2e0a:	51 2c       	mov	r5, r1
    2e0c:	c4 cf       	rjmp	.-120    	; 0x2d96 <vfprintf+0x63e>
    2e0e:	60 96       	adiw	r28, 0x10	; 16
    2e10:	e2 e1       	ldi	r30, 0x12	; 18
    2e12:	1c c0       	rjmp	.+56     	; 0x2e4c <__epilogue_restores__>

00002e14 <__prologue_saves__>:
    2e14:	2f 92       	push	r2
    2e16:	3f 92       	push	r3
    2e18:	4f 92       	push	r4
    2e1a:	5f 92       	push	r5
    2e1c:	6f 92       	push	r6
    2e1e:	7f 92       	push	r7
    2e20:	8f 92       	push	r8
    2e22:	9f 92       	push	r9
    2e24:	af 92       	push	r10
    2e26:	bf 92       	push	r11
    2e28:	cf 92       	push	r12
    2e2a:	df 92       	push	r13
    2e2c:	ef 92       	push	r14
    2e2e:	ff 92       	push	r15
    2e30:	0f 93       	push	r16
    2e32:	1f 93       	push	r17
    2e34:	cf 93       	push	r28
    2e36:	df 93       	push	r29
    2e38:	cd b7       	in	r28, 0x3d	; 61
    2e3a:	de b7       	in	r29, 0x3e	; 62
    2e3c:	ca 1b       	sub	r28, r26
    2e3e:	db 0b       	sbc	r29, r27
    2e40:	0f b6       	in	r0, 0x3f	; 63
    2e42:	f8 94       	cli
    2e44:	de bf       	out	0x3e, r29	; 62
    2e46:	0f be       	out	0x3f, r0	; 63
    2e48:	cd bf       	out	0x3d, r28	; 61
    2e4a:	09 94       	ijmp

00002e4c <__epilogue_restores__>:
    2e4c:	2a 88       	ldd	r2, Y+18	; 0x12
    2e4e:	39 88       	ldd	r3, Y+17	; 0x11
    2e50:	48 88       	ldd	r4, Y+16	; 0x10
    2e52:	5f 84       	ldd	r5, Y+15	; 0x0f
    2e54:	6e 84       	ldd	r6, Y+14	; 0x0e
    2e56:	7d 84       	ldd	r7, Y+13	; 0x0d
    2e58:	8c 84       	ldd	r8, Y+12	; 0x0c
    2e5a:	9b 84       	ldd	r9, Y+11	; 0x0b
    2e5c:	aa 84       	ldd	r10, Y+10	; 0x0a
    2e5e:	b9 84       	ldd	r11, Y+9	; 0x09
    2e60:	c8 84       	ldd	r12, Y+8	; 0x08
    2e62:	df 80       	ldd	r13, Y+7	; 0x07
    2e64:	ee 80       	ldd	r14, Y+6	; 0x06
    2e66:	fd 80       	ldd	r15, Y+5	; 0x05
    2e68:	0c 81       	ldd	r16, Y+4	; 0x04
    2e6a:	1b 81       	ldd	r17, Y+3	; 0x03
    2e6c:	aa 81       	ldd	r26, Y+2	; 0x02
    2e6e:	b9 81       	ldd	r27, Y+1	; 0x01
    2e70:	ce 0f       	add	r28, r30
    2e72:	d1 1d       	adc	r29, r1
    2e74:	0f b6       	in	r0, 0x3f	; 63
    2e76:	f8 94       	cli
    2e78:	de bf       	out	0x3e, r29	; 62
    2e7a:	0f be       	out	0x3f, r0	; 63
    2e7c:	cd bf       	out	0x3d, r28	; 61
    2e7e:	ed 01       	movw	r28, r26
    2e80:	08 95       	ret

00002e82 <__ftoa_engine>:
    2e82:	28 30       	cpi	r18, 0x08	; 8
    2e84:	08 f0       	brcs	.+2      	; 0x2e88 <__ftoa_engine+0x6>
    2e86:	27 e0       	ldi	r18, 0x07	; 7
    2e88:	33 27       	eor	r19, r19
    2e8a:	da 01       	movw	r26, r20
    2e8c:	99 0f       	add	r25, r25
    2e8e:	31 1d       	adc	r19, r1
    2e90:	87 fd       	sbrc	r24, 7
    2e92:	91 60       	ori	r25, 0x01	; 1
    2e94:	00 96       	adiw	r24, 0x00	; 0
    2e96:	61 05       	cpc	r22, r1
    2e98:	71 05       	cpc	r23, r1
    2e9a:	39 f4       	brne	.+14     	; 0x2eaa <__ftoa_engine+0x28>
    2e9c:	32 60       	ori	r19, 0x02	; 2
    2e9e:	2e 5f       	subi	r18, 0xFE	; 254
    2ea0:	3d 93       	st	X+, r19
    2ea2:	30 e3       	ldi	r19, 0x30	; 48
    2ea4:	2a 95       	dec	r18
    2ea6:	e1 f7       	brne	.-8      	; 0x2ea0 <__ftoa_engine+0x1e>
    2ea8:	08 95       	ret
    2eaa:	9f 3f       	cpi	r25, 0xFF	; 255
    2eac:	30 f0       	brcs	.+12     	; 0x2eba <__ftoa_engine+0x38>
    2eae:	80 38       	cpi	r24, 0x80	; 128
    2eb0:	71 05       	cpc	r23, r1
    2eb2:	61 05       	cpc	r22, r1
    2eb4:	09 f0       	breq	.+2      	; 0x2eb8 <__ftoa_engine+0x36>
    2eb6:	3c 5f       	subi	r19, 0xFC	; 252
    2eb8:	3c 5f       	subi	r19, 0xFC	; 252
    2eba:	3d 93       	st	X+, r19
    2ebc:	91 30       	cpi	r25, 0x01	; 1
    2ebe:	08 f0       	brcs	.+2      	; 0x2ec2 <__ftoa_engine+0x40>
    2ec0:	80 68       	ori	r24, 0x80	; 128
    2ec2:	91 1d       	adc	r25, r1
    2ec4:	df 93       	push	r29
    2ec6:	cf 93       	push	r28
    2ec8:	1f 93       	push	r17
    2eca:	0f 93       	push	r16
    2ecc:	ff 92       	push	r15
    2ece:	ef 92       	push	r14
    2ed0:	19 2f       	mov	r17, r25
    2ed2:	98 7f       	andi	r25, 0xF8	; 248
    2ed4:	96 95       	lsr	r25
    2ed6:	e9 2f       	mov	r30, r25
    2ed8:	96 95       	lsr	r25
    2eda:	96 95       	lsr	r25
    2edc:	e9 0f       	add	r30, r25
    2ede:	ff 27       	eor	r31, r31
    2ee0:	ea 5b       	subi	r30, 0xBA	; 186
    2ee2:	fe 4f       	sbci	r31, 0xFE	; 254
    2ee4:	99 27       	eor	r25, r25
    2ee6:	33 27       	eor	r19, r19
    2ee8:	ee 24       	eor	r14, r14
    2eea:	ff 24       	eor	r15, r15
    2eec:	a7 01       	movw	r20, r14
    2eee:	e7 01       	movw	r28, r14
    2ef0:	05 90       	lpm	r0, Z+
    2ef2:	08 94       	sec
    2ef4:	07 94       	ror	r0
    2ef6:	28 f4       	brcc	.+10     	; 0x2f02 <__ftoa_engine+0x80>
    2ef8:	36 0f       	add	r19, r22
    2efa:	e7 1e       	adc	r14, r23
    2efc:	f8 1e       	adc	r15, r24
    2efe:	49 1f       	adc	r20, r25
    2f00:	51 1d       	adc	r21, r1
    2f02:	66 0f       	add	r22, r22
    2f04:	77 1f       	adc	r23, r23
    2f06:	88 1f       	adc	r24, r24
    2f08:	99 1f       	adc	r25, r25
    2f0a:	06 94       	lsr	r0
    2f0c:	a1 f7       	brne	.-24     	; 0x2ef6 <__ftoa_engine+0x74>
    2f0e:	05 90       	lpm	r0, Z+
    2f10:	07 94       	ror	r0
    2f12:	28 f4       	brcc	.+10     	; 0x2f1e <__ftoa_engine+0x9c>
    2f14:	e7 0e       	add	r14, r23
    2f16:	f8 1e       	adc	r15, r24
    2f18:	49 1f       	adc	r20, r25
    2f1a:	56 1f       	adc	r21, r22
    2f1c:	c1 1d       	adc	r28, r1
    2f1e:	77 0f       	add	r23, r23
    2f20:	88 1f       	adc	r24, r24
    2f22:	99 1f       	adc	r25, r25
    2f24:	66 1f       	adc	r22, r22
    2f26:	06 94       	lsr	r0
    2f28:	a1 f7       	brne	.-24     	; 0x2f12 <__ftoa_engine+0x90>
    2f2a:	05 90       	lpm	r0, Z+
    2f2c:	07 94       	ror	r0
    2f2e:	28 f4       	brcc	.+10     	; 0x2f3a <__ftoa_engine+0xb8>
    2f30:	f8 0e       	add	r15, r24
    2f32:	49 1f       	adc	r20, r25
    2f34:	56 1f       	adc	r21, r22
    2f36:	c7 1f       	adc	r28, r23
    2f38:	d1 1d       	adc	r29, r1
    2f3a:	88 0f       	add	r24, r24
    2f3c:	99 1f       	adc	r25, r25
    2f3e:	66 1f       	adc	r22, r22
    2f40:	77 1f       	adc	r23, r23
    2f42:	06 94       	lsr	r0
    2f44:	a1 f7       	brne	.-24     	; 0x2f2e <__ftoa_engine+0xac>
    2f46:	05 90       	lpm	r0, Z+
    2f48:	07 94       	ror	r0
    2f4a:	20 f4       	brcc	.+8      	; 0x2f54 <__ftoa_engine+0xd2>
    2f4c:	49 0f       	add	r20, r25
    2f4e:	56 1f       	adc	r21, r22
    2f50:	c7 1f       	adc	r28, r23
    2f52:	d8 1f       	adc	r29, r24
    2f54:	99 0f       	add	r25, r25
    2f56:	66 1f       	adc	r22, r22
    2f58:	77 1f       	adc	r23, r23
    2f5a:	88 1f       	adc	r24, r24
    2f5c:	06 94       	lsr	r0
    2f5e:	a9 f7       	brne	.-22     	; 0x2f4a <__ftoa_engine+0xc8>
    2f60:	84 91       	lpm	r24, Z
    2f62:	10 95       	com	r17
    2f64:	17 70       	andi	r17, 0x07	; 7
    2f66:	41 f0       	breq	.+16     	; 0x2f78 <__ftoa_engine+0xf6>
    2f68:	d6 95       	lsr	r29
    2f6a:	c7 95       	ror	r28
    2f6c:	57 95       	ror	r21
    2f6e:	47 95       	ror	r20
    2f70:	f7 94       	ror	r15
    2f72:	e7 94       	ror	r14
    2f74:	1a 95       	dec	r17
    2f76:	c1 f7       	brne	.-16     	; 0x2f68 <__ftoa_engine+0xe6>
    2f78:	ec ee       	ldi	r30, 0xEC	; 236
    2f7a:	f0 e0       	ldi	r31, 0x00	; 0
    2f7c:	68 94       	set
    2f7e:	15 90       	lpm	r1, Z+
    2f80:	15 91       	lpm	r17, Z+
    2f82:	35 91       	lpm	r19, Z+
    2f84:	65 91       	lpm	r22, Z+
    2f86:	95 91       	lpm	r25, Z+
    2f88:	05 90       	lpm	r0, Z+
    2f8a:	7f e2       	ldi	r23, 0x2F	; 47
    2f8c:	73 95       	inc	r23
    2f8e:	e1 18       	sub	r14, r1
    2f90:	f1 0a       	sbc	r15, r17
    2f92:	43 0b       	sbc	r20, r19
    2f94:	56 0b       	sbc	r21, r22
    2f96:	c9 0b       	sbc	r28, r25
    2f98:	d0 09       	sbc	r29, r0
    2f9a:	c0 f7       	brcc	.-16     	; 0x2f8c <__ftoa_engine+0x10a>
    2f9c:	e1 0c       	add	r14, r1
    2f9e:	f1 1e       	adc	r15, r17
    2fa0:	43 1f       	adc	r20, r19
    2fa2:	56 1f       	adc	r21, r22
    2fa4:	c9 1f       	adc	r28, r25
    2fa6:	d0 1d       	adc	r29, r0
    2fa8:	7e f4       	brtc	.+30     	; 0x2fc8 <__ftoa_engine+0x146>
    2faa:	70 33       	cpi	r23, 0x30	; 48
    2fac:	11 f4       	brne	.+4      	; 0x2fb2 <__ftoa_engine+0x130>
    2fae:	8a 95       	dec	r24
    2fb0:	e6 cf       	rjmp	.-52     	; 0x2f7e <__ftoa_engine+0xfc>
    2fb2:	e8 94       	clt
    2fb4:	01 50       	subi	r16, 0x01	; 1
    2fb6:	30 f0       	brcs	.+12     	; 0x2fc4 <__ftoa_engine+0x142>
    2fb8:	08 0f       	add	r16, r24
    2fba:	0a f4       	brpl	.+2      	; 0x2fbe <__ftoa_engine+0x13c>
    2fbc:	00 27       	eor	r16, r16
    2fbe:	02 17       	cp	r16, r18
    2fc0:	08 f4       	brcc	.+2      	; 0x2fc4 <__ftoa_engine+0x142>
    2fc2:	20 2f       	mov	r18, r16
    2fc4:	23 95       	inc	r18
    2fc6:	02 2f       	mov	r16, r18
    2fc8:	7a 33       	cpi	r23, 0x3A	; 58
    2fca:	28 f0       	brcs	.+10     	; 0x2fd6 <__ftoa_engine+0x154>
    2fcc:	79 e3       	ldi	r23, 0x39	; 57
    2fce:	7d 93       	st	X+, r23
    2fd0:	2a 95       	dec	r18
    2fd2:	e9 f7       	brne	.-6      	; 0x2fce <__ftoa_engine+0x14c>
    2fd4:	10 c0       	rjmp	.+32     	; 0x2ff6 <__ftoa_engine+0x174>
    2fd6:	7d 93       	st	X+, r23
    2fd8:	2a 95       	dec	r18
    2fda:	89 f6       	brne	.-94     	; 0x2f7e <__ftoa_engine+0xfc>
    2fdc:	06 94       	lsr	r0
    2fde:	97 95       	ror	r25
    2fe0:	67 95       	ror	r22
    2fe2:	37 95       	ror	r19
    2fe4:	17 95       	ror	r17
    2fe6:	17 94       	ror	r1
    2fe8:	e1 18       	sub	r14, r1
    2fea:	f1 0a       	sbc	r15, r17
    2fec:	43 0b       	sbc	r20, r19
    2fee:	56 0b       	sbc	r21, r22
    2ff0:	c9 0b       	sbc	r28, r25
    2ff2:	d0 09       	sbc	r29, r0
    2ff4:	98 f0       	brcs	.+38     	; 0x301c <__ftoa_engine+0x19a>
    2ff6:	23 95       	inc	r18
    2ff8:	7e 91       	ld	r23, -X
    2ffa:	73 95       	inc	r23
    2ffc:	7a 33       	cpi	r23, 0x3A	; 58
    2ffe:	08 f0       	brcs	.+2      	; 0x3002 <__ftoa_engine+0x180>
    3000:	70 e3       	ldi	r23, 0x30	; 48
    3002:	7c 93       	st	X, r23
    3004:	20 13       	cpse	r18, r16
    3006:	b8 f7       	brcc	.-18     	; 0x2ff6 <__ftoa_engine+0x174>
    3008:	7e 91       	ld	r23, -X
    300a:	70 61       	ori	r23, 0x10	; 16
    300c:	7d 93       	st	X+, r23
    300e:	30 f0       	brcs	.+12     	; 0x301c <__ftoa_engine+0x19a>
    3010:	83 95       	inc	r24
    3012:	71 e3       	ldi	r23, 0x31	; 49
    3014:	7d 93       	st	X+, r23
    3016:	70 e3       	ldi	r23, 0x30	; 48
    3018:	2a 95       	dec	r18
    301a:	e1 f7       	brne	.-8      	; 0x3014 <__ftoa_engine+0x192>
    301c:	11 24       	eor	r1, r1
    301e:	ef 90       	pop	r14
    3020:	ff 90       	pop	r15
    3022:	0f 91       	pop	r16
    3024:	1f 91       	pop	r17
    3026:	cf 91       	pop	r28
    3028:	df 91       	pop	r29
    302a:	99 27       	eor	r25, r25
    302c:	87 fd       	sbrc	r24, 7
    302e:	90 95       	com	r25
    3030:	08 95       	ret

00003032 <strnlen_P>:
    3032:	fc 01       	movw	r30, r24
    3034:	05 90       	lpm	r0, Z+
    3036:	61 50       	subi	r22, 0x01	; 1
    3038:	70 40       	sbci	r23, 0x00	; 0
    303a:	01 10       	cpse	r0, r1
    303c:	d8 f7       	brcc	.-10     	; 0x3034 <strnlen_P+0x2>
    303e:	80 95       	com	r24
    3040:	90 95       	com	r25
    3042:	8e 0f       	add	r24, r30
    3044:	9f 1f       	adc	r25, r31
    3046:	08 95       	ret

00003048 <strcat>:
    3048:	fb 01       	movw	r30, r22
    304a:	dc 01       	movw	r26, r24
    304c:	0d 90       	ld	r0, X+
    304e:	00 20       	and	r0, r0
    3050:	e9 f7       	brne	.-6      	; 0x304c <strcat+0x4>
    3052:	11 97       	sbiw	r26, 0x01	; 1
    3054:	01 90       	ld	r0, Z+
    3056:	0d 92       	st	X+, r0
    3058:	00 20       	and	r0, r0
    305a:	e1 f7       	brne	.-8      	; 0x3054 <strcat+0xc>
    305c:	08 95       	ret

0000305e <strcmp>:
    305e:	fb 01       	movw	r30, r22
    3060:	dc 01       	movw	r26, r24
    3062:	8d 91       	ld	r24, X+
    3064:	01 90       	ld	r0, Z+
    3066:	80 19       	sub	r24, r0
    3068:	01 10       	cpse	r0, r1
    306a:	d9 f3       	breq	.-10     	; 0x3062 <strcmp+0x4>
    306c:	99 0b       	sbc	r25, r25
    306e:	08 95       	ret

00003070 <strnlen>:
    3070:	fc 01       	movw	r30, r24
    3072:	61 50       	subi	r22, 0x01	; 1
    3074:	70 40       	sbci	r23, 0x00	; 0
    3076:	01 90       	ld	r0, Z+
    3078:	01 10       	cpse	r0, r1
    307a:	d8 f7       	brcc	.-10     	; 0x3072 <strnlen+0x2>
    307c:	80 95       	com	r24
    307e:	90 95       	com	r25
    3080:	8e 0f       	add	r24, r30
    3082:	9f 1f       	adc	r25, r31
    3084:	08 95       	ret

00003086 <fputc>:
    3086:	0f 93       	push	r16
    3088:	1f 93       	push	r17
    308a:	cf 93       	push	r28
    308c:	df 93       	push	r29
    308e:	fb 01       	movw	r30, r22
    3090:	23 81       	ldd	r18, Z+3	; 0x03
    3092:	21 fd       	sbrc	r18, 1
    3094:	03 c0       	rjmp	.+6      	; 0x309c <fputc+0x16>
    3096:	8f ef       	ldi	r24, 0xFF	; 255
    3098:	9f ef       	ldi	r25, 0xFF	; 255
    309a:	2c c0       	rjmp	.+88     	; 0x30f4 <fputc+0x6e>
    309c:	22 ff       	sbrs	r18, 2
    309e:	16 c0       	rjmp	.+44     	; 0x30cc <fputc+0x46>
    30a0:	46 81       	ldd	r20, Z+6	; 0x06
    30a2:	57 81       	ldd	r21, Z+7	; 0x07
    30a4:	24 81       	ldd	r18, Z+4	; 0x04
    30a6:	35 81       	ldd	r19, Z+5	; 0x05
    30a8:	42 17       	cp	r20, r18
    30aa:	53 07       	cpc	r21, r19
    30ac:	44 f4       	brge	.+16     	; 0x30be <fputc+0x38>
    30ae:	a0 81       	ld	r26, Z
    30b0:	b1 81       	ldd	r27, Z+1	; 0x01
    30b2:	9d 01       	movw	r18, r26
    30b4:	2f 5f       	subi	r18, 0xFF	; 255
    30b6:	3f 4f       	sbci	r19, 0xFF	; 255
    30b8:	31 83       	std	Z+1, r19	; 0x01
    30ba:	20 83       	st	Z, r18
    30bc:	8c 93       	st	X, r24
    30be:	26 81       	ldd	r18, Z+6	; 0x06
    30c0:	37 81       	ldd	r19, Z+7	; 0x07
    30c2:	2f 5f       	subi	r18, 0xFF	; 255
    30c4:	3f 4f       	sbci	r19, 0xFF	; 255
    30c6:	37 83       	std	Z+7, r19	; 0x07
    30c8:	26 83       	std	Z+6, r18	; 0x06
    30ca:	14 c0       	rjmp	.+40     	; 0x30f4 <fputc+0x6e>
    30cc:	8b 01       	movw	r16, r22
    30ce:	ec 01       	movw	r28, r24
    30d0:	fb 01       	movw	r30, r22
    30d2:	00 84       	ldd	r0, Z+8	; 0x08
    30d4:	f1 85       	ldd	r31, Z+9	; 0x09
    30d6:	e0 2d       	mov	r30, r0
    30d8:	09 95       	icall
    30da:	89 2b       	or	r24, r25
    30dc:	e1 f6       	brne	.-72     	; 0x3096 <fputc+0x10>
    30de:	d8 01       	movw	r26, r16
    30e0:	16 96       	adiw	r26, 0x06	; 6
    30e2:	8d 91       	ld	r24, X+
    30e4:	9c 91       	ld	r25, X
    30e6:	17 97       	sbiw	r26, 0x07	; 7
    30e8:	01 96       	adiw	r24, 0x01	; 1
    30ea:	17 96       	adiw	r26, 0x07	; 7
    30ec:	9c 93       	st	X, r25
    30ee:	8e 93       	st	-X, r24
    30f0:	16 97       	sbiw	r26, 0x06	; 6
    30f2:	ce 01       	movw	r24, r28
    30f4:	df 91       	pop	r29
    30f6:	cf 91       	pop	r28
    30f8:	1f 91       	pop	r17
    30fa:	0f 91       	pop	r16
    30fc:	08 95       	ret

000030fe <sprintf>:
    30fe:	ae e0       	ldi	r26, 0x0E	; 14
    3100:	b0 e0       	ldi	r27, 0x00	; 0
    3102:	e4 e8       	ldi	r30, 0x84	; 132
    3104:	f8 e1       	ldi	r31, 0x18	; 24
    3106:	94 ce       	rjmp	.-728    	; 0x2e30 <__prologue_saves__+0x1c>
    3108:	0d 89       	ldd	r16, Y+21	; 0x15
    310a:	1e 89       	ldd	r17, Y+22	; 0x16
    310c:	86 e0       	ldi	r24, 0x06	; 6
    310e:	8c 83       	std	Y+4, r24	; 0x04
    3110:	1a 83       	std	Y+2, r17	; 0x02
    3112:	09 83       	std	Y+1, r16	; 0x01
    3114:	8f ef       	ldi	r24, 0xFF	; 255
    3116:	9f e7       	ldi	r25, 0x7F	; 127
    3118:	9e 83       	std	Y+6, r25	; 0x06
    311a:	8d 83       	std	Y+5, r24	; 0x05
    311c:	ae 01       	movw	r20, r28
    311e:	47 5e       	subi	r20, 0xE7	; 231
    3120:	5f 4f       	sbci	r21, 0xFF	; 255
    3122:	6f 89       	ldd	r22, Y+23	; 0x17
    3124:	78 8d       	ldd	r23, Y+24	; 0x18
    3126:	ce 01       	movw	r24, r28
    3128:	01 96       	adiw	r24, 0x01	; 1
    312a:	16 db       	rcall	.-2516   	; 0x2758 <vfprintf>
    312c:	ef 81       	ldd	r30, Y+7	; 0x07
    312e:	f8 85       	ldd	r31, Y+8	; 0x08
    3130:	e0 0f       	add	r30, r16
    3132:	f1 1f       	adc	r31, r17
    3134:	10 82       	st	Z, r1
    3136:	2e 96       	adiw	r28, 0x0e	; 14
    3138:	e4 e0       	ldi	r30, 0x04	; 4
    313a:	96 ce       	rjmp	.-724    	; 0x2e68 <__epilogue_restores__+0x1c>

0000313c <__ultoa_invert>:
    313c:	fa 01       	movw	r30, r20
    313e:	aa 27       	eor	r26, r26
    3140:	28 30       	cpi	r18, 0x08	; 8
    3142:	51 f1       	breq	.+84     	; 0x3198 <__ultoa_invert+0x5c>
    3144:	20 31       	cpi	r18, 0x10	; 16
    3146:	81 f1       	breq	.+96     	; 0x31a8 <__ultoa_invert+0x6c>
    3148:	e8 94       	clt
    314a:	6f 93       	push	r22
    314c:	6e 7f       	andi	r22, 0xFE	; 254
    314e:	6e 5f       	subi	r22, 0xFE	; 254
    3150:	7f 4f       	sbci	r23, 0xFF	; 255
    3152:	8f 4f       	sbci	r24, 0xFF	; 255
    3154:	9f 4f       	sbci	r25, 0xFF	; 255
    3156:	af 4f       	sbci	r26, 0xFF	; 255
    3158:	b1 e0       	ldi	r27, 0x01	; 1
    315a:	3e d0       	rcall	.+124    	; 0x31d8 <__ultoa_invert+0x9c>
    315c:	b4 e0       	ldi	r27, 0x04	; 4
    315e:	3c d0       	rcall	.+120    	; 0x31d8 <__ultoa_invert+0x9c>
    3160:	67 0f       	add	r22, r23
    3162:	78 1f       	adc	r23, r24
    3164:	89 1f       	adc	r24, r25
    3166:	9a 1f       	adc	r25, r26
    3168:	a1 1d       	adc	r26, r1
    316a:	68 0f       	add	r22, r24
    316c:	79 1f       	adc	r23, r25
    316e:	8a 1f       	adc	r24, r26
    3170:	91 1d       	adc	r25, r1
    3172:	a1 1d       	adc	r26, r1
    3174:	6a 0f       	add	r22, r26
    3176:	71 1d       	adc	r23, r1
    3178:	81 1d       	adc	r24, r1
    317a:	91 1d       	adc	r25, r1
    317c:	a1 1d       	adc	r26, r1
    317e:	20 d0       	rcall	.+64     	; 0x31c0 <__ultoa_invert+0x84>
    3180:	09 f4       	brne	.+2      	; 0x3184 <__ultoa_invert+0x48>
    3182:	68 94       	set
    3184:	3f 91       	pop	r19
    3186:	2a e0       	ldi	r18, 0x0A	; 10
    3188:	26 9f       	mul	r18, r22
    318a:	11 24       	eor	r1, r1
    318c:	30 19       	sub	r19, r0
    318e:	30 5d       	subi	r19, 0xD0	; 208
    3190:	31 93       	st	Z+, r19
    3192:	de f6       	brtc	.-74     	; 0x314a <__ultoa_invert+0xe>
    3194:	cf 01       	movw	r24, r30
    3196:	08 95       	ret
    3198:	46 2f       	mov	r20, r22
    319a:	47 70       	andi	r20, 0x07	; 7
    319c:	40 5d       	subi	r20, 0xD0	; 208
    319e:	41 93       	st	Z+, r20
    31a0:	b3 e0       	ldi	r27, 0x03	; 3
    31a2:	0f d0       	rcall	.+30     	; 0x31c2 <__ultoa_invert+0x86>
    31a4:	c9 f7       	brne	.-14     	; 0x3198 <__ultoa_invert+0x5c>
    31a6:	f6 cf       	rjmp	.-20     	; 0x3194 <__ultoa_invert+0x58>
    31a8:	46 2f       	mov	r20, r22
    31aa:	4f 70       	andi	r20, 0x0F	; 15
    31ac:	40 5d       	subi	r20, 0xD0	; 208
    31ae:	4a 33       	cpi	r20, 0x3A	; 58
    31b0:	18 f0       	brcs	.+6      	; 0x31b8 <__ultoa_invert+0x7c>
    31b2:	49 5d       	subi	r20, 0xD9	; 217
    31b4:	31 fd       	sbrc	r19, 1
    31b6:	40 52       	subi	r20, 0x20	; 32
    31b8:	41 93       	st	Z+, r20
    31ba:	02 d0       	rcall	.+4      	; 0x31c0 <__ultoa_invert+0x84>
    31bc:	a9 f7       	brne	.-22     	; 0x31a8 <__ultoa_invert+0x6c>
    31be:	ea cf       	rjmp	.-44     	; 0x3194 <__ultoa_invert+0x58>
    31c0:	b4 e0       	ldi	r27, 0x04	; 4
    31c2:	a6 95       	lsr	r26
    31c4:	97 95       	ror	r25
    31c6:	87 95       	ror	r24
    31c8:	77 95       	ror	r23
    31ca:	67 95       	ror	r22
    31cc:	ba 95       	dec	r27
    31ce:	c9 f7       	brne	.-14     	; 0x31c2 <__ultoa_invert+0x86>
    31d0:	00 97       	sbiw	r24, 0x00	; 0
    31d2:	61 05       	cpc	r22, r1
    31d4:	71 05       	cpc	r23, r1
    31d6:	08 95       	ret
    31d8:	9b 01       	movw	r18, r22
    31da:	ac 01       	movw	r20, r24
    31dc:	0a 2e       	mov	r0, r26
    31de:	06 94       	lsr	r0
    31e0:	57 95       	ror	r21
    31e2:	47 95       	ror	r20
    31e4:	37 95       	ror	r19
    31e6:	27 95       	ror	r18
    31e8:	ba 95       	dec	r27
    31ea:	c9 f7       	brne	.-14     	; 0x31de <__ultoa_invert+0xa2>
    31ec:	62 0f       	add	r22, r18
    31ee:	73 1f       	adc	r23, r19
    31f0:	84 1f       	adc	r24, r20
    31f2:	95 1f       	adc	r25, r21
    31f4:	a0 1d       	adc	r26, r0
    31f6:	08 95       	ret

000031f8 <_exit>:
    31f8:	f8 94       	cli

000031fa <__stop_program>:
    31fa:	ff cf       	rjmp	.-2      	; 0x31fa <__stop_program>
