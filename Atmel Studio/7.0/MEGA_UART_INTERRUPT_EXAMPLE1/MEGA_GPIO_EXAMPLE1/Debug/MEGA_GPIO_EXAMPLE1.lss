
MEGA_GPIO_EXAMPLE1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000222  00800200  00002c52  00002ce6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00002c52  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000007b  00800422  00800422  00002f08  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00002f08  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00002f64  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000002d8  00000000  00000000  00002fa0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000034cb  00000000  00000000  00003278  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000171e  00000000  00000000  00006743  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000380d  00000000  00000000  00007e61  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000770  00000000  00000000  0000b670  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00014d59  00000000  00000000  0000bde0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001c7d  00000000  00000000  00020b39  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000228  00000000  00000000  000227b6  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  00006019  00000000  00000000  000229de  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	f2 c0       	rjmp	.+484    	; 0x1e6 <__ctors_end>
       2:	00 00       	nop
       4:	0d c1       	rjmp	.+538    	; 0x220 <__bad_interrupt>
       6:	00 00       	nop
       8:	0b c1       	rjmp	.+534    	; 0x220 <__bad_interrupt>
       a:	00 00       	nop
       c:	09 c1       	rjmp	.+530    	; 0x220 <__bad_interrupt>
       e:	00 00       	nop
      10:	07 c1       	rjmp	.+526    	; 0x220 <__bad_interrupt>
      12:	00 00       	nop
      14:	05 c1       	rjmp	.+522    	; 0x220 <__bad_interrupt>
      16:	00 00       	nop
      18:	03 c1       	rjmp	.+518    	; 0x220 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	01 c1       	rjmp	.+514    	; 0x220 <__bad_interrupt>
      1e:	00 00       	nop
      20:	ff c0       	rjmp	.+510    	; 0x220 <__bad_interrupt>
      22:	00 00       	nop
      24:	fd c0       	rjmp	.+506    	; 0x220 <__bad_interrupt>
      26:	00 00       	nop
      28:	fb c0       	rjmp	.+502    	; 0x220 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	f9 c0       	rjmp	.+498    	; 0x220 <__bad_interrupt>
      2e:	00 00       	nop
      30:	0c 94 bb 0e 	jmp	0x1d76	; 0x1d76 <__vector_12>
      34:	f5 c0       	rjmp	.+490    	; 0x220 <__bad_interrupt>
      36:	00 00       	nop
      38:	f3 c0       	rjmp	.+486    	; 0x220 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	f1 c0       	rjmp	.+482    	; 0x220 <__bad_interrupt>
      3e:	00 00       	nop
      40:	ef c0       	rjmp	.+478    	; 0x220 <__bad_interrupt>
      42:	00 00       	nop
      44:	0c 94 e4 0d 	jmp	0x1bc8	; 0x1bc8 <__vector_17>
      48:	eb c0       	rjmp	.+470    	; 0x220 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	e9 c0       	rjmp	.+466    	; 0x220 <__bad_interrupt>
      4e:	00 00       	nop
      50:	e7 c0       	rjmp	.+462    	; 0x220 <__bad_interrupt>
      52:	00 00       	nop
      54:	e5 c0       	rjmp	.+458    	; 0x220 <__bad_interrupt>
      56:	00 00       	nop
      58:	e3 c0       	rjmp	.+454    	; 0x220 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	e1 c0       	rjmp	.+450    	; 0x220 <__bad_interrupt>
      5e:	00 00       	nop
      60:	df c0       	rjmp	.+446    	; 0x220 <__bad_interrupt>
      62:	00 00       	nop
      64:	0c 94 85 0e 	jmp	0x1d0a	; 0x1d0a <__vector_25>
      68:	db c0       	rjmp	.+438    	; 0x220 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	d9 c0       	rjmp	.+434    	; 0x220 <__bad_interrupt>
      6e:	00 00       	nop
      70:	d7 c0       	rjmp	.+430    	; 0x220 <__bad_interrupt>
      72:	00 00       	nop
      74:	d5 c0       	rjmp	.+426    	; 0x220 <__bad_interrupt>
      76:	00 00       	nop
      78:	d3 c0       	rjmp	.+422    	; 0x220 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	d1 c0       	rjmp	.+418    	; 0x220 <__bad_interrupt>
      7e:	00 00       	nop
      80:	cf c0       	rjmp	.+414    	; 0x220 <__bad_interrupt>
      82:	00 00       	nop
      84:	cd c0       	rjmp	.+410    	; 0x220 <__bad_interrupt>
      86:	00 00       	nop
      88:	cb c0       	rjmp	.+406    	; 0x220 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	c9 c0       	rjmp	.+402    	; 0x220 <__bad_interrupt>
      8e:	00 00       	nop
      90:	c7 c0       	rjmp	.+398    	; 0x220 <__bad_interrupt>
      92:	00 00       	nop
      94:	c5 c0       	rjmp	.+394    	; 0x220 <__bad_interrupt>
      96:	00 00       	nop
      98:	c3 c0       	rjmp	.+390    	; 0x220 <__bad_interrupt>
      9a:	00 00       	nop
      9c:	c1 c0       	rjmp	.+386    	; 0x220 <__bad_interrupt>
      9e:	00 00       	nop
      a0:	bf c0       	rjmp	.+382    	; 0x220 <__bad_interrupt>
      a2:	00 00       	nop
      a4:	bd c0       	rjmp	.+378    	; 0x220 <__bad_interrupt>
      a6:	00 00       	nop
      a8:	bb c0       	rjmp	.+374    	; 0x220 <__bad_interrupt>
      aa:	00 00       	nop
      ac:	b9 c0       	rjmp	.+370    	; 0x220 <__bad_interrupt>
      ae:	00 00       	nop
      b0:	b7 c0       	rjmp	.+366    	; 0x220 <__bad_interrupt>
      b2:	00 00       	nop
      b4:	b5 c0       	rjmp	.+362    	; 0x220 <__bad_interrupt>
      b6:	00 00       	nop
      b8:	b3 c0       	rjmp	.+358    	; 0x220 <__bad_interrupt>
      ba:	00 00       	nop
      bc:	b1 c0       	rjmp	.+354    	; 0x220 <__bad_interrupt>
      be:	00 00       	nop
      c0:	af c0       	rjmp	.+350    	; 0x220 <__bad_interrupt>
      c2:	00 00       	nop
      c4:	ad c0       	rjmp	.+346    	; 0x220 <__bad_interrupt>
      c6:	00 00       	nop
      c8:	ab c0       	rjmp	.+342    	; 0x220 <__bad_interrupt>
      ca:	00 00       	nop
      cc:	a9 c0       	rjmp	.+338    	; 0x220 <__bad_interrupt>
      ce:	00 00       	nop
      d0:	a7 c0       	rjmp	.+334    	; 0x220 <__bad_interrupt>
      d2:	00 00       	nop
      d4:	a5 c0       	rjmp	.+330    	; 0x220 <__bad_interrupt>
      d6:	00 00       	nop
      d8:	a3 c0       	rjmp	.+326    	; 0x220 <__bad_interrupt>
      da:	00 00       	nop
      dc:	a1 c0       	rjmp	.+322    	; 0x220 <__bad_interrupt>
      de:	00 00       	nop
      e0:	9f c0       	rjmp	.+318    	; 0x220 <__bad_interrupt>
	...

000000e4 <__trampolines_end>:
      e4:	6e 61       	ori	r22, 0x1E	; 30
      e6:	6e 00       	.word	0x006e	; ????

000000e8 <__c.2332>:
      e8:	69 6e 66 00 00 40 7a 10 f3 5a 00 a0 72 4e 18 09     inf..@z..Z..rN..
      f8:	00 10 a5 d4 e8 00 00 e8 76 48 17 00 00 e4 0b 54     ........vH.....T
     108:	02 00 00 ca 9a 3b 00 00 00 e1 f5 05 00 00 80 96     .....;..........
     118:	98 00 00 00 40 42 0f 00 00 00 a0 86 01 00 00 00     ....@B..........
     128:	10 27 00 00 00 00 e8 03 00 00 00 00 64 00 00 00     .'..........d...
     138:	00 00 0a 00 00 00 00 00 01 00 00 00 00 00 2c 76     ..............,v
     148:	d8 88 dc 67 4f 08 23 df c1 df ae 59 e1 b1 b7 96     ...gO.#....Y....
     158:	e5 e3 e4 53 c6 3a e6 51 99 76 96 e8 e6 c2 84 26     ...S.:.Q.v.....&
     168:	eb 89 8c 9b 62 ed 40 7c 6f fc ef bc 9c 9f 40 f2     ....b.@|o.....@.
     178:	ba a5 6f a5 f4 90 05 5a 2a f7 5c 93 6b 6c f9 67     ..o....Z*.\.kl.g
     188:	6d c1 1b fc e0 e4 0d 47 fe f5 20 e6 b5 00 d0 ed     m......G.. .....
     198:	90 2e 03 00 94 35 77 05 00 80 84 1e 08 00 00 20     .....5w........ 
     1a8:	4e 0a 00 00 00 c8 0c 33 33 33 33 0f 98 6e 12 83     N......3333..n..
     1b8:	11 41 ef 8d 21 14 89 3b e6 55 16 cf fe e6 db 18     .A..!..;.U......
     1c8:	d1 84 4b 38 1b f7 7c 1d 90 1d a4 bb e4 24 20 32     ..K8..|......$ 2
     1d8:	84 72 5e 22 81 00 c9 f1 24 ec a1 e5 3d 27           .r^"....$...='

000001e6 <__ctors_end>:
     1e6:	11 24       	eor	r1, r1
     1e8:	1f be       	out	0x3f, r1	; 63
     1ea:	cf ef       	ldi	r28, 0xFF	; 255
     1ec:	d1 e2       	ldi	r29, 0x21	; 33
     1ee:	de bf       	out	0x3e, r29	; 62
     1f0:	cd bf       	out	0x3d, r28	; 61

000001f2 <__do_copy_data>:
     1f2:	14 e0       	ldi	r17, 0x04	; 4
     1f4:	a0 e0       	ldi	r26, 0x00	; 0
     1f6:	b2 e0       	ldi	r27, 0x02	; 2
     1f8:	e2 e5       	ldi	r30, 0x52	; 82
     1fa:	fc e2       	ldi	r31, 0x2C	; 44
     1fc:	02 c0       	rjmp	.+4      	; 0x202 <__do_copy_data+0x10>
     1fe:	05 90       	lpm	r0, Z+
     200:	0d 92       	st	X+, r0
     202:	a2 32       	cpi	r26, 0x22	; 34
     204:	b1 07       	cpc	r27, r17
     206:	d9 f7       	brne	.-10     	; 0x1fe <__do_copy_data+0xc>

00000208 <__do_clear_bss>:
     208:	24 e0       	ldi	r18, 0x04	; 4
     20a:	a2 e2       	ldi	r26, 0x22	; 34
     20c:	b4 e0       	ldi	r27, 0x04	; 4
     20e:	01 c0       	rjmp	.+2      	; 0x212 <.do_clear_bss_start>

00000210 <.do_clear_bss_loop>:
     210:	1d 92       	st	X+, r1

00000212 <.do_clear_bss_start>:
     212:	ad 39       	cpi	r26, 0x9D	; 157
     214:	b2 07       	cpc	r27, r18
     216:	e1 f7       	brne	.-8      	; 0x210 <.do_clear_bss_loop>
     218:	0e 94 e0 0e 	call	0x1dc0	; 0x1dc0 <main>
     21c:	0c 94 27 16 	jmp	0x2c4e	; 0x2c4e <_exit>

00000220 <__bad_interrupt>:
     220:	ef ce       	rjmp	.-546    	; 0x0 <__vectors>

00000222 <Change_ADC>:
// Date: 2019-01-15
// Description: Change ADC_MUX to read next value
/*========================================================================================*/

void Change_ADC(int i){
	if (i < 4){
     222:	84 30       	cpi	r24, 0x04	; 4
     224:	91 05       	cpc	r25, r1
     226:	44 f4       	brge	.+16     	; 0x238 <Change_ADC+0x16>
		ADCSRB &= 0xf7;
     228:	eb e7       	ldi	r30, 0x7B	; 123
     22a:	f0 e0       	ldi	r31, 0x00	; 0
     22c:	90 81       	ld	r25, Z
     22e:	97 7f       	andi	r25, 0xF7	; 247
     230:	90 83       	st	Z, r25
		ADMUX = 0x00 + i;
     232:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>
     236:	08 95       	ret
	}
	else{
		ADCSRB = 0x08;
     238:	98 e0       	ldi	r25, 0x08	; 8
     23a:	90 93 7b 00 	sts	0x007B, r25	; 0x80007b <__TEXT_REGION_LENGTH__+0x7e007b>
		ADMUX = 0x00 + (i - 4);
     23e:	84 50       	subi	r24, 0x04	; 4
     240:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>
     244:	08 95       	ret

00000246 <Read_ADC>:
/*========================================================================================*/

uint16_t Read_ADC(){
	
	// start conversion
	ADCSRA |= 0x40;
     246:	ea e7       	ldi	r30, 0x7A	; 122
     248:	f0 e0       	ldi	r31, 0x00	; 0
     24a:	80 81       	ld	r24, Z
     24c:	80 64       	ori	r24, 0x40	; 64
     24e:	80 83       	st	Z, r24
	
	// Wait until conversion is done
	while(ADCSRA & 0x40);
     250:	80 81       	ld	r24, Z
     252:	86 fd       	sbrc	r24, 6
     254:	fd cf       	rjmp	.-6      	; 0x250 <Read_ADC+0xa>
	
	return ADC;
     256:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
     25a:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
}
     25e:	08 95       	ret

00000260 <Check_ADC>:
/*========================================================================================*/

float Check_ADC(int i){
	
	// Choose the correct ADC channel to read from
	Change_ADC(i);
     260:	e0 df       	rcall	.-64     	; 0x222 <Change_ADC>
	
	// Get the read value from the ADC
	return Read_ADC();	
     262:	f1 df       	rcall	.-30     	; 0x246 <Read_ADC>
     264:	bc 01       	movw	r22, r24
     266:	80 e0       	ldi	r24, 0x00	; 0
     268:	90 e0       	ldi	r25, 0x00	; 0
     26a:	0c 94 be 0f 	jmp	0x1f7c	; 0x1f7c <__floatunsisf>
     26e:	08 95       	ret

00000270 <Volt_ADC>:
	
}
     270:	9c 01       	movw	r18, r24
// Date: 2019-03-06
// Description: Voltage Measurements via ADC.
/*========================================================================================*/

float Volt_ADC(int Volt_num){
	int ADC_num = Volt_num + 4; // ADC_num is the value needed for Change_ADC
     272:	2c 5f       	subi	r18, 0xFC	; 252
     274:	3f 4f       	sbci	r19, 0xFF	; 255
	
	// Explained
	// voltage = (ADC_value / total resolution)
	
	// 3V3-1 & 3V3-2 rails
	if(ADC_num == 4 || ADC_num == 5){
     276:	02 97       	sbiw	r24, 0x02	; 2
     278:	a8 f4       	brcc	.+42     	; 0x2a4 <Volt_ADC+0x34>
		val = ((Check_ADC(ADC_num) / 1024) * 3.3) / 0.9090;
     27a:	c9 01       	movw	r24, r18
     27c:	f1 df       	rcall	.-30     	; 0x260 <Check_ADC>
     27e:	20 e0       	ldi	r18, 0x00	; 0
     280:	30 e0       	ldi	r19, 0x00	; 0
     282:	40 e8       	ldi	r20, 0x80	; 128
     284:	5a e3       	ldi	r21, 0x3A	; 58
     286:	0e 94 74 10 	call	0x20e8	; 0x20e8 <__mulsf3>
     28a:	23 e3       	ldi	r18, 0x33	; 51
     28c:	33 e3       	ldi	r19, 0x33	; 51
     28e:	43 e5       	ldi	r20, 0x53	; 83
     290:	50 e4       	ldi	r21, 0x40	; 64
     292:	0e 94 74 10 	call	0x20e8	; 0x20e8 <__mulsf3>
     296:	29 e3       	ldi	r18, 0x39	; 57
     298:	34 eb       	ldi	r19, 0xB4	; 180
     29a:	48 e6       	ldi	r20, 0x68	; 104
     29c:	5f e3       	ldi	r21, 0x3F	; 63
     29e:	0c 94 56 0f 	jmp	0x1eac	; 0x1eac <__divsf3>
     2a2:	08 95       	ret
	}
	// 5V rail
	else if(ADC_num == 6){
     2a4:	26 30       	cpi	r18, 0x06	; 6
     2a6:	31 05       	cpc	r19, r1
     2a8:	b1 f4       	brne	.+44     	; 0x2d6 <Volt_ADC+0x66>
		val = ((Check_ADC(ADC_num) / 1024) * 3.3) / 0.5997;
     2aa:	86 e0       	ldi	r24, 0x06	; 6
     2ac:	90 e0       	ldi	r25, 0x00	; 0
     2ae:	d8 df       	rcall	.-80     	; 0x260 <Check_ADC>
     2b0:	20 e0       	ldi	r18, 0x00	; 0
     2b2:	30 e0       	ldi	r19, 0x00	; 0
     2b4:	40 e8       	ldi	r20, 0x80	; 128
     2b6:	5a e3       	ldi	r21, 0x3A	; 58
     2b8:	0e 94 74 10 	call	0x20e8	; 0x20e8 <__mulsf3>
     2bc:	23 e3       	ldi	r18, 0x33	; 51
     2be:	33 e3       	ldi	r19, 0x33	; 51
     2c0:	43 e5       	ldi	r20, 0x53	; 83
     2c2:	50 e4       	ldi	r21, 0x40	; 64
     2c4:	0e 94 74 10 	call	0x20e8	; 0x20e8 <__mulsf3>
     2c8:	20 ef       	ldi	r18, 0xF0	; 240
     2ca:	35 e8       	ldi	r19, 0x85	; 133
     2cc:	49 e1       	ldi	r20, 0x19	; 25
     2ce:	5f e3       	ldi	r21, 0x3F	; 63
     2d0:	0c 94 56 0f 	jmp	0x1eac	; 0x1eac <__divsf3>
     2d4:	08 95       	ret
		// Correction factor (through testing)
		// 69 (mV) offset
	}
	// 8V rail
	else if(ADC_num == 7){
     2d6:	27 30       	cpi	r18, 0x07	; 7
     2d8:	31 05       	cpc	r19, r1
     2da:	b1 f4       	brne	.+44     	; 0x308 <Volt_ADC+0x98>
		val = ((Check_ADC(ADC_num) / 1024) * 3.3) / 0.3597;
     2dc:	87 e0       	ldi	r24, 0x07	; 7
     2de:	90 e0       	ldi	r25, 0x00	; 0
     2e0:	bf df       	rcall	.-130    	; 0x260 <Check_ADC>
     2e2:	20 e0       	ldi	r18, 0x00	; 0
     2e4:	30 e0       	ldi	r19, 0x00	; 0
     2e6:	40 e8       	ldi	r20, 0x80	; 128
     2e8:	5a e3       	ldi	r21, 0x3A	; 58
     2ea:	0e 94 74 10 	call	0x20e8	; 0x20e8 <__mulsf3>
     2ee:	23 e3       	ldi	r18, 0x33	; 51
     2f0:	33 e3       	ldi	r19, 0x33	; 51
     2f2:	43 e5       	ldi	r20, 0x53	; 83
     2f4:	50 e4       	ldi	r21, 0x40	; 64
     2f6:	0e 94 74 10 	call	0x20e8	; 0x20e8 <__mulsf3>
     2fa:	29 e9       	ldi	r18, 0x99	; 153
     2fc:	3a e2       	ldi	r19, 0x2A	; 42
     2fe:	48 eb       	ldi	r20, 0xB8	; 184
     300:	5e e3       	ldi	r21, 0x3E	; 62
     302:	0c 94 56 0f 	jmp	0x1eac	; 0x1eac <__divsf3>
     306:	08 95       	ret
	}
	// VBatt rail
	else if(ADC_num == 8){
     308:	28 30       	cpi	r18, 0x08	; 8
     30a:	31 05       	cpc	r19, r1
		val = ((Check_ADC(ADC_num) / 1024) * 3.3) / 0.7141;
     30c:	b1 f4       	brne	.+44     	; 0x33a <Volt_ADC+0xca>
     30e:	88 e0       	ldi	r24, 0x08	; 8
     310:	90 e0       	ldi	r25, 0x00	; 0
     312:	a6 df       	rcall	.-180    	; 0x260 <Check_ADC>
     314:	20 e0       	ldi	r18, 0x00	; 0
     316:	30 e0       	ldi	r19, 0x00	; 0
     318:	40 e8       	ldi	r20, 0x80	; 128
     31a:	5a e3       	ldi	r21, 0x3A	; 58
     31c:	0e 94 74 10 	call	0x20e8	; 0x20e8 <__mulsf3>
     320:	23 e3       	ldi	r18, 0x33	; 51
     322:	33 e3       	ldi	r19, 0x33	; 51
     324:	43 e5       	ldi	r20, 0x53	; 83
     326:	50 e4       	ldi	r21, 0x40	; 64
     328:	0e 94 74 10 	call	0x20e8	; 0x20e8 <__mulsf3>
     32c:	22 e4       	ldi	r18, 0x42	; 66
     32e:	3f ec       	ldi	r19, 0xCF	; 207
     330:	46 e3       	ldi	r20, 0x36	; 54
     332:	5f e3       	ldi	r21, 0x3F	; 63
     334:	0c 94 56 0f 	jmp	0x1eac	; 0x1eac <__divsf3>
     338:	08 95       	ret
// Description: Voltage Measurements via ADC.
/*========================================================================================*/

float Volt_ADC(int Volt_num){
	int ADC_num = Volt_num + 4; // ADC_num is the value needed for Change_ADC
	float val = 0;
     33a:	60 e0       	ldi	r22, 0x00	; 0
     33c:	70 e0       	ldi	r23, 0x00	; 0
     33e:	cb 01       	movw	r24, r22
	}
	else{
		// do nothing
	}
	return val;
}
     340:	08 95       	ret

00000342 <Amp_ADC>:
// Author: Chris Thomas
// Date: 2019-03-06
// Description: Ammeter measurements via ADC.
/*========================================================================================*/

float Amp_ADC(int Amp_num){
     342:	4f 92       	push	r4
     344:	5f 92       	push	r5
     346:	6f 92       	push	r6
     348:	7f 92       	push	r7
     34a:	8f 92       	push	r8
     34c:	9f 92       	push	r9
     34e:	af 92       	push	r10
     350:	bf 92       	push	r11
     352:	cf 92       	push	r12
     354:	df 92       	push	r13
     356:	ef 92       	push	r14
     358:	ff 92       	push	r15
     35a:	0f 93       	push	r16
     35c:	1f 93       	push	r17
     35e:	cf 93       	push	r28
     360:	df 93       	push	r29
     362:	cd b7       	in	r28, 0x3d	; 61
     364:	de b7       	in	r29, 0x3e	; 62
     366:	68 97       	sbiw	r28, 0x18	; 24
     368:	0f b6       	in	r0, 0x3f	; 63
     36a:	f8 94       	cli
     36c:	de bf       	out	0x3e, r29	; 62
     36e:	0f be       	out	0x3f, r0	; 63
     370:	cd bf       	out	0x3d, r28	; 61
     372:	5c 01       	movw	r10, r24
	int ADC_num = 0; // initialize ADC number to check
	float val = 0; // initialize the voltage value to 0 V
	float zero[6] = {0.515, 0.542, 0.523, 0.505, 0.508, 0.530};
     374:	88 e1       	ldi	r24, 0x18	; 24
     376:	e1 e0       	ldi	r30, 0x01	; 1
     378:	f2 e0       	ldi	r31, 0x02	; 2
     37a:	de 01       	movw	r26, r28
     37c:	11 96       	adiw	r26, 0x01	; 1
     37e:	01 90       	ld	r0, Z+
     380:	0d 92       	st	X+, r0
     382:	8a 95       	dec	r24
     384:	e1 f7       	brne	.-8      	; 0x37e <Amp_ADC+0x3c>
	int i = 0;
	
	// Voltage rail current 8V, 5V, 3V3-1, 3V3-2 respectively
	if(Amp_num < 4){
     386:	84 e0       	ldi	r24, 0x04	; 4
     388:	a8 16       	cp	r10, r24
     38a:	b1 04       	cpc	r11, r1
     38c:	0c f0       	brlt	.+2      	; 0x390 <Amp_ADC+0x4e>
     38e:	3d c0       	rjmp	.+122    	; 0x40a <__LOCK_REGION_LENGTH__+0xa>
     390:	09 e1       	ldi	r16, 0x19	; 25
     392:	10 e0       	ldi	r17, 0x00	; 0
     394:	c1 2c       	mov	r12, r1
     396:	d1 2c       	mov	r13, r1
     398:	76 01       	movw	r14, r12
		ADC_num = Amp_num;
		while(i < 25){
			val += (((Check_ADC(ADC_num) / 1024) * 3.3) - zero[Amp_num]) / 0.4;
     39a:	45 01       	movw	r8, r10
     39c:	88 0c       	add	r8, r8
     39e:	99 1c       	adc	r9, r9
     3a0:	88 0c       	add	r8, r8
     3a2:	99 1c       	adc	r9, r9
     3a4:	e1 e0       	ldi	r30, 0x01	; 1
     3a6:	f0 e0       	ldi	r31, 0x00	; 0
     3a8:	ec 0f       	add	r30, r28
     3aa:	fd 1f       	adc	r31, r29
     3ac:	8e 0e       	add	r8, r30
     3ae:	9f 1e       	adc	r9, r31
     3b0:	c5 01       	movw	r24, r10
     3b2:	56 df       	rcall	.-340    	; 0x260 <Check_ADC>
     3b4:	20 e0       	ldi	r18, 0x00	; 0
     3b6:	30 e0       	ldi	r19, 0x00	; 0
     3b8:	40 e8       	ldi	r20, 0x80	; 128
     3ba:	5a e3       	ldi	r21, 0x3A	; 58
     3bc:	0e 94 74 10 	call	0x20e8	; 0x20e8 <__mulsf3>
     3c0:	23 e3       	ldi	r18, 0x33	; 51
     3c2:	33 e3       	ldi	r19, 0x33	; 51
     3c4:	43 e5       	ldi	r20, 0x53	; 83
     3c6:	50 e4       	ldi	r21, 0x40	; 64
     3c8:	0e 94 74 10 	call	0x20e8	; 0x20e8 <__mulsf3>
     3cc:	f4 01       	movw	r30, r8
     3ce:	20 81       	ld	r18, Z
     3d0:	31 81       	ldd	r19, Z+1	; 0x01
     3d2:	42 81       	ldd	r20, Z+2	; 0x02
     3d4:	53 81       	ldd	r21, Z+3	; 0x03
     3d6:	0e 94 ed 0e 	call	0x1dda	; 0x1dda <__subsf3>
     3da:	2d ec       	ldi	r18, 0xCD	; 205
     3dc:	3c ec       	ldi	r19, 0xCC	; 204
     3de:	4c ec       	ldi	r20, 0xCC	; 204
     3e0:	5e e3       	ldi	r21, 0x3E	; 62
     3e2:	0e 94 56 0f 	call	0x1eac	; 0x1eac <__divsf3>
     3e6:	9b 01       	movw	r18, r22
     3e8:	ac 01       	movw	r20, r24
     3ea:	c7 01       	movw	r24, r14
     3ec:	b6 01       	movw	r22, r12
     3ee:	0e 94 ee 0e 	call	0x1ddc	; 0x1ddc <__addsf3>
     3f2:	6b 01       	movw	r12, r22
     3f4:	7c 01       	movw	r14, r24
     3f6:	01 50       	subi	r16, 0x01	; 1
     3f8:	11 09       	sbc	r17, r1
	int i = 0;
	
	// Voltage rail current 8V, 5V, 3V3-1, 3V3-2 respectively
	if(Amp_num < 4){
		ADC_num = Amp_num;
		while(i < 25){
     3fa:	d1 f6       	brne	.-76     	; 0x3b0 <Amp_ADC+0x6e>
			val += (((Check_ADC(ADC_num) / 1024) * 3.3) - zero[Amp_num]) / 0.4;
			i++;
		}
		val = val/25;
     3fc:	20 e0       	ldi	r18, 0x00	; 0
     3fe:	30 e0       	ldi	r19, 0x00	; 0
     400:	48 ec       	ldi	r20, 0xC8	; 200
     402:	51 e4       	ldi	r21, 0x41	; 65
     404:	0e 94 56 0f 	call	0x1eac	; 0x1eac <__divsf3>
     408:	48 c0       	rjmp	.+144    	; 0x49a <__LOCK_REGION_LENGTH__+0x9a>
	}
	// Solar current and Battery current, respectively
	else if(Amp_num == 4 || Amp_num == 5){
     40a:	c5 01       	movw	r24, r10
     40c:	04 97       	sbiw	r24, 0x04	; 4
     40e:	02 97       	sbiw	r24, 0x02	; 2
     410:	08 f0       	brcs	.+2      	; 0x414 <__LOCK_REGION_LENGTH__+0x14>
     412:	40 c0       	rjmp	.+128    	; 0x494 <__LOCK_REGION_LENGTH__+0x94>
		ADC_num = Amp_num + 5;
     414:	75 01       	movw	r14, r10
     416:	f5 e0       	ldi	r31, 0x05	; 5
     418:	ef 0e       	add	r14, r31
     41a:	f1 1c       	adc	r15, r1
     41c:	09 e1       	ldi	r16, 0x19	; 25
     41e:	10 e0       	ldi	r17, 0x00	; 0
// Description: Ammeter measurements via ADC.
/*========================================================================================*/

float Amp_ADC(int Amp_num){
	int ADC_num = 0; // initialize ADC number to check
	float val = 0; // initialize the voltage value to 0 V
     420:	41 2c       	mov	r4, r1
     422:	51 2c       	mov	r5, r1
     424:	32 01       	movw	r6, r4
	}
	// Solar current and Battery current, respectively
	else if(Amp_num == 4 || Amp_num == 5){
		ADC_num = Amp_num + 5;
		while(i < 25){
			val += (((Check_ADC(ADC_num) / 1024) * 3.3) - zero[Amp_num]) / 0.4;
     426:	aa 0c       	add	r10, r10
     428:	bb 1c       	adc	r11, r11
     42a:	aa 0c       	add	r10, r10
     42c:	bb 1c       	adc	r11, r11
     42e:	81 e0       	ldi	r24, 0x01	; 1
     430:	90 e0       	ldi	r25, 0x00	; 0
     432:	8c 0f       	add	r24, r28
     434:	9d 1f       	adc	r25, r29
     436:	a8 0e       	add	r10, r24
     438:	b9 1e       	adc	r11, r25
     43a:	c7 01       	movw	r24, r14
     43c:	11 df       	rcall	.-478    	; 0x260 <Check_ADC>
     43e:	20 e0       	ldi	r18, 0x00	; 0
     440:	30 e0       	ldi	r19, 0x00	; 0
     442:	40 e8       	ldi	r20, 0x80	; 128
     444:	5a e3       	ldi	r21, 0x3A	; 58
     446:	0e 94 74 10 	call	0x20e8	; 0x20e8 <__mulsf3>
     44a:	23 e3       	ldi	r18, 0x33	; 51
     44c:	33 e3       	ldi	r19, 0x33	; 51
     44e:	43 e5       	ldi	r20, 0x53	; 83
     450:	50 e4       	ldi	r21, 0x40	; 64
     452:	0e 94 74 10 	call	0x20e8	; 0x20e8 <__mulsf3>
     456:	f5 01       	movw	r30, r10
     458:	20 81       	ld	r18, Z
     45a:	31 81       	ldd	r19, Z+1	; 0x01
     45c:	42 81       	ldd	r20, Z+2	; 0x02
     45e:	53 81       	ldd	r21, Z+3	; 0x03
     460:	0e 94 ed 0e 	call	0x1dda	; 0x1dda <__subsf3>
     464:	2d ec       	ldi	r18, 0xCD	; 205
     466:	3c ec       	ldi	r19, 0xCC	; 204
     468:	4c ec       	ldi	r20, 0xCC	; 204
     46a:	5e e3       	ldi	r21, 0x3E	; 62
     46c:	0e 94 56 0f 	call	0x1eac	; 0x1eac <__divsf3>
     470:	9b 01       	movw	r18, r22
     472:	ac 01       	movw	r20, r24
     474:	c3 01       	movw	r24, r6
     476:	b2 01       	movw	r22, r4
     478:	0e 94 ee 0e 	call	0x1ddc	; 0x1ddc <__addsf3>
     47c:	2b 01       	movw	r4, r22
     47e:	3c 01       	movw	r6, r24
     480:	01 50       	subi	r16, 0x01	; 1
     482:	11 09       	sbc	r17, r1
		val = val/25;
	}
	// Solar current and Battery current, respectively
	else if(Amp_num == 4 || Amp_num == 5){
		ADC_num = Amp_num + 5;
		while(i < 25){
     484:	d1 f6       	brne	.-76     	; 0x43a <__LOCK_REGION_LENGTH__+0x3a>
			val += (((Check_ADC(ADC_num) / 1024) * 3.3) - zero[Amp_num]) / 0.4;
			i++;
		}
		val = val/25;
     486:	20 e0       	ldi	r18, 0x00	; 0
     488:	30 e0       	ldi	r19, 0x00	; 0
     48a:	48 ec       	ldi	r20, 0xC8	; 200
     48c:	51 e4       	ldi	r21, 0x41	; 65
     48e:	0e 94 56 0f 	call	0x1eac	; 0x1eac <__divsf3>
     492:	03 c0       	rjmp	.+6      	; 0x49a <__LOCK_REGION_LENGTH__+0x9a>
// Description: Ammeter measurements via ADC.
/*========================================================================================*/

float Amp_ADC(int Amp_num){
	int ADC_num = 0; // initialize ADC number to check
	float val = 0; // initialize the voltage value to 0 V
     494:	60 e0       	ldi	r22, 0x00	; 0
     496:	70 e0       	ldi	r23, 0x00	; 0
     498:	cb 01       	movw	r24, r22
			i++;
		}
		val = val/25;
	}
	return val;
}
     49a:	68 96       	adiw	r28, 0x18	; 24
     49c:	0f b6       	in	r0, 0x3f	; 63
     49e:	f8 94       	cli
     4a0:	de bf       	out	0x3e, r29	; 62
     4a2:	0f be       	out	0x3f, r0	; 63
     4a4:	cd bf       	out	0x3d, r28	; 61
     4a6:	df 91       	pop	r29
     4a8:	cf 91       	pop	r28
     4aa:	1f 91       	pop	r17
     4ac:	0f 91       	pop	r16
     4ae:	ff 90       	pop	r15
     4b0:	ef 90       	pop	r14
     4b2:	df 90       	pop	r13
     4b4:	cf 90       	pop	r12
     4b6:	bf 90       	pop	r11
     4b8:	af 90       	pop	r10
     4ba:	9f 90       	pop	r9
     4bc:	8f 90       	pop	r8
     4be:	7f 90       	pop	r7
     4c0:	6f 90       	pop	r6
     4c2:	5f 90       	pop	r5
     4c4:	4f 90       	pop	r4
     4c6:	08 95       	ret

000004c8 <Temp_ADC>:
// Author: Chris Thomas
// Date: 2019-03-17
// Description: Temperature measurement via ADC.
/*========================================================================================*/

float Temp_ADC(){
     4c8:	cf 92       	push	r12
     4ca:	df 92       	push	r13
     4cc:	ef 92       	push	r14
     4ce:	ff 92       	push	r15
     4d0:	0f 93       	push	r16
     4d2:	1f 93       	push	r17
     4d4:	cf 93       	push	r28
     4d6:	df 93       	push	r29
	int i = 0;
	float temp;
	
	// Enable temperature sensor
	Clear_GPIO(1);
     4d8:	81 e0       	ldi	r24, 0x01	; 1
     4da:	90 e0       	ldi	r25, 0x00	; 0
     4dc:	24 d7       	rcall	.+3656   	; 0x1326 <Clear_GPIO>
     4de:	01 e0       	ldi	r16, 0x01	; 1
     4e0:	10 e0       	ldi	r17, 0x00	; 0
     4e2:	c0 e0       	ldi	r28, 0x00	; 0
     4e4:	d0 e0       	ldi	r29, 0x00	; 0
     4e6:	03 c0       	rjmp	.+6      	; 0x4ee <Temp_ADC+0x26>
     4e8:	21 96       	adiw	r28, 0x01	; 1
     4ea:	0f 5f       	subi	r16, 0xFF	; 255
     4ec:	1f 4f       	sbci	r17, 0xFF	; 255
	
	 // 3 Temperature sensors on battery
	while(i < 3){
		if (i == 0){
     4ee:	20 97       	sbiw	r28, 0x00	; 0
     4f0:	69 f5       	brne	.+90     	; 0x54c <Temp_ADC+0x84>
			Clear_GPIO(4);
     4f2:	84 e0       	ldi	r24, 0x04	; 4
     4f4:	90 e0       	ldi	r25, 0x00	; 0
     4f6:	17 d7       	rcall	.+3630   	; 0x1326 <Clear_GPIO>
			Set_GPIO(5);
     4f8:	85 e0       	ldi	r24, 0x05	; 5
     4fa:	90 e0       	ldi	r25, 0x00	; 0
     4fc:	ae d6       	rcall	.+3420   	; 0x125a <Set_GPIO>
			Set_GPIO(6);
     4fe:	86 e0       	ldi	r24, 0x06	; 6
     500:	90 e0       	ldi	r25, 0x00	; 0
     502:	ab d6       	rcall	.+3414   	; 0x125a <Set_GPIO>
			temp += (((Check_ADC(11) / 1024) * 3.3) - 0.6972) / 0.0328;
     504:	8b e0       	ldi	r24, 0x0B	; 11
     506:	90 e0       	ldi	r25, 0x00	; 0
     508:	ab de       	rcall	.-682    	; 0x260 <Check_ADC>
     50a:	20 e0       	ldi	r18, 0x00	; 0
     50c:	30 e0       	ldi	r19, 0x00	; 0
     50e:	40 e8       	ldi	r20, 0x80	; 128
     510:	5a e3       	ldi	r21, 0x3A	; 58
     512:	0e 94 74 10 	call	0x20e8	; 0x20e8 <__mulsf3>
     516:	23 e3       	ldi	r18, 0x33	; 51
     518:	33 e3       	ldi	r19, 0x33	; 51
     51a:	43 e5       	ldi	r20, 0x53	; 83
     51c:	50 e4       	ldi	r21, 0x40	; 64
     51e:	0e 94 74 10 	call	0x20e8	; 0x20e8 <__mulsf3>
     522:	23 eb       	ldi	r18, 0xB3	; 179
     524:	3b e7       	ldi	r19, 0x7B	; 123
     526:	42 e3       	ldi	r20, 0x32	; 50
     528:	5f e3       	ldi	r21, 0x3F	; 63
     52a:	0e 94 ed 0e 	call	0x1dda	; 0x1dda <__subsf3>
     52e:	2b e4       	ldi	r18, 0x4B	; 75
     530:	39 e5       	ldi	r19, 0x59	; 89
     532:	46 e0       	ldi	r20, 0x06	; 6
     534:	5d e3       	ldi	r21, 0x3D	; 61
     536:	0e 94 56 0f 	call	0x1eac	; 0x1eac <__divsf3>
     53a:	9b 01       	movw	r18, r22
     53c:	ac 01       	movw	r20, r24
     53e:	c7 01       	movw	r24, r14
     540:	b6 01       	movw	r22, r12
     542:	0e 94 ee 0e 	call	0x1ddc	; 0x1ddc <__addsf3>
     546:	6b 01       	movw	r12, r22
     548:	7c 01       	movw	r14, r24
     54a:	ce cf       	rjmp	.-100    	; 0x4e8 <Temp_ADC+0x20>
     54c:	c1 30       	cpi	r28, 0x01	; 1
		}
		else if(i == 1){
     54e:	d1 05       	cpc	r29, r1
     550:	69 f5       	brne	.+90     	; 0x5ac <Temp_ADC+0xe4>
			Set_GPIO(4);
     552:	84 e0       	ldi	r24, 0x04	; 4
     554:	90 e0       	ldi	r25, 0x00	; 0
     556:	81 d6       	rcall	.+3330   	; 0x125a <Set_GPIO>
			Set_GPIO(5);
     558:	85 e0       	ldi	r24, 0x05	; 5
     55a:	90 e0       	ldi	r25, 0x00	; 0
     55c:	7e d6       	rcall	.+3324   	; 0x125a <Set_GPIO>
			Clear_GPIO(6);
     55e:	86 e0       	ldi	r24, 0x06	; 6
     560:	90 e0       	ldi	r25, 0x00	; 0
     562:	e1 d6       	rcall	.+3522   	; 0x1326 <Clear_GPIO>
     564:	8b e0       	ldi	r24, 0x0B	; 11
			temp += (((Check_ADC(11) / 1024) * 3.3) - 0.6972) / 0.0328;
     566:	90 e0       	ldi	r25, 0x00	; 0
     568:	7b de       	rcall	.-778    	; 0x260 <Check_ADC>
     56a:	20 e0       	ldi	r18, 0x00	; 0
     56c:	30 e0       	ldi	r19, 0x00	; 0
     56e:	40 e8       	ldi	r20, 0x80	; 128
     570:	5a e3       	ldi	r21, 0x3A	; 58
     572:	0e 94 74 10 	call	0x20e8	; 0x20e8 <__mulsf3>
     576:	23 e3       	ldi	r18, 0x33	; 51
     578:	33 e3       	ldi	r19, 0x33	; 51
     57a:	43 e5       	ldi	r20, 0x53	; 83
     57c:	50 e4       	ldi	r21, 0x40	; 64
     57e:	0e 94 74 10 	call	0x20e8	; 0x20e8 <__mulsf3>
     582:	23 eb       	ldi	r18, 0xB3	; 179
     584:	3b e7       	ldi	r19, 0x7B	; 123
     586:	42 e3       	ldi	r20, 0x32	; 50
     588:	5f e3       	ldi	r21, 0x3F	; 63
     58a:	0e 94 ed 0e 	call	0x1dda	; 0x1dda <__subsf3>
     58e:	2b e4       	ldi	r18, 0x4B	; 75
     590:	39 e5       	ldi	r19, 0x59	; 89
     592:	46 e0       	ldi	r20, 0x06	; 6
     594:	5d e3       	ldi	r21, 0x3D	; 61
     596:	0e 94 56 0f 	call	0x1eac	; 0x1eac <__divsf3>
     59a:	9b 01       	movw	r18, r22
     59c:	ac 01       	movw	r20, r24
     59e:	c7 01       	movw	r24, r14
     5a0:	b6 01       	movw	r22, r12
     5a2:	0e 94 ee 0e 	call	0x1ddc	; 0x1ddc <__addsf3>
     5a6:	6b 01       	movw	r12, r22
     5a8:	7c 01       	movw	r14, r24
     5aa:	9e cf       	rjmp	.-196    	; 0x4e8 <Temp_ADC+0x20>
     5ac:	c2 30       	cpi	r28, 0x02	; 2
		}
		else if (i == 2){
     5ae:	d1 05       	cpc	r29, r1
     5b0:	69 f5       	brne	.+90     	; 0x60c <Temp_ADC+0x144>
			Set_GPIO(4);
     5b2:	84 e0       	ldi	r24, 0x04	; 4
     5b4:	90 e0       	ldi	r25, 0x00	; 0
     5b6:	51 d6       	rcall	.+3234   	; 0x125a <Set_GPIO>
			Set_GPIO(5);
     5b8:	85 e0       	ldi	r24, 0x05	; 5
     5ba:	90 e0       	ldi	r25, 0x00	; 0
     5bc:	4e d6       	rcall	.+3228   	; 0x125a <Set_GPIO>
     5be:	86 e0       	ldi	r24, 0x06	; 6
			Set_GPIO(6);
     5c0:	90 e0       	ldi	r25, 0x00	; 0
     5c2:	4b d6       	rcall	.+3222   	; 0x125a <Set_GPIO>
     5c4:	8b e0       	ldi	r24, 0x0B	; 11
     5c6:	90 e0       	ldi	r25, 0x00	; 0
			temp += (((Check_ADC(11) / 1024) * 3.3) - 0.6972) / 0.0328;
     5c8:	4b de       	rcall	.-874    	; 0x260 <Check_ADC>
     5ca:	20 e0       	ldi	r18, 0x00	; 0
     5cc:	30 e0       	ldi	r19, 0x00	; 0
     5ce:	40 e8       	ldi	r20, 0x80	; 128
     5d0:	5a e3       	ldi	r21, 0x3A	; 58
     5d2:	0e 94 74 10 	call	0x20e8	; 0x20e8 <__mulsf3>
     5d6:	23 e3       	ldi	r18, 0x33	; 51
     5d8:	33 e3       	ldi	r19, 0x33	; 51
     5da:	43 e5       	ldi	r20, 0x53	; 83
     5dc:	50 e4       	ldi	r21, 0x40	; 64
     5de:	0e 94 74 10 	call	0x20e8	; 0x20e8 <__mulsf3>
     5e2:	23 eb       	ldi	r18, 0xB3	; 179
     5e4:	3b e7       	ldi	r19, 0x7B	; 123
     5e6:	42 e3       	ldi	r20, 0x32	; 50
     5e8:	5f e3       	ldi	r21, 0x3F	; 63
     5ea:	0e 94 ed 0e 	call	0x1dda	; 0x1dda <__subsf3>
     5ee:	2b e4       	ldi	r18, 0x4B	; 75
     5f0:	39 e5       	ldi	r19, 0x59	; 89
     5f2:	46 e0       	ldi	r20, 0x06	; 6
     5f4:	5d e3       	ldi	r21, 0x3D	; 61
     5f6:	0e 94 56 0f 	call	0x1eac	; 0x1eac <__divsf3>
     5fa:	9b 01       	movw	r18, r22
     5fc:	ac 01       	movw	r20, r24
     5fe:	c7 01       	movw	r24, r14
     600:	b6 01       	movw	r22, r12
     602:	0e 94 ee 0e 	call	0x1ddc	; 0x1ddc <__addsf3>
     606:	6b 01       	movw	r12, r22
     608:	7c 01       	movw	r14, r24
     60a:	04 c0       	rjmp	.+8      	; 0x614 <Temp_ADC+0x14c>
     60c:	03 30       	cpi	r16, 0x03	; 3
	
	// Enable temperature sensor
	Clear_GPIO(1);
	
	 // 3 Temperature sensors on battery
	while(i < 3){
     60e:	11 05       	cpc	r17, r1
     610:	0c f4       	brge	.+2      	; 0x614 <Temp_ADC+0x14c>
     612:	6a cf       	rjmp	.-300    	; 0x4e8 <Temp_ADC+0x20>
		}
		i++;
	}
	
	// Disable temperature Sensor
	Set_GPIO(1);
     614:	81 e0       	ldi	r24, 0x01	; 1
     616:	90 e0       	ldi	r25, 0x00	; 0
     618:	20 d6       	rcall	.+3136   	; 0x125a <Set_GPIO>
     61a:	84 e0       	ldi	r24, 0x04	; 4
	
	// Pull GPIO 4,5 & 6 low
	Clear_GPIO(4);
     61c:	90 e0       	ldi	r25, 0x00	; 0
     61e:	83 d6       	rcall	.+3334   	; 0x1326 <Clear_GPIO>
     620:	85 e0       	ldi	r24, 0x05	; 5
     622:	90 e0       	ldi	r25, 0x00	; 0
	Clear_GPIO(5);
     624:	80 d6       	rcall	.+3328   	; 0x1326 <Clear_GPIO>
     626:	86 e0       	ldi	r24, 0x06	; 6
     628:	90 e0       	ldi	r25, 0x00	; 0
     62a:	7d d6       	rcall	.+3322   	; 0x1326 <Clear_GPIO>
	Clear_GPIO(6);
     62c:	20 e0       	ldi	r18, 0x00	; 0
     62e:	30 e0       	ldi	r19, 0x00	; 0
     630:	40 e4       	ldi	r20, 0x40	; 64
     632:	50 e4       	ldi	r21, 0x40	; 64
	
	// Divide temperature measurements by 3 to get an average (To be discussed)
	return temp/3;
     634:	c7 01       	movw	r24, r14
     636:	b6 01       	movw	r22, r12
     638:	0e 94 56 0f 	call	0x1eac	; 0x1eac <__divsf3>
     63c:	df 91       	pop	r29
     63e:	cf 91       	pop	r28
     640:	1f 91       	pop	r17
     642:	0f 91       	pop	r16
}
     644:	ff 90       	pop	r15
     646:	ef 90       	pop	r14
     648:	df 90       	pop	r13
     64a:	cf 90       	pop	r12
     64c:	08 95       	ret

0000064e <SoC_ADC>:
     64e:	8f 92       	push	r8
     650:	9f 92       	push	r9
     652:	af 92       	push	r10
     654:	bf 92       	push	r11
// Author: Chris Thomas
// Date: 2019-03-17
// Description: Temperature measurement via ADC.
/*========================================================================================*/

float SoC_ADC(float volt, float amp){
     656:	cf 92       	push	r12
     658:	df 92       	push	r13
     65a:	ef 92       	push	r14
     65c:	ff 92       	push	r15
     65e:	6b 01       	movw	r12, r22
     660:	7c 01       	movw	r14, r24
     662:	49 01       	movw	r8, r18
     664:	5a 01       	movw	r10, r20
	
	// Check Battery voltage and current
	
	
	// Lookup table
	if (amp < 0.6 && amp > 0){
     666:	2a e9       	ldi	r18, 0x9A	; 154
     668:	39 e9       	ldi	r19, 0x99	; 153
     66a:	49 e1       	ldi	r20, 0x19	; 25
     66c:	5f e3       	ldi	r21, 0x3F	; 63
     66e:	c5 01       	movw	r24, r10
     670:	b4 01       	movw	r22, r8
     672:	0e 94 52 0f 	call	0x1ea4	; 0x1ea4 <__cmpsf2>
     676:	88 23       	and	r24, r24
     678:	0c f0       	brlt	.+2      	; 0x67c <SoC_ADC+0x2e>
     67a:	91 c0       	rjmp	.+290    	; 0x79e <SoC_ADC+0x150>
     67c:	20 e0       	ldi	r18, 0x00	; 0
     67e:	30 e0       	ldi	r19, 0x00	; 0
     680:	a9 01       	movw	r20, r18
     682:	c5 01       	movw	r24, r10
     684:	b4 01       	movw	r22, r8
     686:	0e 94 70 10 	call	0x20e0	; 0x20e0 <__gesf2>
     68a:	18 16       	cp	r1, r24
     68c:	0c f0       	brlt	.+2      	; 0x690 <SoC_ADC+0x42>
     68e:	87 c0       	rjmp	.+270    	; 0x79e <SoC_ADC+0x150>
		if (volt > 4.00) {
     690:	20 e0       	ldi	r18, 0x00	; 0
     692:	30 e0       	ldi	r19, 0x00	; 0
     694:	40 e8       	ldi	r20, 0x80	; 128
     696:	50 e4       	ldi	r21, 0x40	; 64
     698:	c7 01       	movw	r24, r14
     69a:	b6 01       	movw	r22, r12
     69c:	0e 94 70 10 	call	0x20e0	; 0x20e0 <__gesf2>
     6a0:	18 16       	cp	r1, r24
     6a2:	0c f4       	brge	.+2      	; 0x6a6 <SoC_ADC+0x58>
     6a4:	ab c1       	rjmp	.+854    	; 0x9fc <SoC_ADC+0x3ae>
			soc = 80;
		} //end if
		else if (volt < 4.00 && volt > 3.80) {
     6a6:	20 e0       	ldi	r18, 0x00	; 0
     6a8:	30 e0       	ldi	r19, 0x00	; 0
     6aa:	40 e8       	ldi	r20, 0x80	; 128
     6ac:	50 e4       	ldi	r21, 0x40	; 64
     6ae:	c7 01       	movw	r24, r14
     6b0:	b6 01       	movw	r22, r12
     6b2:	0e 94 52 0f 	call	0x1ea4	; 0x1ea4 <__cmpsf2>
     6b6:	88 23       	and	r24, r24
     6b8:	5c f4       	brge	.+22     	; 0x6d0 <SoC_ADC+0x82>
     6ba:	23 e3       	ldi	r18, 0x33	; 51
     6bc:	33 e3       	ldi	r19, 0x33	; 51
     6be:	43 e7       	ldi	r20, 0x73	; 115
     6c0:	50 e4       	ldi	r21, 0x40	; 64
     6c2:	c7 01       	movw	r24, r14
     6c4:	b6 01       	movw	r22, r12
     6c6:	0e 94 70 10 	call	0x20e0	; 0x20e0 <__gesf2>
     6ca:	18 16       	cp	r1, r24
     6cc:	0c f4       	brge	.+2      	; 0x6d0 <SoC_ADC+0x82>
     6ce:	9b c1       	rjmp	.+822    	; 0xa06 <SoC_ADC+0x3b8>
			soc = 70;
		} //end else if
		else if (volt < 3.80 && volt > 3.75) {
     6d0:	23 e3       	ldi	r18, 0x33	; 51
     6d2:	33 e3       	ldi	r19, 0x33	; 51
     6d4:	43 e7       	ldi	r20, 0x73	; 115
     6d6:	50 e4       	ldi	r21, 0x40	; 64
     6d8:	c7 01       	movw	r24, r14
     6da:	b6 01       	movw	r22, r12
     6dc:	0e 94 52 0f 	call	0x1ea4	; 0x1ea4 <__cmpsf2>
     6e0:	88 23       	and	r24, r24
     6e2:	5c f4       	brge	.+22     	; 0x6fa <SoC_ADC+0xac>
     6e4:	20 e0       	ldi	r18, 0x00	; 0
     6e6:	30 e0       	ldi	r19, 0x00	; 0
     6e8:	40 e7       	ldi	r20, 0x70	; 112
     6ea:	50 e4       	ldi	r21, 0x40	; 64
     6ec:	c7 01       	movw	r24, r14
     6ee:	b6 01       	movw	r22, r12
     6f0:	0e 94 70 10 	call	0x20e0	; 0x20e0 <__gesf2>
     6f4:	18 16       	cp	r1, r24
     6f6:	0c f4       	brge	.+2      	; 0x6fa <SoC_ADC+0xac>
     6f8:	8b c1       	rjmp	.+790    	; 0xa10 <SoC_ADC+0x3c2>
			soc = 60;
		} //end else if
		else if (volt < 3.75 && volt > 3.70) {
     6fa:	20 e0       	ldi	r18, 0x00	; 0
     6fc:	30 e0       	ldi	r19, 0x00	; 0
     6fe:	40 e7       	ldi	r20, 0x70	; 112
     700:	50 e4       	ldi	r21, 0x40	; 64
     702:	c7 01       	movw	r24, r14
     704:	b6 01       	movw	r22, r12
     706:	0e 94 52 0f 	call	0x1ea4	; 0x1ea4 <__cmpsf2>
     70a:	88 23       	and	r24, r24
     70c:	5c f4       	brge	.+22     	; 0x724 <SoC_ADC+0xd6>
     70e:	2d ec       	ldi	r18, 0xCD	; 205
     710:	3c ec       	ldi	r19, 0xCC	; 204
     712:	4c e6       	ldi	r20, 0x6C	; 108
     714:	50 e4       	ldi	r21, 0x40	; 64
     716:	c7 01       	movw	r24, r14
     718:	b6 01       	movw	r22, r12
     71a:	0e 94 70 10 	call	0x20e0	; 0x20e0 <__gesf2>
     71e:	18 16       	cp	r1, r24
     720:	0c f4       	brge	.+2      	; 0x724 <SoC_ADC+0xd6>
     722:	7b c1       	rjmp	.+758    	; 0xa1a <SoC_ADC+0x3cc>
			soc = 50;
		} //end else if
		else if (volt < 3.70 && volt > 3.60) {
     724:	2d ec       	ldi	r18, 0xCD	; 205
     726:	3c ec       	ldi	r19, 0xCC	; 204
     728:	4c e6       	ldi	r20, 0x6C	; 108
     72a:	50 e4       	ldi	r21, 0x40	; 64
     72c:	c7 01       	movw	r24, r14
     72e:	b6 01       	movw	r22, r12
     730:	0e 94 52 0f 	call	0x1ea4	; 0x1ea4 <__cmpsf2>
     734:	88 23       	and	r24, r24
     736:	5c f4       	brge	.+22     	; 0x74e <SoC_ADC+0x100>
     738:	26 e6       	ldi	r18, 0x66	; 102
     73a:	36 e6       	ldi	r19, 0x66	; 102
     73c:	46 e6       	ldi	r20, 0x66	; 102
     73e:	50 e4       	ldi	r21, 0x40	; 64
     740:	c7 01       	movw	r24, r14
     742:	b6 01       	movw	r22, r12
     744:	0e 94 70 10 	call	0x20e0	; 0x20e0 <__gesf2>
     748:	18 16       	cp	r1, r24
     74a:	0c f4       	brge	.+2      	; 0x74e <SoC_ADC+0x100>
     74c:	6b c1       	rjmp	.+726    	; 0xa24 <SoC_ADC+0x3d6>
			soc = 40;
		} //end else if
		else if (volt < 3.60 && volt > 3.5) {
     74e:	26 e6       	ldi	r18, 0x66	; 102
     750:	36 e6       	ldi	r19, 0x66	; 102
     752:	46 e6       	ldi	r20, 0x66	; 102
     754:	50 e4       	ldi	r21, 0x40	; 64
     756:	c7 01       	movw	r24, r14
     758:	b6 01       	movw	r22, r12
     75a:	0e 94 52 0f 	call	0x1ea4	; 0x1ea4 <__cmpsf2>
     75e:	88 23       	and	r24, r24
     760:	5c f4       	brge	.+22     	; 0x778 <SoC_ADC+0x12a>
     762:	20 e0       	ldi	r18, 0x00	; 0
     764:	30 e0       	ldi	r19, 0x00	; 0
     766:	40 e6       	ldi	r20, 0x60	; 96
     768:	50 e4       	ldi	r21, 0x40	; 64
     76a:	c7 01       	movw	r24, r14
     76c:	b6 01       	movw	r22, r12
     76e:	0e 94 70 10 	call	0x20e0	; 0x20e0 <__gesf2>
     772:	18 16       	cp	r1, r24
     774:	0c f4       	brge	.+2      	; 0x778 <SoC_ADC+0x12a>
     776:	5b c1       	rjmp	.+694    	; 0xa2e <SoC_ADC+0x3e0>
			soc = 30;
		} //end else if
		else if (volt < 3.50) {
     778:	20 e0       	ldi	r18, 0x00	; 0
     77a:	30 e0       	ldi	r19, 0x00	; 0
     77c:	40 e6       	ldi	r20, 0x60	; 96
     77e:	50 e4       	ldi	r21, 0x40	; 64
     780:	c7 01       	movw	r24, r14
     782:	b6 01       	movw	r22, r12
     784:	0e 94 52 0f 	call	0x1ea4	; 0x1ea4 <__cmpsf2>
     788:	88 23       	and	r24, r24
     78a:	0c f4       	brge	.+2      	; 0x78e <SoC_ADC+0x140>
     78c:	55 c1       	rjmp	.+682    	; 0xa38 <SoC_ADC+0x3ea>
			soc = 20;
		} //end else if
		else {
			UART0_putstring("Error Reading State of Charge \n\n\r");
     78e:	8a e4       	ldi	r24, 0x4A	; 74
     790:	93 e0       	ldi	r25, 0x03	; 3
     792:	0e 94 56 0d 	call	0x1aac	; 0x1aac <UART0_putstring>
// Description: Temperature measurement via ADC.
/*========================================================================================*/

float SoC_ADC(float volt, float amp){
	// return value
	float soc = 0;
     796:	60 e0       	ldi	r22, 0x00	; 0
     798:	70 e0       	ldi	r23, 0x00	; 0
     79a:	cb 01       	movw	r24, r22
     79c:	9b c1       	rjmp	.+822    	; 0xad4 <SoC_ADC+0x486>
		} //end else if
		else {
			UART0_putstring("Error Reading State of Charge \n\n\r");
		} //end else
	}
	else if(amp > 0.6 && amp < 3){
     79e:	2a e9       	ldi	r18, 0x9A	; 154
     7a0:	39 e9       	ldi	r19, 0x99	; 153
     7a2:	49 e1       	ldi	r20, 0x19	; 25
     7a4:	5f e3       	ldi	r21, 0x3F	; 63
     7a6:	c5 01       	movw	r24, r10
     7a8:	b4 01       	movw	r22, r8
     7aa:	0e 94 70 10 	call	0x20e0	; 0x20e0 <__gesf2>
     7ae:	18 16       	cp	r1, r24
     7b0:	0c f0       	brlt	.+2      	; 0x7b4 <SoC_ADC+0x166>
     7b2:	92 c0       	rjmp	.+292    	; 0x8d8 <SoC_ADC+0x28a>
     7b4:	20 e0       	ldi	r18, 0x00	; 0
     7b6:	30 e0       	ldi	r19, 0x00	; 0
     7b8:	40 e4       	ldi	r20, 0x40	; 64
     7ba:	50 e4       	ldi	r21, 0x40	; 64
     7bc:	c5 01       	movw	r24, r10
     7be:	b4 01       	movw	r22, r8
     7c0:	0e 94 52 0f 	call	0x1ea4	; 0x1ea4 <__cmpsf2>
     7c4:	88 23       	and	r24, r24
     7c6:	0c f0       	brlt	.+2      	; 0x7ca <SoC_ADC+0x17c>
     7c8:	87 c0       	rjmp	.+270    	; 0x8d8 <SoC_ADC+0x28a>
		if (volt > 3.75) {
     7ca:	20 e0       	ldi	r18, 0x00	; 0
     7cc:	30 e0       	ldi	r19, 0x00	; 0
     7ce:	40 e7       	ldi	r20, 0x70	; 112
     7d0:	50 e4       	ldi	r21, 0x40	; 64
     7d2:	c7 01       	movw	r24, r14
     7d4:	b6 01       	movw	r22, r12
     7d6:	0e 94 70 10 	call	0x20e0	; 0x20e0 <__gesf2>
     7da:	18 16       	cp	r1, r24
     7dc:	0c f4       	brge	.+2      	; 0x7e0 <SoC_ADC+0x192>
     7de:	31 c1       	rjmp	.+610    	; 0xa42 <SoC_ADC+0x3f4>
			soc = 80;
		} //end if
		else if (volt < 3.75 && volt > 3.65) {
     7e0:	20 e0       	ldi	r18, 0x00	; 0
     7e2:	30 e0       	ldi	r19, 0x00	; 0
     7e4:	40 e7       	ldi	r20, 0x70	; 112
     7e6:	50 e4       	ldi	r21, 0x40	; 64
     7e8:	c7 01       	movw	r24, r14
     7ea:	b6 01       	movw	r22, r12
     7ec:	0e 94 52 0f 	call	0x1ea4	; 0x1ea4 <__cmpsf2>
     7f0:	88 23       	and	r24, r24
     7f2:	5c f4       	brge	.+22     	; 0x80a <SoC_ADC+0x1bc>
     7f4:	2a e9       	ldi	r18, 0x9A	; 154
     7f6:	39 e9       	ldi	r19, 0x99	; 153
     7f8:	49 e6       	ldi	r20, 0x69	; 105
     7fa:	50 e4       	ldi	r21, 0x40	; 64
     7fc:	c7 01       	movw	r24, r14
     7fe:	b6 01       	movw	r22, r12
     800:	0e 94 70 10 	call	0x20e0	; 0x20e0 <__gesf2>
     804:	18 16       	cp	r1, r24
     806:	0c f4       	brge	.+2      	; 0x80a <SoC_ADC+0x1bc>
     808:	21 c1       	rjmp	.+578    	; 0xa4c <SoC_ADC+0x3fe>
			soc = 70;
		} //end else if
		else if (volt < 3.65 && volt > 3.55) {
     80a:	2a e9       	ldi	r18, 0x9A	; 154
     80c:	39 e9       	ldi	r19, 0x99	; 153
     80e:	49 e6       	ldi	r20, 0x69	; 105
     810:	50 e4       	ldi	r21, 0x40	; 64
     812:	c7 01       	movw	r24, r14
     814:	b6 01       	movw	r22, r12
     816:	0e 94 52 0f 	call	0x1ea4	; 0x1ea4 <__cmpsf2>
     81a:	88 23       	and	r24, r24
     81c:	5c f4       	brge	.+22     	; 0x834 <SoC_ADC+0x1e6>
     81e:	23 e3       	ldi	r18, 0x33	; 51
     820:	33 e3       	ldi	r19, 0x33	; 51
     822:	43 e6       	ldi	r20, 0x63	; 99
     824:	50 e4       	ldi	r21, 0x40	; 64
     826:	c7 01       	movw	r24, r14
     828:	b6 01       	movw	r22, r12
     82a:	0e 94 70 10 	call	0x20e0	; 0x20e0 <__gesf2>
     82e:	18 16       	cp	r1, r24
     830:	0c f4       	brge	.+2      	; 0x834 <SoC_ADC+0x1e6>
     832:	11 c1       	rjmp	.+546    	; 0xa56 <SoC_ADC+0x408>
			soc = 60;
		} //end else if
		else if (volt < 3.55 && volt > 3.45) {
     834:	23 e3       	ldi	r18, 0x33	; 51
     836:	33 e3       	ldi	r19, 0x33	; 51
     838:	43 e6       	ldi	r20, 0x63	; 99
     83a:	50 e4       	ldi	r21, 0x40	; 64
     83c:	c7 01       	movw	r24, r14
     83e:	b6 01       	movw	r22, r12
     840:	0e 94 52 0f 	call	0x1ea4	; 0x1ea4 <__cmpsf2>
     844:	88 23       	and	r24, r24
     846:	5c f4       	brge	.+22     	; 0x85e <SoC_ADC+0x210>
     848:	2d ec       	ldi	r18, 0xCD	; 205
     84a:	3c ec       	ldi	r19, 0xCC	; 204
     84c:	4c e5       	ldi	r20, 0x5C	; 92
     84e:	50 e4       	ldi	r21, 0x40	; 64
     850:	c7 01       	movw	r24, r14
     852:	b6 01       	movw	r22, r12
     854:	0e 94 70 10 	call	0x20e0	; 0x20e0 <__gesf2>
     858:	18 16       	cp	r1, r24
     85a:	0c f4       	brge	.+2      	; 0x85e <SoC_ADC+0x210>
     85c:	01 c1       	rjmp	.+514    	; 0xa60 <SoC_ADC+0x412>
			soc = 50;
		} //end else if
 		else if (volt < 3.45 && volt > 3.35) {
     85e:	2d ec       	ldi	r18, 0xCD	; 205
     860:	3c ec       	ldi	r19, 0xCC	; 204
     862:	4c e5       	ldi	r20, 0x5C	; 92
     864:	50 e4       	ldi	r21, 0x40	; 64
     866:	c7 01       	movw	r24, r14
     868:	b6 01       	movw	r22, r12
     86a:	0e 94 52 0f 	call	0x1ea4	; 0x1ea4 <__cmpsf2>
     86e:	88 23       	and	r24, r24
     870:	5c f4       	brge	.+22     	; 0x888 <SoC_ADC+0x23a>
     872:	26 e6       	ldi	r18, 0x66	; 102
     874:	36 e6       	ldi	r19, 0x66	; 102
     876:	46 e5       	ldi	r20, 0x56	; 86
     878:	50 e4       	ldi	r21, 0x40	; 64
     87a:	c7 01       	movw	r24, r14
     87c:	b6 01       	movw	r22, r12
     87e:	0e 94 70 10 	call	0x20e0	; 0x20e0 <__gesf2>
     882:	18 16       	cp	r1, r24
     884:	0c f4       	brge	.+2      	; 0x888 <SoC_ADC+0x23a>
     886:	f1 c0       	rjmp	.+482    	; 0xa6a <SoC_ADC+0x41c>
			soc = 40;
		 } //end else if
		else if (volt < 3.35 && volt > 3.30) {
     888:	26 e6       	ldi	r18, 0x66	; 102
     88a:	36 e6       	ldi	r19, 0x66	; 102
     88c:	46 e5       	ldi	r20, 0x56	; 86
     88e:	50 e4       	ldi	r21, 0x40	; 64
     890:	c7 01       	movw	r24, r14
     892:	b6 01       	movw	r22, r12
     894:	0e 94 52 0f 	call	0x1ea4	; 0x1ea4 <__cmpsf2>
     898:	88 23       	and	r24, r24
     89a:	5c f4       	brge	.+22     	; 0x8b2 <SoC_ADC+0x264>
     89c:	23 e3       	ldi	r18, 0x33	; 51
     89e:	33 e3       	ldi	r19, 0x33	; 51
     8a0:	43 e5       	ldi	r20, 0x53	; 83
     8a2:	50 e4       	ldi	r21, 0x40	; 64
     8a4:	c7 01       	movw	r24, r14
     8a6:	b6 01       	movw	r22, r12
     8a8:	0e 94 70 10 	call	0x20e0	; 0x20e0 <__gesf2>
     8ac:	18 16       	cp	r1, r24
     8ae:	0c f4       	brge	.+2      	; 0x8b2 <SoC_ADC+0x264>
     8b0:	e1 c0       	rjmp	.+450    	; 0xa74 <SoC_ADC+0x426>
			soc = 30;
		 } //end else if
		else if (volt < 3.30) {
     8b2:	23 e3       	ldi	r18, 0x33	; 51
     8b4:	33 e3       	ldi	r19, 0x33	; 51
     8b6:	43 e5       	ldi	r20, 0x53	; 83
     8b8:	50 e4       	ldi	r21, 0x40	; 64
     8ba:	c7 01       	movw	r24, r14
     8bc:	b6 01       	movw	r22, r12
     8be:	0e 94 52 0f 	call	0x1ea4	; 0x1ea4 <__cmpsf2>
     8c2:	88 23       	and	r24, r24
     8c4:	0c f4       	brge	.+2      	; 0x8c8 <SoC_ADC+0x27a>
     8c6:	db c0       	rjmp	.+438    	; 0xa7e <SoC_ADC+0x430>
			soc = 20;
		}
		else {
			UART0_putstring("Error Reading State of Charge \n\n\r");
     8c8:	8a e4       	ldi	r24, 0x4A	; 74
     8ca:	93 e0       	ldi	r25, 0x03	; 3
     8cc:	0e 94 56 0d 	call	0x1aac	; 0x1aac <UART0_putstring>
// Description: Temperature measurement via ADC.
/*========================================================================================*/

float SoC_ADC(float volt, float amp){
	// return value
	float soc = 0;
     8d0:	60 e0       	ldi	r22, 0x00	; 0
     8d2:	70 e0       	ldi	r23, 0x00	; 0
     8d4:	cb 01       	movw	r24, r22
     8d6:	fe c0       	rjmp	.+508    	; 0xad4 <SoC_ADC+0x486>
		}
		else {
			UART0_putstring("Error Reading State of Charge \n\n\r");
		} //end else
	}
	else if(amp > 3){
     8d8:	20 e0       	ldi	r18, 0x00	; 0
     8da:	30 e0       	ldi	r19, 0x00	; 0
     8dc:	40 e4       	ldi	r20, 0x40	; 64
     8de:	50 e4       	ldi	r21, 0x40	; 64
     8e0:	c5 01       	movw	r24, r10
     8e2:	b4 01       	movw	r22, r8
     8e4:	0e 94 70 10 	call	0x20e0	; 0x20e0 <__gesf2>
     8e8:	18 16       	cp	r1, r24
     8ea:	0c f0       	brlt	.+2      	; 0x8ee <SoC_ADC+0x2a0>
     8ec:	cd c0       	rjmp	.+410    	; 0xa88 <SoC_ADC+0x43a>
		if (volt > 3.80) {
     8ee:	23 e3       	ldi	r18, 0x33	; 51
     8f0:	33 e3       	ldi	r19, 0x33	; 51
     8f2:	43 e7       	ldi	r20, 0x73	; 115
     8f4:	50 e4       	ldi	r21, 0x40	; 64
     8f6:	c7 01       	movw	r24, r14
     8f8:	b6 01       	movw	r22, r12
     8fa:	0e 94 70 10 	call	0x20e0	; 0x20e0 <__gesf2>
     8fe:	18 16       	cp	r1, r24
     900:	0c f4       	brge	.+2      	; 0x904 <SoC_ADC+0x2b6>
     902:	c6 c0       	rjmp	.+396    	; 0xa90 <SoC_ADC+0x442>
			soc = 80;
		} //end if
		else if (volt < 3.80 && volt > 3.75) {
     904:	23 e3       	ldi	r18, 0x33	; 51
     906:	33 e3       	ldi	r19, 0x33	; 51
     908:	43 e7       	ldi	r20, 0x73	; 115
     90a:	50 e4       	ldi	r21, 0x40	; 64
     90c:	c7 01       	movw	r24, r14
     90e:	b6 01       	movw	r22, r12
     910:	0e 94 52 0f 	call	0x1ea4	; 0x1ea4 <__cmpsf2>
     914:	88 23       	and	r24, r24
     916:	5c f4       	brge	.+22     	; 0x92e <SoC_ADC+0x2e0>
     918:	20 e0       	ldi	r18, 0x00	; 0
     91a:	30 e0       	ldi	r19, 0x00	; 0
     91c:	40 e7       	ldi	r20, 0x70	; 112
     91e:	50 e4       	ldi	r21, 0x40	; 64
     920:	c7 01       	movw	r24, r14
     922:	b6 01       	movw	r22, r12
     924:	0e 94 70 10 	call	0x20e0	; 0x20e0 <__gesf2>
     928:	18 16       	cp	r1, r24
     92a:	0c f4       	brge	.+2      	; 0x92e <SoC_ADC+0x2e0>
     92c:	b6 c0       	rjmp	.+364    	; 0xa9a <SoC_ADC+0x44c>
			soc = 70;
		} //end else if
		else if (volt < 3.75 && volt > 3.65) {
     92e:	20 e0       	ldi	r18, 0x00	; 0
     930:	30 e0       	ldi	r19, 0x00	; 0
     932:	40 e7       	ldi	r20, 0x70	; 112
     934:	50 e4       	ldi	r21, 0x40	; 64
     936:	c7 01       	movw	r24, r14
     938:	b6 01       	movw	r22, r12
     93a:	0e 94 52 0f 	call	0x1ea4	; 0x1ea4 <__cmpsf2>
     93e:	88 23       	and	r24, r24
     940:	5c f4       	brge	.+22     	; 0x958 <SoC_ADC+0x30a>
     942:	2a e9       	ldi	r18, 0x9A	; 154
     944:	39 e9       	ldi	r19, 0x99	; 153
     946:	49 e6       	ldi	r20, 0x69	; 105
     948:	50 e4       	ldi	r21, 0x40	; 64
     94a:	c7 01       	movw	r24, r14
     94c:	b6 01       	movw	r22, r12
     94e:	0e 94 70 10 	call	0x20e0	; 0x20e0 <__gesf2>
     952:	18 16       	cp	r1, r24
     954:	0c f4       	brge	.+2      	; 0x958 <SoC_ADC+0x30a>
     956:	a6 c0       	rjmp	.+332    	; 0xaa4 <SoC_ADC+0x456>
			soc = 60;
		} //end else if
		else if (volt < 3.65 && volt > 3.50) {
     958:	2a e9       	ldi	r18, 0x9A	; 154
     95a:	39 e9       	ldi	r19, 0x99	; 153
     95c:	49 e6       	ldi	r20, 0x69	; 105
     95e:	50 e4       	ldi	r21, 0x40	; 64
     960:	c7 01       	movw	r24, r14
     962:	b6 01       	movw	r22, r12
     964:	0e 94 52 0f 	call	0x1ea4	; 0x1ea4 <__cmpsf2>
     968:	88 23       	and	r24, r24
     96a:	5c f4       	brge	.+22     	; 0x982 <SoC_ADC+0x334>
     96c:	20 e0       	ldi	r18, 0x00	; 0
     96e:	30 e0       	ldi	r19, 0x00	; 0
     970:	40 e6       	ldi	r20, 0x60	; 96
     972:	50 e4       	ldi	r21, 0x40	; 64
     974:	c7 01       	movw	r24, r14
     976:	b6 01       	movw	r22, r12
     978:	0e 94 70 10 	call	0x20e0	; 0x20e0 <__gesf2>
     97c:	18 16       	cp	r1, r24
     97e:	0c f4       	brge	.+2      	; 0x982 <SoC_ADC+0x334>
     980:	96 c0       	rjmp	.+300    	; 0xaae <SoC_ADC+0x460>
			soc = 50;
		} //end else if
		else if (volt < 3.50 && volt > 3.40) {
     982:	20 e0       	ldi	r18, 0x00	; 0
     984:	30 e0       	ldi	r19, 0x00	; 0
     986:	40 e6       	ldi	r20, 0x60	; 96
     988:	50 e4       	ldi	r21, 0x40	; 64
     98a:	c7 01       	movw	r24, r14
     98c:	b6 01       	movw	r22, r12
     98e:	0e 94 52 0f 	call	0x1ea4	; 0x1ea4 <__cmpsf2>
     992:	88 23       	and	r24, r24
     994:	5c f4       	brge	.+22     	; 0x9ac <SoC_ADC+0x35e>
     996:	2a e9       	ldi	r18, 0x9A	; 154
     998:	39 e9       	ldi	r19, 0x99	; 153
     99a:	49 e5       	ldi	r20, 0x59	; 89
     99c:	50 e4       	ldi	r21, 0x40	; 64
     99e:	c7 01       	movw	r24, r14
     9a0:	b6 01       	movw	r22, r12
     9a2:	0e 94 70 10 	call	0x20e0	; 0x20e0 <__gesf2>
     9a6:	18 16       	cp	r1, r24
     9a8:	0c f4       	brge	.+2      	; 0x9ac <SoC_ADC+0x35e>
     9aa:	86 c0       	rjmp	.+268    	; 0xab8 <SoC_ADC+0x46a>
			soc = 40;
		} //end else if
		else if (volt < 3.40 && volt > 3.25) {
     9ac:	2a e9       	ldi	r18, 0x9A	; 154
     9ae:	39 e9       	ldi	r19, 0x99	; 153
     9b0:	49 e5       	ldi	r20, 0x59	; 89
     9b2:	50 e4       	ldi	r21, 0x40	; 64
     9b4:	c7 01       	movw	r24, r14
     9b6:	b6 01       	movw	r22, r12
     9b8:	0e 94 52 0f 	call	0x1ea4	; 0x1ea4 <__cmpsf2>
     9bc:	88 23       	and	r24, r24
     9be:	5c f4       	brge	.+22     	; 0x9d6 <SoC_ADC+0x388>
     9c0:	20 e0       	ldi	r18, 0x00	; 0
     9c2:	30 e0       	ldi	r19, 0x00	; 0
     9c4:	40 e5       	ldi	r20, 0x50	; 80
     9c6:	50 e4       	ldi	r21, 0x40	; 64
     9c8:	c7 01       	movw	r24, r14
     9ca:	b6 01       	movw	r22, r12
     9cc:	0e 94 70 10 	call	0x20e0	; 0x20e0 <__gesf2>
     9d0:	18 16       	cp	r1, r24
     9d2:	0c f4       	brge	.+2      	; 0x9d6 <SoC_ADC+0x388>
     9d4:	76 c0       	rjmp	.+236    	; 0xac2 <SoC_ADC+0x474>
			soc = 30;
		} //end else if
		else if (volt < 3.25) {
     9d6:	20 e0       	ldi	r18, 0x00	; 0
     9d8:	30 e0       	ldi	r19, 0x00	; 0
     9da:	40 e5       	ldi	r20, 0x50	; 80
     9dc:	50 e4       	ldi	r21, 0x40	; 64
     9de:	c7 01       	movw	r24, r14
     9e0:	b6 01       	movw	r22, r12
     9e2:	0e 94 52 0f 	call	0x1ea4	; 0x1ea4 <__cmpsf2>
     9e6:	88 23       	and	r24, r24
     9e8:	0c f4       	brge	.+2      	; 0x9ec <SoC_ADC+0x39e>
     9ea:	70 c0       	rjmp	.+224    	; 0xacc <SoC_ADC+0x47e>
			soc = 20;
		} //end else if
		else {
			UART0_putstring("Error Reading State of Charge \n\n\r");
     9ec:	8a e4       	ldi	r24, 0x4A	; 74
     9ee:	93 e0       	ldi	r25, 0x03	; 3
     9f0:	0e 94 56 0d 	call	0x1aac	; 0x1aac <UART0_putstring>
// Description: Temperature measurement via ADC.
/*========================================================================================*/

float SoC_ADC(float volt, float amp){
	// return value
	float soc = 0;
     9f4:	60 e0       	ldi	r22, 0x00	; 0
     9f6:	70 e0       	ldi	r23, 0x00	; 0
     9f8:	cb 01       	movw	r24, r22
     9fa:	6c c0       	rjmp	.+216    	; 0xad4 <SoC_ADC+0x486>
	
	
	// Lookup table
	if (amp < 0.6 && amp > 0){
		if (volt > 4.00) {
			soc = 80;
     9fc:	60 e0       	ldi	r22, 0x00	; 0
     9fe:	70 e0       	ldi	r23, 0x00	; 0
     a00:	80 ea       	ldi	r24, 0xA0	; 160
     a02:	92 e4       	ldi	r25, 0x42	; 66
     a04:	67 c0       	rjmp	.+206    	; 0xad4 <SoC_ADC+0x486>
		} //end if
		else if (volt < 4.00 && volt > 3.80) {
			soc = 70;
     a06:	60 e0       	ldi	r22, 0x00	; 0
     a08:	70 e0       	ldi	r23, 0x00	; 0
     a0a:	8c e8       	ldi	r24, 0x8C	; 140
     a0c:	92 e4       	ldi	r25, 0x42	; 66
     a0e:	62 c0       	rjmp	.+196    	; 0xad4 <SoC_ADC+0x486>
		} //end else if
		else if (volt < 3.80 && volt > 3.75) {
			soc = 60;
     a10:	60 e0       	ldi	r22, 0x00	; 0
     a12:	70 e0       	ldi	r23, 0x00	; 0
     a14:	80 e7       	ldi	r24, 0x70	; 112
     a16:	92 e4       	ldi	r25, 0x42	; 66
     a18:	5d c0       	rjmp	.+186    	; 0xad4 <SoC_ADC+0x486>
		} //end else if
		else if (volt < 3.75 && volt > 3.70) {
			soc = 50;
     a1a:	60 e0       	ldi	r22, 0x00	; 0
     a1c:	70 e0       	ldi	r23, 0x00	; 0
     a1e:	88 e4       	ldi	r24, 0x48	; 72
     a20:	92 e4       	ldi	r25, 0x42	; 66
     a22:	58 c0       	rjmp	.+176    	; 0xad4 <SoC_ADC+0x486>
		} //end else if
		else if (volt < 3.70 && volt > 3.60) {
			soc = 40;
     a24:	60 e0       	ldi	r22, 0x00	; 0
     a26:	70 e0       	ldi	r23, 0x00	; 0
     a28:	80 e2       	ldi	r24, 0x20	; 32
     a2a:	92 e4       	ldi	r25, 0x42	; 66
     a2c:	53 c0       	rjmp	.+166    	; 0xad4 <SoC_ADC+0x486>
		} //end else if
		else if (volt < 3.60 && volt > 3.5) {
			soc = 30;
     a2e:	60 e0       	ldi	r22, 0x00	; 0
     a30:	70 e0       	ldi	r23, 0x00	; 0
     a32:	80 ef       	ldi	r24, 0xF0	; 240
     a34:	91 e4       	ldi	r25, 0x41	; 65
     a36:	4e c0       	rjmp	.+156    	; 0xad4 <SoC_ADC+0x486>
		} //end else if
		else if (volt < 3.50) {
			soc = 20;
     a38:	60 e0       	ldi	r22, 0x00	; 0
     a3a:	70 e0       	ldi	r23, 0x00	; 0
     a3c:	80 ea       	ldi	r24, 0xA0	; 160
     a3e:	91 e4       	ldi	r25, 0x41	; 65
     a40:	49 c0       	rjmp	.+146    	; 0xad4 <SoC_ADC+0x486>
			UART0_putstring("Error Reading State of Charge \n\n\r");
		} //end else
	}
	else if(amp > 0.6 && amp < 3){
		if (volt > 3.75) {
			soc = 80;
     a42:	60 e0       	ldi	r22, 0x00	; 0
     a44:	70 e0       	ldi	r23, 0x00	; 0
     a46:	80 ea       	ldi	r24, 0xA0	; 160
     a48:	92 e4       	ldi	r25, 0x42	; 66
     a4a:	44 c0       	rjmp	.+136    	; 0xad4 <SoC_ADC+0x486>
		} //end if
		else if (volt < 3.75 && volt > 3.65) {
			soc = 70;
     a4c:	60 e0       	ldi	r22, 0x00	; 0
     a4e:	70 e0       	ldi	r23, 0x00	; 0
     a50:	8c e8       	ldi	r24, 0x8C	; 140
     a52:	92 e4       	ldi	r25, 0x42	; 66
     a54:	3f c0       	rjmp	.+126    	; 0xad4 <SoC_ADC+0x486>
		} //end else if
		else if (volt < 3.65 && volt > 3.55) {
			soc = 60;
     a56:	60 e0       	ldi	r22, 0x00	; 0
     a58:	70 e0       	ldi	r23, 0x00	; 0
     a5a:	80 e7       	ldi	r24, 0x70	; 112
     a5c:	92 e4       	ldi	r25, 0x42	; 66
     a5e:	3a c0       	rjmp	.+116    	; 0xad4 <SoC_ADC+0x486>
		} //end else if
		else if (volt < 3.55 && volt > 3.45) {
			soc = 50;
     a60:	60 e0       	ldi	r22, 0x00	; 0
     a62:	70 e0       	ldi	r23, 0x00	; 0
     a64:	88 e4       	ldi	r24, 0x48	; 72
     a66:	92 e4       	ldi	r25, 0x42	; 66
     a68:	35 c0       	rjmp	.+106    	; 0xad4 <SoC_ADC+0x486>
		} //end else if
 		else if (volt < 3.45 && volt > 3.35) {
			soc = 40;
     a6a:	60 e0       	ldi	r22, 0x00	; 0
     a6c:	70 e0       	ldi	r23, 0x00	; 0
     a6e:	80 e2       	ldi	r24, 0x20	; 32
     a70:	92 e4       	ldi	r25, 0x42	; 66
     a72:	30 c0       	rjmp	.+96     	; 0xad4 <SoC_ADC+0x486>
		 } //end else if
		else if (volt < 3.35 && volt > 3.30) {
			soc = 30;
     a74:	60 e0       	ldi	r22, 0x00	; 0
     a76:	70 e0       	ldi	r23, 0x00	; 0
     a78:	80 ef       	ldi	r24, 0xF0	; 240
     a7a:	91 e4       	ldi	r25, 0x41	; 65
     a7c:	2b c0       	rjmp	.+86     	; 0xad4 <SoC_ADC+0x486>
		 } //end else if
		else if (volt < 3.30) {
			soc = 20;
     a7e:	60 e0       	ldi	r22, 0x00	; 0
     a80:	70 e0       	ldi	r23, 0x00	; 0
     a82:	80 ea       	ldi	r24, 0xA0	; 160
     a84:	91 e4       	ldi	r25, 0x41	; 65
     a86:	26 c0       	rjmp	.+76     	; 0xad4 <SoC_ADC+0x486>
// Description: Temperature measurement via ADC.
/*========================================================================================*/

float SoC_ADC(float volt, float amp){
	// return value
	float soc = 0;
     a88:	60 e0       	ldi	r22, 0x00	; 0
     a8a:	70 e0       	ldi	r23, 0x00	; 0
     a8c:	cb 01       	movw	r24, r22
     a8e:	22 c0       	rjmp	.+68     	; 0xad4 <SoC_ADC+0x486>
			UART0_putstring("Error Reading State of Charge \n\n\r");
		} //end else
	}
	else if(amp > 3){
		if (volt > 3.80) {
			soc = 80;
     a90:	60 e0       	ldi	r22, 0x00	; 0
     a92:	70 e0       	ldi	r23, 0x00	; 0
     a94:	80 ea       	ldi	r24, 0xA0	; 160
     a96:	92 e4       	ldi	r25, 0x42	; 66
     a98:	1d c0       	rjmp	.+58     	; 0xad4 <SoC_ADC+0x486>
		} //end if
		else if (volt < 3.80 && volt > 3.75) {
			soc = 70;
     a9a:	60 e0       	ldi	r22, 0x00	; 0
     a9c:	70 e0       	ldi	r23, 0x00	; 0
     a9e:	8c e8       	ldi	r24, 0x8C	; 140
     aa0:	92 e4       	ldi	r25, 0x42	; 66
     aa2:	18 c0       	rjmp	.+48     	; 0xad4 <SoC_ADC+0x486>
		} //end else if
		else if (volt < 3.75 && volt > 3.65) {
			soc = 60;
     aa4:	60 e0       	ldi	r22, 0x00	; 0
     aa6:	70 e0       	ldi	r23, 0x00	; 0
     aa8:	80 e7       	ldi	r24, 0x70	; 112
     aaa:	92 e4       	ldi	r25, 0x42	; 66
     aac:	13 c0       	rjmp	.+38     	; 0xad4 <SoC_ADC+0x486>
		} //end else if
		else if (volt < 3.65 && volt > 3.50) {
			soc = 50;
     aae:	60 e0       	ldi	r22, 0x00	; 0
     ab0:	70 e0       	ldi	r23, 0x00	; 0
     ab2:	88 e4       	ldi	r24, 0x48	; 72
     ab4:	92 e4       	ldi	r25, 0x42	; 66
     ab6:	0e c0       	rjmp	.+28     	; 0xad4 <SoC_ADC+0x486>
		} //end else if
		else if (volt < 3.50 && volt > 3.40) {
			soc = 40;
     ab8:	60 e0       	ldi	r22, 0x00	; 0
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	80 e2       	ldi	r24, 0x20	; 32
     abe:	92 e4       	ldi	r25, 0x42	; 66
     ac0:	09 c0       	rjmp	.+18     	; 0xad4 <SoC_ADC+0x486>
		} //end else if
		else if (volt < 3.40 && volt > 3.25) {
			soc = 30;
     ac2:	60 e0       	ldi	r22, 0x00	; 0
     ac4:	70 e0       	ldi	r23, 0x00	; 0
     ac6:	80 ef       	ldi	r24, 0xF0	; 240
     ac8:	91 e4       	ldi	r25, 0x41	; 65
     aca:	04 c0       	rjmp	.+8      	; 0xad4 <SoC_ADC+0x486>
		} //end else if
		else if (volt < 3.25) {
			soc = 20;
     acc:	60 e0       	ldi	r22, 0x00	; 0
     ace:	70 e0       	ldi	r23, 0x00	; 0
     ad0:	80 ea       	ldi	r24, 0xA0	; 160
     ad2:	91 e4       	ldi	r25, 0x41	; 65
	}
	else{
		//UART0_putstring("Battery Charging");
	}
	return soc;
}
     ad4:	ff 90       	pop	r15
     ad6:	ef 90       	pop	r14
     ad8:	df 90       	pop	r13
     ada:	cf 90       	pop	r12
     adc:	bf 90       	pop	r11
     ade:	af 90       	pop	r10
     ae0:	9f 90       	pop	r9
     ae2:	8f 90       	pop	r8
     ae4:	08 95       	ret

00000ae6 <launch_pre>:
// Date: 2019-03-25
// Description: Initializes the launch bits to zero (8 bits).
/*========================================================================================*/

void launch_pre(){
	EEPROM_Write(0x00,0x0000);
     ae6:	60 e0       	ldi	r22, 0x00	; 0
     ae8:	70 e0       	ldi	r23, 0x00	; 0
     aea:	80 e0       	ldi	r24, 0x00	; 0
     aec:	a4 c3       	rjmp	.+1864   	; 0x1236 <EEPROM_Write>
     aee:	08 95       	ret

00000af0 <launch_post>:
// Date: 2019-03-25
// Description: Sets the launch bits to 1 (8 bits).
/*========================================================================================*/

void launch_post(){
	EEPROM_Write(0xff,0x0000);
     af0:	60 e0       	ldi	r22, 0x00	; 0
     af2:	70 e0       	ldi	r23, 0x00	; 0
     af4:	8f ef       	ldi	r24, 0xFF	; 255
     af6:	9f c3       	rjmp	.+1854   	; 0x1236 <EEPROM_Write>
     af8:	08 95       	ret

00000afa <launch_check>:
/*========================================================================================*/

uint8_t launch_check(){
	
	// Read from permanent memory
	uint8_t launch = EEPROM_Read(0x0000);
     afa:	80 e0       	ldi	r24, 0x00	; 0
     afc:	90 e0       	ldi	r25, 0x00	; 0
     afe:	a5 d3       	rcall	.+1866   	; 0x124a <EEPROM_Read>
	// Check mask
	uint8_t mask_check = 0x01;
	uint8_t sum = 0;
	int i = 0; // increment
	
	while(launch){
     b00:	88 23       	and	r24, r24
     b02:	39 f0       	breq	.+14     	; 0xb12 <launch_check+0x18>
		launch = launch >> 1;
     b04:	86 95       	lsr	r24
	// Check mask
	uint8_t mask_check = 0x01;
	uint8_t sum = 0;
	int i = 0; // increment
	
	while(launch){
     b06:	39 f0       	breq	.+14     	; 0xb16 <launch_check+0x1c>
		launch = launch >> 1;
     b08:	86 95       	lsr	r24
	// Check mask
	uint8_t mask_check = 0x01;
	uint8_t sum = 0;
	int i = 0; // increment
	
	while(launch){
     b0a:	39 f0       	breq	.+14     	; 0xb1a <launch_check+0x20>
     b0c:	86 95       	lsr	r24
     b0e:	39 f4       	brne	.+14     	; 0xb1e <launch_check+0x24>
     b10:	08 95       	ret
		sum += 1;
		if(sum > 3){
			return sum;
		}
	}
	return 0;
     b12:	80 e0       	ldi	r24, 0x00	; 0
     b14:	08 95       	ret
     b16:	80 e0       	ldi	r24, 0x00	; 0
     b18:	08 95       	ret
     b1a:	80 e0       	ldi	r24, 0x00	; 0
     b1c:	08 95       	ret
	uint8_t sum = 0;
	int i = 0; // increment
	
	while(launch){
		launch = launch >> 1;
		sum += 1;
     b1e:	84 e0       	ldi	r24, 0x04	; 4
		if(sum > 3){
			return sum;
		}
	}
	return 0;
}
     b20:	08 95       	ret

00000b22 <launch_state>:
/*========================================================================================*/

void launch_state(){
	
	// Check if the satellite has been launched
	if(launch_check()){
     b22:	eb df       	rcall	.-42     	; 0xafa <launch_check>
     b24:	81 11       	cpse	r24, r1
     b26:	0a c0       	rjmp	.+20     	; 0xb3c <launch_state+0x1a>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     b28:	2f ef       	ldi	r18, 0xFF	; 255
     b2a:	89 e6       	ldi	r24, 0x69	; 105
     b2c:	98 e1       	ldi	r25, 0x18	; 24
     b2e:	21 50       	subi	r18, 0x01	; 1
     b30:	80 40       	sbci	r24, 0x00	; 0
     b32:	90 40       	sbci	r25, 0x00	; 0
     b34:	e1 f7       	brne	.-8      	; 0xb2e <launch_state+0xc>
     b36:	00 c0       	rjmp	.+0      	; 0xb38 <launch_state+0x16>
		// don't set the timer
	}
	else{
		launch_timer();
		launch_post();
     b38:	00 00       	nop
     b3a:	da cf       	rjmp	.-76     	; 0xaf0 <launch_post>
     b3c:	08 95       	ret

00000b3e <launch_reset>:
/*========================================================================================*/

void launch_reset(){
	
	// Reset the launch bits to 0x00
	launch_pre();
     b3e:	d3 df       	rcall	.-90     	; 0xae6 <launch_pre>
	/* Watchdog must be reset to ensure the clock starts at 0.
	/ This is especially important as we are shortening the timeout period
	*/
	
	// Watchdog reset
	wdt_reset(); 
     b40:	a8 95       	wdr
	
	// Set the watchdog to System Reset Mode
	wdt_enable(SYSTEM_RESET_MODE);
     b42:	81 e0       	ldi	r24, 0x01	; 1
     b44:	0e 94 a9 0d 	call	0x1b52	; 0x1b52 <wdt_enable>
	
	// Change the tiemout period to 1.0s			 
	wdt_set_timeout_period(WDT_TIMEOUT_PERIOD_128KCLK); // timeout set from 1024k to 128k
     b48:	86 e0       	ldi	r24, 0x06	; 6
     b4a:	df c7       	rjmp	.+4030   	; 0x1b0a <wdt_set_timeout_period>
     b4c:	08 95       	ret

00000b4e <Enable_3V3_1>:
// Description: Enables 3V3-1 rail power. Waits for transient to finish.
/*========================================================================================*/
void Enable_3V3_1(){

	// Set 5V rail for readings
	Set_GPIO(10);
     b4e:	8a e0       	ldi	r24, 0x0A	; 10
     b50:	90 e0       	ldi	r25, 0x00	; 0
     b52:	83 d3       	rcall	.+1798   	; 0x125a <Set_GPIO>

	while(Volt_ADC(0) < 3.1){
     b54:	80 e0       	ldi	r24, 0x00	; 0
     b56:	90 e0       	ldi	r25, 0x00	; 0
     b58:	8b db       	rcall	.-2282   	; 0x270 <Volt_ADC>
     b5a:	26 e6       	ldi	r18, 0x66	; 102
     b5c:	36 e6       	ldi	r19, 0x66	; 102
     b5e:	46 e4       	ldi	r20, 0x46	; 70
     b60:	50 e4       	ldi	r21, 0x40	; 64
     b62:	0e 94 52 0f 	call	0x1ea4	; 0x1ea4 <__cmpsf2>
     b66:	88 23       	and	r24, r24
     b68:	ac f3       	brlt	.-22     	; 0xb54 <Enable_3V3_1+0x6>
		// Wait until 3V3-1 rail transient is finished
	}
}
     b6a:	08 95       	ret

00000b6c <Enable_5V>:
// Description: Enables 5V rail power. Waits for transient to finish.
/*========================================================================================*/
void Enable_5V(){

	// Set 5V rail for readings
	Set_GPIO(11);
     b6c:	8b e0       	ldi	r24, 0x0B	; 11
     b6e:	90 e0       	ldi	r25, 0x00	; 0
     b70:	74 d3       	rcall	.+1768   	; 0x125a <Set_GPIO>

	while(Volt_ADC(2) < 4.8){
     b72:	82 e0       	ldi	r24, 0x02	; 2
     b74:	90 e0       	ldi	r25, 0x00	; 0
     b76:	7c db       	rcall	.-2312   	; 0x270 <Volt_ADC>
     b78:	2a e9       	ldi	r18, 0x9A	; 154
     b7a:	39 e9       	ldi	r19, 0x99	; 153
     b7c:	49 e9       	ldi	r20, 0x99	; 153
     b7e:	50 e4       	ldi	r21, 0x40	; 64
     b80:	0e 94 52 0f 	call	0x1ea4	; 0x1ea4 <__cmpsf2>
     b84:	88 23       	and	r24, r24
     b86:	ac f3       	brlt	.-22     	; 0xb72 <Enable_5V+0x6>
		// Wait until 5V rail transient is finished
	}
}
     b88:	08 95       	ret

00000b8a <Enable_8V>:
// Description: Enables 8V rail power. Waits for transient to finish.
/*========================================================================================*/
void Enable_8V(){

	// Set 8V rail for readings
	Set_GPIO(16);
     b8a:	80 e1       	ldi	r24, 0x10	; 16
     b8c:	90 e0       	ldi	r25, 0x00	; 0
     b8e:	65 d3       	rcall	.+1738   	; 0x125a <Set_GPIO>

	while(Volt_ADC(3) < 7.8){
     b90:	83 e0       	ldi	r24, 0x03	; 3
     b92:	90 e0       	ldi	r25, 0x00	; 0
     b94:	6d db       	rcall	.-2342   	; 0x270 <Volt_ADC>
     b96:	2a e9       	ldi	r18, 0x9A	; 154
     b98:	39 e9       	ldi	r19, 0x99	; 153
     b9a:	49 ef       	ldi	r20, 0xF9	; 249
     b9c:	50 e4       	ldi	r21, 0x40	; 64
     b9e:	0e 94 52 0f 	call	0x1ea4	; 0x1ea4 <__cmpsf2>
     ba2:	88 23       	and	r24, r24
     ba4:	ac f3       	brlt	.-22     	; 0xb90 <Enable_8V+0x6>
		// Wait until 8V rail transient is finished
	}
}
     ba6:	08 95       	ret

00000ba8 <Enable_VBatt>:
// Description: Enables VBatt rail power. Waits for transient to finish.
/*========================================================================================*/
void Enable_VBatt(){

	// Set 8V rail for readings
	Set_GPIO(16);
     ba8:	80 e1       	ldi	r24, 0x10	; 16
     baa:	90 e0       	ldi	r25, 0x00	; 0
     bac:	56 d3       	rcall	.+1708   	; 0x125a <Set_GPIO>

	while(Volt_ADC(4) < 2.5){
     bae:	84 e0       	ldi	r24, 0x04	; 4
     bb0:	90 e0       	ldi	r25, 0x00	; 0
     bb2:	5e db       	rcall	.-2372   	; 0x270 <Volt_ADC>
     bb4:	20 e0       	ldi	r18, 0x00	; 0
     bb6:	30 e0       	ldi	r19, 0x00	; 0
     bb8:	40 e2       	ldi	r20, 0x20	; 32
     bba:	50 e4       	ldi	r21, 0x40	; 64
     bbc:	0e 94 52 0f 	call	0x1ea4	; 0x1ea4 <__cmpsf2>
     bc0:	88 23       	and	r24, r24
     bc2:	ac f3       	brlt	.-22     	; 0xbae <Enable_VBatt+0x6>
		// Wait until 8V rail transient is finished
	}
}
     bc4:	08 95       	ret

00000bc6 <Disable_3V3_1>:
	
	// 3V3-1 rail subsystem mask
	uint8_t mask_3V3_1 = 0b00100000;

	// Check for subsystems using the 3V3-1 rail
	if(power_state & mask_3V3_1){
     bc6:	85 fd       	sbrc	r24, 5
     bc8:	03 c0       	rjmp	.+6      	; 0xbd0 <Disable_3V3_1+0xa>
		// Do not turn off the rail
	}
	else{
		Clear_GPIO(10); // turn 3V3-1 rail off if nothing is using the rail.
     bca:	8a e0       	ldi	r24, 0x0A	; 10
     bcc:	90 e0       	ldi	r25, 0x00	; 0
     bce:	ab c3       	rjmp	.+1878   	; 0x1326 <Clear_GPIO>
     bd0:	08 95       	ret

00000bd2 <Disable_5V>:
	
	// 5V rail subsystem mask
	uint8_t mask_5V = 0b00110010;
	
	// Check for subsystems using the 5V rail
	if(power_state & mask_5V){
     bd2:	82 73       	andi	r24, 0x32	; 50
     bd4:	19 f4       	brne	.+6      	; 0xbdc <Disable_5V+0xa>
		// do not turn the rail off
	}
	else{
		Clear_GPIO(11); // turn off the 5V rail if nothing is using the rail.
     bd6:	8b e0       	ldi	r24, 0x0B	; 11
     bd8:	90 e0       	ldi	r25, 0x00	; 0
     bda:	a5 c3       	rjmp	.+1866   	; 0x1326 <Clear_GPIO>
     bdc:	08 95       	ret

00000bde <Disable_8V>:
	
	// 5V rail subsystem mask
	uint8_t mask_8V = 0b11000100;
	
	// Check for subsystems using the 5V rail
	if(power_state & mask_8V){
     bde:	84 7c       	andi	r24, 0xC4	; 196
     be0:	19 f4       	brne	.+6      	; 0xbe8 <Disable_8V+0xa>
		// do not turn the rail off
	}
	else{
		Clear_GPIO(16); // turn off the 5V rail if nothing is using the rail.
     be2:	80 e1       	ldi	r24, 0x10	; 16
     be4:	90 e0       	ldi	r25, 0x00	; 0
     be6:	9f c3       	rjmp	.+1854   	; 0x1326 <Clear_GPIO>
     be8:	08 95       	ret

00000bea <Disable_VBatt>:
	
	// 5V rail subsystem mask
	uint8_t mask_8V = 0b00000001;
	
	// Check for subsystems using the 5V rail
	if(power_state & mask_8V){
     bea:	80 fd       	sbrc	r24, 0
     bec:	03 c0       	rjmp	.+6      	; 0xbf4 <Disable_VBatt+0xa>
		// do not turn the rail off
	}
	else{
		Clear_GPIO(21); // turn off the 5V rail if nothing is using the rail.
     bee:	85 e1       	ldi	r24, 0x15	; 21
     bf0:	90 e0       	ldi	r25, 0x00	; 0
     bf2:	99 c3       	rjmp	.+1842   	; 0x1326 <Clear_GPIO>
     bf4:	08 95       	ret

00000bf6 <heater_SWITCH>:
// Description: Switches power to Heaters based on current power state. Only one heater
//				can be turned on at a time. If none or more than one heater is set to be
//				turned on, all heaters are turned off.
/*========================================================================================*/

void heater_SWITCH(uint8_t power_state, uint8_t* power_pointer){
     bf6:	0f 93       	push	r16
     bf8:	1f 93       	push	r17
     bfa:	cf 93       	push	r28
     bfc:	c8 2f       	mov	r28, r24
     bfe:	8b 01       	movw	r16, r22
	uint8_t mask_heater_8V = 0b00000100;
	
	// Check which of the heaters is turned on
	
	// Vbatt Heater
	if((power_state & mask_heater_VBatt) && !(power_state & (mask_heater_5V | mask_heater_8V))){
     c00:	80 ff       	sbrs	r24, 0
     c02:	11 c0       	rjmp	.+34     	; 0xc26 <heater_SWITCH+0x30>
     c04:	86 70       	andi	r24, 0x06	; 6
     c06:	79 f4       	brne	.+30     	; 0xc26 <heater_SWITCH+0x30>
		Disable_5V(power_state); // disable 5V rail if not needed
     c08:	8c 2f       	mov	r24, r28
     c0a:	e3 df       	rcall	.-58     	; 0xbd2 <Disable_5V>
		Disable_8V(power_state); // disable 8V rail if not needed
     c0c:	8c 2f       	mov	r24, r28
     c0e:	e7 df       	rcall	.-50     	; 0xbde <Disable_8V>
		Clear_GPIO(3); // Turn off 5V heater
     c10:	83 e0       	ldi	r24, 0x03	; 3
     c12:	90 e0       	ldi	r25, 0x00	; 0
     c14:	88 d3       	rcall	.+1808   	; 0x1326 <Clear_GPIO>
		Clear_GPIO(2); // Turn off 8V heater
     c16:	82 e0       	ldi	r24, 0x02	; 2
     c18:	90 e0       	ldi	r25, 0x00	; 0
     c1a:	85 d3       	rcall	.+1802   	; 0x1326 <Clear_GPIO>
		Enable_VBatt();
     c1c:	c5 df       	rcall	.-118    	; 0xba8 <Enable_VBatt>
     c1e:	80 e0       	ldi	r24, 0x00	; 0
		Set_GPIO(0);  // Enable VBatt heater
     c20:	90 e0       	ldi	r25, 0x00	; 0
     c22:	1b d3       	rcall	.+1590   	; 0x125a <Set_GPIO>
     c24:	3b c0       	rjmp	.+118    	; 0xc9c <heater_SWITCH+0xa6>
     c26:	c1 ff       	sbrs	r28, 1
     c28:	12 c0       	rjmp	.+36     	; 0xc4e <heater_SWITCH+0x58>
	}
	
	// 5V Heater
	else if((power_state & mask_heater_5V) && !(power_state & (mask_heater_VBatt | mask_heater_8V))){
     c2a:	8c 2f       	mov	r24, r28
     c2c:	85 70       	andi	r24, 0x05	; 5
     c2e:	79 f4       	brne	.+30     	; 0xc4e <heater_SWITCH+0x58>
		Disable_VBatt(power_state); // disable VBatt rail if not needed
     c30:	8c 2f       	mov	r24, r28
     c32:	db df       	rcall	.-74     	; 0xbea <Disable_VBatt>
		Disable_8V(power_state); // disable 8V rail if not needed
     c34:	8c 2f       	mov	r24, r28
		Clear_GPIO(0); // Turn off VBatt heater
     c36:	d3 df       	rcall	.-90     	; 0xbde <Disable_8V>
     c38:	80 e0       	ldi	r24, 0x00	; 0
     c3a:	90 e0       	ldi	r25, 0x00	; 0
		Clear_GPIO(2); // Turn off 8V heater
     c3c:	74 d3       	rcall	.+1768   	; 0x1326 <Clear_GPIO>
     c3e:	82 e0       	ldi	r24, 0x02	; 2
     c40:	90 e0       	ldi	r25, 0x00	; 0
     c42:	71 d3       	rcall	.+1762   	; 0x1326 <Clear_GPIO>
		Enable_5V();
     c44:	93 df       	rcall	.-218    	; 0xb6c <Enable_5V>
		Set_GPIO(3); // Enable 5V heater
     c46:	83 e0       	ldi	r24, 0x03	; 3
     c48:	90 e0       	ldi	r25, 0x00	; 0
     c4a:	07 d3       	rcall	.+1550   	; 0x125a <Set_GPIO>
     c4c:	27 c0       	rjmp	.+78     	; 0xc9c <heater_SWITCH+0xa6>
	}
	
	// 8V Heater
	else if((power_state & mask_heater_8V) && !(power_state & (mask_heater_VBatt | mask_heater_5V))){
     c4e:	c2 ff       	sbrs	r28, 2
     c50:	12 c0       	rjmp	.+36     	; 0xc76 <heater_SWITCH+0x80>
     c52:	8c 2f       	mov	r24, r28
		Disable_VBatt(power_state); // disable VBatt rail if not needed
     c54:	83 70       	andi	r24, 0x03	; 3
     c56:	79 f4       	brne	.+30     	; 0xc76 <heater_SWITCH+0x80>
		Disable_5V(power_state); // disable 5V rail if not needed
     c58:	8c 2f       	mov	r24, r28
     c5a:	c7 df       	rcall	.-114    	; 0xbea <Disable_VBatt>
		Clear_GPIO(0); // Turn off VBatt heater
     c5c:	8c 2f       	mov	r24, r28
     c5e:	b9 df       	rcall	.-142    	; 0xbd2 <Disable_5V>
     c60:	80 e0       	ldi	r24, 0x00	; 0
		Clear_GPIO(3); // Turn off 5V heater
     c62:	90 e0       	ldi	r25, 0x00	; 0
     c64:	60 d3       	rcall	.+1728   	; 0x1326 <Clear_GPIO>
     c66:	83 e0       	ldi	r24, 0x03	; 3
		Enable_8V();
     c68:	90 e0       	ldi	r25, 0x00	; 0
		Set_GPIO(2); // Enable 8V heater
     c6a:	5d d3       	rcall	.+1722   	; 0x1326 <Clear_GPIO>
     c6c:	8e df       	rcall	.-228    	; 0xb8a <Enable_8V>
     c6e:	82 e0       	ldi	r24, 0x02	; 2
     c70:	90 e0       	ldi	r25, 0x00	; 0
	}
	else{
		// Turn off all heaters
		Clear_GPIO(0);
     c72:	f3 d2       	rcall	.+1510   	; 0x125a <Set_GPIO>
     c74:	13 c0       	rjmp	.+38     	; 0xc9c <heater_SWITCH+0xa6>
     c76:	80 e0       	ldi	r24, 0x00	; 0
     c78:	90 e0       	ldi	r25, 0x00	; 0
		Clear_GPIO(3);
     c7a:	55 d3       	rcall	.+1706   	; 0x1326 <Clear_GPIO>
     c7c:	83 e0       	ldi	r24, 0x03	; 3
     c7e:	90 e0       	ldi	r25, 0x00	; 0
     c80:	52 d3       	rcall	.+1700   	; 0x1326 <Clear_GPIO>
		Clear_GPIO(2);
     c82:	82 e0       	ldi	r24, 0x02	; 2
     c84:	90 e0       	ldi	r25, 0x00	; 0
     c86:	4f d3       	rcall	.+1694   	; 0x1326 <Clear_GPIO>
     c88:	8c 2f       	mov	r24, r28
		
		// Turn off associated rails (rail logic is taken care of in the function)
		Disable_VBatt(power_state);
     c8a:	af df       	rcall	.-162    	; 0xbea <Disable_VBatt>
     c8c:	8c 2f       	mov	r24, r28
     c8e:	a1 df       	rcall	.-190    	; 0xbd2 <Disable_5V>
		Disable_5V(power_state);
     c90:	8c 2f       	mov	r24, r28
     c92:	a5 df       	rcall	.-182    	; 0xbde <Disable_8V>
     c94:	f8 01       	movw	r30, r16
		Disable_8V(power_state);
     c96:	80 81       	ld	r24, Z
     c98:	88 7f       	andi	r24, 0xF8	; 248
     c9a:	80 83       	st	Z, r24
		
		// Change power state as they are all turned off now
		power_pointer[0] &= 0b11111000;
     c9c:	cf 91       	pop	r28
     c9e:	1f 91       	pop	r17
     ca0:	0f 91       	pop	r16
     ca2:	08 95       	ret

00000ca4 <obc_SWITCH>:
	}
}
     ca4:	83 ff       	sbrs	r24, 3
     ca6:	04 c0       	rjmp	.+8      	; 0xcb0 <obc_SWITCH+0xc>
     ca8:	88 e1       	ldi	r24, 0x18	; 24
     caa:	90 e0       	ldi	r25, 0x00	; 0
	// OBC mask
	uint8_t mask_OBC = 0b00001000;
	
	// Turn on OBC if it is set to one
	if(power_state & mask_OBC){
		Set_GPIO(24); // turn on OBC
     cac:	d6 c2       	rjmp	.+1452   	; 0x125a <Set_GPIO>
     cae:	08 95       	ret
	}
	else{
		Clear_GPIO(24); // turn off OBC
     cb0:	88 e1       	ldi	r24, 0x18	; 24
     cb2:	90 e0       	ldi	r25, 0x00	; 0
     cb4:	38 c3       	rjmp	.+1648   	; 0x1326 <Clear_GPIO>
     cb6:	08 95       	ret

00000cb8 <imager_SWITCH>:
// Author: Chris Thomas
// Date: 2019-03-24
// Description: Switches power to Imager based on current power state.
/*========================================================================================*/

void imager_SWITCH(uint8_t power_state){
     cb8:	cf 93       	push	r28
     cba:	c8 2f       	mov	r28, r24
	
	// Imager Mask
	uint8_t mask_imager = 0b00010000;
	
	// Turn on Imager subcomponents if power state calls for it
	if(power_state & mask_imager){
     cbc:	84 ff       	sbrs	r24, 4
     cbe:	08 c0       	rjmp	.+16     	; 0xcd0 <imager_SWITCH+0x18>
		Enable_5V();
     cc0:	55 df       	rcall	.-342    	; 0xb6c <Enable_5V>
		Set_GPIO(23); // turn on imager beagle
     cc2:	87 e1       	ldi	r24, 0x17	; 23
     cc4:	90 e0       	ldi	r25, 0x00	; 0
     cc6:	c9 d2       	rcall	.+1426   	; 0x125a <Set_GPIO>
		Set_GPIO(22); // turn on camera 
     cc8:	86 e1       	ldi	r24, 0x16	; 22
     cca:	90 e0       	ldi	r25, 0x00	; 0
     ccc:	c6 d2       	rcall	.+1420   	; 0x125a <Set_GPIO>
     cce:	08 c0       	rjmp	.+16     	; 0xce0 <imager_SWITCH+0x28>
	}
	else{
		Clear_GPIO(22); // turn off camera
     cd0:	86 e1       	ldi	r24, 0x16	; 22
     cd2:	90 e0       	ldi	r25, 0x00	; 0
     cd4:	28 d3       	rcall	.+1616   	; 0x1326 <Clear_GPIO>
		Clear_GPIO(23); // turn off imager beagle
     cd6:	87 e1       	ldi	r24, 0x17	; 23
     cd8:	90 e0       	ldi	r25, 0x00	; 0
     cda:	25 d3       	rcall	.+1610   	; 0x1326 <Clear_GPIO>
		Disable_5V(power_state); // turn off associated rail (5V)		
     cdc:	8c 2f       	mov	r24, r28
     cde:	79 df       	rcall	.-270    	; 0xbd2 <Disable_5V>
     ce0:	cf 91       	pop	r28
	}
}
     ce2:	08 95       	ret

00000ce4 <grips_SWITCH>:
     ce4:	cf 93       	push	r28
// Author: Chris Thomas
// Date: 2019-03-24
// Description: Switches power to GRIPS based on current power state.
/*========================================================================================*/

void grips_SWITCH(uint8_t power_state){
     ce6:	c8 2f       	mov	r28, r24
	
	// GRIPS mask
	uint8_t grips_mask = 0b00100000;
	
	// Turn on Grips subcomponents if power state calls for it
	if(power_state & grips_mask){
     ce8:	85 ff       	sbrs	r24, 5
     cea:	09 c0       	rjmp	.+18     	; 0xcfe <grips_SWITCH+0x1a>
		Enable_5V();
     cec:	3f df       	rcall	.-386    	; 0xb6c <Enable_5V>
		Enable_3V3_1();
     cee:	2f df       	rcall	.-418    	; 0xb4e <Enable_3V3_1>
     cf0:	8b e1       	ldi	r24, 0x1B	; 27
		Set_GPIO(27); // turn on GNSS beagle
     cf2:	90 e0       	ldi	r25, 0x00	; 0
     cf4:	b2 d2       	rcall	.+1380   	; 0x125a <Set_GPIO>
     cf6:	8c e1       	ldi	r24, 0x1C	; 28
		Set_GPIO(28); // turn on OEM719
     cf8:	90 e0       	ldi	r25, 0x00	; 0
     cfa:	af d2       	rcall	.+1374   	; 0x125a <Set_GPIO>
     cfc:	0a c0       	rjmp	.+20     	; 0xd12 <grips_SWITCH+0x2e>
     cfe:	8c e1       	ldi	r24, 0x1C	; 28
	}
	else{
		Clear_GPIO(28); // turn off OEM719
     d00:	90 e0       	ldi	r25, 0x00	; 0
     d02:	11 d3       	rcall	.+1570   	; 0x1326 <Clear_GPIO>
     d04:	8b e1       	ldi	r24, 0x1B	; 27
		Clear_GPIO(27); // turn off GNSS beagle
     d06:	90 e0       	ldi	r25, 0x00	; 0
     d08:	0e d3       	rcall	.+1564   	; 0x1326 <Clear_GPIO>
     d0a:	8c 2f       	mov	r24, r28
		Disable_3V3_1(power_state); // turn off 5V rail
     d0c:	5c df       	rcall	.-328    	; 0xbc6 <Disable_3V3_1>
     d0e:	8c 2f       	mov	r24, r28
     d10:	60 df       	rcall	.-320    	; 0xbd2 <Disable_5V>
		Disable_5V(power_state); // turn off 3V3-1 rail
     d12:	cf 91       	pop	r28
     d14:	08 95       	ret

00000d16 <sband_SWITCH>:
     d16:	cf 93       	push	r28
	}
}
     d18:	c8 2f       	mov	r28, r24
     d1a:	86 ff       	sbrs	r24, 6
	
	// SBand mask
	uint8_t mask_sband = 0b01000000;
	
	// Turn on SBand components if power stated calls for it
	if(power_state & mask_sband){
     d1c:	05 c0       	rjmp	.+10     	; 0xd28 <sband_SWITCH+0x12>
		Enable_8V();
     d1e:	35 df       	rcall	.-406    	; 0xb8a <Enable_8V>
		Set_GPIO(26); // turn on SBand
     d20:	8a e1       	ldi	r24, 0x1A	; 26
     d22:	90 e0       	ldi	r25, 0x00	; 0
     d24:	9a d2       	rcall	.+1332   	; 0x125a <Set_GPIO>
     d26:	05 c0       	rjmp	.+10     	; 0xd32 <sband_SWITCH+0x1c>
	}
	else{
		Clear_GPIO(26); // turn off SBand
     d28:	8a e1       	ldi	r24, 0x1A	; 26
     d2a:	90 e0       	ldi	r25, 0x00	; 0
		Disable_8V(power_state); // turn off 8V rail
     d2c:	fc d2       	rcall	.+1528   	; 0x1326 <Clear_GPIO>
     d2e:	8c 2f       	mov	r24, r28
     d30:	56 df       	rcall	.-340    	; 0xbde <Disable_8V>
	}
}
     d32:	cf 91       	pop	r28
     d34:	08 95       	ret

00000d36 <uhf_SWITCH>:
// Author: Chris Thomas
// Date: 2019-03-24
// Description: Switches power to UHF based on current power state.
/*========================================================================================*/

uhf_SWITCH(uint8_t power_state){
     d36:	cf 93       	push	r28
     d38:	c8 2f       	mov	r28, r24
	
	// UHF mask
	uint8_t mask_uhf = 0b10000000;
	
	// Turn on UHF components if power state calls for it
	if(power_state & mask_uhf){
     d3a:	88 23       	and	r24, r24
     d3c:	2c f4       	brge	.+10     	; 0xd48 <uhf_SWITCH+0x12>
		Enable_8V();
     d3e:	25 df       	rcall	.-438    	; 0xb8a <Enable_8V>
		Set_GPIO(25); // turn on UHF
     d40:	89 e1       	ldi	r24, 0x19	; 25
     d42:	90 e0       	ldi	r25, 0x00	; 0
     d44:	8a d2       	rcall	.+1300   	; 0x125a <Set_GPIO>
     d46:	05 c0       	rjmp	.+10     	; 0xd52 <uhf_SWITCH+0x1c>
	}
	else{
		Clear_GPIO(25); // turn off UHF
     d48:	89 e1       	ldi	r24, 0x19	; 25
     d4a:	90 e0       	ldi	r25, 0x00	; 0
		Disable_8V(power_state); // turn off 8V rail
     d4c:	ec d2       	rcall	.+1496   	; 0x1326 <Clear_GPIO>
     d4e:	8c 2f       	mov	r24, r28
     d50:	46 df       	rcall	.-372    	; 0xbde <Disable_8V>
	}
     d52:	cf 91       	pop	r28
     d54:	08 95       	ret

00000d56 <Update_LOADS>:
// Description: Switches power to subsystems based on the current power state. The
//				power state is treated the same way whether the EPS is in autonomous or
//				manual mode.
/*========================================================================================*/

void Update_LOADS(uint8_t power_state, uint8_t* power_pointer){
     d56:	cf 93       	push	r28
     d58:	c8 2f       	mov	r28, r24
	
	// Heater switching
	heater_SWITCH(power_state, power_pointer);
     d5a:	4d df       	rcall	.-358    	; 0xbf6 <heater_SWITCH>
	
	// OBC switching
	obc_SWITCH(power_state);
     d5c:	8c 2f       	mov	r24, r28
     d5e:	a2 df       	rcall	.-188    	; 0xca4 <obc_SWITCH>
	
	// Imager switching
	imager_SWITCH(power_state);
     d60:	8c 2f       	mov	r24, r28
     d62:	aa df       	rcall	.-172    	; 0xcb8 <imager_SWITCH>
	
	// GRIPS switching
	grips_SWITCH(power_state);
     d64:	8c 2f       	mov	r24, r28
     d66:	be df       	rcall	.-132    	; 0xce4 <grips_SWITCH>
	
	// SBand switching
	sband_SWITCH(power_state);
     d68:	8c 2f       	mov	r24, r28
     d6a:	d5 df       	rcall	.-86     	; 0xd16 <sband_SWITCH>
     d6c:	8c 2f       	mov	r24, r28
	
	// UHF switching
	uhf_SWITCH(power_state);
     d6e:	e3 df       	rcall	.-58     	; 0xd36 <uhf_SWITCH>
     d70:	cf 91       	pop	r28
     d72:	08 95       	ret

00000d74 <pwrMatInit>:
	
}
     d74:	fc 01       	movw	r30, r24
     d76:	81 e0       	ldi	r24, 0x01	; 1
// The structure for the power state matrix is
//
/*========================================================================================*/

void pwrMatInit(uint8_t* pwrMat){
	pwrMat[0] = 0b00000001;
     d78:	80 83       	st	Z, r24
	pwrMat[1] = 0b00000001;
     d7a:	81 83       	std	Z+1, r24	; 0x01
	pwrMat[2] = 0b00000000;
     d7c:	12 82       	std	Z+2, r1	; 0x02
	pwrMat[3] = 0b00000000;
     d7e:	13 82       	std	Z+3, r1	; 0x03
	pwrMat[4] = 0b00000000;
     d80:	14 82       	std	Z+4, r1	; 0x04
	pwrMat[5] = 0b00000000;
     d82:	15 82       	std	Z+5, r1	; 0x05
	pwrMat[6] = 0b00000100;
     d84:	84 e0       	ldi	r24, 0x04	; 4
     d86:	86 83       	std	Z+6, r24	; 0x06
	pwrMat[7] = 0b00001010;
     d88:	8a e0       	ldi	r24, 0x0A	; 10
     d8a:	87 83       	std	Z+7, r24	; 0x07
	pwrMat[8] = 0b00001000;
     d8c:	88 e0       	ldi	r24, 0x08	; 8
     d8e:	80 87       	std	Z+8, r24	; 0x08
	pwrMat[9] = 0b00001000;
     d90:	81 87       	std	Z+9, r24	; 0x09
	pwrMat[10] = 0b00011100;
     d92:	8c e1       	ldi	r24, 0x1C	; 28
     d94:	82 87       	std	Z+10, r24	; 0x0a
	pwrMat[11] = 0b00011010;
     d96:	8a e1       	ldi	r24, 0x1A	; 26
     d98:	83 87       	std	Z+11, r24	; 0x0b
	pwrMat[12] = 0b00011000;
     d9a:	88 e1       	ldi	r24, 0x18	; 24
     d9c:	84 87       	std	Z+12, r24	; 0x0c
	pwrMat[13] = 0b00011000;
     d9e:	85 87       	std	Z+13, r24	; 0x0d
	pwrMat[14] = 0b00000000;
     da0:	16 86       	std	Z+14, r1	; 0x0e
	pwrMat[15] = 0b10111100;
     da2:	8c eb       	ldi	r24, 0xBC	; 188
     da4:	87 87       	std	Z+15, r24	; 0x0f
	pwrMat[16] = 0b00111010;
     da6:	8a e3       	ldi	r24, 0x3A	; 58
     da8:	80 8b       	std	Z+16, r24	; 0x10
	pwrMat[17] = 0b00111000;
     daa:	88 e3       	ldi	r24, 0x38	; 56
     dac:	81 8b       	std	Z+17, r24	; 0x11
	pwrMat[18] = 0b00111000;
     dae:	82 8b       	std	Z+18, r24	; 0x12
	pwrMat[19] = 0b00000000;
     db0:	13 8a       	std	Z+19, r1	; 0x13
	pwrMat[20] = 0b11111100;
     db2:	8c ef       	ldi	r24, 0xFC	; 252
     db4:	84 8b       	std	Z+20, r24	; 0x14
	pwrMat[21] = 0b11111010;
     db6:	8a ef       	ldi	r24, 0xFA	; 250
     db8:	85 8b       	std	Z+21, r24	; 0x15
	pwrMat[22] = 0b11111000;
     dba:	88 ef       	ldi	r24, 0xF8	; 248
     dbc:	86 8b       	std	Z+22, r24	; 0x16
	pwrMat[23] = 0b11111000;
     dbe:	87 8b       	std	Z+23, r24	; 0x17
	pwrMat[24] = 0b00000000;
     dc0:	10 8e       	std	Z+24, r1	; 0x18
     dc2:	08 95       	ret

00000dc4 <PowerStateCheck>:
// Author: Kyle Andersen
// Date: 2019-03-20
// Description: 
/*========================================================================================*/

int PowerStateCheck(float SOC, float temp){
     dc4:	8f 92       	push	r8
     dc6:	9f 92       	push	r9
     dc8:	af 92       	push	r10
     dca:	bf 92       	push	r11
     dcc:	cf 92       	push	r12
     dce:	df 92       	push	r13
     dd0:	ef 92       	push	r14
     dd2:	ff 92       	push	r15
     dd4:	cf 93       	push	r28
     dd6:	6b 01       	movw	r12, r22
     dd8:	7c 01       	movw	r14, r24
     dda:	49 01       	movw	r8, r18
     ddc:	5a 01       	movw	r10, r20
	if(SOC < 20){
     dde:	20 e0       	ldi	r18, 0x00	; 0
     de0:	30 e0       	ldi	r19, 0x00	; 0
     de2:	40 ea       	ldi	r20, 0xA0	; 160
     de4:	51 e4       	ldi	r21, 0x41	; 65
     de6:	0e 94 52 0f 	call	0x1ea4	; 0x1ea4 <__cmpsf2>
     dea:	88 23       	and	r24, r24
     dec:	0c f0       	brlt	.+2      	; 0xdf0 <PowerStateCheck+0x2c>
     dee:	4f c0       	rjmp	.+158    	; 0xe8e <PowerStateCheck+0xca>
		if(temp >= 40){
     df0:	20 e0       	ldi	r18, 0x00	; 0
     df2:	30 e0       	ldi	r19, 0x00	; 0
     df4:	40 e2       	ldi	r20, 0x20	; 32
     df6:	52 e4       	ldi	r21, 0x42	; 66
     df8:	c5 01       	movw	r24, r10
     dfa:	b4 01       	movw	r22, r8
     dfc:	0e 94 70 10 	call	0x20e0	; 0x20e0 <__gesf2>
     e00:	88 23       	and	r24, r24
     e02:	0c f0       	brlt	.+2      	; 0xe06 <PowerStateCheck+0x42>
     e04:	b3 c1       	rjmp	.+870    	; 0x116c <PowerStateCheck+0x3a8>
			return 4;
		}//end else if
		else if(temp >= 30 && temp < 40){
     e06:	20 e0       	ldi	r18, 0x00	; 0
     e08:	30 e0       	ldi	r19, 0x00	; 0
     e0a:	40 ef       	ldi	r20, 0xF0	; 240
     e0c:	51 e4       	ldi	r21, 0x41	; 65
     e0e:	c5 01       	movw	r24, r10
     e10:	b4 01       	movw	r22, r8
     e12:	0e 94 70 10 	call	0x20e0	; 0x20e0 <__gesf2>
     e16:	88 23       	and	r24, r24
     e18:	5c f0       	brlt	.+22     	; 0xe30 <PowerStateCheck+0x6c>
     e1a:	20 e0       	ldi	r18, 0x00	; 0
     e1c:	30 e0       	ldi	r19, 0x00	; 0
     e1e:	40 e2       	ldi	r20, 0x20	; 32
     e20:	52 e4       	ldi	r21, 0x42	; 66
     e22:	c5 01       	movw	r24, r10
     e24:	b4 01       	movw	r22, r8
     e26:	0e 94 52 0f 	call	0x1ea4	; 0x1ea4 <__cmpsf2>
     e2a:	88 23       	and	r24, r24
     e2c:	0c f4       	brge	.+2      	; 0xe30 <PowerStateCheck+0x6c>
     e2e:	a1 c1       	rjmp	.+834    	; 0x1172 <PowerStateCheck+0x3ae>
			return 3;
		}//end else if
		else if(temp >= 15 && temp < 30){
     e30:	20 e0       	ldi	r18, 0x00	; 0
     e32:	30 e0       	ldi	r19, 0x00	; 0
     e34:	40 e7       	ldi	r20, 0x70	; 112
     e36:	51 e4       	ldi	r21, 0x41	; 65
     e38:	c5 01       	movw	r24, r10
     e3a:	b4 01       	movw	r22, r8
     e3c:	0e 94 70 10 	call	0x20e0	; 0x20e0 <__gesf2>
     e40:	88 23       	and	r24, r24
     e42:	5c f0       	brlt	.+22     	; 0xe5a <PowerStateCheck+0x96>
     e44:	20 e0       	ldi	r18, 0x00	; 0
     e46:	30 e0       	ldi	r19, 0x00	; 0
     e48:	40 ef       	ldi	r20, 0xF0	; 240
     e4a:	51 e4       	ldi	r21, 0x41	; 65
     e4c:	c5 01       	movw	r24, r10
     e4e:	b4 01       	movw	r22, r8
     e50:	0e 94 52 0f 	call	0x1ea4	; 0x1ea4 <__cmpsf2>
     e54:	88 23       	and	r24, r24
     e56:	0c f4       	brge	.+2      	; 0xe5a <PowerStateCheck+0x96>
     e58:	8f c1       	rjmp	.+798    	; 0x1178 <PowerStateCheck+0x3b4>
			return 2;
		}//end else if
		else if(temp >= 0 && temp < 15){
     e5a:	20 e0       	ldi	r18, 0x00	; 0
     e5c:	30 e0       	ldi	r19, 0x00	; 0
     e5e:	a9 01       	movw	r20, r18
     e60:	c5 01       	movw	r24, r10
     e62:	b4 01       	movw	r22, r8
     e64:	0e 94 70 10 	call	0x20e0	; 0x20e0 <__gesf2>
     e68:	88 23       	and	r24, r24
     e6a:	0c f4       	brge	.+2      	; 0xe6e <PowerStateCheck+0xaa>
     e6c:	88 c1       	rjmp	.+784    	; 0x117e <PowerStateCheck+0x3ba>
/*========================================================================================*/

int PowerStateCheck(float SOC, float temp){
	if(SOC < 20){
		if(temp >= 40){
			return 4;
     e6e:	c1 e0       	ldi	r28, 0x01	; 1
     e70:	f1 2c       	mov	r15, r1
     e72:	20 e0       	ldi	r18, 0x00	; 0
     e74:	30 e0       	ldi	r19, 0x00	; 0
     e76:	40 e7       	ldi	r20, 0x70	; 112
     e78:	51 e4       	ldi	r21, 0x41	; 65
     e7a:	c5 01       	movw	r24, r10
     e7c:	b4 01       	movw	r22, r8
     e7e:	0e 94 52 0f 	call	0x1ea4	; 0x1ea4 <__cmpsf2>
     e82:	88 23       	and	r24, r24
     e84:	0c f0       	brlt	.+2      	; 0xe88 <PowerStateCheck+0xc4>
     e86:	c0 e0       	ldi	r28, 0x00	; 0
     e88:	8c 2f       	mov	r24, r28
     e8a:	9f 2d       	mov	r25, r15
     e8c:	b6 c1       	rjmp	.+876    	; 0x11fa <PowerStateCheck+0x436>
		}//end else if
		else{
			return 0;
		}//end else
	}//end if SOC < 20
	else if(SOC < 40 && SOC >= 20){
     e8e:	20 e0       	ldi	r18, 0x00	; 0
     e90:	30 e0       	ldi	r19, 0x00	; 0
     e92:	40 e2       	ldi	r20, 0x20	; 32
     e94:	52 e4       	ldi	r21, 0x42	; 66
     e96:	c7 01       	movw	r24, r14
     e98:	b6 01       	movw	r22, r12
     e9a:	0e 94 52 0f 	call	0x1ea4	; 0x1ea4 <__cmpsf2>
     e9e:	88 23       	and	r24, r24
     ea0:	0c f0       	brlt	.+2      	; 0xea4 <PowerStateCheck+0xe0>
     ea2:	58 c0       	rjmp	.+176    	; 0xf54 <PowerStateCheck+0x190>
     ea4:	20 e0       	ldi	r18, 0x00	; 0
     ea6:	30 e0       	ldi	r19, 0x00	; 0
     ea8:	40 ea       	ldi	r20, 0xA0	; 160
     eaa:	51 e4       	ldi	r21, 0x41	; 65
     eac:	c7 01       	movw	r24, r14
     eae:	b6 01       	movw	r22, r12
     eb0:	0e 94 70 10 	call	0x20e0	; 0x20e0 <__gesf2>
     eb4:	88 23       	and	r24, r24
     eb6:	0c f4       	brge	.+2      	; 0xeba <PowerStateCheck+0xf6>
     eb8:	4d c0       	rjmp	.+154    	; 0xf54 <PowerStateCheck+0x190>
		if(temp >= 40){
     eba:	20 e0       	ldi	r18, 0x00	; 0
     ebc:	30 e0       	ldi	r19, 0x00	; 0
     ebe:	40 e2       	ldi	r20, 0x20	; 32
     ec0:	52 e4       	ldi	r21, 0x42	; 66
     ec2:	c5 01       	movw	r24, r10
     ec4:	b4 01       	movw	r22, r8
     ec6:	0e 94 70 10 	call	0x20e0	; 0x20e0 <__gesf2>
     eca:	88 23       	and	r24, r24
     ecc:	0c f0       	brlt	.+2      	; 0xed0 <PowerStateCheck+0x10c>
     ece:	5a c1       	rjmp	.+692    	; 0x1184 <PowerStateCheck+0x3c0>
			return 9;
		}//end else if
		else if(temp >= 30 && temp < 40){
     ed0:	20 e0       	ldi	r18, 0x00	; 0
     ed2:	30 e0       	ldi	r19, 0x00	; 0
     ed4:	40 ef       	ldi	r20, 0xF0	; 240
     ed6:	51 e4       	ldi	r21, 0x41	; 65
     ed8:	c5 01       	movw	r24, r10
     eda:	b4 01       	movw	r22, r8
     edc:	0e 94 70 10 	call	0x20e0	; 0x20e0 <__gesf2>
     ee0:	88 23       	and	r24, r24
     ee2:	54 f0       	brlt	.+20     	; 0xef8 <PowerStateCheck+0x134>
     ee4:	20 e0       	ldi	r18, 0x00	; 0
     ee6:	30 e0       	ldi	r19, 0x00	; 0
     ee8:	40 e2       	ldi	r20, 0x20	; 32
     eea:	52 e4       	ldi	r21, 0x42	; 66
     eec:	c5 01       	movw	r24, r10
     eee:	b4 01       	movw	r22, r8
     ef0:	d9 d7       	rcall	.+4018   	; 0x1ea4 <__cmpsf2>
     ef2:	88 23       	and	r24, r24
     ef4:	0c f4       	brge	.+2      	; 0xef8 <PowerStateCheck+0x134>
     ef6:	49 c1       	rjmp	.+658    	; 0x118a <PowerStateCheck+0x3c6>
			return 8;
		}//end else if
		else if(temp >= 15 && temp < 30){
     ef8:	20 e0       	ldi	r18, 0x00	; 0
     efa:	30 e0       	ldi	r19, 0x00	; 0
     efc:	40 e7       	ldi	r20, 0x70	; 112
     efe:	51 e4       	ldi	r21, 0x41	; 65
     f00:	c5 01       	movw	r24, r10
     f02:	b4 01       	movw	r22, r8
     f04:	0e 94 70 10 	call	0x20e0	; 0x20e0 <__gesf2>
     f08:	88 23       	and	r24, r24
     f0a:	54 f0       	brlt	.+20     	; 0xf20 <PowerStateCheck+0x15c>
     f0c:	20 e0       	ldi	r18, 0x00	; 0
     f0e:	30 e0       	ldi	r19, 0x00	; 0
     f10:	40 ef       	ldi	r20, 0xF0	; 240
     f12:	51 e4       	ldi	r21, 0x41	; 65
     f14:	c5 01       	movw	r24, r10
     f16:	b4 01       	movw	r22, r8
     f18:	c5 d7       	rcall	.+3978   	; 0x1ea4 <__cmpsf2>
     f1a:	88 23       	and	r24, r24
     f1c:	0c f4       	brge	.+2      	; 0xf20 <PowerStateCheck+0x15c>
     f1e:	38 c1       	rjmp	.+624    	; 0x1190 <PowerStateCheck+0x3cc>
			return 7;
		}//end else if
		else if(temp >= 0 && temp < 15){
     f20:	20 e0       	ldi	r18, 0x00	; 0
     f22:	30 e0       	ldi	r19, 0x00	; 0
     f24:	a9 01       	movw	r20, r18
     f26:	c5 01       	movw	r24, r10
     f28:	b4 01       	movw	r22, r8
     f2a:	0e 94 70 10 	call	0x20e0	; 0x20e0 <__gesf2>
     f2e:	88 23       	and	r24, r24
     f30:	0c f4       	brge	.+2      	; 0xf34 <PowerStateCheck+0x170>
     f32:	31 c1       	rjmp	.+610    	; 0x1196 <PowerStateCheck+0x3d2>
     f34:	20 e0       	ldi	r18, 0x00	; 0
     f36:	30 e0       	ldi	r19, 0x00	; 0
     f38:	40 e7       	ldi	r20, 0x70	; 112
     f3a:	51 e4       	ldi	r21, 0x41	; 65
     f3c:	c5 01       	movw	r24, r10
     f3e:	b4 01       	movw	r22, r8
     f40:	b1 d7       	rcall	.+3938   	; 0x1ea4 <__cmpsf2>
			return 6;
		}//end else if
		else{
			return 5;
     f42:	08 2e       	mov	r0, r24
     f44:	00 0c       	add	r0, r0
     f46:	99 0b       	sbc	r25, r25
     f48:	88 27       	eor	r24, r24
     f4a:	99 0f       	add	r25, r25
     f4c:	88 1f       	adc	r24, r24
     f4e:	99 27       	eor	r25, r25
     f50:	05 96       	adiw	r24, 0x05	; 5
     f52:	53 c1       	rjmp	.+678    	; 0x11fa <PowerStateCheck+0x436>
		}//end else
	}//end else if SOC < 40
	else if(SOC < 60 && SOC >= 40){
     f54:	20 e0       	ldi	r18, 0x00	; 0
     f56:	30 e0       	ldi	r19, 0x00	; 0
     f58:	40 e7       	ldi	r20, 0x70	; 112
     f5a:	52 e4       	ldi	r21, 0x42	; 66
     f5c:	c7 01       	movw	r24, r14
     f5e:	b6 01       	movw	r22, r12
     f60:	a1 d7       	rcall	.+3906   	; 0x1ea4 <__cmpsf2>
     f62:	88 23       	and	r24, r24
     f64:	0c f0       	brlt	.+2      	; 0xf68 <PowerStateCheck+0x1a4>
     f66:	58 c0       	rjmp	.+176    	; 0x1018 <PowerStateCheck+0x254>
     f68:	20 e0       	ldi	r18, 0x00	; 0
     f6a:	30 e0       	ldi	r19, 0x00	; 0
     f6c:	40 e2       	ldi	r20, 0x20	; 32
     f6e:	52 e4       	ldi	r21, 0x42	; 66
     f70:	c7 01       	movw	r24, r14
     f72:	b6 01       	movw	r22, r12
     f74:	0e 94 70 10 	call	0x20e0	; 0x20e0 <__gesf2>
     f78:	88 23       	and	r24, r24
     f7a:	0c f4       	brge	.+2      	; 0xf7e <PowerStateCheck+0x1ba>
     f7c:	33 c1       	rjmp	.+614    	; 0x11e4 <PowerStateCheck+0x420>
		if(temp >= 40){
     f7e:	20 e0       	ldi	r18, 0x00	; 0
     f80:	30 e0       	ldi	r19, 0x00	; 0
     f82:	40 e2       	ldi	r20, 0x20	; 32
     f84:	52 e4       	ldi	r21, 0x42	; 66
     f86:	c5 01       	movw	r24, r10
     f88:	b4 01       	movw	r22, r8
     f8a:	0e 94 70 10 	call	0x20e0	; 0x20e0 <__gesf2>
     f8e:	88 23       	and	r24, r24
     f90:	0c f0       	brlt	.+2      	; 0xf94 <PowerStateCheck+0x1d0>
     f92:	04 c1       	rjmp	.+520    	; 0x119c <PowerStateCheck+0x3d8>
			return 14;
		}//end else if
		else if(temp >= 30 && temp < 40){
     f94:	20 e0       	ldi	r18, 0x00	; 0
     f96:	30 e0       	ldi	r19, 0x00	; 0
     f98:	40 ef       	ldi	r20, 0xF0	; 240
     f9a:	51 e4       	ldi	r21, 0x41	; 65
     f9c:	c5 01       	movw	r24, r10
     f9e:	b4 01       	movw	r22, r8
     fa0:	0e 94 70 10 	call	0x20e0	; 0x20e0 <__gesf2>
     fa4:	88 23       	and	r24, r24
     fa6:	54 f0       	brlt	.+20     	; 0xfbc <PowerStateCheck+0x1f8>
     fa8:	20 e0       	ldi	r18, 0x00	; 0
     faa:	30 e0       	ldi	r19, 0x00	; 0
     fac:	40 e2       	ldi	r20, 0x20	; 32
     fae:	52 e4       	ldi	r21, 0x42	; 66
     fb0:	c5 01       	movw	r24, r10
     fb2:	b4 01       	movw	r22, r8
     fb4:	77 d7       	rcall	.+3822   	; 0x1ea4 <__cmpsf2>
     fb6:	88 23       	and	r24, r24
     fb8:	0c f4       	brge	.+2      	; 0xfbc <PowerStateCheck+0x1f8>
     fba:	f3 c0       	rjmp	.+486    	; 0x11a2 <PowerStateCheck+0x3de>
			return 13;
		}//end else if
		else if(temp >= 15 && temp < 30){
     fbc:	20 e0       	ldi	r18, 0x00	; 0
     fbe:	30 e0       	ldi	r19, 0x00	; 0
     fc0:	40 e7       	ldi	r20, 0x70	; 112
     fc2:	51 e4       	ldi	r21, 0x41	; 65
     fc4:	c5 01       	movw	r24, r10
     fc6:	b4 01       	movw	r22, r8
     fc8:	0e 94 70 10 	call	0x20e0	; 0x20e0 <__gesf2>
     fcc:	88 23       	and	r24, r24
     fce:	54 f0       	brlt	.+20     	; 0xfe4 <PowerStateCheck+0x220>
     fd0:	20 e0       	ldi	r18, 0x00	; 0
     fd2:	30 e0       	ldi	r19, 0x00	; 0
     fd4:	40 ef       	ldi	r20, 0xF0	; 240
     fd6:	51 e4       	ldi	r21, 0x41	; 65
     fd8:	c5 01       	movw	r24, r10
     fda:	b4 01       	movw	r22, r8
     fdc:	63 d7       	rcall	.+3782   	; 0x1ea4 <__cmpsf2>
     fde:	88 23       	and	r24, r24
     fe0:	0c f4       	brge	.+2      	; 0xfe4 <PowerStateCheck+0x220>
     fe2:	e2 c0       	rjmp	.+452    	; 0x11a8 <PowerStateCheck+0x3e4>
			return 12;
		}//end else if
		else if(temp >= 0 && temp < 15){
     fe4:	20 e0       	ldi	r18, 0x00	; 0
     fe6:	30 e0       	ldi	r19, 0x00	; 0
     fe8:	a9 01       	movw	r20, r18
     fea:	c5 01       	movw	r24, r10
     fec:	b4 01       	movw	r22, r8
     fee:	0e 94 70 10 	call	0x20e0	; 0x20e0 <__gesf2>
     ff2:	88 23       	and	r24, r24
     ff4:	0c f4       	brge	.+2      	; 0xff8 <PowerStateCheck+0x234>
     ff6:	db c0       	rjmp	.+438    	; 0x11ae <PowerStateCheck+0x3ea>
     ff8:	20 e0       	ldi	r18, 0x00	; 0
     ffa:	30 e0       	ldi	r19, 0x00	; 0
     ffc:	40 e7       	ldi	r20, 0x70	; 112
     ffe:	51 e4       	ldi	r21, 0x41	; 65
    1000:	c5 01       	movw	r24, r10
    1002:	b4 01       	movw	r22, r8
    1004:	4f d7       	rcall	.+3742   	; 0x1ea4 <__cmpsf2>
			return 11;
		}//end else if
		else{
			return 10;
    1006:	08 2e       	mov	r0, r24
    1008:	00 0c       	add	r0, r0
    100a:	99 0b       	sbc	r25, r25
    100c:	88 27       	eor	r24, r24
    100e:	99 0f       	add	r25, r25
    1010:	88 1f       	adc	r24, r24
    1012:	99 27       	eor	r25, r25
    1014:	0a 96       	adiw	r24, 0x0a	; 10
    1016:	f1 c0       	rjmp	.+482    	; 0x11fa <PowerStateCheck+0x436>
		}//end else
	}//end if SOC < 60
	else if(SOC < 80 && SOC <= 60){
    1018:	20 e0       	ldi	r18, 0x00	; 0
    101a:	30 e0       	ldi	r19, 0x00	; 0
    101c:	40 ea       	ldi	r20, 0xA0	; 160
    101e:	52 e4       	ldi	r21, 0x42	; 66
    1020:	c7 01       	movw	r24, r14
    1022:	b6 01       	movw	r22, r12
    1024:	3f d7       	rcall	.+3710   	; 0x1ea4 <__cmpsf2>
    1026:	88 23       	and	r24, r24
    1028:	0c f0       	brlt	.+2      	; 0x102c <PowerStateCheck+0x268>
    102a:	57 c0       	rjmp	.+174    	; 0x10da <PowerStateCheck+0x316>
    102c:	20 e0       	ldi	r18, 0x00	; 0
    102e:	30 e0       	ldi	r19, 0x00	; 0
    1030:	40 e7       	ldi	r20, 0x70	; 112
    1032:	52 e4       	ldi	r21, 0x42	; 66
    1034:	c7 01       	movw	r24, r14
    1036:	b6 01       	movw	r22, r12
    1038:	35 d7       	rcall	.+3690   	; 0x1ea4 <__cmpsf2>
    103a:	18 16       	cp	r1, r24
    103c:	0c f4       	brge	.+2      	; 0x1040 <PowerStateCheck+0x27c>
    103e:	4d c0       	rjmp	.+154    	; 0x10da <PowerStateCheck+0x316>
		if(temp >= 40){
    1040:	20 e0       	ldi	r18, 0x00	; 0
    1042:	30 e0       	ldi	r19, 0x00	; 0
    1044:	40 e2       	ldi	r20, 0x20	; 32
    1046:	52 e4       	ldi	r21, 0x42	; 66
    1048:	c5 01       	movw	r24, r10
    104a:	b4 01       	movw	r22, r8
    104c:	0e 94 70 10 	call	0x20e0	; 0x20e0 <__gesf2>
    1050:	88 23       	and	r24, r24
    1052:	0c f0       	brlt	.+2      	; 0x1056 <PowerStateCheck+0x292>
    1054:	af c0       	rjmp	.+350    	; 0x11b4 <PowerStateCheck+0x3f0>
			return 19;
		}//end else if
		else if(temp >= 30 && temp < 40){
    1056:	20 e0       	ldi	r18, 0x00	; 0
    1058:	30 e0       	ldi	r19, 0x00	; 0
    105a:	40 ef       	ldi	r20, 0xF0	; 240
    105c:	51 e4       	ldi	r21, 0x41	; 65
    105e:	c5 01       	movw	r24, r10
    1060:	b4 01       	movw	r22, r8
    1062:	0e 94 70 10 	call	0x20e0	; 0x20e0 <__gesf2>
    1066:	88 23       	and	r24, r24
    1068:	54 f0       	brlt	.+20     	; 0x107e <PowerStateCheck+0x2ba>
    106a:	20 e0       	ldi	r18, 0x00	; 0
    106c:	30 e0       	ldi	r19, 0x00	; 0
    106e:	40 e2       	ldi	r20, 0x20	; 32
    1070:	52 e4       	ldi	r21, 0x42	; 66
    1072:	c5 01       	movw	r24, r10
    1074:	b4 01       	movw	r22, r8
    1076:	16 d7       	rcall	.+3628   	; 0x1ea4 <__cmpsf2>
    1078:	88 23       	and	r24, r24
    107a:	0c f4       	brge	.+2      	; 0x107e <PowerStateCheck+0x2ba>
    107c:	9e c0       	rjmp	.+316    	; 0x11ba <PowerStateCheck+0x3f6>
			return 18;
		}//end else if
		else if(temp >= 15 && temp < 30){
    107e:	20 e0       	ldi	r18, 0x00	; 0
    1080:	30 e0       	ldi	r19, 0x00	; 0
    1082:	40 e7       	ldi	r20, 0x70	; 112
    1084:	51 e4       	ldi	r21, 0x41	; 65
    1086:	c5 01       	movw	r24, r10
    1088:	b4 01       	movw	r22, r8
    108a:	0e 94 70 10 	call	0x20e0	; 0x20e0 <__gesf2>
    108e:	88 23       	and	r24, r24
    1090:	54 f0       	brlt	.+20     	; 0x10a6 <PowerStateCheck+0x2e2>
    1092:	20 e0       	ldi	r18, 0x00	; 0
    1094:	30 e0       	ldi	r19, 0x00	; 0
    1096:	40 ef       	ldi	r20, 0xF0	; 240
    1098:	51 e4       	ldi	r21, 0x41	; 65
    109a:	c5 01       	movw	r24, r10
    109c:	b4 01       	movw	r22, r8
    109e:	02 d7       	rcall	.+3588   	; 0x1ea4 <__cmpsf2>
    10a0:	88 23       	and	r24, r24
    10a2:	0c f4       	brge	.+2      	; 0x10a6 <PowerStateCheck+0x2e2>
    10a4:	8d c0       	rjmp	.+282    	; 0x11c0 <PowerStateCheck+0x3fc>
			return 17;
		}//end else if
		else if(temp >= 0 && temp < 15){
    10a6:	20 e0       	ldi	r18, 0x00	; 0
    10a8:	30 e0       	ldi	r19, 0x00	; 0
    10aa:	a9 01       	movw	r20, r18
    10ac:	c5 01       	movw	r24, r10
    10ae:	b4 01       	movw	r22, r8
    10b0:	0e 94 70 10 	call	0x20e0	; 0x20e0 <__gesf2>
    10b4:	88 23       	and	r24, r24
    10b6:	0c f4       	brge	.+2      	; 0x10ba <PowerStateCheck+0x2f6>
    10b8:	86 c0       	rjmp	.+268    	; 0x11c6 <PowerStateCheck+0x402>
    10ba:	20 e0       	ldi	r18, 0x00	; 0
    10bc:	30 e0       	ldi	r19, 0x00	; 0
    10be:	40 e7       	ldi	r20, 0x70	; 112
    10c0:	51 e4       	ldi	r21, 0x41	; 65
    10c2:	c5 01       	movw	r24, r10
    10c4:	b4 01       	movw	r22, r8
    10c6:	ee d6       	rcall	.+3548   	; 0x1ea4 <__cmpsf2>
			return 16;
		}//end else if
		else{
			return 15;
    10c8:	08 2e       	mov	r0, r24
    10ca:	00 0c       	add	r0, r0
    10cc:	99 0b       	sbc	r25, r25
    10ce:	88 27       	eor	r24, r24
    10d0:	99 0f       	add	r25, r25
    10d2:	88 1f       	adc	r24, r24
    10d4:	99 27       	eor	r25, r25
    10d6:	0f 96       	adiw	r24, 0x0f	; 15
		}//end else
	}//end if SOC < 80
	else {
		if(temp >= 40){
    10d8:	90 c0       	rjmp	.+288    	; 0x11fa <PowerStateCheck+0x436>
    10da:	20 e0       	ldi	r18, 0x00	; 0
    10dc:	30 e0       	ldi	r19, 0x00	; 0
    10de:	40 e2       	ldi	r20, 0x20	; 32
    10e0:	52 e4       	ldi	r21, 0x42	; 66
    10e2:	c5 01       	movw	r24, r10
    10e4:	b4 01       	movw	r22, r8
    10e6:	fc d7       	rcall	.+4088   	; 0x20e0 <__gesf2>
    10e8:	88 23       	and	r24, r24
    10ea:	0c f0       	brlt	.+2      	; 0x10ee <PowerStateCheck+0x32a>
			return 24;
		}//end else if
		else if(temp >= 30 && temp < 40){
    10ec:	6f c0       	rjmp	.+222    	; 0x11cc <PowerStateCheck+0x408>
    10ee:	20 e0       	ldi	r18, 0x00	; 0
    10f0:	30 e0       	ldi	r19, 0x00	; 0
    10f2:	40 ef       	ldi	r20, 0xF0	; 240
    10f4:	51 e4       	ldi	r21, 0x41	; 65
    10f6:	c5 01       	movw	r24, r10
    10f8:	b4 01       	movw	r22, r8
    10fa:	f2 d7       	rcall	.+4068   	; 0x20e0 <__gesf2>
    10fc:	88 23       	and	r24, r24
    10fe:	54 f0       	brlt	.+20     	; 0x1114 <PowerStateCheck+0x350>
    1100:	20 e0       	ldi	r18, 0x00	; 0
    1102:	30 e0       	ldi	r19, 0x00	; 0
    1104:	40 e2       	ldi	r20, 0x20	; 32
    1106:	52 e4       	ldi	r21, 0x42	; 66
    1108:	c5 01       	movw	r24, r10
    110a:	b4 01       	movw	r22, r8
    110c:	cb d6       	rcall	.+3478   	; 0x1ea4 <__cmpsf2>
    110e:	88 23       	and	r24, r24
    1110:	0c f4       	brge	.+2      	; 0x1114 <PowerStateCheck+0x350>
			return 23;
		}//end else if
		else if(temp >= 15 && temp < 30){
    1112:	5f c0       	rjmp	.+190    	; 0x11d2 <PowerStateCheck+0x40e>
    1114:	20 e0       	ldi	r18, 0x00	; 0
    1116:	30 e0       	ldi	r19, 0x00	; 0
    1118:	40 e7       	ldi	r20, 0x70	; 112
    111a:	51 e4       	ldi	r21, 0x41	; 65
    111c:	c5 01       	movw	r24, r10
    111e:	b4 01       	movw	r22, r8
    1120:	df d7       	rcall	.+4030   	; 0x20e0 <__gesf2>
    1122:	88 23       	and	r24, r24
    1124:	54 f0       	brlt	.+20     	; 0x113a <PowerStateCheck+0x376>
    1126:	20 e0       	ldi	r18, 0x00	; 0
    1128:	30 e0       	ldi	r19, 0x00	; 0
    112a:	40 ef       	ldi	r20, 0xF0	; 240
    112c:	51 e4       	ldi	r21, 0x41	; 65
    112e:	c5 01       	movw	r24, r10
    1130:	b4 01       	movw	r22, r8
    1132:	b8 d6       	rcall	.+3440   	; 0x1ea4 <__cmpsf2>
    1134:	88 23       	and	r24, r24
    1136:	0c f4       	brge	.+2      	; 0x113a <PowerStateCheck+0x376>
			return 22;
		}//end else if
		else if(temp >= 0 && temp < 15){
    1138:	4f c0       	rjmp	.+158    	; 0x11d8 <PowerStateCheck+0x414>
    113a:	20 e0       	ldi	r18, 0x00	; 0
    113c:	30 e0       	ldi	r19, 0x00	; 0
    113e:	a9 01       	movw	r20, r18
    1140:	c5 01       	movw	r24, r10
    1142:	b4 01       	movw	r22, r8
    1144:	cd d7       	rcall	.+3994   	; 0x20e0 <__gesf2>
    1146:	88 23       	and	r24, r24
    1148:	0c f4       	brge	.+2      	; 0x114c <PowerStateCheck+0x388>
    114a:	49 c0       	rjmp	.+146    	; 0x11de <PowerStateCheck+0x41a>
    114c:	20 e0       	ldi	r18, 0x00	; 0
    114e:	30 e0       	ldi	r19, 0x00	; 0
    1150:	40 e7       	ldi	r20, 0x70	; 112
    1152:	51 e4       	ldi	r21, 0x41	; 65
    1154:	c5 01       	movw	r24, r10
    1156:	b4 01       	movw	r22, r8
    1158:	a5 d6       	rcall	.+3402   	; 0x1ea4 <__cmpsf2>
			return 21;
		}//end else if
		else{
			return 20;
    115a:	08 2e       	mov	r0, r24
    115c:	00 0c       	add	r0, r0
    115e:	99 0b       	sbc	r25, r25
    1160:	88 27       	eor	r24, r24
    1162:	99 0f       	add	r25, r25
    1164:	88 1f       	adc	r24, r24
    1166:	99 27       	eor	r25, r25
    1168:	44 96       	adiw	r24, 0x14	; 20
    116a:	47 c0       	rjmp	.+142    	; 0x11fa <PowerStateCheck+0x436>
/*========================================================================================*/

int PowerStateCheck(float SOC, float temp){
	if(SOC < 20){
		if(temp >= 40){
			return 4;
    116c:	84 e0       	ldi	r24, 0x04	; 4
    116e:	90 e0       	ldi	r25, 0x00	; 0
    1170:	44 c0       	rjmp	.+136    	; 0x11fa <PowerStateCheck+0x436>
		}//end else if
		else if(temp >= 30 && temp < 40){
			return 3;
    1172:	83 e0       	ldi	r24, 0x03	; 3
    1174:	90 e0       	ldi	r25, 0x00	; 0
    1176:	41 c0       	rjmp	.+130    	; 0x11fa <PowerStateCheck+0x436>
		}//end else if
		else if(temp >= 15 && temp < 30){
			return 2;
    1178:	82 e0       	ldi	r24, 0x02	; 2
    117a:	90 e0       	ldi	r25, 0x00	; 0
    117c:	3e c0       	rjmp	.+124    	; 0x11fa <PowerStateCheck+0x436>
		}//end else if
		else if(temp >= 0 && temp < 15){
			return 1;
		}//end else if
		else{
			return 0;
    117e:	80 e0       	ldi	r24, 0x00	; 0
    1180:	90 e0       	ldi	r25, 0x00	; 0
    1182:	3b c0       	rjmp	.+118    	; 0x11fa <PowerStateCheck+0x436>
		}//end else
	}//end if SOC < 20
	else if(SOC < 40 && SOC >= 20){
		if(temp >= 40){
			return 9;
    1184:	89 e0       	ldi	r24, 0x09	; 9
    1186:	90 e0       	ldi	r25, 0x00	; 0
    1188:	38 c0       	rjmp	.+112    	; 0x11fa <PowerStateCheck+0x436>
		}//end else if
		else if(temp >= 30 && temp < 40){
			return 8;
    118a:	88 e0       	ldi	r24, 0x08	; 8
    118c:	90 e0       	ldi	r25, 0x00	; 0
    118e:	35 c0       	rjmp	.+106    	; 0x11fa <PowerStateCheck+0x436>
		}//end else if
		else if(temp >= 15 && temp < 30){
			return 7;
    1190:	87 e0       	ldi	r24, 0x07	; 7
    1192:	90 e0       	ldi	r25, 0x00	; 0
    1194:	32 c0       	rjmp	.+100    	; 0x11fa <PowerStateCheck+0x436>
		}//end else if
		else if(temp >= 0 && temp < 15){
			return 6;
		}//end else if
		else{
			return 5;
    1196:	85 e0       	ldi	r24, 0x05	; 5
    1198:	90 e0       	ldi	r25, 0x00	; 0
    119a:	2f c0       	rjmp	.+94     	; 0x11fa <PowerStateCheck+0x436>
		}//end else
	}//end else if SOC < 40
	else if(SOC < 60 && SOC >= 40){
		if(temp >= 40){
			return 14;
    119c:	8e e0       	ldi	r24, 0x0E	; 14
    119e:	90 e0       	ldi	r25, 0x00	; 0
    11a0:	2c c0       	rjmp	.+88     	; 0x11fa <PowerStateCheck+0x436>
		}//end else if
		else if(temp >= 30 && temp < 40){
			return 13;
    11a2:	8d e0       	ldi	r24, 0x0D	; 13
    11a4:	90 e0       	ldi	r25, 0x00	; 0
    11a6:	29 c0       	rjmp	.+82     	; 0x11fa <PowerStateCheck+0x436>
		}//end else if
		else if(temp >= 15 && temp < 30){
			return 12;
    11a8:	8c e0       	ldi	r24, 0x0C	; 12
    11aa:	90 e0       	ldi	r25, 0x00	; 0
    11ac:	26 c0       	rjmp	.+76     	; 0x11fa <PowerStateCheck+0x436>
		}//end else if
		else if(temp >= 0 && temp < 15){
			return 11;
		}//end else if
		else{
			return 10;
    11ae:	8a e0       	ldi	r24, 0x0A	; 10
    11b0:	90 e0       	ldi	r25, 0x00	; 0
    11b2:	23 c0       	rjmp	.+70     	; 0x11fa <PowerStateCheck+0x436>
		}//end else
	}//end if SOC < 60
	else if(SOC < 80 && SOC <= 60){
		if(temp >= 40){
			return 19;
    11b4:	83 e1       	ldi	r24, 0x13	; 19
    11b6:	90 e0       	ldi	r25, 0x00	; 0
    11b8:	20 c0       	rjmp	.+64     	; 0x11fa <PowerStateCheck+0x436>
		}//end else if
		else if(temp >= 30 && temp < 40){
			return 18;
    11ba:	82 e1       	ldi	r24, 0x12	; 18
    11bc:	90 e0       	ldi	r25, 0x00	; 0
    11be:	1d c0       	rjmp	.+58     	; 0x11fa <PowerStateCheck+0x436>
		}//end else if
		else if(temp >= 15 && temp < 30){
			return 17;
    11c0:	81 e1       	ldi	r24, 0x11	; 17
    11c2:	90 e0       	ldi	r25, 0x00	; 0
    11c4:	1a c0       	rjmp	.+52     	; 0x11fa <PowerStateCheck+0x436>
		}//end else if
		else if(temp >= 0 && temp < 15){
			return 16;
		}//end else if
		else{
			return 15;
    11c6:	8f e0       	ldi	r24, 0x0F	; 15
    11c8:	90 e0       	ldi	r25, 0x00	; 0
    11ca:	17 c0       	rjmp	.+46     	; 0x11fa <PowerStateCheck+0x436>
		}//end else
	}//end if SOC < 80
	else {
		if(temp >= 40){
			return 24;
    11cc:	88 e1       	ldi	r24, 0x18	; 24
    11ce:	90 e0       	ldi	r25, 0x00	; 0
    11d0:	14 c0       	rjmp	.+40     	; 0x11fa <PowerStateCheck+0x436>
		}//end else if
		else if(temp >= 30 && temp < 40){
			return 23;
    11d2:	87 e1       	ldi	r24, 0x17	; 23
    11d4:	90 e0       	ldi	r25, 0x00	; 0
    11d6:	11 c0       	rjmp	.+34     	; 0x11fa <PowerStateCheck+0x436>
		}//end else if
		else if(temp >= 15 && temp < 30){
			return 22;
    11d8:	86 e1       	ldi	r24, 0x16	; 22
    11da:	90 e0       	ldi	r25, 0x00	; 0
		}//end else if
		else if(temp >= 0 && temp < 15){
			return 21;
		}//end else if
		else{
			return 20;
    11dc:	0e c0       	rjmp	.+28     	; 0x11fa <PowerStateCheck+0x436>
    11de:	84 e1       	ldi	r24, 0x14	; 20
    11e0:	90 e0       	ldi	r25, 0x00	; 0
		}//end else if
		else{
			return 10;
		}//end else
	}//end if SOC < 60
	else if(SOC < 80 && SOC <= 60){
    11e2:	0b c0       	rjmp	.+22     	; 0x11fa <PowerStateCheck+0x436>
    11e4:	20 e0       	ldi	r18, 0x00	; 0
    11e6:	30 e0       	ldi	r19, 0x00	; 0
    11e8:	40 ea       	ldi	r20, 0xA0	; 160
    11ea:	52 e4       	ldi	r21, 0x42	; 66
    11ec:	c7 01       	movw	r24, r14
    11ee:	b6 01       	movw	r22, r12
    11f0:	59 d6       	rcall	.+3250   	; 0x1ea4 <__cmpsf2>
    11f2:	88 23       	and	r24, r24
    11f4:	0c f4       	brge	.+2      	; 0x11f8 <PowerStateCheck+0x434>
    11f6:	24 cf       	rjmp	.-440    	; 0x1040 <PowerStateCheck+0x27c>
    11f8:	70 cf       	rjmp	.-288    	; 0x10da <PowerStateCheck+0x316>
		}//end else if
		else{
			return 20;
		}//end else
	}//end else SOC > 80
}//end PowerStateCheck
    11fa:	cf 91       	pop	r28
    11fc:	ff 90       	pop	r15
    11fe:	ef 90       	pop	r14
    1200:	df 90       	pop	r13
    1202:	cf 90       	pop	r12
    1204:	bf 90       	pop	r11
    1206:	af 90       	pop	r10
    1208:	9f 90       	pop	r9
    120a:	8f 90       	pop	r8
    120c:	08 95       	ret

0000120e <Update_STATE>:
// Date: 2019-03-25
// Description: Updates to the state to character array form for ease of use as it is
//				impossbile to read individual bits in a unsigned integer.
/*========================================================================================*/

void Update_STATE(char* power, uint8_t state){
    120e:	fc 01       	movw	r30, r24
    1210:	ac 01       	movw	r20, r24
    1212:	48 5f       	subi	r20, 0xF8	; 248
    1214:	5f 4f       	sbci	r21, 0xFF	; 255
	power[6] => SBand   Power
	power[7] => UHF     Power	
	*/
	
	// 8 bit mask to check the state of each position
	uint8_t mask = 0x01;
    1216:	91 e0       	ldi	r25, 0x01	; 1
		if (mask & state){
			power[i] = 'y';
			mask = mask << 1; // shift left once
		}
		else{
			power[i] = 'n';
    1218:	3e e6       	ldi	r19, 0x6E	; 110
	uint8_t mask = 0x01;
	// keep track of the first index
	
	while(i < 8){
		if (mask & state){
			power[i] = 'y';
    121a:	89 e7       	ldi	r24, 0x79	; 121
	// 8 bit mask to check the state of each position
	uint8_t mask = 0x01;
	// keep track of the first index
	
	while(i < 8){
		if (mask & state){
    121c:	26 2f       	mov	r18, r22
    121e:	29 23       	and	r18, r25
    1220:	19 f0       	breq	.+6      	; 0x1228 <Update_STATE+0x1a>
			power[i] = 'y';
    1222:	80 83       	st	Z, r24
			mask = mask << 1; // shift left once
    1224:	99 0f       	add	r25, r25
    1226:	02 c0       	rjmp	.+4      	; 0x122c <Update_STATE+0x1e>
		}
		else{
			power[i] = 'n';
    1228:	30 83       	st	Z, r19
			mask = mask << 1; // shift left once
    122a:	99 0f       	add	r25, r25
    122c:	31 96       	adiw	r30, 0x01	; 1
	
	// 8 bit mask to check the state of each position
	uint8_t mask = 0x01;
	// keep track of the first index
	
	while(i < 8){
    122e:	e4 17       	cp	r30, r20
    1230:	f5 07       	cpc	r31, r21
    1232:	a1 f7       	brne	.-24     	; 0x121c <Update_STATE+0xe>
			power[i] = 'n';
			mask = mask << 1; // shift left once
		}
		i++;
	}
}
    1234:	08 95       	ret

00001236 <EEPROM_Write>:
/*========================================================================================*/

void EEPROM_Write(uint8_t launch_bits, uint16_t address){
	
	// Wait for previous read/write cycle to be finished
	while(EECR & 0x02);
    1236:	f9 99       	sbic	0x1f, 1	; 31
    1238:	fe cf       	rjmp	.-4      	; 0x1236 <EEPROM_Write>
	
	// Select EEPROM Address (first address)
	EEAR = address; // first address
    123a:	72 bd       	out	0x22, r23	; 34
    123c:	61 bd       	out	0x21, r22	; 33
	
	// Write to data Register
	EEDR = launch_bits;
    123e:	80 bd       	out	0x20, r24	; 32
	
	// Master Write Enable
	EECR = 0x04;
    1240:	84 e0       	ldi	r24, 0x04	; 4
    1242:	8f bb       	out	0x1f, r24	; 31
	
	// Write Enable
	EECR = 0x02;
    1244:	82 e0       	ldi	r24, 0x02	; 2
    1246:	8f bb       	out	0x1f, r24	; 31
    1248:	08 95       	ret

0000124a <EEPROM_Read>:
/*========================================================================================*/

uint8_t EEPROM_Read(uint16_t address){
	
	// Wait for previous read/write cycle to be finished
	while(EECR & 0x02);
    124a:	f9 99       	sbic	0x1f, 1	; 31
    124c:	fe cf       	rjmp	.-4      	; 0x124a <EEPROM_Read>
	
	// Select EEPROM Address (first address)
	EEAR = address;
    124e:	92 bd       	out	0x22, r25	; 34
    1250:	81 bd       	out	0x21, r24	; 33
	
	// Read Enable
	EECR = 0x01;
    1252:	81 e0       	ldi	r24, 0x01	; 1
    1254:	8f bb       	out	0x1f, r24	; 31
	
	return EEDR;
    1256:	80 b5       	in	r24, 0x20	; 32
	
}
    1258:	08 95       	ret

0000125a <Set_GPIO>:
void Set_GPIO(int gpio_num){
	
	int gpio = 0x01; // initialize gpio selection to bit 0
	
	// PORT H
	if (gpio_num < 7){
    125a:	87 30       	cpi	r24, 0x07	; 7
    125c:	91 05       	cpc	r25, r1
    125e:	7c f4       	brge	.+30     	; 0x127e <Set_GPIO+0x24>
		gpio = gpio << gpio_num; // shift to correct bit
		PORTH |= gpio; // set selected pin high
    1260:	e2 e0       	ldi	r30, 0x02	; 2
    1262:	f1 e0       	ldi	r31, 0x01	; 1
    1264:	40 81       	ld	r20, Z
    1266:	21 e0       	ldi	r18, 0x01	; 1
    1268:	30 e0       	ldi	r19, 0x00	; 0
    126a:	b9 01       	movw	r22, r18
    126c:	02 c0       	rjmp	.+4      	; 0x1272 <Set_GPIO+0x18>
    126e:	66 0f       	add	r22, r22
    1270:	77 1f       	adc	r23, r23
    1272:	8a 95       	dec	r24
    1274:	e2 f7       	brpl	.-8      	; 0x126e <Set_GPIO+0x14>
    1276:	cb 01       	movw	r24, r22
    1278:	84 2b       	or	r24, r20
    127a:	80 83       	st	Z, r24
    127c:	08 95       	ret
	}
	// PORT L
	else if (gpio_num >= 7 && gpio_num < 10){
    127e:	9c 01       	movw	r18, r24
    1280:	27 50       	subi	r18, 0x07	; 7
    1282:	31 09       	sbc	r19, r1
    1284:	23 30       	cpi	r18, 0x03	; 3
    1286:	31 05       	cpc	r19, r1
    1288:	80 f4       	brcc	.+32     	; 0x12aa <Set_GPIO+0x50>
		gpio = gpio << (gpio_num - 6); // shift to correct bit
		PORTL |= gpio; // set selected pin high
    128a:	eb e0       	ldi	r30, 0x0B	; 11
    128c:	f1 e0       	ldi	r31, 0x01	; 1
    128e:	40 81       	ld	r20, Z
    1290:	06 97       	sbiw	r24, 0x06	; 6
    1292:	21 e0       	ldi	r18, 0x01	; 1
    1294:	30 e0       	ldi	r19, 0x00	; 0
    1296:	b9 01       	movw	r22, r18
    1298:	02 c0       	rjmp	.+4      	; 0x129e <Set_GPIO+0x44>
    129a:	66 0f       	add	r22, r22
    129c:	77 1f       	adc	r23, r23
    129e:	8a 95       	dec	r24
    12a0:	e2 f7       	brpl	.-8      	; 0x129a <Set_GPIO+0x40>
    12a2:	cb 01       	movw	r24, r22
    12a4:	84 2b       	or	r24, r20
    12a6:	80 83       	st	Z, r24
    12a8:	08 95       	ret
	}
	// PORT A
	else if(gpio_num >= 10 && gpio_num < 14){
    12aa:	9c 01       	movw	r18, r24
    12ac:	2a 50       	subi	r18, 0x0A	; 10
    12ae:	31 09       	sbc	r19, r1
    12b0:	24 30       	cpi	r18, 0x04	; 4
    12b2:	31 05       	cpc	r19, r1
    12b4:	70 f4       	brcc	.+28     	; 0x12d2 <Set_GPIO+0x78>
		gpio = gpio << (gpio_num - 6); // shift to correct bit
		PORTA |= gpio; // set selected pin high
    12b6:	42 b1       	in	r20, 0x02	; 2
    12b8:	06 97       	sbiw	r24, 0x06	; 6
    12ba:	21 e0       	ldi	r18, 0x01	; 1
    12bc:	30 e0       	ldi	r19, 0x00	; 0
    12be:	b9 01       	movw	r22, r18
    12c0:	02 c0       	rjmp	.+4      	; 0x12c6 <Set_GPIO+0x6c>
    12c2:	66 0f       	add	r22, r22
    12c4:	77 1f       	adc	r23, r23
    12c6:	8a 95       	dec	r24
    12c8:	e2 f7       	brpl	.-8      	; 0x12c2 <Set_GPIO+0x68>
    12ca:	cb 01       	movw	r24, r22
    12cc:	84 2b       	or	r24, r20
    12ce:	82 b9       	out	0x02, r24	; 2
    12d0:	08 95       	ret
	}
	// PORT J
	else if(gpio_num >= 14 && gpio_num < 21){
    12d2:	9c 01       	movw	r18, r24
    12d4:	2e 50       	subi	r18, 0x0E	; 14
    12d6:	31 09       	sbc	r19, r1
    12d8:	27 30       	cpi	r18, 0x07	; 7
    12da:	31 05       	cpc	r19, r1
    12dc:	80 f4       	brcc	.+32     	; 0x12fe <Set_GPIO+0xa4>
		gpio = gpio << (gpio_num - 14); // shift to correct bit
		PORTJ |= gpio; // set selected pin high
    12de:	e5 e0       	ldi	r30, 0x05	; 5
    12e0:	f1 e0       	ldi	r31, 0x01	; 1
    12e2:	40 81       	ld	r20, Z
    12e4:	c9 01       	movw	r24, r18
    12e6:	21 e0       	ldi	r18, 0x01	; 1
    12e8:	30 e0       	ldi	r19, 0x00	; 0
    12ea:	b9 01       	movw	r22, r18
    12ec:	02 c0       	rjmp	.+4      	; 0x12f2 <Set_GPIO+0x98>
    12ee:	66 0f       	add	r22, r22
    12f0:	77 1f       	adc	r23, r23
    12f2:	8a 95       	dec	r24
    12f4:	e2 f7       	brpl	.-8      	; 0x12ee <Set_GPIO+0x94>
    12f6:	cb 01       	movw	r24, r22
    12f8:	84 2b       	or	r24, r20
    12fa:	80 83       	st	Z, r24
    12fc:	08 95       	ret
	}
	// PORT C
	else if (gpio_num >= 21 && gpio_num < 29){
    12fe:	9c 01       	movw	r18, r24
    1300:	25 51       	subi	r18, 0x15	; 21
    1302:	31 09       	sbc	r19, r1
    1304:	28 30       	cpi	r18, 0x08	; 8
    1306:	31 05       	cpc	r19, r1
    1308:	68 f4       	brcc	.+26     	; 0x1324 <Set_GPIO+0xca>
		gpio = gpio << (gpio_num - 21); // shift to correct bit
		PORTC |= gpio; // set selected pin high
    130a:	48 b1       	in	r20, 0x08	; 8
    130c:	c9 01       	movw	r24, r18
    130e:	21 e0       	ldi	r18, 0x01	; 1
    1310:	30 e0       	ldi	r19, 0x00	; 0
    1312:	b9 01       	movw	r22, r18
    1314:	02 c0       	rjmp	.+4      	; 0x131a <Set_GPIO+0xc0>
    1316:	66 0f       	add	r22, r22
    1318:	77 1f       	adc	r23, r23
    131a:	8a 95       	dec	r24
    131c:	e2 f7       	brpl	.-8      	; 0x1316 <Set_GPIO+0xbc>
    131e:	cb 01       	movw	r24, r22
    1320:	84 2b       	or	r24, r20
    1322:	88 b9       	out	0x08, r24	; 8
    1324:	08 95       	ret

00001326 <Clear_GPIO>:
	
	int gpio = 0x01; // initialize gpio selection to bit 0
	int gpio_mask = 0xFE; //gpio mask
	
	// PORT H
	if (gpio_num < 7){
    1326:	87 30       	cpi	r24, 0x07	; 7
    1328:	91 05       	cpc	r25, r1
    132a:	84 f4       	brge	.+32     	; 0x134c <Clear_GPIO+0x26>
		gpio = gpio << gpio_num; // shift to correct bit
		PORTH &= (gpio^gpio_mask); // use mask to clear bit
    132c:	e2 e0       	ldi	r30, 0x02	; 2
    132e:	f1 e0       	ldi	r31, 0x01	; 1
    1330:	90 81       	ld	r25, Z
    1332:	41 e0       	ldi	r20, 0x01	; 1
    1334:	50 e0       	ldi	r21, 0x00	; 0
    1336:	02 c0       	rjmp	.+4      	; 0x133c <Clear_GPIO+0x16>
    1338:	44 0f       	add	r20, r20
    133a:	55 1f       	adc	r21, r21
    133c:	8a 95       	dec	r24
    133e:	e2 f7       	brpl	.-8      	; 0x1338 <Clear_GPIO+0x12>
    1340:	2e ef       	ldi	r18, 0xFE	; 254
    1342:	84 2f       	mov	r24, r20
    1344:	82 27       	eor	r24, r18
    1346:	89 23       	and	r24, r25
    1348:	80 83       	st	Z, r24
    134a:	08 95       	ret
	}
	// PORT L
	else if (gpio_num >= 7 && gpio_num < 10){
    134c:	9c 01       	movw	r18, r24
    134e:	27 50       	subi	r18, 0x07	; 7
    1350:	31 09       	sbc	r19, r1
    1352:	23 30       	cpi	r18, 0x03	; 3
    1354:	31 05       	cpc	r19, r1
    1356:	90 f4       	brcc	.+36     	; 0x137c <Clear_GPIO+0x56>
		gpio = gpio << (gpio_num - 6); // shift to correct bit
		PORTL &= (gpio^gpio_mask); // use mask to clear bit
    1358:	eb e0       	ldi	r30, 0x0B	; 11
    135a:	f1 e0       	ldi	r31, 0x01	; 1
    135c:	20 81       	ld	r18, Z
    135e:	ac 01       	movw	r20, r24
    1360:	46 50       	subi	r20, 0x06	; 6
    1362:	51 09       	sbc	r21, r1
    1364:	81 e0       	ldi	r24, 0x01	; 1
    1366:	90 e0       	ldi	r25, 0x00	; 0
    1368:	02 c0       	rjmp	.+4      	; 0x136e <Clear_GPIO+0x48>
    136a:	88 0f       	add	r24, r24
    136c:	99 1f       	adc	r25, r25
    136e:	4a 95       	dec	r20
    1370:	e2 f7       	brpl	.-8      	; 0x136a <Clear_GPIO+0x44>
    1372:	9e ef       	ldi	r25, 0xFE	; 254
    1374:	89 27       	eor	r24, r25
    1376:	82 23       	and	r24, r18
    1378:	80 83       	st	Z, r24
    137a:	08 95       	ret
	}
	// PORT A
	else if(gpio_num >= 10 && gpio_num < 14){
    137c:	9c 01       	movw	r18, r24
    137e:	2a 50       	subi	r18, 0x0A	; 10
    1380:	31 09       	sbc	r19, r1
    1382:	24 30       	cpi	r18, 0x04	; 4
    1384:	31 05       	cpc	r19, r1
    1386:	80 f4       	brcc	.+32     	; 0x13a8 <Clear_GPIO+0x82>
		gpio = gpio << (gpio_num - 6); // shift to correct bit
		PORTA &= (gpio^gpio_mask); // use mask to clear bit
    1388:	22 b1       	in	r18, 0x02	; 2
    138a:	ac 01       	movw	r20, r24
    138c:	46 50       	subi	r20, 0x06	; 6
    138e:	51 09       	sbc	r21, r1
    1390:	81 e0       	ldi	r24, 0x01	; 1
    1392:	90 e0       	ldi	r25, 0x00	; 0
    1394:	02 c0       	rjmp	.+4      	; 0x139a <Clear_GPIO+0x74>
    1396:	88 0f       	add	r24, r24
    1398:	99 1f       	adc	r25, r25
    139a:	4a 95       	dec	r20
    139c:	e2 f7       	brpl	.-8      	; 0x1396 <Clear_GPIO+0x70>
    139e:	9e ef       	ldi	r25, 0xFE	; 254
    13a0:	89 27       	eor	r24, r25
    13a2:	82 23       	and	r24, r18
    13a4:	82 b9       	out	0x02, r24	; 2
    13a6:	08 95       	ret
	}
	// PORT J
	else if(gpio_num >= 14 && gpio_num < 21){
    13a8:	9c 01       	movw	r18, r24
    13aa:	2e 50       	subi	r18, 0x0E	; 14
    13ac:	31 09       	sbc	r19, r1
    13ae:	27 30       	cpi	r18, 0x07	; 7
    13b0:	31 05       	cpc	r19, r1
    13b2:	90 f4       	brcc	.+36     	; 0x13d8 <Clear_GPIO+0xb2>
		gpio = gpio << (gpio_num - 14); // shift to correct bit
		PORTJ &= (gpio^gpio_mask); // use mask to clear bit
    13b4:	e5 e0       	ldi	r30, 0x05	; 5
    13b6:	f1 e0       	ldi	r31, 0x01	; 1
    13b8:	20 81       	ld	r18, Z
    13ba:	ac 01       	movw	r20, r24
    13bc:	4e 50       	subi	r20, 0x0E	; 14
    13be:	51 09       	sbc	r21, r1
    13c0:	81 e0       	ldi	r24, 0x01	; 1
    13c2:	90 e0       	ldi	r25, 0x00	; 0
    13c4:	02 c0       	rjmp	.+4      	; 0x13ca <Clear_GPIO+0xa4>
    13c6:	88 0f       	add	r24, r24
    13c8:	99 1f       	adc	r25, r25
    13ca:	4a 95       	dec	r20
    13cc:	e2 f7       	brpl	.-8      	; 0x13c6 <Clear_GPIO+0xa0>
    13ce:	9e ef       	ldi	r25, 0xFE	; 254
    13d0:	89 27       	eor	r24, r25
    13d2:	82 23       	and	r24, r18
    13d4:	80 83       	st	Z, r24
    13d6:	08 95       	ret
	}
	// PORT C
	else if (gpio_num >= 21 && gpio_num < 29){
    13d8:	9c 01       	movw	r18, r24
    13da:	25 51       	subi	r18, 0x15	; 21
    13dc:	31 09       	sbc	r19, r1
    13de:	28 30       	cpi	r18, 0x08	; 8
    13e0:	31 05       	cpc	r19, r1
    13e2:	78 f4       	brcc	.+30     	; 0x1402 <Clear_GPIO+0xdc>
		gpio = gpio << (gpio_num - 21); // shift to correct bit
		PORTC &= (gpio^gpio_mask); // use mask to clear bit
    13e4:	28 b1       	in	r18, 0x08	; 8
    13e6:	45 97       	sbiw	r24, 0x15	; 21
    13e8:	41 e0       	ldi	r20, 0x01	; 1
    13ea:	50 e0       	ldi	r21, 0x00	; 0
    13ec:	ba 01       	movw	r22, r20
    13ee:	02 c0       	rjmp	.+4      	; 0x13f4 <Clear_GPIO+0xce>
    13f0:	66 0f       	add	r22, r22
    13f2:	77 1f       	adc	r23, r23
    13f4:	8a 95       	dec	r24
    13f6:	e2 f7       	brpl	.-8      	; 0x13f0 <Clear_GPIO+0xca>
    13f8:	cb 01       	movw	r24, r22
    13fa:	9e ef       	ldi	r25, 0xFE	; 254
    13fc:	89 27       	eor	r24, r25
    13fe:	82 23       	and	r24, r18
    1400:	88 b9       	out	0x08, r24	; 8
    1402:	08 95       	ret

00001404 <Update_TELEM>:
// Author: Chris Thomas
// Date: 2019-02-03
// Description: Updates telemetry information for OBC. Voltage, current and temperature.
/*========================================================================================*/

void Update_TELEM(double* telem, uint8_t power_state){
    1404:	1f 93       	push	r17
    1406:	cf 93       	push	r28
    1408:	df 93       	push	r29
    140a:	ec 01       	movw	r28, r24
    140c:	16 2f       	mov	r17, r22
	
	// Set 5V rail for readings (needed for current sensors)
	
	// RE-ENABLE FOR DEMOOOOOOOOOOO//////
	Enable_5V();
    140e:	ae db       	rcall	.-2212   	; 0xb6c <Enable_5V>
	
	//Enable_5V();
	// ^^^^^^^^^^^
	
	// Ammeter measurements
	telem[0] = Amp_ADC(2); // 3V3-1 rail current
    1410:	82 e0       	ldi	r24, 0x02	; 2
    1412:	90 e0       	ldi	r25, 0x00	; 0
    1414:	0e 94 a1 01 	call	0x342	; 0x342 <Amp_ADC>
    1418:	68 83       	st	Y, r22
    141a:	79 83       	std	Y+1, r23	; 0x01
    141c:	8a 83       	std	Y+2, r24	; 0x02
    141e:	9b 83       	std	Y+3, r25	; 0x03
	telem[1] = Amp_ADC(3); // 3V3-2 rail current
    1420:	83 e0       	ldi	r24, 0x03	; 3
    1422:	90 e0       	ldi	r25, 0x00	; 0
    1424:	0e 94 a1 01 	call	0x342	; 0x342 <Amp_ADC>
    1428:	6c 83       	std	Y+4, r22	; 0x04
    142a:	7d 83       	std	Y+5, r23	; 0x05
    142c:	8e 83       	std	Y+6, r24	; 0x06
    142e:	9f 83       	std	Y+7, r25	; 0x07
	telem[2] = Amp_ADC(1); // 5V rail current
    1430:	81 e0       	ldi	r24, 0x01	; 1
    1432:	90 e0       	ldi	r25, 0x00	; 0
    1434:	0e 94 a1 01 	call	0x342	; 0x342 <Amp_ADC>
    1438:	68 87       	std	Y+8, r22	; 0x08
    143a:	79 87       	std	Y+9, r23	; 0x09
    143c:	8a 87       	std	Y+10, r24	; 0x0a
    143e:	9b 87       	std	Y+11, r25	; 0x0b
	telem[3] = Amp_ADC(0); // 8V rail current
    1440:	80 e0       	ldi	r24, 0x00	; 0
    1442:	90 e0       	ldi	r25, 0x00	; 0
    1444:	0e 94 a1 01 	call	0x342	; 0x342 <Amp_ADC>
    1448:	6c 87       	std	Y+12, r22	; 0x0c
    144a:	7d 87       	std	Y+13, r23	; 0x0d
    144c:	8e 87       	std	Y+14, r24	; 0x0e
    144e:	9f 87       	std	Y+15, r25	; 0x0f
	telem[4] = Amp_ADC(5); // VBatt rail current
    1450:	85 e0       	ldi	r24, 0x05	; 5
    1452:	90 e0       	ldi	r25, 0x00	; 0
    1454:	0e 94 a1 01 	call	0x342	; 0x342 <Amp_ADC>
    1458:	68 8b       	std	Y+16, r22	; 0x10
    145a:	79 8b       	std	Y+17, r23	; 0x11
    145c:	8a 8b       	std	Y+18, r24	; 0x12
    145e:	9b 8b       	std	Y+19, r25	; 0x13
	telem[5] = Amp_ADC(4); // Solar panel current
    1460:	84 e0       	ldi	r24, 0x04	; 4
    1462:	90 e0       	ldi	r25, 0x00	; 0
    1464:	0e 94 a1 01 	call	0x342	; 0x342 <Amp_ADC>
    1468:	6c 8b       	std	Y+20, r22	; 0x14
    146a:	7d 8b       	std	Y+21, r23	; 0x15
    146c:	8e 8b       	std	Y+22, r24	; 0x16
    146e:	9f 8b       	std	Y+23, r25	; 0x17
	
	// Voltmeter measurements
	telem[6] = Volt_ADC(0); // 3V3-1 rail voltage
    1470:	80 e0       	ldi	r24, 0x00	; 0
    1472:	90 e0       	ldi	r25, 0x00	; 0
    1474:	0e 94 38 01 	call	0x270	; 0x270 <Volt_ADC>
    1478:	68 8f       	std	Y+24, r22	; 0x18
    147a:	79 8f       	std	Y+25, r23	; 0x19
    147c:	8a 8f       	std	Y+26, r24	; 0x1a
    147e:	9b 8f       	std	Y+27, r25	; 0x1b
	telem[7] = Volt_ADC(1); // 3V3-2 rail voltage
    1480:	81 e0       	ldi	r24, 0x01	; 1
    1482:	90 e0       	ldi	r25, 0x00	; 0
    1484:	0e 94 38 01 	call	0x270	; 0x270 <Volt_ADC>
    1488:	6c 8f       	std	Y+28, r22	; 0x1c
    148a:	7d 8f       	std	Y+29, r23	; 0x1d
    148c:	8e 8f       	std	Y+30, r24	; 0x1e
    148e:	9f 8f       	std	Y+31, r25	; 0x1f
	telem[8] = Volt_ADC(2); // 5V rail voltage
    1490:	82 e0       	ldi	r24, 0x02	; 2
    1492:	90 e0       	ldi	r25, 0x00	; 0
    1494:	0e 94 38 01 	call	0x270	; 0x270 <Volt_ADC>
    1498:	68 a3       	std	Y+32, r22	; 0x20
    149a:	79 a3       	std	Y+33, r23	; 0x21
    149c:	8a a3       	std	Y+34, r24	; 0x22
    149e:	9b a3       	std	Y+35, r25	; 0x23
	telem[9] = Volt_ADC(3); // 8V-1 rail voltage
    14a0:	83 e0       	ldi	r24, 0x03	; 3
    14a2:	90 e0       	ldi	r25, 0x00	; 0
    14a4:	0e 94 38 01 	call	0x270	; 0x270 <Volt_ADC>
    14a8:	6c a3       	std	Y+36, r22	; 0x24
    14aa:	7d a3       	std	Y+37, r23	; 0x25
    14ac:	8e a3       	std	Y+38, r24	; 0x26
    14ae:	9f a3       	std	Y+39, r25	; 0x27
	telem[10] = Volt_ADC(4); // VBatt rail voltage
    14b0:	84 e0       	ldi	r24, 0x04	; 4
    14b2:	90 e0       	ldi	r25, 0x00	; 0
    14b4:	0e 94 38 01 	call	0x270	; 0x270 <Volt_ADC>
    14b8:	68 a7       	std	Y+40, r22	; 0x28
    14ba:	79 a7       	std	Y+41, r23	; 0x29
    14bc:	8a a7       	std	Y+42, r24	; 0x2a
	telem[11] = Temp_ADC(); // Battery temperature
    14be:	9b a7       	std	Y+43, r25	; 0x2b
    14c0:	03 d8       	rcall	.-4090   	; 0x4c8 <Temp_ADC>
    14c2:	6c a7       	std	Y+44, r22	; 0x2c
    14c4:	7d a7       	std	Y+45, r23	; 0x2d
    14c6:	8e a7       	std	Y+46, r24	; 0x2e
    14c8:	9f a7       	std	Y+47, r25	; 0x2f
	
	// Disable 5V rail
	Disable_5V(power_state);	
    14ca:	81 2f       	mov	r24, r17
    14cc:	82 db       	rcall	.-2300   	; 0xbd2 <Disable_5V>
}
    14ce:	df 91       	pop	r29
    14d0:	cf 91       	pop	r28
    14d2:	1f 91       	pop	r17
    14d4:	08 95       	ret

000014d6 <Update_OBC>:
// Author: Chris Thomas
// Date: 2019-02-03
// Description: Updates the telemetry information to the OBC.
/*========================================================================================*/

void Update_OBC(double* telem, char* power){
    14d6:	2f 92       	push	r2
    14d8:	3f 92       	push	r3
    14da:	4f 92       	push	r4
    14dc:	5f 92       	push	r5
    14de:	6f 92       	push	r6
    14e0:	7f 92       	push	r7
    14e2:	8f 92       	push	r8
    14e4:	9f 92       	push	r9
    14e6:	af 92       	push	r10
    14e8:	bf 92       	push	r11
    14ea:	cf 92       	push	r12
    14ec:	df 92       	push	r13
    14ee:	ef 92       	push	r14
    14f0:	ff 92       	push	r15
    14f2:	0f 93       	push	r16
    14f4:	1f 93       	push	r17
    14f6:	cf 93       	push	r28
    14f8:	df 93       	push	r29
    14fa:	cd b7       	in	r28, 0x3d	; 61
    14fc:	de b7       	in	r29, 0x3e	; 62
    14fe:	cf 53       	subi	r28, 0x3F	; 63
    1500:	d1 40       	sbci	r29, 0x01	; 1
    1502:	0f b6       	in	r0, 0x3f	; 63
    1504:	f8 94       	cli
    1506:	de bf       	out	0x3e, r29	; 62
    1508:	0f be       	out	0x3f, r0	; 63
    150a:	cd bf       	out	0x3d, r28	; 61
    150c:	c4 5c       	subi	r28, 0xC4	; 196
    150e:	de 4f       	sbci	r29, 0xFE	; 254
    1510:	99 83       	std	Y+1, r25	; 0x01
    1512:	88 83       	st	Y, r24
    1514:	cc 53       	subi	r28, 0x3C	; 60
    1516:	d1 40       	sbci	r29, 0x01	; 1
    1518:	4b 01       	movw	r8, r22
	// Prints a border to the Putty
	char stars[60] = "/***************************************CubeSat EPS"; // left side of border
    151a:	84 e3       	ldi	r24, 0x34	; 52
    151c:	e9 e1       	ldi	r30, 0x19	; 25
    151e:	f2 e0       	ldi	r31, 0x02	; 2
    1520:	de 01       	movw	r26, r28
    1522:	11 96       	adiw	r26, 0x01	; 1
    1524:	01 90       	ld	r0, Z+
    1526:	0d 92       	st	X+, r0
    1528:	8a 95       	dec	r24
    152a:	e1 f7       	brne	.-8      	; 0x1524 <Update_OBC+0x4e>
    152c:	fe 01       	movw	r30, r28
    152e:	f5 96       	adiw	r30, 0x35	; 53
    1530:	88 e0       	ldi	r24, 0x08	; 8
    1532:	df 01       	movw	r26, r30
    1534:	1d 92       	st	X+, r1
    1536:	8a 95       	dec	r24
    1538:	e9 f7       	brne	.-6      	; 0x1534 <Update_OBC+0x5e>
	char stars2[45] = "***************************************/"; // right side of border
    153a:	89 e2       	ldi	r24, 0x29	; 41
    153c:	e5 e5       	ldi	r30, 0x55	; 85
    153e:	f2 e0       	ldi	r31, 0x02	; 2
    1540:	de 01       	movw	r26, r28
    1542:	dd 96       	adiw	r26, 0x3d	; 61
    1544:	01 90       	ld	r0, Z+
    1546:	0d 92       	st	X+, r0
    1548:	8a 95       	dec	r24
    154a:	e1 f7       	brne	.-8      	; 0x1544 <Update_OBC+0x6e>
    154c:	fe 01       	movw	r30, r28
    154e:	ea 59       	subi	r30, 0x9A	; 154
    1550:	ff 4f       	sbci	r31, 0xFF	; 255
    1552:	84 e0       	ldi	r24, 0x04	; 4
    1554:	df 01       	movw	r26, r30
    1556:	1d 92       	st	X+, r1
    1558:	8a 95       	dec	r24
    155a:	e9 f7       	brne	.-6      	; 0x1556 <Update_OBC+0x80>
	char* border; // complete border top and bottom
	border = strcat(stars,stars2);
    155c:	be 01       	movw	r22, r28
    155e:	63 5c       	subi	r22, 0xC3	; 195
    1560:	7f 4f       	sbci	r23, 0xFF	; 255
    1562:	ce 01       	movw	r24, r28
    1564:	01 96       	adiw	r24, 0x01	; 1
    1566:	0e 94 4f 15 	call	0x2a9e	; 0x2a9e <strcat>
	
	// Print border
	UART0_putstring(border);
    156a:	a0 d2       	rcall	.+1344   	; 0x1aac <UART0_putstring>
	
	// Spacing
	UART0_putchar('\n');
    156c:	8a e0       	ldi	r24, 0x0A	; 10
    156e:	8e d2       	rcall	.+1308   	; 0x1a8c <UART0_putchar>
	UART0_putchar('\n');
    1570:	8a e0       	ldi	r24, 0x0A	; 10
    1572:	8c d2       	rcall	.+1304   	; 0x1a8c <UART0_putchar>
	UART0_putchar('\r');
    1574:	8d e0       	ldi	r24, 0x0D	; 13
    1576:	8a d2       	rcall	.+1300   	; 0x1a8c <UART0_putchar>
    1578:	80 e5       	ldi	r24, 0x50	; 80
	
	// String Initializations
	char loads[8][10] = {"Heater 1", "Heater 2", "Heater 3", "OBC", "Imager", "GRIPS", "S-Band", "UHF"};
    157a:	e2 e8       	ldi	r30, 0x82	; 130
    157c:	f2 e0       	ldi	r31, 0x02	; 2
    157e:	de 01       	movw	r26, r28
    1580:	a6 59       	subi	r26, 0x96	; 150
    1582:	bf 4f       	sbci	r27, 0xFF	; 255
    1584:	01 90       	ld	r0, Z+
    1586:	0d 92       	st	X+, r0
    1588:	8a 95       	dec	r24
    158a:	e1 f7       	brne	.-8      	; 0x1584 <Update_OBC+0xae>
    158c:	88 e7       	ldi	r24, 0x78	; 120
	char sensors[12][10] = {"3V3-1 [A]", "3V3-2 [A]", "5V [A]", "8V [A]", "VBatt [A]", "Solar [A]",
    158e:	e2 ed       	ldi	r30, 0xD2	; 210
    1590:	f2 e0       	ldi	r31, 0x02	; 2
    1592:	de 01       	movw	r26, r28
    1594:	a6 54       	subi	r26, 0x46	; 70
    1596:	bf 4f       	sbci	r27, 0xFF	; 255
    1598:	01 90       	ld	r0, Z+
    159a:	0d 92       	st	X+, r0
    159c:	8a 95       	dec	r24
    159e:	e1 f7       	brne	.-8      	; 0x1598 <Update_OBC+0xc2>
    15a0:	fe 01       	movw	r30, r28
    15a2:	e6 54       	subi	r30, 0x46	; 70
    15a4:	ff 4f       	sbci	r31, 0xFF	; 255
    15a6:	7f 01       	movw	r14, r30
    15a8:	c1 2c       	mov	r12, r1
	// Doing to the spacing correctly						
	int spacing = 15;
	int spaces = 0;
	int spaces2 = 0; // for inner loops
	int l_incr = 0; // load increment (8)
	int s_incr = 0; // sensor increment (12)
    15aa:	d1 2c       	mov	r13, r1
    15ac:	41 2c       	mov	r4, r1
							"3V3-1 [V]", "3V3-2 [V]", "5V [V]", "8V [V]", "VBatt [V]", "Temp [C]"};
							
	// Doing to the spacing correctly						
	int spacing = 15;
	int spaces = 0;
	int spaces2 = 0; // for inner loops
    15ae:	51 2c       	mov	r5, r1
    15b0:	00 e0       	ldi	r16, 0x00	; 0
	char sensors[12][10] = {"3V3-1 [A]", "3V3-2 [A]", "5V [A]", "8V [A]", "VBatt [A]", "Solar [A]",
							"3V3-1 [V]", "3V3-2 [V]", "5V [V]", "8V [V]", "VBatt [V]", "Temp [C]"};
							
	// Doing to the spacing correctly						
	int spacing = 15;
	int spaces = 0;
    15b2:	10 e0       	ldi	r17, 0x00	; 0
    15b4:	0f 2e       	mov	r0, r31
			UART0_putchar(' ');
			spaces--;
		}
		UART0_putstring(sensors[s_incr]);
		s_incr++;
		spaces = spacing - strlen(sensors[s_incr - 1]);
    15b6:	ff e0       	ldi	r31, 0x0F	; 15
    15b8:	af 2e       	mov	r10, r31
    15ba:	b1 2c       	mov	r11, r1
    15bc:	f0 2d       	mov	r31, r0
    15be:	3e 01       	movw	r6, r28
			while(i < s_incr){
				while(spaces2){
					UART0_putchar(' ');
					spaces2--;
				}
				sprintf(measure,"%f",telem[i]);
    15c0:	fe ec       	ldi	r31, 0xCE	; 206
    15c2:	6f 1a       	sub	r6, r31
    15c4:	fe ef       	ldi	r31, 0xFE	; 254
    15c6:	7f 0a       	sbc	r7, r31
    15c8:	c2 5c       	subi	r28, 0xC2	; 194
    15ca:	de 4f       	sbci	r29, 0xFE	; 254
    15cc:	68 82       	st	Y, r6
    15ce:	ce 53       	subi	r28, 0x3E	; 62
    15d0:	d1 40       	sbci	r29, 0x01	; 1
    15d2:	c1 5c       	subi	r28, 0xC1	; 193
    15d4:	de 4f       	sbci	r29, 0xFE	; 254
    15d6:	78 82       	st	Y, r7
    15d8:	cf 53       	subi	r28, 0x3F	; 63
    15da:	d1 40       	sbci	r29, 0x01	; 1
    15dc:	26 e0       	ldi	r18, 0x06	; 6
	// Print the telemetry information
	while (s_incr < 12){
		
		// Switch lines after 6 titles are written and write
		// data on the next line
		if (s_incr == 6){
    15de:	c2 16       	cp	r12, r18
    15e0:	d1 04       	cpc	r13, r1
    15e2:	09 f0       	breq	.+2      	; 0x15e6 <Update_OBC+0x110>
    15e4:	71 c0       	rjmp	.+226    	; 0x16c8 <Update_OBC+0x1f2>
			UART0_putchar('\n');
    15e6:	8a e0       	ldi	r24, 0x0A	; 10
    15e8:	51 d2       	rcall	.+1186   	; 0x1a8c <UART0_putchar>
    15ea:	8d e0       	ldi	r24, 0x0D	; 13
			UART0_putchar('\r');
    15ec:	4f d2       	rcall	.+1182   	; 0x1a8c <UART0_putchar>
    15ee:	46 e0       	ldi	r20, 0x06	; 6
    15f0:	24 16       	cp	r2, r20
			// print values
			while(i < s_incr){
    15f2:	31 04       	cpc	r3, r1
    15f4:	0c f0       	brlt	.+2      	; 0x15f8 <Update_OBC+0x122>
    15f6:	52 c0       	rjmp	.+164    	; 0x169c <Update_OBC+0x1c6>
    15f8:	81 01       	movw	r16, r2
    15fa:	00 0f       	add	r16, r16
    15fc:	11 1f       	adc	r17, r17
    15fe:	00 0f       	add	r16, r16
    1600:	11 1f       	adc	r17, r17
    1602:	c4 5c       	subi	r28, 0xC4	; 196
    1604:	de 4f       	sbci	r29, 0xFE	; 254
    1606:	88 81       	ld	r24, Y
    1608:	99 81       	ldd	r25, Y+1	; 0x01
    160a:	cc 53       	subi	r28, 0x3C	; 60
    160c:	d1 40       	sbci	r29, 0x01	; 1
    160e:	08 0f       	add	r16, r24
    1610:	19 1f       	adc	r17, r25
    1612:	3f c0       	rjmp	.+126    	; 0x1692 <Update_OBC+0x1bc>
    1614:	80 e2       	ldi	r24, 0x20	; 32
				while(spaces2){
					UART0_putchar(' ');
    1616:	3a d2       	rcall	.+1140   	; 0x1a8c <UART0_putchar>
    1618:	91 e0       	ldi	r25, 0x01	; 1
    161a:	49 1a       	sub	r4, r25
					spaces2--;
    161c:	51 08       	sbc	r5, r1
    161e:	d1 f7       	brne	.-12     	; 0x1614 <Update_OBC+0x13e>
    1620:	d8 01       	movw	r26, r16
		if (s_incr == 6){
			UART0_putchar('\n');
			UART0_putchar('\r');
			// print values
			while(i < s_incr){
				while(spaces2){
    1622:	8c 91       	ld	r24, X
					UART0_putchar(' ');
					spaces2--;
				}
				sprintf(measure,"%f",telem[i]);
    1624:	11 96       	adiw	r26, 0x01	; 1
    1626:	9c 91       	ld	r25, X
    1628:	11 97       	sbiw	r26, 0x01	; 1
    162a:	12 96       	adiw	r26, 0x02	; 2
    162c:	2c 91       	ld	r18, X
    162e:	12 97       	sbiw	r26, 0x02	; 2
    1630:	13 96       	adiw	r26, 0x03	; 3
    1632:	3c 91       	ld	r19, X
    1634:	0c 5f       	subi	r16, 0xFC	; 252
    1636:	1f 4f       	sbci	r17, 0xFF	; 255
    1638:	3f 93       	push	r19
    163a:	2f 93       	push	r18
    163c:	9f 93       	push	r25
    163e:	8f 93       	push	r24
    1640:	ec e6       	ldi	r30, 0x6C	; 108
    1642:	f3 e0       	ldi	r31, 0x03	; 3
    1644:	ff 93       	push	r31
    1646:	ef 93       	push	r30
    1648:	7f 92       	push	r7
    164a:	6f 92       	push	r6
    164c:	0e 94 aa 15 	call	0x2b54	; 0x2b54 <sprintf>
    1650:	c2 5c       	subi	r28, 0xC2	; 194
    1652:	de 4f       	sbci	r29, 0xFE	; 254
				UART0_putstring(measure);
    1654:	88 81       	ld	r24, Y
    1656:	ce 53       	subi	r28, 0x3E	; 62
    1658:	d1 40       	sbci	r29, 0x01	; 1
    165a:	c1 5c       	subi	r28, 0xC1	; 193
    165c:	de 4f       	sbci	r29, 0xFE	; 254
    165e:	98 81       	ld	r25, Y
    1660:	cf 53       	subi	r28, 0x3F	; 63
    1662:	d1 40       	sbci	r29, 0x01	; 1
    1664:	23 d2       	rcall	.+1094   	; 0x1aac <UART0_putstring>
    1666:	4f ef       	ldi	r20, 0xFF	; 255
    1668:	24 1a       	sub	r2, r20
				i++;
    166a:	34 0a       	sbc	r3, r20
    166c:	f3 01       	movw	r30, r6
    166e:	01 90       	ld	r0, Z+
				spaces2 = spacing - strlen(measure);
    1670:	00 20       	and	r0, r0
    1672:	e9 f7       	brne	.-6      	; 0x166e <Update_OBC+0x198>
    1674:	31 97       	sbiw	r30, 0x01	; 1
    1676:	e6 19       	sub	r30, r6
    1678:	f7 09       	sbc	r31, r7
    167a:	25 01       	movw	r4, r10
    167c:	4e 1a       	sub	r4, r30
    167e:	5f 0a       	sbc	r5, r31
    1680:	0f b6       	in	r0, 0x3f	; 63
    1682:	f8 94       	cli
		// data on the next line
		if (s_incr == 6){
			UART0_putchar('\n');
			UART0_putchar('\r');
			// print values
			while(i < s_incr){
    1684:	de bf       	out	0x3e, r29	; 62
    1686:	0f be       	out	0x3f, r0	; 63
    1688:	cd bf       	out	0x3d, r28	; 61
    168a:	96 e0       	ldi	r25, 0x06	; 6
    168c:	29 16       	cp	r2, r25
    168e:	31 04       	cpc	r3, r1
    1690:	29 f0       	breq	.+10     	; 0x169c <Update_OBC+0x1c6>
    1692:	41 14       	cp	r4, r1
				while(spaces2){
    1694:	51 04       	cpc	r5, r1
    1696:	09 f0       	breq	.+2      	; 0x169a <Update_OBC+0x1c4>
    1698:	bd cf       	rjmp	.-134    	; 0x1614 <Update_OBC+0x13e>
				sprintf(measure,"%f",telem[i]);
				UART0_putstring(measure);
				i++;
				spaces2 = spacing - strlen(measure);
			}
			UART0_putchar('\n');
    169a:	c2 cf       	rjmp	.-124    	; 0x1620 <Update_OBC+0x14a>
    169c:	8a e0       	ldi	r24, 0x0A	; 10
    169e:	f6 d1       	rcall	.+1004   	; 0x1a8c <UART0_putchar>
			UART0_putchar('\n');
    16a0:	8a e0       	ldi	r24, 0x0A	; 10
    16a2:	f4 d1       	rcall	.+1000   	; 0x1a8c <UART0_putchar>
    16a4:	8d e0       	ldi	r24, 0x0D	; 13
			UART0_putchar('\r');
    16a6:	f2 d1       	rcall	.+996    	; 0x1a8c <UART0_putchar>
    16a8:	c7 01       	movw	r24, r14
    16aa:	00 d2       	rcall	.+1024   	; 0x1aac <UART0_putstring>
		// re-initialize the spaces
		while(spaces){
			UART0_putchar(' ');
			spaces--;
		}
		UART0_putstring(sensors[s_incr]);
    16ac:	af ef       	ldi	r26, 0xFF	; 255
    16ae:	ca 1a       	sub	r12, r26
    16b0:	da 0a       	sbc	r13, r26
		s_incr++;
    16b2:	f7 01       	movw	r30, r14
    16b4:	01 90       	ld	r0, Z+
    16b6:	00 20       	and	r0, r0
		spaces = spacing - strlen(sensors[s_incr - 1]);
    16b8:	e9 f7       	brne	.-6      	; 0x16b4 <Update_OBC+0x1de>
    16ba:	31 97       	sbiw	r30, 0x01	; 1
    16bc:	ee 19       	sub	r30, r14
    16be:	ff 09       	sbc	r31, r15
    16c0:	85 01       	movw	r16, r10
    16c2:	0e 1b       	sub	r16, r30
    16c4:	1f 0b       	sbc	r17, r31
    16c6:	7b c0       	rjmp	.+246    	; 0x17be <Update_OBC+0x2e8>
    16c8:	01 15       	cp	r16, r1
			spaces = 0; // reset for next line of titles
		}
		
		// Put the titles in normally
		// re-initialize the spaces
		while(spaces){
    16ca:	11 05       	cpc	r17, r1
    16cc:	29 f0       	breq	.+10     	; 0x16d8 <Update_OBC+0x202>
    16ce:	80 e2       	ldi	r24, 0x20	; 32
			UART0_putchar(' ');
    16d0:	dd d1       	rcall	.+954    	; 0x1a8c <UART0_putchar>
    16d2:	01 50       	subi	r16, 0x01	; 1
    16d4:	11 09       	sbc	r17, r1
			spaces--;
    16d6:	d9 f7       	brne	.-10     	; 0x16ce <Update_OBC+0x1f8>
    16d8:	c7 01       	movw	r24, r14
			spaces = 0; // reset for next line of titles
		}
		
		// Put the titles in normally
		// re-initialize the spaces
		while(spaces){
    16da:	e8 d1       	rcall	.+976    	; 0x1aac <UART0_putstring>
			UART0_putchar(' ');
			spaces--;
		}
		UART0_putstring(sensors[s_incr]);
    16dc:	bf ef       	ldi	r27, 0xFF	; 255
    16de:	cb 1a       	sub	r12, r27
    16e0:	db 0a       	sbc	r13, r27
		s_incr++;
    16e2:	f7 01       	movw	r30, r14
    16e4:	01 90       	ld	r0, Z+
    16e6:	00 20       	and	r0, r0
		spaces = spacing - strlen(sensors[s_incr - 1]);
    16e8:	e9 f7       	brne	.-6      	; 0x16e4 <Update_OBC+0x20e>
    16ea:	31 97       	sbiw	r30, 0x01	; 1
    16ec:	ee 19       	sub	r30, r14
    16ee:	ff 09       	sbc	r31, r15
    16f0:	85 01       	movw	r16, r10
    16f2:	0e 1b       	sub	r16, r30
    16f4:	1f 0b       	sbc	r17, r31
    16f6:	ec e0       	ldi	r30, 0x0C	; 12
		
		// Print the second round of telemetry data
		if (s_incr == 12){
    16f8:	ce 16       	cp	r12, r30
    16fa:	d1 04       	cpc	r13, r1
    16fc:	09 f0       	breq	.+2      	; 0x1700 <Update_OBC+0x22a>
    16fe:	5f c0       	rjmp	.+190    	; 0x17be <Update_OBC+0x2e8>
    1700:	8a e0       	ldi	r24, 0x0A	; 10
			spaces2 = 0; // re-initialize spaces to 0
			UART0_putchar('\n');
    1702:	c4 d1       	rcall	.+904    	; 0x1a8c <UART0_putchar>
    1704:	8d e0       	ldi	r24, 0x0D	; 13
    1706:	c2 d1       	rcall	.+900    	; 0x1a8c <UART0_putchar>
			UART0_putchar('\r');
    1708:	fc e0       	ldi	r31, 0x0C	; 12
    170a:	2f 16       	cp	r2, r31
    170c:	31 04       	cpc	r3, r1
			// print values
			while(i < s_incr){
    170e:	0c f0       	brlt	.+2      	; 0x1712 <Update_OBC+0x23c>
    1710:	99 c0       	rjmp	.+306    	; 0x1844 <Update_OBC+0x36e>
    1712:	c1 01       	movw	r24, r2
    1714:	88 0f       	add	r24, r24
    1716:	99 1f       	adc	r25, r25
    1718:	88 0f       	add	r24, r24
    171a:	99 1f       	adc	r25, r25
    171c:	c4 5c       	subi	r28, 0xC4	; 196
    171e:	de 4f       	sbci	r29, 0xFE	; 254
    1720:	48 80       	ld	r4, Y
    1722:	59 80       	ldd	r5, Y+1	; 0x01
    1724:	cc 53       	subi	r28, 0x3C	; 60
    1726:	d1 40       	sbci	r29, 0x01	; 1
    1728:	48 0e       	add	r4, r24
    172a:	59 1e       	adc	r5, r25
    172c:	0f 2e       	mov	r0, r31
    172e:	fc e6       	ldi	r31, 0x6C	; 108
    1730:	af 2e       	mov	r10, r31
				while(spaces2){
					UART0_putchar(' ');
					spaces2--;
				}
				sprintf(measure,"%f",telem[i]);
    1732:	f3 e0       	ldi	r31, 0x03	; 3
    1734:	bf 2e       	mov	r11, r31
    1736:	f0 2d       	mov	r31, r0
    1738:	8e 01       	movw	r16, r28
    173a:	0e 5c       	subi	r16, 0xCE	; 206
    173c:	1e 4f       	sbci	r17, 0xFE	; 254
    173e:	0f 2e       	mov	r0, r31
    1740:	ff e0       	ldi	r31, 0x0F	; 15
				UART0_putstring(measure);
				i++;
				spaces2 = spacing - strlen(measure);
    1742:	cf 2e       	mov	r12, r31
    1744:	d1 2c       	mov	r13, r1
    1746:	f0 2d       	mov	r31, r0
    1748:	06 c0       	rjmp	.+12     	; 0x1756 <Update_OBC+0x280>
    174a:	80 e2       	ldi	r24, 0x20	; 32
    174c:	9f d1       	rcall	.+830    	; 0x1a8c <UART0_putchar>
			UART0_putchar('\n');
			UART0_putchar('\r');
			// print values
			while(i < s_incr){
				while(spaces2){
					UART0_putchar(' ');
    174e:	21 e0       	ldi	r18, 0x01	; 1
    1750:	e2 1a       	sub	r14, r18
    1752:	f1 08       	sbc	r15, r1
					spaces2--;
    1754:	d1 f7       	brne	.-12     	; 0x174a <Update_OBC+0x274>
    1756:	d2 01       	movw	r26, r4
    1758:	8c 91       	ld	r24, X
			spaces2 = 0; // re-initialize spaces to 0
			UART0_putchar('\n');
			UART0_putchar('\r');
			// print values
			while(i < s_incr){
				while(spaces2){
    175a:	11 96       	adiw	r26, 0x01	; 1
					UART0_putchar(' ');
					spaces2--;
				}
				sprintf(measure,"%f",telem[i]);
    175c:	9c 91       	ld	r25, X
    175e:	11 97       	sbiw	r26, 0x01	; 1
    1760:	12 96       	adiw	r26, 0x02	; 2
    1762:	2c 91       	ld	r18, X
    1764:	12 97       	sbiw	r26, 0x02	; 2
    1766:	13 96       	adiw	r26, 0x03	; 3
    1768:	3c 91       	ld	r19, X
    176a:	b4 e0       	ldi	r27, 0x04	; 4
    176c:	4b 0e       	add	r4, r27
    176e:	51 1c       	adc	r5, r1
    1770:	3f 93       	push	r19
    1772:	2f 93       	push	r18
    1774:	9f 93       	push	r25
    1776:	8f 93       	push	r24
    1778:	bf 92       	push	r11
    177a:	af 92       	push	r10
    177c:	1f 93       	push	r17
    177e:	0f 93       	push	r16
    1780:	0e 94 aa 15 	call	0x2b54	; 0x2b54 <sprintf>
    1784:	c8 01       	movw	r24, r16
    1786:	92 d1       	rcall	.+804    	; 0x1aac <UART0_putstring>
				UART0_putstring(measure);
    1788:	ef ef       	ldi	r30, 0xFF	; 255
    178a:	2e 1a       	sub	r2, r30
    178c:	3e 0a       	sbc	r3, r30
				i++;
    178e:	f8 01       	movw	r30, r16
    1790:	01 90       	ld	r0, Z+
    1792:	00 20       	and	r0, r0
				spaces2 = spacing - strlen(measure);
    1794:	e9 f7       	brne	.-6      	; 0x1790 <Update_OBC+0x2ba>
    1796:	31 97       	sbiw	r30, 0x01	; 1
    1798:	e0 1b       	sub	r30, r16
    179a:	f1 0b       	sbc	r31, r17
    179c:	76 01       	movw	r14, r12
    179e:	ee 1a       	sub	r14, r30
    17a0:	ff 0a       	sbc	r15, r31
    17a2:	0f b6       	in	r0, 0x3f	; 63
    17a4:	f8 94       	cli
    17a6:	de bf       	out	0x3e, r29	; 62
		if (s_incr == 12){
			spaces2 = 0; // re-initialize spaces to 0
			UART0_putchar('\n');
			UART0_putchar('\r');
			// print values
			while(i < s_incr){
    17a8:	0f be       	out	0x3f, r0	; 63
    17aa:	cd bf       	out	0x3d, r28	; 61
    17ac:	9c e0       	ldi	r25, 0x0C	; 12
    17ae:	29 16       	cp	r2, r25
    17b0:	31 04       	cpc	r3, r1
    17b2:	09 f4       	brne	.+2      	; 0x17b6 <Update_OBC+0x2e0>
    17b4:	47 c0       	rjmp	.+142    	; 0x1844 <Update_OBC+0x36e>
    17b6:	e1 14       	cp	r14, r1
    17b8:	f1 04       	cpc	r15, r1
				while(spaces2){
    17ba:	39 f6       	brne	.-114    	; 0x174a <Update_OBC+0x274>
    17bc:	cc cf       	rjmp	.-104    	; 0x1756 <Update_OBC+0x280>
    17be:	aa e0       	ldi	r26, 0x0A	; 10
    17c0:	ea 0e       	add	r14, r26
    17c2:	f1 1c       	adc	r15, r1
    17c4:	0b cf       	rjmp	.-490    	; 0x15dc <Update_OBC+0x106>
    17c6:	80 e2       	ldi	r24, 0x20	; 32
    17c8:	61 d1       	rcall	.+706    	; 0x1a8c <UART0_putchar>
	UART0_putchar('\n');
	UART0_putchar('\n');
	UART0_putchar('\r');
	while(l_incr < 8){
		while(spaces){
			UART0_putchar(' ');
    17ca:	01 50       	subi	r16, 0x01	; 1
    17cc:	11 09       	sbc	r17, r1
    17ce:	d9 f7       	brne	.-10     	; 0x17c6 <Update_OBC+0x2f0>
			spaces--;
    17d0:	ba e0       	ldi	r27, 0x0A	; 10
    17d2:	eb 0e       	add	r14, r27
	spaces = 0; // re initialize spaces
	UART0_putchar('\n');
	UART0_putchar('\n');
	UART0_putchar('\r');
	while(l_incr < 8){
		while(spaces){
    17d4:	f1 1c       	adc	r15, r1
    17d6:	c7 01       	movw	r24, r14
    17d8:	69 d1       	rcall	.+722    	; 0x1aac <UART0_putstring>
    17da:	f7 01       	movw	r30, r14
			UART0_putchar(' ');
			spaces--;
		}
		UART0_putstring(loads[l_incr]);
    17dc:	01 90       	ld	r0, Z+
    17de:	00 20       	and	r0, r0
		l_incr++;
		spaces = spacing - strlen(loads[l_incr - 1]);
    17e0:	e9 f7       	brne	.-6      	; 0x17dc <Update_OBC+0x306>
    17e2:	31 97       	sbiw	r30, 0x01	; 1
    17e4:	ee 19       	sub	r30, r14
    17e6:	ff 09       	sbc	r31, r15
    17e8:	86 01       	movw	r16, r12
    17ea:	0e 1b       	sub	r16, r30
    17ec:	1f 0b       	sbc	r17, r31
    17ee:	ae 14       	cp	r10, r14
    17f0:	bf 04       	cpc	r11, r15
	// Print the Load Titles
	spaces = 0; // re initialize spaces
	UART0_putchar('\n');
	UART0_putchar('\n');
	UART0_putchar('\r');
	while(l_incr < 8){
    17f2:	21 f0       	breq	.+8      	; 0x17fc <Update_OBC+0x326>
    17f4:	01 15       	cp	r16, r1
    17f6:	11 05       	cpc	r17, r1
		while(spaces){
    17f8:	31 f7       	brne	.-52     	; 0x17c6 <Update_OBC+0x2f0>
    17fa:	ea cf       	rjmp	.-44     	; 0x17d0 <Update_OBC+0x2fa>
    17fc:	8a e0       	ldi	r24, 0x0A	; 10
	
	// Print the load states
	// Print the Load Titles
	l_incr = 0; // reset load increment to 0
	spaces = 0; // re initialize spaces
	UART0_putchar('\n');
    17fe:	46 d1       	rcall	.+652    	; 0x1a8c <UART0_putchar>
    1800:	8d e0       	ldi	r24, 0x0D	; 13
    1802:	44 d1       	rcall	.+648    	; 0x1a8c <UART0_putchar>
	UART0_putchar('\r');
    1804:	74 01       	movw	r14, r8
    1806:	e8 e0       	ldi	r30, 0x08	; 8
    1808:	8e 0e       	add	r8, r30
    180a:	91 1c       	adc	r9, r1
    180c:	00 e0       	ldi	r16, 0x00	; 0
    180e:	10 e0       	ldi	r17, 0x00	; 0
    1810:	0e c0       	rjmp	.+28     	; 0x182e <Update_OBC+0x358>
	}
	
	// Print the load states
	// Print the Load Titles
	l_incr = 0; // reset load increment to 0
	spaces = 0; // re initialize spaces
    1812:	80 e2       	ldi	r24, 0x20	; 32
    1814:	3b d1       	rcall	.+630    	; 0x1a8c <UART0_putchar>
	UART0_putchar('\n');
	UART0_putchar('\r');
	while(l_incr < 8){
		while(spaces){
			UART0_putchar(' ');
    1816:	01 50       	subi	r16, 0x01	; 1
    1818:	11 09       	sbc	r17, r1
			spaces--;
    181a:	d9 f7       	brne	.-10     	; 0x1812 <Update_OBC+0x33c>
	l_incr = 0; // reset load increment to 0
	spaces = 0; // re initialize spaces
	UART0_putchar('\n');
	UART0_putchar('\r');
	while(l_incr < 8){
		while(spaces){
    181c:	d7 01       	movw	r26, r14
			UART0_putchar(' ');
			spaces--;
		}
		UART0_putchar(power[l_incr]);
    181e:	8d 91       	ld	r24, X+
    1820:	7d 01       	movw	r14, r26
    1822:	34 d1       	rcall	.+616    	; 0x1a8c <UART0_putchar>
		l_incr++;
		spaces = spacing - 1;
    1824:	0e e0       	ldi	r16, 0x0E	; 14
    1826:	10 e0       	ldi	r17, 0x00	; 0
	// Print the Load Titles
	l_incr = 0; // reset load increment to 0
	spaces = 0; // re initialize spaces
	UART0_putchar('\n');
	UART0_putchar('\r');
	while(l_incr < 8){
    1828:	8e 14       	cp	r8, r14
    182a:	9f 04       	cpc	r9, r15
    182c:	21 f0       	breq	.+8      	; 0x1836 <Update_OBC+0x360>
		while(spaces){
    182e:	01 15       	cp	r16, r1
    1830:	11 05       	cpc	r17, r1
    1832:	79 f7       	brne	.-34     	; 0x1812 <Update_OBC+0x33c>
    1834:	f3 cf       	rjmp	.-26     	; 0x181c <Update_OBC+0x346>
		}
		UART0_putchar(power[l_incr]);
		l_incr++;
		spaces = spacing - 1;
	}
	UART0_putchar('\n');
    1836:	8a e0       	ldi	r24, 0x0A	; 10
    1838:	29 d1       	rcall	.+594    	; 0x1a8c <UART0_putchar>
    183a:	8a e0       	ldi	r24, 0x0A	; 10
	UART0_putchar('\n');
    183c:	27 d1       	rcall	.+590    	; 0x1a8c <UART0_putchar>
    183e:	8d e0       	ldi	r24, 0x0D	; 13
    1840:	25 d1       	rcall	.+586    	; 0x1a8c <UART0_putchar>
	UART0_putchar('\r');
    1842:	14 c0       	rjmp	.+40     	; 0x186c <Update_OBC+0x396>
    1844:	8a e0       	ldi	r24, 0x0A	; 10
    1846:	22 d1       	rcall	.+580    	; 0x1a8c <UART0_putchar>
}
    1848:	8a e0       	ldi	r24, 0x0A	; 10
	}
	
	
	// Print the Load Titles
	spaces = 0; // re initialize spaces
	UART0_putchar('\n');
    184a:	20 d1       	rcall	.+576    	; 0x1a8c <UART0_putchar>
    184c:	8d e0       	ldi	r24, 0x0D	; 13
    184e:	1e d1       	rcall	.+572    	; 0x1a8c <UART0_putchar>
	UART0_putchar('\n');
    1850:	7e 01       	movw	r14, r28
    1852:	ba e6       	ldi	r27, 0x6A	; 106
    1854:	eb 0e       	add	r14, r27
	UART0_putchar('\r');
    1856:	f1 1c       	adc	r15, r1
    1858:	5e 01       	movw	r10, r28
    185a:	e0 eb       	ldi	r30, 0xB0	; 176
    185c:	ae 0e       	add	r10, r30
    185e:	b1 1c       	adc	r11, r1
    1860:	0f 2e       	mov	r0, r31
    1862:	ff e0       	ldi	r31, 0x0F	; 15
    1864:	cf 2e       	mov	r12, r31
    1866:	d1 2c       	mov	r13, r1
    1868:	f0 2d       	mov	r31, r0
    186a:	b5 cf       	rjmp	.-150    	; 0x17d6 <Update_OBC+0x300>
			UART0_putchar(' ');
			spaces--;
		}
		UART0_putstring(loads[l_incr]);
		l_incr++;
		spaces = spacing - strlen(loads[l_incr - 1]);
    186c:	c1 5c       	subi	r28, 0xC1	; 193
    186e:	de 4f       	sbci	r29, 0xFE	; 254
    1870:	0f b6       	in	r0, 0x3f	; 63
    1872:	f8 94       	cli
    1874:	de bf       	out	0x3e, r29	; 62
    1876:	0f be       	out	0x3f, r0	; 63
		spaces = spacing - 1;
	}
	UART0_putchar('\n');
	UART0_putchar('\n');
	UART0_putchar('\r');
}
    1878:	cd bf       	out	0x3d, r28	; 61
    187a:	df 91       	pop	r29
    187c:	cf 91       	pop	r28
    187e:	1f 91       	pop	r17
    1880:	0f 91       	pop	r16
    1882:	ff 90       	pop	r15
    1884:	ef 90       	pop	r14
    1886:	df 90       	pop	r13
    1888:	cf 90       	pop	r12
    188a:	bf 90       	pop	r11
    188c:	af 90       	pop	r10
    188e:	9f 90       	pop	r9
    1890:	8f 90       	pop	r8
    1892:	7f 90       	pop	r7
    1894:	6f 90       	pop	r6
    1896:	5f 90       	pop	r5
    1898:	4f 90       	pop	r4
    189a:	3f 90       	pop	r3
    189c:	2f 90       	pop	r2
    189e:	08 95       	ret

000018a0 <Manual_STATE>:
    18a0:	db 01       	movw	r26, r22
    18a2:	fc 01       	movw	r30, r24
    18a4:	ac 01       	movw	r20, r24
    18a6:	48 5f       	subi	r20, 0xF8	; 248
    18a8:	5f 4f       	sbci	r21, 0xFF	; 255
    18aa:	3f ef       	ldi	r19, 0xFF	; 255
	
	// String Index
	int i = 0;
	
	// 8 bit mask to check the state of each position
	uint8_t mask = 0x01;
    18ac:	91 e0       	ldi	r25, 0x01	; 1
	uint8_t new_mask = 0xff;
	// keep track of the first index
	
	while(i < 8){
		if (power[i] == 'y'){
    18ae:	21 91       	ld	r18, Z+
    18b0:	29 37       	cpi	r18, 0x79	; 121
    18b2:	29 f4       	brne	.+10     	; 0x18be <Manual_STATE+0x1e>
			power_state[0] |= mask;
    18b4:	8c 91       	ld	r24, X
    18b6:	89 2b       	or	r24, r25
    18b8:	8c 93       	st	X, r24
			mask = mask << 1; // shift left once
    18ba:	99 0f       	add	r25, r25
    18bc:	05 c0       	rjmp	.+10     	; 0x18c8 <Manual_STATE+0x28>
		}
		else{
			new_mask ^= mask;
    18be:	39 27       	eor	r19, r25
			power_state[0] &= new_mask;
    18c0:	2c 91       	ld	r18, X
    18c2:	23 23       	and	r18, r19
    18c4:	2c 93       	st	X, r18
			mask = mask << 1; // shift left once
    18c6:	99 0f       	add	r25, r25
	// 8 bit mask to check the state of each position
	uint8_t mask = 0x01;
	uint8_t new_mask = 0xff;
	// keep track of the first index
	
	while(i < 8){
    18c8:	e4 17       	cp	r30, r20
    18ca:	f5 07       	cpc	r31, r21
    18cc:	81 f7       	brne	.-32     	; 0x18ae <Manual_STATE+0xe>
			power_state[0] &= new_mask;
			mask = mask << 1; // shift left once
		}
		i++;
	}
    18ce:	08 95       	ret

000018d0 <commandDecode>:
//
// Author: Ben Wedemire & Chris Thomas
// Date: 2019-03-17
// Description: Decodes commands from the OBC and calls their corresponding function.		
/*========================================================================================*/
void commandDecode (char* obc_command, double* telem, uint8_t* mode, uint8_t* power_state, char* power){
    18d0:	af 92       	push	r10
    18d2:	bf 92       	push	r11
    18d4:	cf 92       	push	r12
    18d6:	df 92       	push	r13
    18d8:	ef 92       	push	r14
    18da:	ff 92       	push	r15
    18dc:	0f 93       	push	r16
    18de:	1f 93       	push	r17
    18e0:	cf 93       	push	r28
    18e2:	df 93       	push	r29
    18e4:	ec 01       	movw	r28, r24
    18e6:	6b 01       	movw	r12, r22
    18e8:	7a 01       	movw	r14, r20
    18ea:	b2 2e       	mov	r11, r18
    18ec:	a3 2e       	mov	r10, r19
	
	// Check for command in list, if not in list, prompt user again
	
	while(incorrect){
		// Receive Command from OBC
		UART0_getstring(obc_command);
    18ee:	ce 01       	movw	r24, r28
    18f0:	eb d0       	rcall	.+470    	; 0x1ac8 <UART0_getstring>
		
		// Print the Command for TESTING
		UART0_putstring(obc_command);
    18f2:	ce 01       	movw	r24, r28
    18f4:	db d0       	rcall	.+438    	; 0x1aac <UART0_putstring>
		UART0_putchar('\n');
    18f6:	8a e0       	ldi	r24, 0x0A	; 10
    18f8:	c9 d0       	rcall	.+402    	; 0x1a8c <UART0_putchar>
		UART0_putchar('\n');
    18fa:	8a e0       	ldi	r24, 0x0A	; 10
    18fc:	c7 d0       	rcall	.+398    	; 0x1a8c <UART0_putchar>
		UART0_putchar('\r');
    18fe:	8d e0       	ldi	r24, 0x0D	; 13
    1900:	c5 d0       	rcall	.+394    	; 0x1a8c <UART0_putchar>
    1902:	fe 01       	movw	r30, r28
		
		if (strlen(obc_command) > 20) {
    1904:	01 90       	ld	r0, Z+
    1906:	00 20       	and	r0, r0
    1908:	e9 f7       	brne	.-6      	; 0x1904 <commandDecode+0x34>
    190a:	31 97       	sbiw	r30, 0x01	; 1
    190c:	ec 1b       	sub	r30, r28
    190e:	fd 0b       	sbc	r31, r29
    1910:	75 97       	sbiw	r30, 0x15	; 21
    1912:	20 f0       	brcs	.+8      	; 0x191c <commandDecode+0x4c>
			UART0_putstring("Error! Command larger than 20 chars");
    1914:	8f e6       	ldi	r24, 0x6F	; 111
    1916:	93 e0       	ldi	r25, 0x03	; 3
    1918:	c9 d0       	rcall	.+402    	; 0x1aac <UART0_putstring>
    191a:	e9 cf       	rjmp	.-46     	; 0x18ee <commandDecode+0x1e>
    191c:	63 e9       	ldi	r22, 0x93	; 147
		} //end if
		else {
			
			incorrect = 0; // assume the user inputs the correct command until it isn't found
			
			if (strcmp(obc_command, "TelemRqt") == 0) {
    191e:	73 e0       	ldi	r23, 0x03	; 3
    1920:	ce 01       	movw	r24, r28
    1922:	0e 94 5a 15 	call	0x2ab4	; 0x2ab4 <strcmp>
    1926:	89 2b       	or	r24, r25
    1928:	21 f4       	brne	.+8      	; 0x1932 <commandDecode+0x62>
				Update_TELEM(telem, power_state);
    192a:	6b 2d       	mov	r22, r11
    192c:	c6 01       	movw	r24, r12
    192e:	6a dd       	rcall	.-1324   	; 0x1404 <Update_TELEM>
    1930:	5a c0       	rjmp	.+180    	; 0x19e6 <commandDecode+0x116>
    1932:	6c e9       	ldi	r22, 0x9C	; 156
				//send telem
			} //end if
			else if (strcmp(obc_command, "SubSysRqt") == 0) {	
    1934:	73 e0       	ldi	r23, 0x03	; 3
    1936:	ce 01       	movw	r24, r28
    1938:	0e 94 5a 15 	call	0x2ab4	; 0x2ab4 <strcmp>
    193c:	89 2b       	or	r24, r25
    193e:	e1 f4       	brne	.+56     	; 0x1978 <commandDecode+0xa8>
				if(!mode[0]){
    1940:	f7 01       	movw	r30, r14
    1942:	80 81       	ld	r24, Z
    1944:	81 11       	cpse	r24, r1
					// power_state = some new value (input yet to be determined, handle in GUI)
					UART0_putstring("Enter the desired state: ");
    1946:	4f c0       	rjmp	.+158    	; 0x19e6 <commandDecode+0x116>
    1948:	86 ea       	ldi	r24, 0xA6	; 166
    194a:	93 e0       	ldi	r25, 0x03	; 3
					UART0_putchar('\n');
    194c:	af d0       	rcall	.+350    	; 0x1aac <UART0_putstring>
    194e:	8a e0       	ldi	r24, 0x0A	; 10
    1950:	9d d0       	rcall	.+314    	; 0x1a8c <UART0_putchar>
					UART0_putchar('\n');
    1952:	8a e0       	ldi	r24, 0x0A	; 10
    1954:	9b d0       	rcall	.+310    	; 0x1a8c <UART0_putchar>
					UART0_putchar('\r');
    1956:	8d e0       	ldi	r24, 0x0D	; 13
    1958:	99 d0       	rcall	.+306    	; 0x1a8c <UART0_putchar>
					UART0_getstring(power);
    195a:	c8 01       	movw	r24, r16
    195c:	b5 d0       	rcall	.+362    	; 0x1ac8 <UART0_getstring>
					Manual_STATE(power, power_state);
    195e:	6b 2d       	mov	r22, r11
    1960:	7a 2d       	mov	r23, r10
    1962:	c8 01       	movw	r24, r16
    1964:	9d df       	rcall	.-198    	; 0x18a0 <Manual_STATE>
    1966:	c8 01       	movw	r24, r16
					UART0_putstring(power);
    1968:	a1 d0       	rcall	.+322    	; 0x1aac <UART0_putstring>
    196a:	8a e0       	ldi	r24, 0x0A	; 10
    196c:	8f d0       	rcall	.+286    	; 0x1a8c <UART0_putchar>
					UART0_putchar('\n');
    196e:	8a e0       	ldi	r24, 0x0A	; 10
    1970:	8d d0       	rcall	.+282    	; 0x1a8c <UART0_putchar>
    1972:	8d e0       	ldi	r24, 0x0D	; 13
					UART0_putchar('\n');
    1974:	8b d0       	rcall	.+278    	; 0x1a8c <UART0_putchar>
    1976:	37 c0       	rjmp	.+110    	; 0x19e6 <commandDecode+0x116>
    1978:	60 ec       	ldi	r22, 0xC0	; 192
					UART0_putchar('\r');
    197a:	73 e0       	ldi	r23, 0x03	; 3
    197c:	ce 01       	movw	r24, r28
    197e:	0e 94 5a 15 	call	0x2ab4	; 0x2ab4 <strcmp>
				}
				else{
					// Tell the user the EPS is still in autonomous mode and it must be changed
				}
			} //else if
			else if (strcmp(obc_command, "PwrMatEdit") == 0) {
    1982:	89 2b       	or	r24, r25
    1984:	81 f1       	breq	.+96     	; 0x19e6 <commandDecode+0x116>
    1986:	6b ec       	ldi	r22, 0xCB	; 203
    1988:	73 e0       	ldi	r23, 0x03	; 3
    198a:	ce 01       	movw	r24, r28
    198c:	0e 94 5a 15 	call	0x2ab4	; 0x2ab4 <strcmp>
				//edit the power state matrix
			} //end else if
			else if (strcmp(obc_command, "PwrMatRqt") == 0) {
    1990:	89 2b       	or	r24, r25
    1992:	49 f1       	breq	.+82     	; 0x19e6 <commandDecode+0x116>
    1994:	65 ed       	ldi	r22, 0xD5	; 213
    1996:	73 e0       	ldi	r23, 0x03	; 3
    1998:	ce 01       	movw	r24, r28
    199a:	0e 94 5a 15 	call	0x2ab4	; 0x2ab4 <strcmp>
				//send the power state matrix cell to the obc
			} //end else if
			else if (strcmp(obc_command, "ModeChange") == 0) {
    199e:	89 2b       	or	r24, r25
    19a0:	41 f4       	brne	.+16     	; 0x19b2 <commandDecode+0xe2>
    19a2:	81 e0       	ldi	r24, 0x01	; 1
    19a4:	f7 01       	movw	r30, r14
    19a6:	90 81       	ld	r25, Z
    19a8:	91 11       	cpse	r25, r1
				// The character 0 must be sent to go into manual mode
					mode[0] = !mode[0]; // toggle the current mode
    19aa:	80 e0       	ldi	r24, 0x00	; 0
    19ac:	f7 01       	movw	r30, r14
    19ae:	80 83       	st	Z, r24
    19b0:	1a c0       	rjmp	.+52     	; 0x19e6 <commandDecode+0x116>
    19b2:	60 ee       	ldi	r22, 0xE0	; 224
    19b4:	73 e0       	ldi	r23, 0x03	; 3
    19b6:	ce 01       	movw	r24, r28
    19b8:	0e 94 5a 15 	call	0x2ab4	; 0x2ab4 <strcmp>
				//change or update the mode of the micro
				// In this state do not update the power state, simply remain in the one specified
				// Have an SOC thing here
			} //end else if
			else if (strcmp(obc_command, "LaunchReset") == 0) {
    19bc:	89 2b       	or	r24, r25
    19be:	11 f4       	brne	.+4      	; 0x19c4 <commandDecode+0xf4>
    19c0:	be d8       	rcall	.-3716   	; 0xb3e <launch_reset>
    19c2:	11 c0       	rjmp	.+34     	; 0x19e6 <commandDecode+0x116>
				launch_reset();
    19c4:	6c ee       	ldi	r22, 0xEC	; 236
    19c6:	73 e0       	ldi	r23, 0x03	; 3
				//reset the system to a pre-launch config
				// Use the watchdog to reset the system
			} //end else if
			else if (strcmp(obc_command, "HelloCheck") == 0) {
    19c8:	ce 01       	movw	r24, r28
    19ca:	0e 94 5a 15 	call	0x2ab4	; 0x2ab4 <strcmp>
    19ce:	89 2b       	or	r24, r25
    19d0:	51 f0       	breq	.+20     	; 0x19e6 <commandDecode+0x116>
    19d2:	87 ef       	ldi	r24, 0xF7	; 247
    19d4:	93 e0       	ldi	r25, 0x03	; 3
				//say hello
			} //end else if
			else {
				incorrect = 1;
				UART0_putstring("Try again Mr. Poopy Bum");
    19d6:	6a d0       	rcall	.+212    	; 0x1aac <UART0_putstring>
    19d8:	8a e0       	ldi	r24, 0x0A	; 10
    19da:	58 d0       	rcall	.+176    	; 0x1a8c <UART0_putchar>
    19dc:	8a e0       	ldi	r24, 0x0A	; 10
				UART0_putchar('\n');
    19de:	56 d0       	rcall	.+172    	; 0x1a8c <UART0_putchar>
    19e0:	8d e0       	ldi	r24, 0x0D	; 13
    19e2:	54 d0       	rcall	.+168    	; 0x1a8c <UART0_putchar>
				UART0_putchar('\n');
    19e4:	84 cf       	rjmp	.-248    	; 0x18ee <commandDecode+0x1e>
    19e6:	df 91       	pop	r29
    19e8:	cf 91       	pop	r28
				UART0_putchar('\r');
    19ea:	1f 91       	pop	r17
    19ec:	0f 91       	pop	r16
    19ee:	ff 90       	pop	r15
    19f0:	ef 90       	pop	r14
				//UART0_putstring(strcat("Error! The following command isn't recognized: ", obc_command));
			} //end else
		} //end else
	}
} //end commandDecode
    19f2:	df 90       	pop	r13
    19f4:	cf 90       	pop	r12
    19f6:	bf 90       	pop	r11
    19f8:	af 90       	pop	r10
    19fa:	08 95       	ret

000019fc <GPIO_init>:

void GPIO_init(){
	
	// Initializing the PORTs
	
	DDRH = 0x7F; // PORTH pins 0-6 set as outputs
    19fc:	8f e7       	ldi	r24, 0x7F	; 127
    19fe:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <__TEXT_REGION_LENGTH__+0x7e0101>
	DDRL = 0x0E; // PORTL pins 1-3 set as outputs
    1a02:	9e e0       	ldi	r25, 0x0E	; 14
    1a04:	90 93 0a 01 	sts	0x010A, r25	; 0x80010a <__TEXT_REGION_LENGTH__+0x7e010a>
	DDRA = 0xF0; // PORTA pins 4-7 set as outputs
    1a08:	90 ef       	ldi	r25, 0xF0	; 240
    1a0a:	91 b9       	out	0x01, r25	; 1
	DDRJ = 0x7F; // PORTJ pins 0-6 set as outputs
    1a0c:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <__TEXT_REGION_LENGTH__+0x7e0104>
	DDRC = 0xFF; // PORTC pins 0-7 set as outputs
    1a10:	8f ef       	ldi	r24, 0xFF	; 255
    1a12:	87 b9       	out	0x07, r24	; 7
	
	// Set Output as Low
	PORTH = 0x02; // pin 1 set high to inhibit temperature measurement
    1a14:	82 e0       	ldi	r24, 0x02	; 2
    1a16:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <__TEXT_REGION_LENGTH__+0x7e0102>
	PORTL = 0x00;
    1a1a:	10 92 0b 01 	sts	0x010B, r1	; 0x80010b <__TEXT_REGION_LENGTH__+0x7e010b>
	PORTA = 0x00;
    1a1e:	12 b8       	out	0x02, r1	; 2
	PORTJ = 0x00; 
    1a20:	10 92 05 01 	sts	0x0105, r1	; 0x800105 <__TEXT_REGION_LENGTH__+0x7e0105>
	PORTC = 0x00;
    1a24:	18 b8       	out	0x08, r1	; 8
    1a26:	08 95       	ret

00001a28 <ADC_init>:
/*========================================================================================*/

void ADC_init(){
	
	// Enable as Input
	DDRF = 0x00;
    1a28:	10 ba       	out	0x10, r1	; 16
	
	// Enable the 1.1V internal reference
	//ADMUX |= ((REFS1 << 0) | (REFS0 << 0)); // set the first bit to 1
	ADMUX = 0x00;
    1a2a:	10 92 7c 00 	sts	0x007C, r1	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>
	
	// Enable the ADC via the status control register & enable interrupt
	//ADCSRA |= (ADEN << 1) | (ADPS2 << 1) | (ADPS0 << 1) | (ADIE << 1);
	ADCSRA = 0x85;
    1a2e:	85 e8       	ldi	r24, 0x85	; 133
    1a30:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
    1a34:	08 95       	ret

00001a36 <CLK_init>:
/*========================================================================================*/

CLK_init(){
	
	// Enable Timer 1
	TCCR1B = 0x04;
    1a36:	84 e0       	ldi	r24, 0x04	; 4
    1a38:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
	
	// Enable Output Compare Interrupt
	TIMSK1 = 0x02;
    1a3c:	82 e0       	ldi	r24, 0x02	; 2
    1a3e:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__TEXT_REGION_LENGTH__+0x7e006f>
	
	// Set Counter to 65,536 clock cycles (MAX)
	OCR1A = 0xff;
    1a42:	8f ef       	ldi	r24, 0xFF	; 255
    1a44:	90 e0       	ldi	r25, 0x00	; 0
    1a46:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
    1a4a:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
	
	// Set clock to 0
	TCNT1 = 0x0000;
    1a4e:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
    1a52:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
    1a56:	08 95       	ret

00001a58 <UART0_init>:
/*========================================================================================*/

void UART0_init(){
	
	// Using the values from set baud tool
	UBRR0H = UBRRH_VALUE;
    1a58:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
	UBRR0L = UBRRL_VALUE;
    1a5c:	8c e0       	ldi	r24, 0x0C	; 12
    1a5e:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
	
	// Enable TX & RX and Enable RX complete interrupt
	UCSR0B = 0x98; // enabling bits 4 & 3 (RX & TX) ****** RE-ENABLE INTERRUPT!!!!!!!
    1a62:	88 e9       	ldi	r24, 0x98	; 152
    1a64:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
	
	
	// Set up the format 8bit no parity
	UCSR0C = 0x06; // enable 8 bit chars
    1a68:	86 e0       	ldi	r24, 0x06	; 6
    1a6a:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7e00c2>
    1a6e:	08 95       	ret

00001a70 <WD_init>:
/*========================================================================================*/

void WD_init(){
	
	// Reset the MCU reset flag
	MCUSR &= 0xf7; // changes bit 3 to 0
    1a70:	84 b7       	in	r24, 0x34	; 52
    1a72:	87 7f       	andi	r24, 0xF7	; 247
    1a74:	84 bf       	out	0x34, r24	; 52
	
	// Enable the interrupt/system reset mode
	wdt_enable(INTERRUPT_SYSTEM_RESET_MODE);
    1a76:	82 e0       	ldi	r24, 0x02	; 2
    1a78:	6c d0       	rcall	.+216    	; 0x1b52 <wdt_enable>
	
	// Set pre-scaler to 8s
	wdt_set_timeout_period(WDT_TIMEOUT_PERIOD_1024KCLK);
    1a7a:	89 e0       	ldi	r24, 0x09	; 9
    1a7c:	46 c0       	rjmp	.+140    	; 0x1b0a <wdt_set_timeout_period>
    1a7e:	08 95       	ret

00001a80 <ALL_init>:
/*========================================================================================*/

void ALL_init(){
	
	// Initialize GPIO
	GPIO_init();
    1a80:	bd df       	rcall	.-134    	; 0x19fc <GPIO_init>
	
	// Initialize the ADC
	ADC_init();
    1a82:	d2 df       	rcall	.-92     	; 0x1a28 <ADC_init>
	
	// Initialize UART
	UART0_init();
    1a84:	e9 df       	rcall	.-46     	; 0x1a58 <UART0_init>
	
	// Initialize Timer (CLK) *** NOT during testing ***
	CLK_init();
    1a86:	d7 df       	rcall	.-82     	; 0x1a36 <CLK_init>
    1a88:	f3 cf       	rjmp	.-26     	; 0x1a70 <WD_init>
	
	// Initialize Watchdog Timer
	WD_init();
    1a8a:	08 95       	ret

00001a8c <UART0_putchar>:
    1a8c:	e0 ec       	ldi	r30, 0xC0	; 192
    1a8e:	f0 e0       	ldi	r31, 0x00	; 0
/*========================================================================================*/

void UART0_putchar(char h){
	
	// wait for transmit buffer to be empty
	while(! (UCSR0A & (1 << UDRE0)));
    1a90:	90 81       	ld	r25, Z
    1a92:	95 ff       	sbrs	r25, 5
    1a94:	fd cf       	rjmp	.-6      	; 0x1a90 <UART0_putchar+0x4>
	
	// Put data to be transmitted into buffer
	UDR0 = h; // write to the data register
    1a96:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
    1a9a:	08 95       	ret

00001a9c <UART0_getchar>:
/*========================================================================================*/

char UART0_getchar(){
	
	// wait for data to be received
	while (!( UCSR0A & (1 << RXC0)));
    1a9c:	e0 ec       	ldi	r30, 0xC0	; 192
    1a9e:	f0 e0       	ldi	r31, 0x00	; 0
    1aa0:	80 81       	ld	r24, Z
    1aa2:	88 23       	and	r24, r24
    1aa4:	ec f7       	brge	.-6      	; 0x1aa0 <UART0_getchar+0x4>
	
	// return the received character
	return UDR0;
    1aa6:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
	
}
    1aaa:	08 95       	ret

00001aac <UART0_putstring>:
// Author: Chris Thomas
// Date: 2019-03-13
// Description: Writes strings via UART0 using putchar.
/*========================================================================================*/

void UART0_putstring(char *string){
    1aac:	cf 93       	push	r28
    1aae:	df 93       	push	r29
    1ab0:	ec 01       	movw	r28, r24
	while(*string){
    1ab2:	88 81       	ld	r24, Y
    1ab4:	88 23       	and	r24, r24
    1ab6:	29 f0       	breq	.+10     	; 0x1ac2 <UART0_putstring+0x16>
    1ab8:	21 96       	adiw	r28, 0x01	; 1
		UART0_putchar(*string++);
    1aba:	e8 df       	rcall	.-48     	; 0x1a8c <UART0_putchar>
// Date: 2019-03-13
// Description: Writes strings via UART0 using putchar.
/*========================================================================================*/

void UART0_putstring(char *string){
	while(*string){
    1abc:	89 91       	ld	r24, Y+
    1abe:	81 11       	cpse	r24, r1
    1ac0:	fc cf       	rjmp	.-8      	; 0x1aba <UART0_putstring+0xe>
		UART0_putchar(*string++);
	}
}
    1ac2:	df 91       	pop	r29
    1ac4:	cf 91       	pop	r28
    1ac6:	08 95       	ret

00001ac8 <UART0_getstring>:
// Date: 2019-03-13
// Description: Reads strings via UART0 using getchar.
/*========================================================================================*/


void UART0_getstring(char* message){
    1ac8:	ef 92       	push	r14
    1aca:	ff 92       	push	r15
    1acc:	0f 93       	push	r16
    1ace:	1f 93       	push	r17
    1ad0:	cf 93       	push	r28
    1ad2:	df 93       	push	r29
    1ad4:	7c 01       	movw	r14, r24
	char prev;
	int i = 0;
	
	// Check the first value for the terminator ' ' (SPACE)
	prev = UART0_getchar();
    1ad6:	e2 df       	rcall	.-60     	; 0x1a9c <UART0_getchar>
	
	// Check previous value for terminator (SPACE)
	while(prev != ' '){
    1ad8:	80 32       	cpi	r24, 0x20	; 32
    1ada:	59 f0       	breq	.+22     	; 0x1af2 <UART0_getstring+0x2a>
    1adc:	87 01       	movw	r16, r14
    1ade:	c0 e0       	ldi	r28, 0x00	; 0
    1ae0:	d0 e0       	ldi	r29, 0x00	; 0
		message[i] = prev; // save the char if it isn't the terminator
    1ae2:	f8 01       	movw	r30, r16
    1ae4:	81 93       	st	Z+, r24
    1ae6:	8f 01       	movw	r16, r30
		i++;
		prev = UART0_getchar();
    1ae8:	21 96       	adiw	r28, 0x01	; 1
    1aea:	d8 df       	rcall	.-80     	; 0x1a9c <UART0_getchar>
	
	// Check the first value for the terminator ' ' (SPACE)
	prev = UART0_getchar();
	
	// Check previous value for terminator (SPACE)
	while(prev != ' '){
    1aec:	80 32       	cpi	r24, 0x20	; 32
    1aee:	c9 f7       	brne	.-14     	; 0x1ae2 <UART0_getstring+0x1a>
    1af0:	02 c0       	rjmp	.+4      	; 0x1af6 <UART0_getstring+0x2e>
/*========================================================================================*/


void UART0_getstring(char* message){
	char prev;
	int i = 0;
    1af2:	c0 e0       	ldi	r28, 0x00	; 0
    1af4:	d0 e0       	ldi	r29, 0x00	; 0
	while(prev != ' '){
		message[i] = prev; // save the char if it isn't the terminator
		i++;
		prev = UART0_getchar();
	}
	message[i] = '\0';
    1af6:	ce 0d       	add	r28, r14
    1af8:	df 1d       	adc	r29, r15
    1afa:	18 82       	st	Y, r1
    1afc:	df 91       	pop	r29
    1afe:	cf 91       	pop	r28
    1b00:	1f 91       	pop	r17
    1b02:	0f 91       	pop	r16
    1b04:	ff 90       	pop	r15
    1b06:	ef 90       	pop	r14
    1b08:	08 95       	ret

00001b0a <wdt_set_timeout_period>:
 *  This function is written in asm where ever the time is critical
 *
 *  \param  to_period  WDT timeout period
 */
void wdt_set_timeout_period(enum wdt_timeout_period to_period)
{
    1b0a:	cf 93       	push	r28
    1b0c:	df 93       	push	r29
    1b0e:	1f 92       	push	r1
    1b10:	cd b7       	in	r28, 0x3d	; 61
    1b12:	de b7       	in	r29, 0x3e	; 62
	/* Store the prescale value to temp register */
#if defined (__GNUC__)
	asm ("MOV R19,R24");
    1b14:	38 2f       	mov	r19, r24
#else
#error Unsupported compiler.
#endif

	/* Mask for WDP3 */
	if (to_period & MASK_PRESCALE_WPD3) {
    1b16:	83 ff       	sbrs	r24, 3
    1b18:	02 c0       	rjmp	.+4      	; 0x1b1e <wdt_set_timeout_period+0x14>
		asm ("LDI R21,0x20");
    1b1a:	50 e2       	ldi	r21, 0x20	; 32
    1b1c:	01 c0       	rjmp	.+2      	; 0x1b20 <wdt_set_timeout_period+0x16>
	} else {
		asm ("LDI R21,0x00");
    1b1e:	50 e0       	ldi	r21, 0x00	; 0

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    1b20:	8f b7       	in	r24, 0x3f	; 63
    1b22:	89 83       	std	Y+1, r24	; 0x01
	cpu_irq_disable();
    1b24:	f8 94       	cli
	return flags;
    1b26:	89 81       	ldd	r24, Y+1	; 0x01

	/* Disable Global interrupt */
	uint8_t sreg = cpu_irq_save();

	/* Reset Watchdog timer */
	wdt_reset();
    1b28:	a8 95       	wdr

	asm ("LDI R17,0xD8");
    1b2a:	18 ed       	ldi	r17, 0xD8	; 216
	asm ("LDS R18,0x60");   /* WDTCSR Address = 0x60 */
    1b2c:	20 91 60 00 	lds	r18, 0x0060	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
	asm ("AND R17,R18");
    1b30:	12 23       	and	r17, r18
	asm ("STS 0x60,R17");   /* WDTCSR Address = 0x60 */
    1b32:	10 93 60 00 	sts	0x0060, r17	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
	/* Load the new prescale value */
	asm ("LDI R20,0x18");
    1b36:	48 e1       	ldi	r20, 0x18	; 24
	asm ("LDI R18,0x07");
    1b38:	27 e0       	ldi	r18, 0x07	; 7
	asm ("AND R19,R18");
    1b3a:	32 23       	and	r19, r18
	asm ("OR R19,R21");
    1b3c:	35 2b       	or	r19, r21
	asm ("OR R19,R17");
    1b3e:	31 2b       	or	r19, r17
	/* Write logical one to WDCE and WDE */
	asm ("STS 0x60,R20");   /* WDTCSR Address = 0x60 */
    1b40:	40 93 60 00 	sts	0x0060, r20	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
	/* Write new prescale setting */
	asm ("STS 0x60,R19");   /* WDTCSR Address = 0x60 */
    1b44:	30 93 60 00 	sts	0x0060, r19	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    1b48:	8f bf       	out	0x3f, r24	; 63

	/* Restore Global interrupt */
	cpu_irq_restore(sreg);
}
    1b4a:	0f 90       	pop	r0
    1b4c:	df 91       	pop	r29
    1b4e:	cf 91       	pop	r28
    1b50:	08 95       	ret

00001b52 <wdt_enable>:
 * This function is written in asm where ever the time is critical
 *
 * \param mode WDT timer mode selection
 */
void wdt_enable(enum wdt_mode_select mode)
{
    1b52:	cf 93       	push	r28
    1b54:	df 93       	push	r29
    1b56:	1f 92       	push	r1
    1b58:	cd b7       	in	r28, 0x3d	; 61
    1b5a:	de b7       	in	r29, 0x3e	; 62

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    1b5c:	9f b7       	in	r25, 0x3f	; 63
    1b5e:	99 83       	std	Y+1, r25	; 0x01
	cpu_irq_disable();
    1b60:	f8 94       	cli
	return flags;
    1b62:	29 81       	ldd	r18, Y+1	; 0x01
	/* Disable Global interrupt */
	uint8_t sreg = cpu_irq_save();

	/* Reset Watchdog timer */
	wdt_reset();
    1b64:	a8 95       	wdr
 ***\param  none
 */
static inline void wdt_reset_flag_clear(void)
{
	/* Clear WDRF flag in MCUSR */
	MCUSR &= ~WDRF_bm;
    1b66:	94 b7       	in	r25, 0x34	; 52
    1b68:	97 7f       	andi	r25, 0xF7	; 247
    1b6a:	94 bf       	out	0x34, r25	; 52

	/* Clear WDRF flag in MCUSR */
	wdt_reset_flag_clear();

	/*System reset mode */
	if (mode == SYSTEM_RESET_MODE) {
    1b6c:	81 30       	cpi	r24, 0x01	; 1
    1b6e:	59 f4       	brne	.+22     	; 0x1b86 <wdt_enable+0x34>
		/* Write logical zero to WDIE */
		asm ("LDI R17,0xBF");
    1b70:	1f eb       	ldi	r17, 0xBF	; 191
		asm ("LDS R18,0x60"); /* WDTCSR Address = 0x60 */
    1b72:	20 91 60 00 	lds	r18, 0x0060	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
		asm ("AND R17,R18");
    1b76:	12 23       	and	r17, r18
		asm ("STS 0x60,R17"); /* WDTCSR Address = 0x60 */
    1b78:	10 93 60 00 	sts	0x0060, r17	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
		/* Write WDIF,WDE and WDCE to logical one */
		asm ("LDI R18,0x98");
    1b7c:	28 e9       	ldi	r18, 0x98	; 152
		asm ("OR R18,R17");
    1b7e:	21 2b       	or	r18, r17
		asm ("STS 0x60,R18"); /* WDTCSR Address = 0x60 */
    1b80:	20 93 60 00 	sts	0x0060, r18	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
    1b84:	1c c0       	rjmp	.+56     	; 0x1bbe <wdt_enable+0x6c>
	}
	/* Interrupt mode */
	else if (mode == INTERRUPT_MODE) {
    1b86:	81 11       	cpse	r24, r1
    1b88:	0e c0       	rjmp	.+28     	; 0x1ba6 <wdt_enable+0x54>
		/* Write logical zero to WDE */
		asm ("LDI R17,0xF7");
    1b8a:	17 ef       	ldi	r17, 0xF7	; 247
		asm ("LDS R18,0x60"); /* WDTCSR Address = 0x60 */
    1b8c:	20 91 60 00 	lds	r18, 0x0060	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
		asm ("AND R17,R18");
    1b90:	12 23       	and	r17, r18
		asm ("STS 0x60,R17"); /* WDTCSR Address = 0x60 */
    1b92:	10 93 60 00 	sts	0x0060, r17	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
		asm ("LDI R20,0x18");
    1b96:	48 e1       	ldi	r20, 0x18	; 24
		asm ("LDI R19,0xD0");
    1b98:	30 ed       	ldi	r19, 0xD0	; 208
		asm ("OR R19,R17");
    1b9a:	31 2b       	or	r19, r17
		/* Write logical one to WDCE and WDE */
		asm ("STS 0x60,R20"); /* WDTCSR Address = 0x60 */
    1b9c:	40 93 60 00 	sts	0x0060, r20	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
		/* Write WDIF,WDIE and WDCE to logical one */
		asm ("STS 0x60,R19"); /* WDTCSR Address = 0x60 */
    1ba0:	30 93 60 00 	sts	0x0060, r19	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
    1ba4:	0c c0       	rjmp	.+24     	; 0x1bbe <wdt_enable+0x6c>
	}
	/* Interrupt and System reset mode */
	else if (mode == INTERRUPT_SYSTEM_RESET_MODE) {
    1ba6:	82 30       	cpi	r24, 0x02	; 2
    1ba8:	51 f4       	brne	.+20     	; 0x1bbe <wdt_enable+0x6c>
		/* Write logical zero to WDE */
		asm ("LDI R17,0xF7");
    1baa:	17 ef       	ldi	r17, 0xF7	; 247
		asm ("LDS R18,0x60"); /* WDTCSR Address = 0x60 */
    1bac:	20 91 60 00 	lds	r18, 0x0060	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
		asm ("AND R17,R18");
    1bb0:	12 23       	and	r17, r18
		asm ("STS 0x60,R17"); /* WDTCSR Address = 0x60 */
    1bb2:	10 93 60 00 	sts	0x0060, r17	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
		/* Write logical one to WDCE, WDIE,WDIF and WDE */
		asm ("LDI R18,0xD8");
    1bb6:	28 ed       	ldi	r18, 0xD8	; 216
		asm ("OR R18,R17");
    1bb8:	21 2b       	or	r18, r17
		asm ("STS 0x60,R18"); /* WDTCSR Address = 0x60 */
    1bba:	20 93 60 00 	sts	0x0060, r18	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    1bbe:	2f bf       	out	0x3f, r18	; 63
	}

	/* Restore Global interrupt */
	cpu_irq_restore(sreg);
}
    1bc0:	0f 90       	pop	r0
    1bc2:	df 91       	pop	r29
    1bc4:	cf 91       	pop	r28
    1bc6:	08 95       	ret

00001bc8 <__vector_17>:
// Date: 2019-03-18
// Description: Interrupt occurs when timer register overflow flag is set, and
//				calls for telemetry data to be updated.
/*========================================================================================*/

ISR(TIMER1_COMPA_vect){
    1bc8:	1f 92       	push	r1
    1bca:	0f 92       	push	r0
    1bcc:	0f b6       	in	r0, 0x3f	; 63
    1bce:	0f 92       	push	r0
    1bd0:	11 24       	eor	r1, r1
    1bd2:	2f 93       	push	r18
    1bd4:	3f 93       	push	r19
    1bd6:	4f 93       	push	r20
    1bd8:	5f 93       	push	r21
    1bda:	6f 93       	push	r22
    1bdc:	7f 93       	push	r23
    1bde:	8f 93       	push	r24
    1be0:	9f 93       	push	r25
    1be2:	af 93       	push	r26
    1be4:	bf 93       	push	r27
    1be6:	ef 93       	push	r30
    1be8:	ff 93       	push	r31
	
	// Disable Interrupts
	cli();
    1bea:	f8 94       	cli
	
	// Update Telemetry information
	Update_TELEM(telem, power_state[0]);
    1bec:	60 91 23 04 	lds	r22, 0x0423	; 0x800423 <power_state>
    1bf0:	8c e6       	ldi	r24, 0x6C	; 108
    1bf2:	94 e0       	ldi	r25, 0x04	; 4
    1bf4:	07 dc       	rcall	.-2034   	; 0x1404 <Update_TELEM>
	
	// Check Power State
	temp = telem[11];
    1bf6:	ec e6       	ldi	r30, 0x6C	; 108
    1bf8:	f4 e0       	ldi	r31, 0x04	; 4
    1bfa:	84 a5       	ldd	r24, Z+44	; 0x2c
    1bfc:	95 a5       	ldd	r25, Z+45	; 0x2d
    1bfe:	a6 a5       	ldd	r26, Z+46	; 0x2e
    1c00:	b7 a5       	ldd	r27, Z+47	; 0x2f
    1c02:	80 93 2a 04 	sts	0x042A, r24	; 0x80042a <temp>
    1c06:	90 93 2b 04 	sts	0x042B, r25	; 0x80042b <temp+0x1>
    1c0a:	a0 93 2c 04 	sts	0x042C, r26	; 0x80042c <temp+0x2>
    1c0e:	b0 93 2d 04 	sts	0x042D, r27	; 0x80042d <temp+0x3>
	soc = SoC_ADC(telem[10],telem[4]);
    1c12:	20 89       	ldd	r18, Z+16	; 0x10
    1c14:	31 89       	ldd	r19, Z+17	; 0x11
    1c16:	42 89       	ldd	r20, Z+18	; 0x12
    1c18:	53 89       	ldd	r21, Z+19	; 0x13
    1c1a:	60 a5       	ldd	r22, Z+40	; 0x28
    1c1c:	71 a5       	ldd	r23, Z+41	; 0x29
    1c1e:	82 a5       	ldd	r24, Z+42	; 0x2a
    1c20:	93 a5       	ldd	r25, Z+43	; 0x2b
    1c22:	0e 94 27 03 	call	0x64e	; 0x64e <SoC_ADC>
    1c26:	60 93 32 04 	sts	0x0432, r22	; 0x800432 <soc>
    1c2a:	70 93 33 04 	sts	0x0433, r23	; 0x800433 <soc+0x1>
    1c2e:	80 93 34 04 	sts	0x0434, r24	; 0x800434 <soc+0x2>
    1c32:	90 93 35 04 	sts	0x0435, r25	; 0x800435 <soc+0x3>
	
	if(mode[0]){
    1c36:	20 91 00 02 	lds	r18, 0x0200	; 0x800200 <__data_start>
    1c3a:	22 23       	and	r18, r18
    1c3c:	09 f1       	breq	.+66     	; 0x1c80 <__vector_17+0xb8>
		// Update power state
		state_num = PowerStateCheck(soc, temp);
    1c3e:	20 91 2a 04 	lds	r18, 0x042A	; 0x80042a <temp>
    1c42:	30 91 2b 04 	lds	r19, 0x042B	; 0x80042b <temp+0x1>
    1c46:	40 91 2c 04 	lds	r20, 0x042C	; 0x80042c <temp+0x2>
    1c4a:	50 91 2d 04 	lds	r21, 0x042D	; 0x80042d <temp+0x3>
    1c4e:	ba d8       	rcall	.-3724   	; 0xdc4 <PowerStateCheck>
    1c50:	90 93 25 04 	sts	0x0425, r25	; 0x800425 <state_num+0x1>
    1c54:	80 93 24 04 	sts	0x0424, r24	; 0x800424 <state_num>
		power_state[0] = pwrMat[state_num];
    1c58:	fc 01       	movw	r30, r24
    1c5a:	e6 5b       	subi	r30, 0xB6	; 182
    1c5c:	fb 4f       	sbci	r31, 0xFB	; 251
    1c5e:	60 81       	ld	r22, Z
    1c60:	60 93 23 04 	sts	0x0423, r22	; 0x800423 <power_state>
		// Update the state of the loads
		Update_STATE(power, power_state[0]);
    1c64:	83 e6       	ldi	r24, 0x63	; 99
    1c66:	94 e0       	ldi	r25, 0x04	; 4
    1c68:	d2 da       	rcall	.-2652   	; 0x120e <Update_STATE>
		Update_LOADS(power_state[0], power_state);
    1c6a:	63 e2       	ldi	r22, 0x23	; 35
    1c6c:	74 e0       	ldi	r23, 0x04	; 4
    1c6e:	80 91 23 04 	lds	r24, 0x0423	; 0x800423 <power_state>
    1c72:	71 d8       	rcall	.-3870   	; 0xd56 <Update_LOADS>
		Update_OBC(telem, power);
    1c74:	63 e6       	ldi	r22, 0x63	; 99
    1c76:	74 e0       	ldi	r23, 0x04	; 4
    1c78:	8c e6       	ldi	r24, 0x6C	; 108
    1c7a:	94 e0       	ldi	r25, 0x04	; 4
    1c7c:	2c dc       	rcall	.-1960   	; 0x14d6 <Update_OBC>
    1c7e:	0f c0       	rjmp	.+30     	; 0x1c9e <__vector_17+0xd6>
	}
	else{
		Update_STATE(power, power_state[0]);
    1c80:	60 91 23 04 	lds	r22, 0x0423	; 0x800423 <power_state>
    1c84:	83 e6       	ldi	r24, 0x63	; 99
    1c86:	94 e0       	ldi	r25, 0x04	; 4
		Update_LOADS(power_state[0], power_state);
    1c88:	c2 da       	rcall	.-2684   	; 0x120e <Update_STATE>
    1c8a:	63 e2       	ldi	r22, 0x23	; 35
    1c8c:	74 e0       	ldi	r23, 0x04	; 4
    1c8e:	80 91 23 04 	lds	r24, 0x0423	; 0x800423 <power_state>
		Update_OBC(telem, power);
    1c92:	61 d8       	rcall	.-3902   	; 0xd56 <Update_LOADS>
    1c94:	63 e6       	ldi	r22, 0x63	; 99
    1c96:	74 e0       	ldi	r23, 0x04	; 4
    1c98:	8c e6       	ldi	r24, 0x6C	; 108
    1c9a:	94 e0       	ldi	r25, 0x04	; 4
    1c9c:	1c dc       	rcall	.-1992   	; 0x14d6 <Update_OBC>
	
	// Print the state of charge and power matrix index
	
	
	// Save previous states for less computation
	prev_state[0] = power_state[0];
    1c9e:	80 91 23 04 	lds	r24, 0x0423	; 0x800423 <power_state>
    1ca2:	80 93 22 04 	sts	0x0422, r24	; 0x800422 <__data_end>
	prev_temp  = temp;
    1ca6:	80 91 2a 04 	lds	r24, 0x042A	; 0x80042a <temp>
    1caa:	90 91 2b 04 	lds	r25, 0x042B	; 0x80042b <temp+0x1>
    1cae:	a0 91 2c 04 	lds	r26, 0x042C	; 0x80042c <temp+0x2>
    1cb2:	b0 91 2d 04 	lds	r27, 0x042D	; 0x80042d <temp+0x3>
    1cb6:	80 93 26 04 	sts	0x0426, r24	; 0x800426 <prev_temp>
    1cba:	90 93 27 04 	sts	0x0427, r25	; 0x800427 <prev_temp+0x1>
    1cbe:	a0 93 28 04 	sts	0x0428, r26	; 0x800428 <prev_temp+0x2>
    1cc2:	b0 93 29 04 	sts	0x0429, r27	; 0x800429 <prev_temp+0x3>
	prev_soc = soc;
    1cc6:	80 91 32 04 	lds	r24, 0x0432	; 0x800432 <soc>
    1cca:	90 91 33 04 	lds	r25, 0x0433	; 0x800433 <soc+0x1>
    1cce:	a0 91 34 04 	lds	r26, 0x0434	; 0x800434 <soc+0x2>
    1cd2:	b0 91 35 04 	lds	r27, 0x0435	; 0x800435 <soc+0x3>
    1cd6:	80 93 2e 04 	sts	0x042E, r24	; 0x80042e <prev_soc>
    1cda:	90 93 2f 04 	sts	0x042F, r25	; 0x80042f <prev_soc+0x1>
    1cde:	a0 93 30 04 	sts	0x0430, r26	; 0x800430 <prev_soc+0x2>
    1ce2:	b0 93 31 04 	sts	0x0431, r27	; 0x800431 <prev_soc+0x3>
	
	// Re-enable interrupts
	sei();
    1ce6:	78 94       	sei
		
}
    1ce8:	ff 91       	pop	r31
    1cea:	ef 91       	pop	r30
    1cec:	bf 91       	pop	r27
    1cee:	af 91       	pop	r26
    1cf0:	9f 91       	pop	r25
    1cf2:	8f 91       	pop	r24
    1cf4:	7f 91       	pop	r23
    1cf6:	6f 91       	pop	r22
    1cf8:	5f 91       	pop	r21
    1cfa:	4f 91       	pop	r20
    1cfc:	3f 91       	pop	r19
    1cfe:	2f 91       	pop	r18
    1d00:	0f 90       	pop	r0
    1d02:	0f be       	out	0x3f, r0	; 63
    1d04:	0f 90       	pop	r0
    1d06:	1f 90       	pop	r1
    1d08:	18 95       	reti

00001d0a <__vector_25>:

ISR(USART0_RX_vect){
    1d0a:	1f 92       	push	r1
    1d0c:	0f 92       	push	r0
    1d0e:	0f b6       	in	r0, 0x3f	; 63
    1d10:	0f 92       	push	r0
    1d12:	11 24       	eor	r1, r1
    1d14:	0f 93       	push	r16
    1d16:	1f 93       	push	r17
    1d18:	2f 93       	push	r18
    1d1a:	3f 93       	push	r19
    1d1c:	4f 93       	push	r20
    1d1e:	5f 93       	push	r21
    1d20:	6f 93       	push	r22
    1d22:	7f 93       	push	r23
    1d24:	8f 93       	push	r24
    1d26:	9f 93       	push	r25
    1d28:	af 93       	push	r26
    1d2a:	bf 93       	push	r27
    1d2c:	ef 93       	push	r30
    1d2e:	ff 93       	push	r31
	
	cli();
    1d30:	f8 94       	cli
	
	//wdt_disable();
	
	fake = UART0_getchar();
    1d32:	b4 de       	rcall	.-664    	; 0x1a9c <UART0_getchar>
    1d34:	80 93 9c 04 	sts	0x049C, r24	; 0x80049c <fake>
	commandDecode(obc_command, telem, mode, power_state, power);
    1d38:	03 e6       	ldi	r16, 0x63	; 99
    1d3a:	14 e0       	ldi	r17, 0x04	; 4
    1d3c:	23 e2       	ldi	r18, 0x23	; 35
    1d3e:	34 e0       	ldi	r19, 0x04	; 4
    1d40:	40 e0       	ldi	r20, 0x00	; 0
    1d42:	52 e0       	ldi	r21, 0x02	; 2
    1d44:	6c e6       	ldi	r22, 0x6C	; 108
    1d46:	74 e0       	ldi	r23, 0x04	; 4
    1d48:	86 e3       	ldi	r24, 0x36	; 54
    1d4a:	94 e0       	ldi	r25, 0x04	; 4
    1d4c:	c1 dd       	rcall	.-1150   	; 0x18d0 <commandDecode>
	
	//wdt_enable(INTERRUPT_SYSTEM_RESET_MODE);
	
	sei();
    1d4e:	78 94       	sei
}
    1d50:	ff 91       	pop	r31
    1d52:	ef 91       	pop	r30
    1d54:	bf 91       	pop	r27
    1d56:	af 91       	pop	r26
    1d58:	9f 91       	pop	r25
    1d5a:	8f 91       	pop	r24
    1d5c:	7f 91       	pop	r23
    1d5e:	6f 91       	pop	r22
    1d60:	5f 91       	pop	r21
    1d62:	4f 91       	pop	r20
    1d64:	3f 91       	pop	r19
    1d66:	2f 91       	pop	r18
    1d68:	1f 91       	pop	r17
    1d6a:	0f 91       	pop	r16
    1d6c:	0f 90       	pop	r0
    1d6e:	0f be       	out	0x3f, r0	; 63
    1d70:	0f 90       	pop	r0
    1d72:	1f 90       	pop	r1
    1d74:	18 95       	reti

00001d76 <__vector_12>:

ISR(WDT_vect){
    1d76:	1f 92       	push	r1
    1d78:	0f 92       	push	r0
    1d7a:	0f b6       	in	r0, 0x3f	; 63
    1d7c:	0f 92       	push	r0
    1d7e:	11 24       	eor	r1, r1
    1d80:	2f 93       	push	r18
    1d82:	3f 93       	push	r19
    1d84:	4f 93       	push	r20
    1d86:	5f 93       	push	r21
    1d88:	6f 93       	push	r22
    1d8a:	7f 93       	push	r23
    1d8c:	8f 93       	push	r24
    1d8e:	9f 93       	push	r25
    1d90:	af 93       	push	r26
    1d92:	bf 93       	push	r27
    1d94:	ef 93       	push	r30
    1d96:	ff 93       	push	r31
	cli();
    1d98:	f8 94       	cli
	WD_init();
    1d9a:	6a de       	rcall	.-812    	; 0x1a70 <WD_init>
	sei();
    1d9c:	78 94       	sei
}
    1d9e:	ff 91       	pop	r31
    1da0:	ef 91       	pop	r30
    1da2:	bf 91       	pop	r27
    1da4:	af 91       	pop	r26
    1da6:	9f 91       	pop	r25
    1da8:	8f 91       	pop	r24
    1daa:	7f 91       	pop	r23
    1dac:	6f 91       	pop	r22
    1dae:	5f 91       	pop	r21
    1db0:	4f 91       	pop	r20
    1db2:	3f 91       	pop	r19
    1db4:	2f 91       	pop	r18
    1db6:	0f 90       	pop	r0
    1db8:	0f be       	out	0x3f, r0	; 63
    1dba:	0f 90       	pop	r0
    1dbc:	1f 90       	pop	r1
    1dbe:	18 95       	reti

00001dc0 <main>:

int main(void){
	
	ALL_init();
    1dc0:	5f de       	rcall	.-834    	; 0x1a80 <ALL_init>
	
	// Disable Interrupts upon start
	cli();
    1dc2:	f8 94       	cli
	
	UART0_putstring("I have been reset");
    1dc4:	8f e0       	ldi	r24, 0x0F	; 15
    1dc6:	94 e0       	ldi	r25, 0x04	; 4
    1dc8:	71 de       	rcall	.-798    	; 0x1aac <UART0_putstring>
	
	launch_state();
    1dca:	0e 94 91 05 	call	0xb22	; 0xb22 <launch_state>
	
	// Update power state matrix
	pwrMatInit(pwrMat);
    1dce:	8a e4       	ldi	r24, 0x4A	; 74
    1dd0:	94 e0       	ldi	r25, 0x04	; 4
    1dd2:	0e 94 ba 06 	call	0xd74	; 0xd74 <pwrMatInit>
	
	//****** RE-Enable ******//
	sei();
    1dd6:	78 94       	sei
    1dd8:	ff cf       	rjmp	.-2      	; 0x1dd8 <main+0x18>

00001dda <__subsf3>:
    1dda:	50 58       	subi	r21, 0x80	; 128

00001ddc <__addsf3>:
    1ddc:	bb 27       	eor	r27, r27
    1dde:	aa 27       	eor	r26, r26
    1de0:	0e d0       	rcall	.+28     	; 0x1dfe <__addsf3x>
    1de2:	44 c1       	rjmp	.+648    	; 0x206c <__fp_round>
    1de4:	35 d1       	rcall	.+618    	; 0x2050 <__fp_pscA>
    1de6:	30 f0       	brcs	.+12     	; 0x1df4 <__addsf3+0x18>
    1de8:	3a d1       	rcall	.+628    	; 0x205e <__fp_pscB>
    1dea:	20 f0       	brcs	.+8      	; 0x1df4 <__addsf3+0x18>
    1dec:	31 f4       	brne	.+12     	; 0x1dfa <__addsf3+0x1e>
    1dee:	9f 3f       	cpi	r25, 0xFF	; 255
    1df0:	11 f4       	brne	.+4      	; 0x1df6 <__addsf3+0x1a>
    1df2:	1e f4       	brtc	.+6      	; 0x1dfa <__addsf3+0x1e>
    1df4:	2a c1       	rjmp	.+596    	; 0x204a <__fp_nan>
    1df6:	0e f4       	brtc	.+2      	; 0x1dfa <__addsf3+0x1e>
    1df8:	e0 95       	com	r30
    1dfa:	e7 fb       	bst	r30, 7
    1dfc:	20 c1       	rjmp	.+576    	; 0x203e <__fp_inf>

00001dfe <__addsf3x>:
    1dfe:	e9 2f       	mov	r30, r25
    1e00:	46 d1       	rcall	.+652    	; 0x208e <__fp_split3>
    1e02:	80 f3       	brcs	.-32     	; 0x1de4 <__addsf3+0x8>
    1e04:	ba 17       	cp	r27, r26
    1e06:	62 07       	cpc	r22, r18
    1e08:	73 07       	cpc	r23, r19
    1e0a:	84 07       	cpc	r24, r20
    1e0c:	95 07       	cpc	r25, r21
    1e0e:	18 f0       	brcs	.+6      	; 0x1e16 <__addsf3x+0x18>
    1e10:	71 f4       	brne	.+28     	; 0x1e2e <__addsf3x+0x30>
    1e12:	9e f5       	brtc	.+102    	; 0x1e7a <__addsf3x+0x7c>
    1e14:	5e c1       	rjmp	.+700    	; 0x20d2 <__fp_zero>
    1e16:	0e f4       	brtc	.+2      	; 0x1e1a <__addsf3x+0x1c>
    1e18:	e0 95       	com	r30
    1e1a:	0b 2e       	mov	r0, r27
    1e1c:	ba 2f       	mov	r27, r26
    1e1e:	a0 2d       	mov	r26, r0
    1e20:	0b 01       	movw	r0, r22
    1e22:	b9 01       	movw	r22, r18
    1e24:	90 01       	movw	r18, r0
    1e26:	0c 01       	movw	r0, r24
    1e28:	ca 01       	movw	r24, r20
    1e2a:	a0 01       	movw	r20, r0
    1e2c:	11 24       	eor	r1, r1
    1e2e:	ff 27       	eor	r31, r31
    1e30:	59 1b       	sub	r21, r25
    1e32:	99 f0       	breq	.+38     	; 0x1e5a <__addsf3x+0x5c>
    1e34:	59 3f       	cpi	r21, 0xF9	; 249
    1e36:	50 f4       	brcc	.+20     	; 0x1e4c <__addsf3x+0x4e>
    1e38:	50 3e       	cpi	r21, 0xE0	; 224
    1e3a:	68 f1       	brcs	.+90     	; 0x1e96 <__addsf3x+0x98>
    1e3c:	1a 16       	cp	r1, r26
    1e3e:	f0 40       	sbci	r31, 0x00	; 0
    1e40:	a2 2f       	mov	r26, r18
    1e42:	23 2f       	mov	r18, r19
    1e44:	34 2f       	mov	r19, r20
    1e46:	44 27       	eor	r20, r20
    1e48:	58 5f       	subi	r21, 0xF8	; 248
    1e4a:	f3 cf       	rjmp	.-26     	; 0x1e32 <__addsf3x+0x34>
    1e4c:	46 95       	lsr	r20
    1e4e:	37 95       	ror	r19
    1e50:	27 95       	ror	r18
    1e52:	a7 95       	ror	r26
    1e54:	f0 40       	sbci	r31, 0x00	; 0
    1e56:	53 95       	inc	r21
    1e58:	c9 f7       	brne	.-14     	; 0x1e4c <__addsf3x+0x4e>
    1e5a:	7e f4       	brtc	.+30     	; 0x1e7a <__addsf3x+0x7c>
    1e5c:	1f 16       	cp	r1, r31
    1e5e:	ba 0b       	sbc	r27, r26
    1e60:	62 0b       	sbc	r22, r18
    1e62:	73 0b       	sbc	r23, r19
    1e64:	84 0b       	sbc	r24, r20
    1e66:	ba f0       	brmi	.+46     	; 0x1e96 <__addsf3x+0x98>
    1e68:	91 50       	subi	r25, 0x01	; 1
    1e6a:	a1 f0       	breq	.+40     	; 0x1e94 <__addsf3x+0x96>
    1e6c:	ff 0f       	add	r31, r31
    1e6e:	bb 1f       	adc	r27, r27
    1e70:	66 1f       	adc	r22, r22
    1e72:	77 1f       	adc	r23, r23
    1e74:	88 1f       	adc	r24, r24
    1e76:	c2 f7       	brpl	.-16     	; 0x1e68 <__addsf3x+0x6a>
    1e78:	0e c0       	rjmp	.+28     	; 0x1e96 <__addsf3x+0x98>
    1e7a:	ba 0f       	add	r27, r26
    1e7c:	62 1f       	adc	r22, r18
    1e7e:	73 1f       	adc	r23, r19
    1e80:	84 1f       	adc	r24, r20
    1e82:	48 f4       	brcc	.+18     	; 0x1e96 <__addsf3x+0x98>
    1e84:	87 95       	ror	r24
    1e86:	77 95       	ror	r23
    1e88:	67 95       	ror	r22
    1e8a:	b7 95       	ror	r27
    1e8c:	f7 95       	ror	r31
    1e8e:	9e 3f       	cpi	r25, 0xFE	; 254
    1e90:	08 f0       	brcs	.+2      	; 0x1e94 <__addsf3x+0x96>
    1e92:	b3 cf       	rjmp	.-154    	; 0x1dfa <__addsf3+0x1e>
    1e94:	93 95       	inc	r25
    1e96:	88 0f       	add	r24, r24
    1e98:	08 f0       	brcs	.+2      	; 0x1e9c <__addsf3x+0x9e>
    1e9a:	99 27       	eor	r25, r25
    1e9c:	ee 0f       	add	r30, r30
    1e9e:	97 95       	ror	r25
    1ea0:	87 95       	ror	r24
    1ea2:	08 95       	ret

00001ea4 <__cmpsf2>:
    1ea4:	a8 d0       	rcall	.+336    	; 0x1ff6 <__fp_cmp>
    1ea6:	08 f4       	brcc	.+2      	; 0x1eaa <__cmpsf2+0x6>
    1ea8:	81 e0       	ldi	r24, 0x01	; 1
    1eaa:	08 95       	ret

00001eac <__divsf3>:
    1eac:	0c d0       	rcall	.+24     	; 0x1ec6 <__divsf3x>
    1eae:	de c0       	rjmp	.+444    	; 0x206c <__fp_round>
    1eb0:	d6 d0       	rcall	.+428    	; 0x205e <__fp_pscB>
    1eb2:	40 f0       	brcs	.+16     	; 0x1ec4 <__divsf3+0x18>
    1eb4:	cd d0       	rcall	.+410    	; 0x2050 <__fp_pscA>
    1eb6:	30 f0       	brcs	.+12     	; 0x1ec4 <__divsf3+0x18>
    1eb8:	21 f4       	brne	.+8      	; 0x1ec2 <__divsf3+0x16>
    1eba:	5f 3f       	cpi	r21, 0xFF	; 255
    1ebc:	19 f0       	breq	.+6      	; 0x1ec4 <__divsf3+0x18>
    1ebe:	bf c0       	rjmp	.+382    	; 0x203e <__fp_inf>
    1ec0:	51 11       	cpse	r21, r1
    1ec2:	08 c1       	rjmp	.+528    	; 0x20d4 <__fp_szero>
    1ec4:	c2 c0       	rjmp	.+388    	; 0x204a <__fp_nan>

00001ec6 <__divsf3x>:
    1ec6:	e3 d0       	rcall	.+454    	; 0x208e <__fp_split3>
    1ec8:	98 f3       	brcs	.-26     	; 0x1eb0 <__divsf3+0x4>

00001eca <__divsf3_pse>:
    1eca:	99 23       	and	r25, r25
    1ecc:	c9 f3       	breq	.-14     	; 0x1ec0 <__divsf3+0x14>
    1ece:	55 23       	and	r21, r21
    1ed0:	b1 f3       	breq	.-20     	; 0x1ebe <__divsf3+0x12>
    1ed2:	95 1b       	sub	r25, r21
    1ed4:	55 0b       	sbc	r21, r21
    1ed6:	bb 27       	eor	r27, r27
    1ed8:	aa 27       	eor	r26, r26
    1eda:	62 17       	cp	r22, r18
    1edc:	73 07       	cpc	r23, r19
    1ede:	84 07       	cpc	r24, r20
    1ee0:	38 f0       	brcs	.+14     	; 0x1ef0 <__divsf3_pse+0x26>
    1ee2:	9f 5f       	subi	r25, 0xFF	; 255
    1ee4:	5f 4f       	sbci	r21, 0xFF	; 255
    1ee6:	22 0f       	add	r18, r18
    1ee8:	33 1f       	adc	r19, r19
    1eea:	44 1f       	adc	r20, r20
    1eec:	aa 1f       	adc	r26, r26
    1eee:	a9 f3       	breq	.-22     	; 0x1eda <__divsf3_pse+0x10>
    1ef0:	33 d0       	rcall	.+102    	; 0x1f58 <__divsf3_pse+0x8e>
    1ef2:	0e 2e       	mov	r0, r30
    1ef4:	3a f0       	brmi	.+14     	; 0x1f04 <__divsf3_pse+0x3a>
    1ef6:	e0 e8       	ldi	r30, 0x80	; 128
    1ef8:	30 d0       	rcall	.+96     	; 0x1f5a <__divsf3_pse+0x90>
    1efa:	91 50       	subi	r25, 0x01	; 1
    1efc:	50 40       	sbci	r21, 0x00	; 0
    1efe:	e6 95       	lsr	r30
    1f00:	00 1c       	adc	r0, r0
    1f02:	ca f7       	brpl	.-14     	; 0x1ef6 <__divsf3_pse+0x2c>
    1f04:	29 d0       	rcall	.+82     	; 0x1f58 <__divsf3_pse+0x8e>
    1f06:	fe 2f       	mov	r31, r30
    1f08:	27 d0       	rcall	.+78     	; 0x1f58 <__divsf3_pse+0x8e>
    1f0a:	66 0f       	add	r22, r22
    1f0c:	77 1f       	adc	r23, r23
    1f0e:	88 1f       	adc	r24, r24
    1f10:	bb 1f       	adc	r27, r27
    1f12:	26 17       	cp	r18, r22
    1f14:	37 07       	cpc	r19, r23
    1f16:	48 07       	cpc	r20, r24
    1f18:	ab 07       	cpc	r26, r27
    1f1a:	b0 e8       	ldi	r27, 0x80	; 128
    1f1c:	09 f0       	breq	.+2      	; 0x1f20 <__divsf3_pse+0x56>
    1f1e:	bb 0b       	sbc	r27, r27
    1f20:	80 2d       	mov	r24, r0
    1f22:	bf 01       	movw	r22, r30
    1f24:	ff 27       	eor	r31, r31
    1f26:	93 58       	subi	r25, 0x83	; 131
    1f28:	5f 4f       	sbci	r21, 0xFF	; 255
    1f2a:	2a f0       	brmi	.+10     	; 0x1f36 <__divsf3_pse+0x6c>
    1f2c:	9e 3f       	cpi	r25, 0xFE	; 254
    1f2e:	51 05       	cpc	r21, r1
    1f30:	68 f0       	brcs	.+26     	; 0x1f4c <__divsf3_pse+0x82>
    1f32:	85 c0       	rjmp	.+266    	; 0x203e <__fp_inf>
    1f34:	cf c0       	rjmp	.+414    	; 0x20d4 <__fp_szero>
    1f36:	5f 3f       	cpi	r21, 0xFF	; 255
    1f38:	ec f3       	brlt	.-6      	; 0x1f34 <__divsf3_pse+0x6a>
    1f3a:	98 3e       	cpi	r25, 0xE8	; 232
    1f3c:	dc f3       	brlt	.-10     	; 0x1f34 <__divsf3_pse+0x6a>
    1f3e:	86 95       	lsr	r24
    1f40:	77 95       	ror	r23
    1f42:	67 95       	ror	r22
    1f44:	b7 95       	ror	r27
    1f46:	f7 95       	ror	r31
    1f48:	9f 5f       	subi	r25, 0xFF	; 255
    1f4a:	c9 f7       	brne	.-14     	; 0x1f3e <__divsf3_pse+0x74>
    1f4c:	88 0f       	add	r24, r24
    1f4e:	91 1d       	adc	r25, r1
    1f50:	96 95       	lsr	r25
    1f52:	87 95       	ror	r24
    1f54:	97 f9       	bld	r25, 7
    1f56:	08 95       	ret
    1f58:	e1 e0       	ldi	r30, 0x01	; 1
    1f5a:	66 0f       	add	r22, r22
    1f5c:	77 1f       	adc	r23, r23
    1f5e:	88 1f       	adc	r24, r24
    1f60:	bb 1f       	adc	r27, r27
    1f62:	62 17       	cp	r22, r18
    1f64:	73 07       	cpc	r23, r19
    1f66:	84 07       	cpc	r24, r20
    1f68:	ba 07       	cpc	r27, r26
    1f6a:	20 f0       	brcs	.+8      	; 0x1f74 <__divsf3_pse+0xaa>
    1f6c:	62 1b       	sub	r22, r18
    1f6e:	73 0b       	sbc	r23, r19
    1f70:	84 0b       	sbc	r24, r20
    1f72:	ba 0b       	sbc	r27, r26
    1f74:	ee 1f       	adc	r30, r30
    1f76:	88 f7       	brcc	.-30     	; 0x1f5a <__divsf3_pse+0x90>
    1f78:	e0 95       	com	r30
    1f7a:	08 95       	ret

00001f7c <__floatunsisf>:
    1f7c:	e8 94       	clt
    1f7e:	09 c0       	rjmp	.+18     	; 0x1f92 <__floatsisf+0x12>

00001f80 <__floatsisf>:
    1f80:	97 fb       	bst	r25, 7
    1f82:	3e f4       	brtc	.+14     	; 0x1f92 <__floatsisf+0x12>
    1f84:	90 95       	com	r25
    1f86:	80 95       	com	r24
    1f88:	70 95       	com	r23
    1f8a:	61 95       	neg	r22
    1f8c:	7f 4f       	sbci	r23, 0xFF	; 255
    1f8e:	8f 4f       	sbci	r24, 0xFF	; 255
    1f90:	9f 4f       	sbci	r25, 0xFF	; 255
    1f92:	99 23       	and	r25, r25
    1f94:	a9 f0       	breq	.+42     	; 0x1fc0 <__floatsisf+0x40>
    1f96:	f9 2f       	mov	r31, r25
    1f98:	96 e9       	ldi	r25, 0x96	; 150
    1f9a:	bb 27       	eor	r27, r27
    1f9c:	93 95       	inc	r25
    1f9e:	f6 95       	lsr	r31
    1fa0:	87 95       	ror	r24
    1fa2:	77 95       	ror	r23
    1fa4:	67 95       	ror	r22
    1fa6:	b7 95       	ror	r27
    1fa8:	f1 11       	cpse	r31, r1
    1faa:	f8 cf       	rjmp	.-16     	; 0x1f9c <__floatsisf+0x1c>
    1fac:	fa f4       	brpl	.+62     	; 0x1fec <__floatsisf+0x6c>
    1fae:	bb 0f       	add	r27, r27
    1fb0:	11 f4       	brne	.+4      	; 0x1fb6 <__floatsisf+0x36>
    1fb2:	60 ff       	sbrs	r22, 0
    1fb4:	1b c0       	rjmp	.+54     	; 0x1fec <__floatsisf+0x6c>
    1fb6:	6f 5f       	subi	r22, 0xFF	; 255
    1fb8:	7f 4f       	sbci	r23, 0xFF	; 255
    1fba:	8f 4f       	sbci	r24, 0xFF	; 255
    1fbc:	9f 4f       	sbci	r25, 0xFF	; 255
    1fbe:	16 c0       	rjmp	.+44     	; 0x1fec <__floatsisf+0x6c>
    1fc0:	88 23       	and	r24, r24
    1fc2:	11 f0       	breq	.+4      	; 0x1fc8 <__floatsisf+0x48>
    1fc4:	96 e9       	ldi	r25, 0x96	; 150
    1fc6:	11 c0       	rjmp	.+34     	; 0x1fea <__floatsisf+0x6a>
    1fc8:	77 23       	and	r23, r23
    1fca:	21 f0       	breq	.+8      	; 0x1fd4 <__floatsisf+0x54>
    1fcc:	9e e8       	ldi	r25, 0x8E	; 142
    1fce:	87 2f       	mov	r24, r23
    1fd0:	76 2f       	mov	r23, r22
    1fd2:	05 c0       	rjmp	.+10     	; 0x1fde <__floatsisf+0x5e>
    1fd4:	66 23       	and	r22, r22
    1fd6:	71 f0       	breq	.+28     	; 0x1ff4 <__floatsisf+0x74>
    1fd8:	96 e8       	ldi	r25, 0x86	; 134
    1fda:	86 2f       	mov	r24, r22
    1fdc:	70 e0       	ldi	r23, 0x00	; 0
    1fde:	60 e0       	ldi	r22, 0x00	; 0
    1fe0:	2a f0       	brmi	.+10     	; 0x1fec <__floatsisf+0x6c>
    1fe2:	9a 95       	dec	r25
    1fe4:	66 0f       	add	r22, r22
    1fe6:	77 1f       	adc	r23, r23
    1fe8:	88 1f       	adc	r24, r24
    1fea:	da f7       	brpl	.-10     	; 0x1fe2 <__floatsisf+0x62>
    1fec:	88 0f       	add	r24, r24
    1fee:	96 95       	lsr	r25
    1ff0:	87 95       	ror	r24
    1ff2:	97 f9       	bld	r25, 7
    1ff4:	08 95       	ret

00001ff6 <__fp_cmp>:
    1ff6:	99 0f       	add	r25, r25
    1ff8:	00 08       	sbc	r0, r0
    1ffa:	55 0f       	add	r21, r21
    1ffc:	aa 0b       	sbc	r26, r26
    1ffe:	e0 e8       	ldi	r30, 0x80	; 128
    2000:	fe ef       	ldi	r31, 0xFE	; 254
    2002:	16 16       	cp	r1, r22
    2004:	17 06       	cpc	r1, r23
    2006:	e8 07       	cpc	r30, r24
    2008:	f9 07       	cpc	r31, r25
    200a:	c0 f0       	brcs	.+48     	; 0x203c <__fp_cmp+0x46>
    200c:	12 16       	cp	r1, r18
    200e:	13 06       	cpc	r1, r19
    2010:	e4 07       	cpc	r30, r20
    2012:	f5 07       	cpc	r31, r21
    2014:	98 f0       	brcs	.+38     	; 0x203c <__fp_cmp+0x46>
    2016:	62 1b       	sub	r22, r18
    2018:	73 0b       	sbc	r23, r19
    201a:	84 0b       	sbc	r24, r20
    201c:	95 0b       	sbc	r25, r21
    201e:	39 f4       	brne	.+14     	; 0x202e <__fp_cmp+0x38>
    2020:	0a 26       	eor	r0, r26
    2022:	61 f0       	breq	.+24     	; 0x203c <__fp_cmp+0x46>
    2024:	23 2b       	or	r18, r19
    2026:	24 2b       	or	r18, r20
    2028:	25 2b       	or	r18, r21
    202a:	21 f4       	brne	.+8      	; 0x2034 <__fp_cmp+0x3e>
    202c:	08 95       	ret
    202e:	0a 26       	eor	r0, r26
    2030:	09 f4       	brne	.+2      	; 0x2034 <__fp_cmp+0x3e>
    2032:	a1 40       	sbci	r26, 0x01	; 1
    2034:	a6 95       	lsr	r26
    2036:	8f ef       	ldi	r24, 0xFF	; 255
    2038:	81 1d       	adc	r24, r1
    203a:	81 1d       	adc	r24, r1
    203c:	08 95       	ret

0000203e <__fp_inf>:
    203e:	97 f9       	bld	r25, 7
    2040:	9f 67       	ori	r25, 0x7F	; 127
    2042:	80 e8       	ldi	r24, 0x80	; 128
    2044:	70 e0       	ldi	r23, 0x00	; 0
    2046:	60 e0       	ldi	r22, 0x00	; 0
    2048:	08 95       	ret

0000204a <__fp_nan>:
    204a:	9f ef       	ldi	r25, 0xFF	; 255
    204c:	80 ec       	ldi	r24, 0xC0	; 192
    204e:	08 95       	ret

00002050 <__fp_pscA>:
    2050:	00 24       	eor	r0, r0
    2052:	0a 94       	dec	r0
    2054:	16 16       	cp	r1, r22
    2056:	17 06       	cpc	r1, r23
    2058:	18 06       	cpc	r1, r24
    205a:	09 06       	cpc	r0, r25
    205c:	08 95       	ret

0000205e <__fp_pscB>:
    205e:	00 24       	eor	r0, r0
    2060:	0a 94       	dec	r0
    2062:	12 16       	cp	r1, r18
    2064:	13 06       	cpc	r1, r19
    2066:	14 06       	cpc	r1, r20
    2068:	05 06       	cpc	r0, r21
    206a:	08 95       	ret

0000206c <__fp_round>:
    206c:	09 2e       	mov	r0, r25
    206e:	03 94       	inc	r0
    2070:	00 0c       	add	r0, r0
    2072:	11 f4       	brne	.+4      	; 0x2078 <__fp_round+0xc>
    2074:	88 23       	and	r24, r24
    2076:	52 f0       	brmi	.+20     	; 0x208c <__fp_round+0x20>
    2078:	bb 0f       	add	r27, r27
    207a:	40 f4       	brcc	.+16     	; 0x208c <__fp_round+0x20>
    207c:	bf 2b       	or	r27, r31
    207e:	11 f4       	brne	.+4      	; 0x2084 <__fp_round+0x18>
    2080:	60 ff       	sbrs	r22, 0
    2082:	04 c0       	rjmp	.+8      	; 0x208c <__fp_round+0x20>
    2084:	6f 5f       	subi	r22, 0xFF	; 255
    2086:	7f 4f       	sbci	r23, 0xFF	; 255
    2088:	8f 4f       	sbci	r24, 0xFF	; 255
    208a:	9f 4f       	sbci	r25, 0xFF	; 255
    208c:	08 95       	ret

0000208e <__fp_split3>:
    208e:	57 fd       	sbrc	r21, 7
    2090:	90 58       	subi	r25, 0x80	; 128
    2092:	44 0f       	add	r20, r20
    2094:	55 1f       	adc	r21, r21
    2096:	59 f0       	breq	.+22     	; 0x20ae <__fp_splitA+0x10>
    2098:	5f 3f       	cpi	r21, 0xFF	; 255
    209a:	71 f0       	breq	.+28     	; 0x20b8 <__fp_splitA+0x1a>
    209c:	47 95       	ror	r20

0000209e <__fp_splitA>:
    209e:	88 0f       	add	r24, r24
    20a0:	97 fb       	bst	r25, 7
    20a2:	99 1f       	adc	r25, r25
    20a4:	61 f0       	breq	.+24     	; 0x20be <__fp_splitA+0x20>
    20a6:	9f 3f       	cpi	r25, 0xFF	; 255
    20a8:	79 f0       	breq	.+30     	; 0x20c8 <__fp_splitA+0x2a>
    20aa:	87 95       	ror	r24
    20ac:	08 95       	ret
    20ae:	12 16       	cp	r1, r18
    20b0:	13 06       	cpc	r1, r19
    20b2:	14 06       	cpc	r1, r20
    20b4:	55 1f       	adc	r21, r21
    20b6:	f2 cf       	rjmp	.-28     	; 0x209c <__fp_split3+0xe>
    20b8:	46 95       	lsr	r20
    20ba:	f1 df       	rcall	.-30     	; 0x209e <__fp_splitA>
    20bc:	08 c0       	rjmp	.+16     	; 0x20ce <__fp_splitA+0x30>
    20be:	16 16       	cp	r1, r22
    20c0:	17 06       	cpc	r1, r23
    20c2:	18 06       	cpc	r1, r24
    20c4:	99 1f       	adc	r25, r25
    20c6:	f1 cf       	rjmp	.-30     	; 0x20aa <__fp_splitA+0xc>
    20c8:	86 95       	lsr	r24
    20ca:	71 05       	cpc	r23, r1
    20cc:	61 05       	cpc	r22, r1
    20ce:	08 94       	sec
    20d0:	08 95       	ret

000020d2 <__fp_zero>:
    20d2:	e8 94       	clt

000020d4 <__fp_szero>:
    20d4:	bb 27       	eor	r27, r27
    20d6:	66 27       	eor	r22, r22
    20d8:	77 27       	eor	r23, r23
    20da:	cb 01       	movw	r24, r22
    20dc:	97 f9       	bld	r25, 7
    20de:	08 95       	ret

000020e0 <__gesf2>:
    20e0:	8a df       	rcall	.-236    	; 0x1ff6 <__fp_cmp>
    20e2:	08 f4       	brcc	.+2      	; 0x20e6 <__gesf2+0x6>
    20e4:	8f ef       	ldi	r24, 0xFF	; 255
    20e6:	08 95       	ret

000020e8 <__mulsf3>:
    20e8:	0b d0       	rcall	.+22     	; 0x2100 <__mulsf3x>
    20ea:	c0 cf       	rjmp	.-128    	; 0x206c <__fp_round>
    20ec:	b1 df       	rcall	.-158    	; 0x2050 <__fp_pscA>
    20ee:	28 f0       	brcs	.+10     	; 0x20fa <__mulsf3+0x12>
    20f0:	b6 df       	rcall	.-148    	; 0x205e <__fp_pscB>
    20f2:	18 f0       	brcs	.+6      	; 0x20fa <__mulsf3+0x12>
    20f4:	95 23       	and	r25, r21
    20f6:	09 f0       	breq	.+2      	; 0x20fa <__mulsf3+0x12>
    20f8:	a2 cf       	rjmp	.-188    	; 0x203e <__fp_inf>
    20fa:	a7 cf       	rjmp	.-178    	; 0x204a <__fp_nan>
    20fc:	11 24       	eor	r1, r1
    20fe:	ea cf       	rjmp	.-44     	; 0x20d4 <__fp_szero>

00002100 <__mulsf3x>:
    2100:	c6 df       	rcall	.-116    	; 0x208e <__fp_split3>
    2102:	a0 f3       	brcs	.-24     	; 0x20ec <__mulsf3+0x4>

00002104 <__mulsf3_pse>:
    2104:	95 9f       	mul	r25, r21
    2106:	d1 f3       	breq	.-12     	; 0x20fc <__mulsf3+0x14>
    2108:	95 0f       	add	r25, r21
    210a:	50 e0       	ldi	r21, 0x00	; 0
    210c:	55 1f       	adc	r21, r21
    210e:	62 9f       	mul	r22, r18
    2110:	f0 01       	movw	r30, r0
    2112:	72 9f       	mul	r23, r18
    2114:	bb 27       	eor	r27, r27
    2116:	f0 0d       	add	r31, r0
    2118:	b1 1d       	adc	r27, r1
    211a:	63 9f       	mul	r22, r19
    211c:	aa 27       	eor	r26, r26
    211e:	f0 0d       	add	r31, r0
    2120:	b1 1d       	adc	r27, r1
    2122:	aa 1f       	adc	r26, r26
    2124:	64 9f       	mul	r22, r20
    2126:	66 27       	eor	r22, r22
    2128:	b0 0d       	add	r27, r0
    212a:	a1 1d       	adc	r26, r1
    212c:	66 1f       	adc	r22, r22
    212e:	82 9f       	mul	r24, r18
    2130:	22 27       	eor	r18, r18
    2132:	b0 0d       	add	r27, r0
    2134:	a1 1d       	adc	r26, r1
    2136:	62 1f       	adc	r22, r18
    2138:	73 9f       	mul	r23, r19
    213a:	b0 0d       	add	r27, r0
    213c:	a1 1d       	adc	r26, r1
    213e:	62 1f       	adc	r22, r18
    2140:	83 9f       	mul	r24, r19
    2142:	a0 0d       	add	r26, r0
    2144:	61 1d       	adc	r22, r1
    2146:	22 1f       	adc	r18, r18
    2148:	74 9f       	mul	r23, r20
    214a:	33 27       	eor	r19, r19
    214c:	a0 0d       	add	r26, r0
    214e:	61 1d       	adc	r22, r1
    2150:	23 1f       	adc	r18, r19
    2152:	84 9f       	mul	r24, r20
    2154:	60 0d       	add	r22, r0
    2156:	21 1d       	adc	r18, r1
    2158:	82 2f       	mov	r24, r18
    215a:	76 2f       	mov	r23, r22
    215c:	6a 2f       	mov	r22, r26
    215e:	11 24       	eor	r1, r1
    2160:	9f 57       	subi	r25, 0x7F	; 127
    2162:	50 40       	sbci	r21, 0x00	; 0
    2164:	8a f0       	brmi	.+34     	; 0x2188 <__mulsf3_pse+0x84>
    2166:	e1 f0       	breq	.+56     	; 0x21a0 <__mulsf3_pse+0x9c>
    2168:	88 23       	and	r24, r24
    216a:	4a f0       	brmi	.+18     	; 0x217e <__mulsf3_pse+0x7a>
    216c:	ee 0f       	add	r30, r30
    216e:	ff 1f       	adc	r31, r31
    2170:	bb 1f       	adc	r27, r27
    2172:	66 1f       	adc	r22, r22
    2174:	77 1f       	adc	r23, r23
    2176:	88 1f       	adc	r24, r24
    2178:	91 50       	subi	r25, 0x01	; 1
    217a:	50 40       	sbci	r21, 0x00	; 0
    217c:	a9 f7       	brne	.-22     	; 0x2168 <__mulsf3_pse+0x64>
    217e:	9e 3f       	cpi	r25, 0xFE	; 254
    2180:	51 05       	cpc	r21, r1
    2182:	70 f0       	brcs	.+28     	; 0x21a0 <__mulsf3_pse+0x9c>
    2184:	5c cf       	rjmp	.-328    	; 0x203e <__fp_inf>
    2186:	a6 cf       	rjmp	.-180    	; 0x20d4 <__fp_szero>
    2188:	5f 3f       	cpi	r21, 0xFF	; 255
    218a:	ec f3       	brlt	.-6      	; 0x2186 <__mulsf3_pse+0x82>
    218c:	98 3e       	cpi	r25, 0xE8	; 232
    218e:	dc f3       	brlt	.-10     	; 0x2186 <__mulsf3_pse+0x82>
    2190:	86 95       	lsr	r24
    2192:	77 95       	ror	r23
    2194:	67 95       	ror	r22
    2196:	b7 95       	ror	r27
    2198:	f7 95       	ror	r31
    219a:	e7 95       	ror	r30
    219c:	9f 5f       	subi	r25, 0xFF	; 255
    219e:	c1 f7       	brne	.-16     	; 0x2190 <__mulsf3_pse+0x8c>
    21a0:	fe 2b       	or	r31, r30
    21a2:	88 0f       	add	r24, r24
    21a4:	91 1d       	adc	r25, r1
    21a6:	96 95       	lsr	r25
    21a8:	87 95       	ror	r24
    21aa:	97 f9       	bld	r25, 7
    21ac:	08 95       	ret

000021ae <vfprintf>:
    21ae:	a0 e1       	ldi	r26, 0x10	; 16
    21b0:	b0 e0       	ldi	r27, 0x00	; 0
    21b2:	ec ed       	ldi	r30, 0xDC	; 220
    21b4:	f0 e1       	ldi	r31, 0x10	; 16
    21b6:	59 c3       	rjmp	.+1714   	; 0x286a <__prologue_saves__>
    21b8:	7c 01       	movw	r14, r24
    21ba:	1b 01       	movw	r2, r22
    21bc:	6a 01       	movw	r12, r20
    21be:	fc 01       	movw	r30, r24
    21c0:	17 82       	std	Z+7, r1	; 0x07
    21c2:	16 82       	std	Z+6, r1	; 0x06
    21c4:	83 81       	ldd	r24, Z+3	; 0x03
    21c6:	81 ff       	sbrs	r24, 1
    21c8:	2a c3       	rjmp	.+1620   	; 0x281e <__stack+0x61f>
    21ca:	9e 01       	movw	r18, r28
    21cc:	2f 5f       	subi	r18, 0xFF	; 255
    21ce:	3f 4f       	sbci	r19, 0xFF	; 255
    21d0:	39 01       	movw	r6, r18
    21d2:	f7 01       	movw	r30, r14
    21d4:	93 81       	ldd	r25, Z+3	; 0x03
    21d6:	f1 01       	movw	r30, r2
    21d8:	93 fd       	sbrc	r25, 3
    21da:	85 91       	lpm	r24, Z+
    21dc:	93 ff       	sbrs	r25, 3
    21de:	81 91       	ld	r24, Z+
    21e0:	1f 01       	movw	r2, r30
    21e2:	88 23       	and	r24, r24
    21e4:	09 f4       	brne	.+2      	; 0x21e8 <vfprintf+0x3a>
    21e6:	17 c3       	rjmp	.+1582   	; 0x2816 <__stack+0x617>
    21e8:	85 32       	cpi	r24, 0x25	; 37
    21ea:	39 f4       	brne	.+14     	; 0x21fa <vfprintf+0x4c>
    21ec:	93 fd       	sbrc	r25, 3
    21ee:	85 91       	lpm	r24, Z+
    21f0:	93 ff       	sbrs	r25, 3
    21f2:	81 91       	ld	r24, Z+
    21f4:	1f 01       	movw	r2, r30
    21f6:	85 32       	cpi	r24, 0x25	; 37
    21f8:	31 f4       	brne	.+12     	; 0x2206 <__stack+0x7>
    21fa:	b7 01       	movw	r22, r14
    21fc:	90 e0       	ldi	r25, 0x00	; 0
    21fe:	6e d4       	rcall	.+2268   	; 0x2adc <fputc>
    2200:	56 01       	movw	r10, r12
    2202:	65 01       	movw	r12, r10
    2204:	e6 cf       	rjmp	.-52     	; 0x21d2 <vfprintf+0x24>
    2206:	10 e0       	ldi	r17, 0x00	; 0
    2208:	51 2c       	mov	r5, r1
    220a:	91 2c       	mov	r9, r1
    220c:	ff e1       	ldi	r31, 0x1F	; 31
    220e:	f9 15       	cp	r31, r9
    2210:	d8 f0       	brcs	.+54     	; 0x2248 <__stack+0x49>
    2212:	8b 32       	cpi	r24, 0x2B	; 43
    2214:	79 f0       	breq	.+30     	; 0x2234 <__stack+0x35>
    2216:	38 f4       	brcc	.+14     	; 0x2226 <__stack+0x27>
    2218:	80 32       	cpi	r24, 0x20	; 32
    221a:	79 f0       	breq	.+30     	; 0x223a <__stack+0x3b>
    221c:	83 32       	cpi	r24, 0x23	; 35
    221e:	a1 f4       	brne	.+40     	; 0x2248 <__stack+0x49>
    2220:	f9 2d       	mov	r31, r9
    2222:	f0 61       	ori	r31, 0x10	; 16
    2224:	2e c0       	rjmp	.+92     	; 0x2282 <__stack+0x83>
    2226:	8d 32       	cpi	r24, 0x2D	; 45
    2228:	61 f0       	breq	.+24     	; 0x2242 <__stack+0x43>
    222a:	80 33       	cpi	r24, 0x30	; 48
    222c:	69 f4       	brne	.+26     	; 0x2248 <__stack+0x49>
    222e:	29 2d       	mov	r18, r9
    2230:	21 60       	ori	r18, 0x01	; 1
    2232:	2d c0       	rjmp	.+90     	; 0x228e <__stack+0x8f>
    2234:	39 2d       	mov	r19, r9
    2236:	32 60       	ori	r19, 0x02	; 2
    2238:	93 2e       	mov	r9, r19
    223a:	89 2d       	mov	r24, r9
    223c:	84 60       	ori	r24, 0x04	; 4
    223e:	98 2e       	mov	r9, r24
    2240:	2a c0       	rjmp	.+84     	; 0x2296 <__stack+0x97>
    2242:	e9 2d       	mov	r30, r9
    2244:	e8 60       	ori	r30, 0x08	; 8
    2246:	15 c0       	rjmp	.+42     	; 0x2272 <__stack+0x73>
    2248:	97 fc       	sbrc	r9, 7
    224a:	2d c0       	rjmp	.+90     	; 0x22a6 <__stack+0xa7>
    224c:	20 ed       	ldi	r18, 0xD0	; 208
    224e:	28 0f       	add	r18, r24
    2250:	2a 30       	cpi	r18, 0x0A	; 10
    2252:	88 f4       	brcc	.+34     	; 0x2276 <__stack+0x77>
    2254:	96 fe       	sbrs	r9, 6
    2256:	06 c0       	rjmp	.+12     	; 0x2264 <__stack+0x65>
    2258:	3a e0       	ldi	r19, 0x0A	; 10
    225a:	13 9f       	mul	r17, r19
    225c:	20 0d       	add	r18, r0
    225e:	11 24       	eor	r1, r1
    2260:	12 2f       	mov	r17, r18
    2262:	19 c0       	rjmp	.+50     	; 0x2296 <__stack+0x97>
    2264:	8a e0       	ldi	r24, 0x0A	; 10
    2266:	58 9e       	mul	r5, r24
    2268:	20 0d       	add	r18, r0
    226a:	11 24       	eor	r1, r1
    226c:	52 2e       	mov	r5, r18
    226e:	e9 2d       	mov	r30, r9
    2270:	e0 62       	ori	r30, 0x20	; 32
    2272:	9e 2e       	mov	r9, r30
    2274:	10 c0       	rjmp	.+32     	; 0x2296 <__stack+0x97>
    2276:	8e 32       	cpi	r24, 0x2E	; 46
    2278:	31 f4       	brne	.+12     	; 0x2286 <__stack+0x87>
    227a:	96 fc       	sbrc	r9, 6
    227c:	cc c2       	rjmp	.+1432   	; 0x2816 <__stack+0x617>
    227e:	f9 2d       	mov	r31, r9
    2280:	f0 64       	ori	r31, 0x40	; 64
    2282:	9f 2e       	mov	r9, r31
    2284:	08 c0       	rjmp	.+16     	; 0x2296 <__stack+0x97>
    2286:	8c 36       	cpi	r24, 0x6C	; 108
    2288:	21 f4       	brne	.+8      	; 0x2292 <__stack+0x93>
    228a:	29 2d       	mov	r18, r9
    228c:	20 68       	ori	r18, 0x80	; 128
    228e:	92 2e       	mov	r9, r18
    2290:	02 c0       	rjmp	.+4      	; 0x2296 <__stack+0x97>
    2292:	88 36       	cpi	r24, 0x68	; 104
    2294:	41 f4       	brne	.+16     	; 0x22a6 <__stack+0xa7>
    2296:	f1 01       	movw	r30, r2
    2298:	93 fd       	sbrc	r25, 3
    229a:	85 91       	lpm	r24, Z+
    229c:	93 ff       	sbrs	r25, 3
    229e:	81 91       	ld	r24, Z+
    22a0:	1f 01       	movw	r2, r30
    22a2:	81 11       	cpse	r24, r1
    22a4:	b3 cf       	rjmp	.-154    	; 0x220c <__stack+0xd>
    22a6:	9b eb       	ldi	r25, 0xBB	; 187
    22a8:	98 0f       	add	r25, r24
    22aa:	93 30       	cpi	r25, 0x03	; 3
    22ac:	20 f4       	brcc	.+8      	; 0x22b6 <__stack+0xb7>
    22ae:	99 2d       	mov	r25, r9
    22b0:	90 61       	ori	r25, 0x10	; 16
    22b2:	80 5e       	subi	r24, 0xE0	; 224
    22b4:	07 c0       	rjmp	.+14     	; 0x22c4 <__stack+0xc5>
    22b6:	9b e9       	ldi	r25, 0x9B	; 155
    22b8:	98 0f       	add	r25, r24
    22ba:	93 30       	cpi	r25, 0x03	; 3
    22bc:	08 f0       	brcs	.+2      	; 0x22c0 <__stack+0xc1>
    22be:	59 c1       	rjmp	.+690    	; 0x2572 <__stack+0x373>
    22c0:	99 2d       	mov	r25, r9
    22c2:	9f 7e       	andi	r25, 0xEF	; 239
    22c4:	96 ff       	sbrs	r25, 6
    22c6:	16 e0       	ldi	r17, 0x06	; 6
    22c8:	9f 73       	andi	r25, 0x3F	; 63
    22ca:	99 2e       	mov	r9, r25
    22cc:	85 36       	cpi	r24, 0x65	; 101
    22ce:	19 f4       	brne	.+6      	; 0x22d6 <__stack+0xd7>
    22d0:	90 64       	ori	r25, 0x40	; 64
    22d2:	99 2e       	mov	r9, r25
    22d4:	08 c0       	rjmp	.+16     	; 0x22e6 <__stack+0xe7>
    22d6:	86 36       	cpi	r24, 0x66	; 102
    22d8:	21 f4       	brne	.+8      	; 0x22e2 <__stack+0xe3>
    22da:	39 2f       	mov	r19, r25
    22dc:	30 68       	ori	r19, 0x80	; 128
    22de:	93 2e       	mov	r9, r19
    22e0:	02 c0       	rjmp	.+4      	; 0x22e6 <__stack+0xe7>
    22e2:	11 11       	cpse	r17, r1
    22e4:	11 50       	subi	r17, 0x01	; 1
    22e6:	97 fe       	sbrs	r9, 7
    22e8:	07 c0       	rjmp	.+14     	; 0x22f8 <__stack+0xf9>
    22ea:	1c 33       	cpi	r17, 0x3C	; 60
    22ec:	50 f4       	brcc	.+20     	; 0x2302 <__stack+0x103>
    22ee:	44 24       	eor	r4, r4
    22f0:	43 94       	inc	r4
    22f2:	41 0e       	add	r4, r17
    22f4:	27 e0       	ldi	r18, 0x07	; 7
    22f6:	0b c0       	rjmp	.+22     	; 0x230e <__stack+0x10f>
    22f8:	18 30       	cpi	r17, 0x08	; 8
    22fa:	38 f0       	brcs	.+14     	; 0x230a <__stack+0x10b>
    22fc:	27 e0       	ldi	r18, 0x07	; 7
    22fe:	17 e0       	ldi	r17, 0x07	; 7
    2300:	05 c0       	rjmp	.+10     	; 0x230c <__stack+0x10d>
    2302:	27 e0       	ldi	r18, 0x07	; 7
    2304:	9c e3       	ldi	r25, 0x3C	; 60
    2306:	49 2e       	mov	r4, r25
    2308:	02 c0       	rjmp	.+4      	; 0x230e <__stack+0x10f>
    230a:	21 2f       	mov	r18, r17
    230c:	41 2c       	mov	r4, r1
    230e:	56 01       	movw	r10, r12
    2310:	84 e0       	ldi	r24, 0x04	; 4
    2312:	a8 0e       	add	r10, r24
    2314:	b1 1c       	adc	r11, r1
    2316:	f6 01       	movw	r30, r12
    2318:	60 81       	ld	r22, Z
    231a:	71 81       	ldd	r23, Z+1	; 0x01
    231c:	82 81       	ldd	r24, Z+2	; 0x02
    231e:	93 81       	ldd	r25, Z+3	; 0x03
    2320:	04 2d       	mov	r16, r4
    2322:	a3 01       	movw	r20, r6
    2324:	d9 d2       	rcall	.+1458   	; 0x28d8 <__ftoa_engine>
    2326:	6c 01       	movw	r12, r24
    2328:	f9 81       	ldd	r31, Y+1	; 0x01
    232a:	fc 87       	std	Y+12, r31	; 0x0c
    232c:	f0 ff       	sbrs	r31, 0
    232e:	02 c0       	rjmp	.+4      	; 0x2334 <__stack+0x135>
    2330:	f3 ff       	sbrs	r31, 3
    2332:	06 c0       	rjmp	.+12     	; 0x2340 <__stack+0x141>
    2334:	91 fc       	sbrc	r9, 1
    2336:	06 c0       	rjmp	.+12     	; 0x2344 <__stack+0x145>
    2338:	92 fe       	sbrs	r9, 2
    233a:	06 c0       	rjmp	.+12     	; 0x2348 <__stack+0x149>
    233c:	00 e2       	ldi	r16, 0x20	; 32
    233e:	05 c0       	rjmp	.+10     	; 0x234a <__stack+0x14b>
    2340:	0d e2       	ldi	r16, 0x2D	; 45
    2342:	03 c0       	rjmp	.+6      	; 0x234a <__stack+0x14b>
    2344:	0b e2       	ldi	r16, 0x2B	; 43
    2346:	01 c0       	rjmp	.+2      	; 0x234a <__stack+0x14b>
    2348:	00 e0       	ldi	r16, 0x00	; 0
    234a:	8c 85       	ldd	r24, Y+12	; 0x0c
    234c:	8c 70       	andi	r24, 0x0C	; 12
    234e:	19 f0       	breq	.+6      	; 0x2356 <__stack+0x157>
    2350:	01 11       	cpse	r16, r1
    2352:	43 c2       	rjmp	.+1158   	; 0x27da <__stack+0x5db>
    2354:	80 c2       	rjmp	.+1280   	; 0x2856 <__stack+0x657>
    2356:	97 fe       	sbrs	r9, 7
    2358:	10 c0       	rjmp	.+32     	; 0x237a <__stack+0x17b>
    235a:	4c 0c       	add	r4, r12
    235c:	fc 85       	ldd	r31, Y+12	; 0x0c
    235e:	f4 ff       	sbrs	r31, 4
    2360:	04 c0       	rjmp	.+8      	; 0x236a <__stack+0x16b>
    2362:	8a 81       	ldd	r24, Y+2	; 0x02
    2364:	81 33       	cpi	r24, 0x31	; 49
    2366:	09 f4       	brne	.+2      	; 0x236a <__stack+0x16b>
    2368:	4a 94       	dec	r4
    236a:	14 14       	cp	r1, r4
    236c:	74 f5       	brge	.+92     	; 0x23ca <__stack+0x1cb>
    236e:	28 e0       	ldi	r18, 0x08	; 8
    2370:	24 15       	cp	r18, r4
    2372:	78 f5       	brcc	.+94     	; 0x23d2 <__stack+0x1d3>
    2374:	88 e0       	ldi	r24, 0x08	; 8
    2376:	48 2e       	mov	r4, r24
    2378:	2c c0       	rjmp	.+88     	; 0x23d2 <__stack+0x1d3>
    237a:	96 fc       	sbrc	r9, 6
    237c:	2a c0       	rjmp	.+84     	; 0x23d2 <__stack+0x1d3>
    237e:	81 2f       	mov	r24, r17
    2380:	90 e0       	ldi	r25, 0x00	; 0
    2382:	8c 15       	cp	r24, r12
    2384:	9d 05       	cpc	r25, r13
    2386:	9c f0       	brlt	.+38     	; 0x23ae <__stack+0x1af>
    2388:	3c ef       	ldi	r19, 0xFC	; 252
    238a:	c3 16       	cp	r12, r19
    238c:	3f ef       	ldi	r19, 0xFF	; 255
    238e:	d3 06       	cpc	r13, r19
    2390:	74 f0       	brlt	.+28     	; 0x23ae <__stack+0x1af>
    2392:	89 2d       	mov	r24, r9
    2394:	80 68       	ori	r24, 0x80	; 128
    2396:	98 2e       	mov	r9, r24
    2398:	0a c0       	rjmp	.+20     	; 0x23ae <__stack+0x1af>
    239a:	e2 e0       	ldi	r30, 0x02	; 2
    239c:	f0 e0       	ldi	r31, 0x00	; 0
    239e:	ec 0f       	add	r30, r28
    23a0:	fd 1f       	adc	r31, r29
    23a2:	e1 0f       	add	r30, r17
    23a4:	f1 1d       	adc	r31, r1
    23a6:	80 81       	ld	r24, Z
    23a8:	80 33       	cpi	r24, 0x30	; 48
    23aa:	19 f4       	brne	.+6      	; 0x23b2 <__stack+0x1b3>
    23ac:	11 50       	subi	r17, 0x01	; 1
    23ae:	11 11       	cpse	r17, r1
    23b0:	f4 cf       	rjmp	.-24     	; 0x239a <__stack+0x19b>
    23b2:	97 fe       	sbrs	r9, 7
    23b4:	0e c0       	rjmp	.+28     	; 0x23d2 <__stack+0x1d3>
    23b6:	44 24       	eor	r4, r4
    23b8:	43 94       	inc	r4
    23ba:	41 0e       	add	r4, r17
    23bc:	81 2f       	mov	r24, r17
    23be:	90 e0       	ldi	r25, 0x00	; 0
    23c0:	c8 16       	cp	r12, r24
    23c2:	d9 06       	cpc	r13, r25
    23c4:	2c f4       	brge	.+10     	; 0x23d0 <__stack+0x1d1>
    23c6:	1c 19       	sub	r17, r12
    23c8:	04 c0       	rjmp	.+8      	; 0x23d2 <__stack+0x1d3>
    23ca:	44 24       	eor	r4, r4
    23cc:	43 94       	inc	r4
    23ce:	01 c0       	rjmp	.+2      	; 0x23d2 <__stack+0x1d3>
    23d0:	10 e0       	ldi	r17, 0x00	; 0
    23d2:	97 fe       	sbrs	r9, 7
    23d4:	06 c0       	rjmp	.+12     	; 0x23e2 <__stack+0x1e3>
    23d6:	1c 14       	cp	r1, r12
    23d8:	1d 04       	cpc	r1, r13
    23da:	34 f4       	brge	.+12     	; 0x23e8 <__stack+0x1e9>
    23dc:	c6 01       	movw	r24, r12
    23de:	01 96       	adiw	r24, 0x01	; 1
    23e0:	05 c0       	rjmp	.+10     	; 0x23ec <__stack+0x1ed>
    23e2:	85 e0       	ldi	r24, 0x05	; 5
    23e4:	90 e0       	ldi	r25, 0x00	; 0
    23e6:	02 c0       	rjmp	.+4      	; 0x23ec <__stack+0x1ed>
    23e8:	81 e0       	ldi	r24, 0x01	; 1
    23ea:	90 e0       	ldi	r25, 0x00	; 0
    23ec:	01 11       	cpse	r16, r1
    23ee:	01 96       	adiw	r24, 0x01	; 1
    23f0:	11 23       	and	r17, r17
    23f2:	31 f0       	breq	.+12     	; 0x2400 <__stack+0x201>
    23f4:	21 2f       	mov	r18, r17
    23f6:	30 e0       	ldi	r19, 0x00	; 0
    23f8:	2f 5f       	subi	r18, 0xFF	; 255
    23fa:	3f 4f       	sbci	r19, 0xFF	; 255
    23fc:	82 0f       	add	r24, r18
    23fe:	93 1f       	adc	r25, r19
    2400:	25 2d       	mov	r18, r5
    2402:	30 e0       	ldi	r19, 0x00	; 0
    2404:	82 17       	cp	r24, r18
    2406:	93 07       	cpc	r25, r19
    2408:	14 f4       	brge	.+4      	; 0x240e <__stack+0x20f>
    240a:	58 1a       	sub	r5, r24
    240c:	01 c0       	rjmp	.+2      	; 0x2410 <__stack+0x211>
    240e:	51 2c       	mov	r5, r1
    2410:	89 2d       	mov	r24, r9
    2412:	89 70       	andi	r24, 0x09	; 9
    2414:	41 f4       	brne	.+16     	; 0x2426 <__stack+0x227>
    2416:	55 20       	and	r5, r5
    2418:	31 f0       	breq	.+12     	; 0x2426 <__stack+0x227>
    241a:	b7 01       	movw	r22, r14
    241c:	80 e2       	ldi	r24, 0x20	; 32
    241e:	90 e0       	ldi	r25, 0x00	; 0
    2420:	5d d3       	rcall	.+1722   	; 0x2adc <fputc>
    2422:	5a 94       	dec	r5
    2424:	f8 cf       	rjmp	.-16     	; 0x2416 <__stack+0x217>
    2426:	00 23       	and	r16, r16
    2428:	21 f0       	breq	.+8      	; 0x2432 <__stack+0x233>
    242a:	b7 01       	movw	r22, r14
    242c:	80 2f       	mov	r24, r16
    242e:	90 e0       	ldi	r25, 0x00	; 0
    2430:	55 d3       	rcall	.+1706   	; 0x2adc <fputc>
    2432:	93 fc       	sbrc	r9, 3
    2434:	08 c0       	rjmp	.+16     	; 0x2446 <__stack+0x247>
    2436:	55 20       	and	r5, r5
    2438:	31 f0       	breq	.+12     	; 0x2446 <__stack+0x247>
    243a:	b7 01       	movw	r22, r14
    243c:	80 e3       	ldi	r24, 0x30	; 48
    243e:	90 e0       	ldi	r25, 0x00	; 0
    2440:	4d d3       	rcall	.+1690   	; 0x2adc <fputc>
    2442:	5a 94       	dec	r5
    2444:	f8 cf       	rjmp	.-16     	; 0x2436 <__stack+0x237>
    2446:	97 fe       	sbrs	r9, 7
    2448:	4a c0       	rjmp	.+148    	; 0x24de <__stack+0x2df>
    244a:	46 01       	movw	r8, r12
    244c:	d7 fe       	sbrs	r13, 7
    244e:	02 c0       	rjmp	.+4      	; 0x2454 <__stack+0x255>
    2450:	81 2c       	mov	r8, r1
    2452:	91 2c       	mov	r9, r1
    2454:	c6 01       	movw	r24, r12
    2456:	88 19       	sub	r24, r8
    2458:	99 09       	sbc	r25, r9
    245a:	f3 01       	movw	r30, r6
    245c:	e8 0f       	add	r30, r24
    245e:	f9 1f       	adc	r31, r25
    2460:	fe 87       	std	Y+14, r31	; 0x0e
    2462:	ed 87       	std	Y+13, r30	; 0x0d
    2464:	96 01       	movw	r18, r12
    2466:	24 19       	sub	r18, r4
    2468:	31 09       	sbc	r19, r1
    246a:	38 8b       	std	Y+16, r19	; 0x10
    246c:	2f 87       	std	Y+15, r18	; 0x0f
    246e:	01 2f       	mov	r16, r17
    2470:	10 e0       	ldi	r17, 0x00	; 0
    2472:	11 95       	neg	r17
    2474:	01 95       	neg	r16
    2476:	11 09       	sbc	r17, r1
    2478:	3f ef       	ldi	r19, 0xFF	; 255
    247a:	83 16       	cp	r8, r19
    247c:	93 06       	cpc	r9, r19
    247e:	21 f4       	brne	.+8      	; 0x2488 <__stack+0x289>
    2480:	b7 01       	movw	r22, r14
    2482:	8e e2       	ldi	r24, 0x2E	; 46
    2484:	90 e0       	ldi	r25, 0x00	; 0
    2486:	2a d3       	rcall	.+1620   	; 0x2adc <fputc>
    2488:	c8 14       	cp	r12, r8
    248a:	d9 04       	cpc	r13, r9
    248c:	4c f0       	brlt	.+18     	; 0x24a0 <__stack+0x2a1>
    248e:	8f 85       	ldd	r24, Y+15	; 0x0f
    2490:	98 89       	ldd	r25, Y+16	; 0x10
    2492:	88 15       	cp	r24, r8
    2494:	99 05       	cpc	r25, r9
    2496:	24 f4       	brge	.+8      	; 0x24a0 <__stack+0x2a1>
    2498:	ed 85       	ldd	r30, Y+13	; 0x0d
    249a:	fe 85       	ldd	r31, Y+14	; 0x0e
    249c:	81 81       	ldd	r24, Z+1	; 0x01
    249e:	01 c0       	rjmp	.+2      	; 0x24a2 <__stack+0x2a3>
    24a0:	80 e3       	ldi	r24, 0x30	; 48
    24a2:	f1 e0       	ldi	r31, 0x01	; 1
    24a4:	8f 1a       	sub	r8, r31
    24a6:	91 08       	sbc	r9, r1
    24a8:	2d 85       	ldd	r18, Y+13	; 0x0d
    24aa:	3e 85       	ldd	r19, Y+14	; 0x0e
    24ac:	2f 5f       	subi	r18, 0xFF	; 255
    24ae:	3f 4f       	sbci	r19, 0xFF	; 255
    24b0:	3e 87       	std	Y+14, r19	; 0x0e
    24b2:	2d 87       	std	Y+13, r18	; 0x0d
    24b4:	80 16       	cp	r8, r16
    24b6:	91 06       	cpc	r9, r17
    24b8:	24 f0       	brlt	.+8      	; 0x24c2 <__stack+0x2c3>
    24ba:	b7 01       	movw	r22, r14
    24bc:	90 e0       	ldi	r25, 0x00	; 0
    24be:	0e d3       	rcall	.+1564   	; 0x2adc <fputc>
    24c0:	db cf       	rjmp	.-74     	; 0x2478 <__stack+0x279>
    24c2:	c8 14       	cp	r12, r8
    24c4:	d9 04       	cpc	r13, r9
    24c6:	41 f4       	brne	.+16     	; 0x24d8 <__stack+0x2d9>
    24c8:	9a 81       	ldd	r25, Y+2	; 0x02
    24ca:	96 33       	cpi	r25, 0x36	; 54
    24cc:	20 f4       	brcc	.+8      	; 0x24d6 <__stack+0x2d7>
    24ce:	95 33       	cpi	r25, 0x35	; 53
    24d0:	19 f4       	brne	.+6      	; 0x24d8 <__stack+0x2d9>
    24d2:	3c 85       	ldd	r19, Y+12	; 0x0c
    24d4:	34 ff       	sbrs	r19, 4
    24d6:	81 e3       	ldi	r24, 0x31	; 49
    24d8:	b7 01       	movw	r22, r14
    24da:	90 e0       	ldi	r25, 0x00	; 0
    24dc:	48 c0       	rjmp	.+144    	; 0x256e <__stack+0x36f>
    24de:	8a 81       	ldd	r24, Y+2	; 0x02
    24e0:	81 33       	cpi	r24, 0x31	; 49
    24e2:	19 f0       	breq	.+6      	; 0x24ea <__stack+0x2eb>
    24e4:	9c 85       	ldd	r25, Y+12	; 0x0c
    24e6:	9f 7e       	andi	r25, 0xEF	; 239
    24e8:	9c 87       	std	Y+12, r25	; 0x0c
    24ea:	b7 01       	movw	r22, r14
    24ec:	90 e0       	ldi	r25, 0x00	; 0
    24ee:	f6 d2       	rcall	.+1516   	; 0x2adc <fputc>
    24f0:	11 11       	cpse	r17, r1
    24f2:	05 c0       	rjmp	.+10     	; 0x24fe <__stack+0x2ff>
    24f4:	94 fc       	sbrc	r9, 4
    24f6:	16 c0       	rjmp	.+44     	; 0x2524 <__stack+0x325>
    24f8:	85 e6       	ldi	r24, 0x65	; 101
    24fa:	90 e0       	ldi	r25, 0x00	; 0
    24fc:	15 c0       	rjmp	.+42     	; 0x2528 <__stack+0x329>
    24fe:	b7 01       	movw	r22, r14
    2500:	8e e2       	ldi	r24, 0x2E	; 46
    2502:	90 e0       	ldi	r25, 0x00	; 0
    2504:	eb d2       	rcall	.+1494   	; 0x2adc <fputc>
    2506:	1e 5f       	subi	r17, 0xFE	; 254
    2508:	82 e0       	ldi	r24, 0x02	; 2
    250a:	01 e0       	ldi	r16, 0x01	; 1
    250c:	08 0f       	add	r16, r24
    250e:	f3 01       	movw	r30, r6
    2510:	e8 0f       	add	r30, r24
    2512:	f1 1d       	adc	r31, r1
    2514:	80 81       	ld	r24, Z
    2516:	b7 01       	movw	r22, r14
    2518:	90 e0       	ldi	r25, 0x00	; 0
    251a:	e0 d2       	rcall	.+1472   	; 0x2adc <fputc>
    251c:	80 2f       	mov	r24, r16
    251e:	01 13       	cpse	r16, r17
    2520:	f4 cf       	rjmp	.-24     	; 0x250a <__stack+0x30b>
    2522:	e8 cf       	rjmp	.-48     	; 0x24f4 <__stack+0x2f5>
    2524:	85 e4       	ldi	r24, 0x45	; 69
    2526:	90 e0       	ldi	r25, 0x00	; 0
    2528:	b7 01       	movw	r22, r14
    252a:	d8 d2       	rcall	.+1456   	; 0x2adc <fputc>
    252c:	d7 fc       	sbrc	r13, 7
    252e:	06 c0       	rjmp	.+12     	; 0x253c <__stack+0x33d>
    2530:	c1 14       	cp	r12, r1
    2532:	d1 04       	cpc	r13, r1
    2534:	41 f4       	brne	.+16     	; 0x2546 <__stack+0x347>
    2536:	ec 85       	ldd	r30, Y+12	; 0x0c
    2538:	e4 ff       	sbrs	r30, 4
    253a:	05 c0       	rjmp	.+10     	; 0x2546 <__stack+0x347>
    253c:	d1 94       	neg	r13
    253e:	c1 94       	neg	r12
    2540:	d1 08       	sbc	r13, r1
    2542:	8d e2       	ldi	r24, 0x2D	; 45
    2544:	01 c0       	rjmp	.+2      	; 0x2548 <__stack+0x349>
    2546:	8b e2       	ldi	r24, 0x2B	; 43
    2548:	b7 01       	movw	r22, r14
    254a:	90 e0       	ldi	r25, 0x00	; 0
    254c:	c7 d2       	rcall	.+1422   	; 0x2adc <fputc>
    254e:	80 e3       	ldi	r24, 0x30	; 48
    2550:	2a e0       	ldi	r18, 0x0A	; 10
    2552:	c2 16       	cp	r12, r18
    2554:	d1 04       	cpc	r13, r1
    2556:	2c f0       	brlt	.+10     	; 0x2562 <__stack+0x363>
    2558:	8f 5f       	subi	r24, 0xFF	; 255
    255a:	fa e0       	ldi	r31, 0x0A	; 10
    255c:	cf 1a       	sub	r12, r31
    255e:	d1 08       	sbc	r13, r1
    2560:	f7 cf       	rjmp	.-18     	; 0x2550 <__stack+0x351>
    2562:	b7 01       	movw	r22, r14
    2564:	90 e0       	ldi	r25, 0x00	; 0
    2566:	ba d2       	rcall	.+1396   	; 0x2adc <fputc>
    2568:	b7 01       	movw	r22, r14
    256a:	c6 01       	movw	r24, r12
    256c:	c0 96       	adiw	r24, 0x30	; 48
    256e:	b6 d2       	rcall	.+1388   	; 0x2adc <fputc>
    2570:	49 c1       	rjmp	.+658    	; 0x2804 <__stack+0x605>
    2572:	83 36       	cpi	r24, 0x63	; 99
    2574:	31 f0       	breq	.+12     	; 0x2582 <__stack+0x383>
    2576:	83 37       	cpi	r24, 0x73	; 115
    2578:	79 f0       	breq	.+30     	; 0x2598 <__stack+0x399>
    257a:	83 35       	cpi	r24, 0x53	; 83
    257c:	09 f0       	breq	.+2      	; 0x2580 <__stack+0x381>
    257e:	52 c0       	rjmp	.+164    	; 0x2624 <__stack+0x425>
    2580:	1f c0       	rjmp	.+62     	; 0x25c0 <__stack+0x3c1>
    2582:	56 01       	movw	r10, r12
    2584:	32 e0       	ldi	r19, 0x02	; 2
    2586:	a3 0e       	add	r10, r19
    2588:	b1 1c       	adc	r11, r1
    258a:	f6 01       	movw	r30, r12
    258c:	80 81       	ld	r24, Z
    258e:	89 83       	std	Y+1, r24	; 0x01
    2590:	01 e0       	ldi	r16, 0x01	; 1
    2592:	10 e0       	ldi	r17, 0x00	; 0
    2594:	63 01       	movw	r12, r6
    2596:	11 c0       	rjmp	.+34     	; 0x25ba <__stack+0x3bb>
    2598:	56 01       	movw	r10, r12
    259a:	f2 e0       	ldi	r31, 0x02	; 2
    259c:	af 0e       	add	r10, r31
    259e:	b1 1c       	adc	r11, r1
    25a0:	f6 01       	movw	r30, r12
    25a2:	c0 80       	ld	r12, Z
    25a4:	d1 80       	ldd	r13, Z+1	; 0x01
    25a6:	96 fe       	sbrs	r9, 6
    25a8:	03 c0       	rjmp	.+6      	; 0x25b0 <__stack+0x3b1>
    25aa:	61 2f       	mov	r22, r17
    25ac:	70 e0       	ldi	r23, 0x00	; 0
    25ae:	02 c0       	rjmp	.+4      	; 0x25b4 <__stack+0x3b5>
    25b0:	6f ef       	ldi	r22, 0xFF	; 255
    25b2:	7f ef       	ldi	r23, 0xFF	; 255
    25b4:	c6 01       	movw	r24, r12
    25b6:	87 d2       	rcall	.+1294   	; 0x2ac6 <strnlen>
    25b8:	8c 01       	movw	r16, r24
    25ba:	f9 2d       	mov	r31, r9
    25bc:	ff 77       	andi	r31, 0x7F	; 127
    25be:	13 c0       	rjmp	.+38     	; 0x25e6 <__stack+0x3e7>
    25c0:	56 01       	movw	r10, r12
    25c2:	22 e0       	ldi	r18, 0x02	; 2
    25c4:	a2 0e       	add	r10, r18
    25c6:	b1 1c       	adc	r11, r1
    25c8:	f6 01       	movw	r30, r12
    25ca:	c0 80       	ld	r12, Z
    25cc:	d1 80       	ldd	r13, Z+1	; 0x01
    25ce:	96 fe       	sbrs	r9, 6
    25d0:	03 c0       	rjmp	.+6      	; 0x25d8 <__stack+0x3d9>
    25d2:	61 2f       	mov	r22, r17
    25d4:	70 e0       	ldi	r23, 0x00	; 0
    25d6:	02 c0       	rjmp	.+4      	; 0x25dc <__stack+0x3dd>
    25d8:	6f ef       	ldi	r22, 0xFF	; 255
    25da:	7f ef       	ldi	r23, 0xFF	; 255
    25dc:	c6 01       	movw	r24, r12
    25de:	54 d2       	rcall	.+1192   	; 0x2a88 <strnlen_P>
    25e0:	8c 01       	movw	r16, r24
    25e2:	f9 2d       	mov	r31, r9
    25e4:	f0 68       	ori	r31, 0x80	; 128
    25e6:	9f 2e       	mov	r9, r31
    25e8:	f3 fd       	sbrc	r31, 3
    25ea:	18 c0       	rjmp	.+48     	; 0x261c <__stack+0x41d>
    25ec:	85 2d       	mov	r24, r5
    25ee:	90 e0       	ldi	r25, 0x00	; 0
    25f0:	08 17       	cp	r16, r24
    25f2:	19 07       	cpc	r17, r25
    25f4:	98 f4       	brcc	.+38     	; 0x261c <__stack+0x41d>
    25f6:	b7 01       	movw	r22, r14
    25f8:	80 e2       	ldi	r24, 0x20	; 32
    25fa:	90 e0       	ldi	r25, 0x00	; 0
    25fc:	6f d2       	rcall	.+1246   	; 0x2adc <fputc>
    25fe:	5a 94       	dec	r5
    2600:	f5 cf       	rjmp	.-22     	; 0x25ec <__stack+0x3ed>
    2602:	f6 01       	movw	r30, r12
    2604:	97 fc       	sbrc	r9, 7
    2606:	85 91       	lpm	r24, Z+
    2608:	97 fe       	sbrs	r9, 7
    260a:	81 91       	ld	r24, Z+
    260c:	6f 01       	movw	r12, r30
    260e:	b7 01       	movw	r22, r14
    2610:	90 e0       	ldi	r25, 0x00	; 0
    2612:	64 d2       	rcall	.+1224   	; 0x2adc <fputc>
    2614:	51 10       	cpse	r5, r1
    2616:	5a 94       	dec	r5
    2618:	01 50       	subi	r16, 0x01	; 1
    261a:	11 09       	sbc	r17, r1
    261c:	01 15       	cp	r16, r1
    261e:	11 05       	cpc	r17, r1
    2620:	81 f7       	brne	.-32     	; 0x2602 <__stack+0x403>
    2622:	f0 c0       	rjmp	.+480    	; 0x2804 <__stack+0x605>
    2624:	84 36       	cpi	r24, 0x64	; 100
    2626:	11 f0       	breq	.+4      	; 0x262c <__stack+0x42d>
    2628:	89 36       	cpi	r24, 0x69	; 105
    262a:	59 f5       	brne	.+86     	; 0x2682 <__stack+0x483>
    262c:	56 01       	movw	r10, r12
    262e:	97 fe       	sbrs	r9, 7
    2630:	09 c0       	rjmp	.+18     	; 0x2644 <__stack+0x445>
    2632:	24 e0       	ldi	r18, 0x04	; 4
    2634:	a2 0e       	add	r10, r18
    2636:	b1 1c       	adc	r11, r1
    2638:	f6 01       	movw	r30, r12
    263a:	60 81       	ld	r22, Z
    263c:	71 81       	ldd	r23, Z+1	; 0x01
    263e:	82 81       	ldd	r24, Z+2	; 0x02
    2640:	93 81       	ldd	r25, Z+3	; 0x03
    2642:	0a c0       	rjmp	.+20     	; 0x2658 <__stack+0x459>
    2644:	f2 e0       	ldi	r31, 0x02	; 2
    2646:	af 0e       	add	r10, r31
    2648:	b1 1c       	adc	r11, r1
    264a:	f6 01       	movw	r30, r12
    264c:	60 81       	ld	r22, Z
    264e:	71 81       	ldd	r23, Z+1	; 0x01
    2650:	07 2e       	mov	r0, r23
    2652:	00 0c       	add	r0, r0
    2654:	88 0b       	sbc	r24, r24
    2656:	99 0b       	sbc	r25, r25
    2658:	f9 2d       	mov	r31, r9
    265a:	ff 76       	andi	r31, 0x6F	; 111
    265c:	9f 2e       	mov	r9, r31
    265e:	97 ff       	sbrs	r25, 7
    2660:	09 c0       	rjmp	.+18     	; 0x2674 <__stack+0x475>
    2662:	90 95       	com	r25
    2664:	80 95       	com	r24
    2666:	70 95       	com	r23
    2668:	61 95       	neg	r22
    266a:	7f 4f       	sbci	r23, 0xFF	; 255
    266c:	8f 4f       	sbci	r24, 0xFF	; 255
    266e:	9f 4f       	sbci	r25, 0xFF	; 255
    2670:	f0 68       	ori	r31, 0x80	; 128
    2672:	9f 2e       	mov	r9, r31
    2674:	2a e0       	ldi	r18, 0x0A	; 10
    2676:	30 e0       	ldi	r19, 0x00	; 0
    2678:	a3 01       	movw	r20, r6
    267a:	8b d2       	rcall	.+1302   	; 0x2b92 <__ultoa_invert>
    267c:	c8 2e       	mov	r12, r24
    267e:	c6 18       	sub	r12, r6
    2680:	3e c0       	rjmp	.+124    	; 0x26fe <__stack+0x4ff>
    2682:	09 2d       	mov	r16, r9
    2684:	85 37       	cpi	r24, 0x75	; 117
    2686:	21 f4       	brne	.+8      	; 0x2690 <__stack+0x491>
    2688:	0f 7e       	andi	r16, 0xEF	; 239
    268a:	2a e0       	ldi	r18, 0x0A	; 10
    268c:	30 e0       	ldi	r19, 0x00	; 0
    268e:	1d c0       	rjmp	.+58     	; 0x26ca <__stack+0x4cb>
    2690:	09 7f       	andi	r16, 0xF9	; 249
    2692:	8f 36       	cpi	r24, 0x6F	; 111
    2694:	91 f0       	breq	.+36     	; 0x26ba <__stack+0x4bb>
    2696:	18 f4       	brcc	.+6      	; 0x269e <__stack+0x49f>
    2698:	88 35       	cpi	r24, 0x58	; 88
    269a:	59 f0       	breq	.+22     	; 0x26b2 <__stack+0x4b3>
    269c:	bc c0       	rjmp	.+376    	; 0x2816 <__stack+0x617>
    269e:	80 37       	cpi	r24, 0x70	; 112
    26a0:	19 f0       	breq	.+6      	; 0x26a8 <__stack+0x4a9>
    26a2:	88 37       	cpi	r24, 0x78	; 120
    26a4:	11 f0       	breq	.+4      	; 0x26aa <__stack+0x4ab>
    26a6:	b7 c0       	rjmp	.+366    	; 0x2816 <__stack+0x617>
    26a8:	00 61       	ori	r16, 0x10	; 16
    26aa:	04 ff       	sbrs	r16, 4
    26ac:	09 c0       	rjmp	.+18     	; 0x26c0 <__stack+0x4c1>
    26ae:	04 60       	ori	r16, 0x04	; 4
    26b0:	07 c0       	rjmp	.+14     	; 0x26c0 <__stack+0x4c1>
    26b2:	94 fe       	sbrs	r9, 4
    26b4:	08 c0       	rjmp	.+16     	; 0x26c6 <__stack+0x4c7>
    26b6:	06 60       	ori	r16, 0x06	; 6
    26b8:	06 c0       	rjmp	.+12     	; 0x26c6 <__stack+0x4c7>
    26ba:	28 e0       	ldi	r18, 0x08	; 8
    26bc:	30 e0       	ldi	r19, 0x00	; 0
    26be:	05 c0       	rjmp	.+10     	; 0x26ca <__stack+0x4cb>
    26c0:	20 e1       	ldi	r18, 0x10	; 16
    26c2:	30 e0       	ldi	r19, 0x00	; 0
    26c4:	02 c0       	rjmp	.+4      	; 0x26ca <__stack+0x4cb>
    26c6:	20 e1       	ldi	r18, 0x10	; 16
    26c8:	32 e0       	ldi	r19, 0x02	; 2
    26ca:	56 01       	movw	r10, r12
    26cc:	07 ff       	sbrs	r16, 7
    26ce:	09 c0       	rjmp	.+18     	; 0x26e2 <__stack+0x4e3>
    26d0:	84 e0       	ldi	r24, 0x04	; 4
    26d2:	a8 0e       	add	r10, r24
    26d4:	b1 1c       	adc	r11, r1
    26d6:	f6 01       	movw	r30, r12
    26d8:	60 81       	ld	r22, Z
    26da:	71 81       	ldd	r23, Z+1	; 0x01
    26dc:	82 81       	ldd	r24, Z+2	; 0x02
    26de:	93 81       	ldd	r25, Z+3	; 0x03
    26e0:	08 c0       	rjmp	.+16     	; 0x26f2 <__stack+0x4f3>
    26e2:	f2 e0       	ldi	r31, 0x02	; 2
    26e4:	af 0e       	add	r10, r31
    26e6:	b1 1c       	adc	r11, r1
    26e8:	f6 01       	movw	r30, r12
    26ea:	60 81       	ld	r22, Z
    26ec:	71 81       	ldd	r23, Z+1	; 0x01
    26ee:	80 e0       	ldi	r24, 0x00	; 0
    26f0:	90 e0       	ldi	r25, 0x00	; 0
    26f2:	a3 01       	movw	r20, r6
    26f4:	4e d2       	rcall	.+1180   	; 0x2b92 <__ultoa_invert>
    26f6:	c8 2e       	mov	r12, r24
    26f8:	c6 18       	sub	r12, r6
    26fa:	0f 77       	andi	r16, 0x7F	; 127
    26fc:	90 2e       	mov	r9, r16
    26fe:	96 fe       	sbrs	r9, 6
    2700:	0b c0       	rjmp	.+22     	; 0x2718 <__stack+0x519>
    2702:	09 2d       	mov	r16, r9
    2704:	0e 7f       	andi	r16, 0xFE	; 254
    2706:	c1 16       	cp	r12, r17
    2708:	50 f4       	brcc	.+20     	; 0x271e <__stack+0x51f>
    270a:	94 fe       	sbrs	r9, 4
    270c:	0a c0       	rjmp	.+20     	; 0x2722 <__stack+0x523>
    270e:	92 fc       	sbrc	r9, 2
    2710:	08 c0       	rjmp	.+16     	; 0x2722 <__stack+0x523>
    2712:	09 2d       	mov	r16, r9
    2714:	0e 7e       	andi	r16, 0xEE	; 238
    2716:	05 c0       	rjmp	.+10     	; 0x2722 <__stack+0x523>
    2718:	dc 2c       	mov	r13, r12
    271a:	09 2d       	mov	r16, r9
    271c:	03 c0       	rjmp	.+6      	; 0x2724 <__stack+0x525>
    271e:	dc 2c       	mov	r13, r12
    2720:	01 c0       	rjmp	.+2      	; 0x2724 <__stack+0x525>
    2722:	d1 2e       	mov	r13, r17
    2724:	04 ff       	sbrs	r16, 4
    2726:	0d c0       	rjmp	.+26     	; 0x2742 <__stack+0x543>
    2728:	fe 01       	movw	r30, r28
    272a:	ec 0d       	add	r30, r12
    272c:	f1 1d       	adc	r31, r1
    272e:	80 81       	ld	r24, Z
    2730:	80 33       	cpi	r24, 0x30	; 48
    2732:	11 f4       	brne	.+4      	; 0x2738 <__stack+0x539>
    2734:	09 7e       	andi	r16, 0xE9	; 233
    2736:	09 c0       	rjmp	.+18     	; 0x274a <__stack+0x54b>
    2738:	02 ff       	sbrs	r16, 2
    273a:	06 c0       	rjmp	.+12     	; 0x2748 <__stack+0x549>
    273c:	d3 94       	inc	r13
    273e:	d3 94       	inc	r13
    2740:	04 c0       	rjmp	.+8      	; 0x274a <__stack+0x54b>
    2742:	80 2f       	mov	r24, r16
    2744:	86 78       	andi	r24, 0x86	; 134
    2746:	09 f0       	breq	.+2      	; 0x274a <__stack+0x54b>
    2748:	d3 94       	inc	r13
    274a:	03 fd       	sbrc	r16, 3
    274c:	10 c0       	rjmp	.+32     	; 0x276e <__stack+0x56f>
    274e:	00 ff       	sbrs	r16, 0
    2750:	06 c0       	rjmp	.+12     	; 0x275e <__stack+0x55f>
    2752:	1c 2d       	mov	r17, r12
    2754:	d5 14       	cp	r13, r5
    2756:	78 f4       	brcc	.+30     	; 0x2776 <__stack+0x577>
    2758:	15 0d       	add	r17, r5
    275a:	1d 19       	sub	r17, r13
    275c:	0c c0       	rjmp	.+24     	; 0x2776 <__stack+0x577>
    275e:	d5 14       	cp	r13, r5
    2760:	50 f4       	brcc	.+20     	; 0x2776 <__stack+0x577>
    2762:	b7 01       	movw	r22, r14
    2764:	80 e2       	ldi	r24, 0x20	; 32
    2766:	90 e0       	ldi	r25, 0x00	; 0
    2768:	b9 d1       	rcall	.+882    	; 0x2adc <fputc>
    276a:	d3 94       	inc	r13
    276c:	f8 cf       	rjmp	.-16     	; 0x275e <__stack+0x55f>
    276e:	d5 14       	cp	r13, r5
    2770:	10 f4       	brcc	.+4      	; 0x2776 <__stack+0x577>
    2772:	5d 18       	sub	r5, r13
    2774:	01 c0       	rjmp	.+2      	; 0x2778 <__stack+0x579>
    2776:	51 2c       	mov	r5, r1
    2778:	04 ff       	sbrs	r16, 4
    277a:	0f c0       	rjmp	.+30     	; 0x279a <__stack+0x59b>
    277c:	b7 01       	movw	r22, r14
    277e:	80 e3       	ldi	r24, 0x30	; 48
    2780:	90 e0       	ldi	r25, 0x00	; 0
    2782:	ac d1       	rcall	.+856    	; 0x2adc <fputc>
    2784:	02 ff       	sbrs	r16, 2
    2786:	16 c0       	rjmp	.+44     	; 0x27b4 <__stack+0x5b5>
    2788:	01 fd       	sbrc	r16, 1
    278a:	03 c0       	rjmp	.+6      	; 0x2792 <__stack+0x593>
    278c:	88 e7       	ldi	r24, 0x78	; 120
    278e:	90 e0       	ldi	r25, 0x00	; 0
    2790:	02 c0       	rjmp	.+4      	; 0x2796 <__stack+0x597>
    2792:	88 e5       	ldi	r24, 0x58	; 88
    2794:	90 e0       	ldi	r25, 0x00	; 0
    2796:	b7 01       	movw	r22, r14
    2798:	0c c0       	rjmp	.+24     	; 0x27b2 <__stack+0x5b3>
    279a:	80 2f       	mov	r24, r16
    279c:	86 78       	andi	r24, 0x86	; 134
    279e:	51 f0       	breq	.+20     	; 0x27b4 <__stack+0x5b5>
    27a0:	01 ff       	sbrs	r16, 1
    27a2:	02 c0       	rjmp	.+4      	; 0x27a8 <__stack+0x5a9>
    27a4:	8b e2       	ldi	r24, 0x2B	; 43
    27a6:	01 c0       	rjmp	.+2      	; 0x27aa <__stack+0x5ab>
    27a8:	80 e2       	ldi	r24, 0x20	; 32
    27aa:	07 fd       	sbrc	r16, 7
    27ac:	8d e2       	ldi	r24, 0x2D	; 45
    27ae:	b7 01       	movw	r22, r14
    27b0:	90 e0       	ldi	r25, 0x00	; 0
    27b2:	94 d1       	rcall	.+808    	; 0x2adc <fputc>
    27b4:	c1 16       	cp	r12, r17
    27b6:	30 f4       	brcc	.+12     	; 0x27c4 <__stack+0x5c5>
    27b8:	b7 01       	movw	r22, r14
    27ba:	80 e3       	ldi	r24, 0x30	; 48
    27bc:	90 e0       	ldi	r25, 0x00	; 0
    27be:	8e d1       	rcall	.+796    	; 0x2adc <fputc>
    27c0:	11 50       	subi	r17, 0x01	; 1
    27c2:	f8 cf       	rjmp	.-16     	; 0x27b4 <__stack+0x5b5>
    27c4:	ca 94       	dec	r12
    27c6:	f3 01       	movw	r30, r6
    27c8:	ec 0d       	add	r30, r12
    27ca:	f1 1d       	adc	r31, r1
    27cc:	80 81       	ld	r24, Z
    27ce:	b7 01       	movw	r22, r14
    27d0:	90 e0       	ldi	r25, 0x00	; 0
    27d2:	84 d1       	rcall	.+776    	; 0x2adc <fputc>
    27d4:	c1 10       	cpse	r12, r1
    27d6:	f6 cf       	rjmp	.-20     	; 0x27c4 <__stack+0x5c5>
    27d8:	15 c0       	rjmp	.+42     	; 0x2804 <__stack+0x605>
    27da:	f4 e0       	ldi	r31, 0x04	; 4
    27dc:	f5 15       	cp	r31, r5
    27de:	50 f5       	brcc	.+84     	; 0x2834 <__stack+0x635>
    27e0:	84 e0       	ldi	r24, 0x04	; 4
    27e2:	58 1a       	sub	r5, r24
    27e4:	93 fe       	sbrs	r9, 3
    27e6:	1e c0       	rjmp	.+60     	; 0x2824 <__stack+0x625>
    27e8:	01 11       	cpse	r16, r1
    27ea:	25 c0       	rjmp	.+74     	; 0x2836 <__stack+0x637>
    27ec:	2c 85       	ldd	r18, Y+12	; 0x0c
    27ee:	23 ff       	sbrs	r18, 3
    27f0:	27 c0       	rjmp	.+78     	; 0x2840 <__stack+0x641>
    27f2:	04 ee       	ldi	r16, 0xE4	; 228
    27f4:	10 e0       	ldi	r17, 0x00	; 0
    27f6:	39 2d       	mov	r19, r9
    27f8:	30 71       	andi	r19, 0x10	; 16
    27fa:	93 2e       	mov	r9, r19
    27fc:	f8 01       	movw	r30, r16
    27fe:	84 91       	lpm	r24, Z
    2800:	81 11       	cpse	r24, r1
    2802:	21 c0       	rjmp	.+66     	; 0x2846 <__stack+0x647>
    2804:	55 20       	and	r5, r5
    2806:	09 f4       	brne	.+2      	; 0x280a <__stack+0x60b>
    2808:	fc cc       	rjmp	.-1544   	; 0x2202 <__stack+0x3>
    280a:	b7 01       	movw	r22, r14
    280c:	80 e2       	ldi	r24, 0x20	; 32
    280e:	90 e0       	ldi	r25, 0x00	; 0
    2810:	65 d1       	rcall	.+714    	; 0x2adc <fputc>
    2812:	5a 94       	dec	r5
    2814:	f7 cf       	rjmp	.-18     	; 0x2804 <__stack+0x605>
    2816:	f7 01       	movw	r30, r14
    2818:	86 81       	ldd	r24, Z+6	; 0x06
    281a:	97 81       	ldd	r25, Z+7	; 0x07
    281c:	23 c0       	rjmp	.+70     	; 0x2864 <__stack+0x665>
    281e:	8f ef       	ldi	r24, 0xFF	; 255
    2820:	9f ef       	ldi	r25, 0xFF	; 255
    2822:	20 c0       	rjmp	.+64     	; 0x2864 <__stack+0x665>
    2824:	b7 01       	movw	r22, r14
    2826:	80 e2       	ldi	r24, 0x20	; 32
    2828:	90 e0       	ldi	r25, 0x00	; 0
    282a:	58 d1       	rcall	.+688    	; 0x2adc <fputc>
    282c:	5a 94       	dec	r5
    282e:	51 10       	cpse	r5, r1
    2830:	f9 cf       	rjmp	.-14     	; 0x2824 <__stack+0x625>
    2832:	da cf       	rjmp	.-76     	; 0x27e8 <__stack+0x5e9>
    2834:	51 2c       	mov	r5, r1
    2836:	b7 01       	movw	r22, r14
    2838:	80 2f       	mov	r24, r16
    283a:	90 e0       	ldi	r25, 0x00	; 0
    283c:	4f d1       	rcall	.+670    	; 0x2adc <fputc>
    283e:	d6 cf       	rjmp	.-84     	; 0x27ec <__stack+0x5ed>
    2840:	08 ee       	ldi	r16, 0xE8	; 232
    2842:	10 e0       	ldi	r17, 0x00	; 0
    2844:	d8 cf       	rjmp	.-80     	; 0x27f6 <__stack+0x5f7>
    2846:	91 10       	cpse	r9, r1
    2848:	80 52       	subi	r24, 0x20	; 32
    284a:	b7 01       	movw	r22, r14
    284c:	90 e0       	ldi	r25, 0x00	; 0
    284e:	46 d1       	rcall	.+652    	; 0x2adc <fputc>
    2850:	0f 5f       	subi	r16, 0xFF	; 255
    2852:	1f 4f       	sbci	r17, 0xFF	; 255
    2854:	d3 cf       	rjmp	.-90     	; 0x27fc <__stack+0x5fd>
    2856:	23 e0       	ldi	r18, 0x03	; 3
    2858:	25 15       	cp	r18, r5
    285a:	10 f4       	brcc	.+4      	; 0x2860 <__stack+0x661>
    285c:	83 e0       	ldi	r24, 0x03	; 3
    285e:	c1 cf       	rjmp	.-126    	; 0x27e2 <__stack+0x5e3>
    2860:	51 2c       	mov	r5, r1
    2862:	c4 cf       	rjmp	.-120    	; 0x27ec <__stack+0x5ed>
    2864:	60 96       	adiw	r28, 0x10	; 16
    2866:	e2 e1       	ldi	r30, 0x12	; 18
    2868:	1c c0       	rjmp	.+56     	; 0x28a2 <__epilogue_restores__>

0000286a <__prologue_saves__>:
    286a:	2f 92       	push	r2
    286c:	3f 92       	push	r3
    286e:	4f 92       	push	r4
    2870:	5f 92       	push	r5
    2872:	6f 92       	push	r6
    2874:	7f 92       	push	r7
    2876:	8f 92       	push	r8
    2878:	9f 92       	push	r9
    287a:	af 92       	push	r10
    287c:	bf 92       	push	r11
    287e:	cf 92       	push	r12
    2880:	df 92       	push	r13
    2882:	ef 92       	push	r14
    2884:	ff 92       	push	r15
    2886:	0f 93       	push	r16
    2888:	1f 93       	push	r17
    288a:	cf 93       	push	r28
    288c:	df 93       	push	r29
    288e:	cd b7       	in	r28, 0x3d	; 61
    2890:	de b7       	in	r29, 0x3e	; 62
    2892:	ca 1b       	sub	r28, r26
    2894:	db 0b       	sbc	r29, r27
    2896:	0f b6       	in	r0, 0x3f	; 63
    2898:	f8 94       	cli
    289a:	de bf       	out	0x3e, r29	; 62
    289c:	0f be       	out	0x3f, r0	; 63
    289e:	cd bf       	out	0x3d, r28	; 61
    28a0:	09 94       	ijmp

000028a2 <__epilogue_restores__>:
    28a2:	2a 88       	ldd	r2, Y+18	; 0x12
    28a4:	39 88       	ldd	r3, Y+17	; 0x11
    28a6:	48 88       	ldd	r4, Y+16	; 0x10
    28a8:	5f 84       	ldd	r5, Y+15	; 0x0f
    28aa:	6e 84       	ldd	r6, Y+14	; 0x0e
    28ac:	7d 84       	ldd	r7, Y+13	; 0x0d
    28ae:	8c 84       	ldd	r8, Y+12	; 0x0c
    28b0:	9b 84       	ldd	r9, Y+11	; 0x0b
    28b2:	aa 84       	ldd	r10, Y+10	; 0x0a
    28b4:	b9 84       	ldd	r11, Y+9	; 0x09
    28b6:	c8 84       	ldd	r12, Y+8	; 0x08
    28b8:	df 80       	ldd	r13, Y+7	; 0x07
    28ba:	ee 80       	ldd	r14, Y+6	; 0x06
    28bc:	fd 80       	ldd	r15, Y+5	; 0x05
    28be:	0c 81       	ldd	r16, Y+4	; 0x04
    28c0:	1b 81       	ldd	r17, Y+3	; 0x03
    28c2:	aa 81       	ldd	r26, Y+2	; 0x02
    28c4:	b9 81       	ldd	r27, Y+1	; 0x01
    28c6:	ce 0f       	add	r28, r30
    28c8:	d1 1d       	adc	r29, r1
    28ca:	0f b6       	in	r0, 0x3f	; 63
    28cc:	f8 94       	cli
    28ce:	de bf       	out	0x3e, r29	; 62
    28d0:	0f be       	out	0x3f, r0	; 63
    28d2:	cd bf       	out	0x3d, r28	; 61
    28d4:	ed 01       	movw	r28, r26
    28d6:	08 95       	ret

000028d8 <__ftoa_engine>:
    28d8:	28 30       	cpi	r18, 0x08	; 8
    28da:	08 f0       	brcs	.+2      	; 0x28de <__ftoa_engine+0x6>
    28dc:	27 e0       	ldi	r18, 0x07	; 7
    28de:	33 27       	eor	r19, r19
    28e0:	da 01       	movw	r26, r20
    28e2:	99 0f       	add	r25, r25
    28e4:	31 1d       	adc	r19, r1
    28e6:	87 fd       	sbrc	r24, 7
    28e8:	91 60       	ori	r25, 0x01	; 1
    28ea:	00 96       	adiw	r24, 0x00	; 0
    28ec:	61 05       	cpc	r22, r1
    28ee:	71 05       	cpc	r23, r1
    28f0:	39 f4       	brne	.+14     	; 0x2900 <__ftoa_engine+0x28>
    28f2:	32 60       	ori	r19, 0x02	; 2
    28f4:	2e 5f       	subi	r18, 0xFE	; 254
    28f6:	3d 93       	st	X+, r19
    28f8:	30 e3       	ldi	r19, 0x30	; 48
    28fa:	2a 95       	dec	r18
    28fc:	e1 f7       	brne	.-8      	; 0x28f6 <__ftoa_engine+0x1e>
    28fe:	08 95       	ret
    2900:	9f 3f       	cpi	r25, 0xFF	; 255
    2902:	30 f0       	brcs	.+12     	; 0x2910 <__ftoa_engine+0x38>
    2904:	80 38       	cpi	r24, 0x80	; 128
    2906:	71 05       	cpc	r23, r1
    2908:	61 05       	cpc	r22, r1
    290a:	09 f0       	breq	.+2      	; 0x290e <__ftoa_engine+0x36>
    290c:	3c 5f       	subi	r19, 0xFC	; 252
    290e:	3c 5f       	subi	r19, 0xFC	; 252
    2910:	3d 93       	st	X+, r19
    2912:	91 30       	cpi	r25, 0x01	; 1
    2914:	08 f0       	brcs	.+2      	; 0x2918 <__ftoa_engine+0x40>
    2916:	80 68       	ori	r24, 0x80	; 128
    2918:	91 1d       	adc	r25, r1
    291a:	df 93       	push	r29
    291c:	cf 93       	push	r28
    291e:	1f 93       	push	r17
    2920:	0f 93       	push	r16
    2922:	ff 92       	push	r15
    2924:	ef 92       	push	r14
    2926:	19 2f       	mov	r17, r25
    2928:	98 7f       	andi	r25, 0xF8	; 248
    292a:	96 95       	lsr	r25
    292c:	e9 2f       	mov	r30, r25
    292e:	96 95       	lsr	r25
    2930:	96 95       	lsr	r25
    2932:	e9 0f       	add	r30, r25
    2934:	ff 27       	eor	r31, r31
    2936:	ea 5b       	subi	r30, 0xBA	; 186
    2938:	fe 4f       	sbci	r31, 0xFE	; 254
    293a:	99 27       	eor	r25, r25
    293c:	33 27       	eor	r19, r19
    293e:	ee 24       	eor	r14, r14
    2940:	ff 24       	eor	r15, r15
    2942:	a7 01       	movw	r20, r14
    2944:	e7 01       	movw	r28, r14
    2946:	05 90       	lpm	r0, Z+
    2948:	08 94       	sec
    294a:	07 94       	ror	r0
    294c:	28 f4       	brcc	.+10     	; 0x2958 <__ftoa_engine+0x80>
    294e:	36 0f       	add	r19, r22
    2950:	e7 1e       	adc	r14, r23
    2952:	f8 1e       	adc	r15, r24
    2954:	49 1f       	adc	r20, r25
    2956:	51 1d       	adc	r21, r1
    2958:	66 0f       	add	r22, r22
    295a:	77 1f       	adc	r23, r23
    295c:	88 1f       	adc	r24, r24
    295e:	99 1f       	adc	r25, r25
    2960:	06 94       	lsr	r0
    2962:	a1 f7       	brne	.-24     	; 0x294c <__ftoa_engine+0x74>
    2964:	05 90       	lpm	r0, Z+
    2966:	07 94       	ror	r0
    2968:	28 f4       	brcc	.+10     	; 0x2974 <__ftoa_engine+0x9c>
    296a:	e7 0e       	add	r14, r23
    296c:	f8 1e       	adc	r15, r24
    296e:	49 1f       	adc	r20, r25
    2970:	56 1f       	adc	r21, r22
    2972:	c1 1d       	adc	r28, r1
    2974:	77 0f       	add	r23, r23
    2976:	88 1f       	adc	r24, r24
    2978:	99 1f       	adc	r25, r25
    297a:	66 1f       	adc	r22, r22
    297c:	06 94       	lsr	r0
    297e:	a1 f7       	brne	.-24     	; 0x2968 <__ftoa_engine+0x90>
    2980:	05 90       	lpm	r0, Z+
    2982:	07 94       	ror	r0
    2984:	28 f4       	brcc	.+10     	; 0x2990 <__ftoa_engine+0xb8>
    2986:	f8 0e       	add	r15, r24
    2988:	49 1f       	adc	r20, r25
    298a:	56 1f       	adc	r21, r22
    298c:	c7 1f       	adc	r28, r23
    298e:	d1 1d       	adc	r29, r1
    2990:	88 0f       	add	r24, r24
    2992:	99 1f       	adc	r25, r25
    2994:	66 1f       	adc	r22, r22
    2996:	77 1f       	adc	r23, r23
    2998:	06 94       	lsr	r0
    299a:	a1 f7       	brne	.-24     	; 0x2984 <__ftoa_engine+0xac>
    299c:	05 90       	lpm	r0, Z+
    299e:	07 94       	ror	r0
    29a0:	20 f4       	brcc	.+8      	; 0x29aa <__ftoa_engine+0xd2>
    29a2:	49 0f       	add	r20, r25
    29a4:	56 1f       	adc	r21, r22
    29a6:	c7 1f       	adc	r28, r23
    29a8:	d8 1f       	adc	r29, r24
    29aa:	99 0f       	add	r25, r25
    29ac:	66 1f       	adc	r22, r22
    29ae:	77 1f       	adc	r23, r23
    29b0:	88 1f       	adc	r24, r24
    29b2:	06 94       	lsr	r0
    29b4:	a9 f7       	brne	.-22     	; 0x29a0 <__ftoa_engine+0xc8>
    29b6:	84 91       	lpm	r24, Z
    29b8:	10 95       	com	r17
    29ba:	17 70       	andi	r17, 0x07	; 7
    29bc:	41 f0       	breq	.+16     	; 0x29ce <__ftoa_engine+0xf6>
    29be:	d6 95       	lsr	r29
    29c0:	c7 95       	ror	r28
    29c2:	57 95       	ror	r21
    29c4:	47 95       	ror	r20
    29c6:	f7 94       	ror	r15
    29c8:	e7 94       	ror	r14
    29ca:	1a 95       	dec	r17
    29cc:	c1 f7       	brne	.-16     	; 0x29be <__ftoa_engine+0xe6>
    29ce:	ec ee       	ldi	r30, 0xEC	; 236
    29d0:	f0 e0       	ldi	r31, 0x00	; 0
    29d2:	68 94       	set
    29d4:	15 90       	lpm	r1, Z+
    29d6:	15 91       	lpm	r17, Z+
    29d8:	35 91       	lpm	r19, Z+
    29da:	65 91       	lpm	r22, Z+
    29dc:	95 91       	lpm	r25, Z+
    29de:	05 90       	lpm	r0, Z+
    29e0:	7f e2       	ldi	r23, 0x2F	; 47
    29e2:	73 95       	inc	r23
    29e4:	e1 18       	sub	r14, r1
    29e6:	f1 0a       	sbc	r15, r17
    29e8:	43 0b       	sbc	r20, r19
    29ea:	56 0b       	sbc	r21, r22
    29ec:	c9 0b       	sbc	r28, r25
    29ee:	d0 09       	sbc	r29, r0
    29f0:	c0 f7       	brcc	.-16     	; 0x29e2 <__ftoa_engine+0x10a>
    29f2:	e1 0c       	add	r14, r1
    29f4:	f1 1e       	adc	r15, r17
    29f6:	43 1f       	adc	r20, r19
    29f8:	56 1f       	adc	r21, r22
    29fa:	c9 1f       	adc	r28, r25
    29fc:	d0 1d       	adc	r29, r0
    29fe:	7e f4       	brtc	.+30     	; 0x2a1e <__ftoa_engine+0x146>
    2a00:	70 33       	cpi	r23, 0x30	; 48
    2a02:	11 f4       	brne	.+4      	; 0x2a08 <__ftoa_engine+0x130>
    2a04:	8a 95       	dec	r24
    2a06:	e6 cf       	rjmp	.-52     	; 0x29d4 <__ftoa_engine+0xfc>
    2a08:	e8 94       	clt
    2a0a:	01 50       	subi	r16, 0x01	; 1
    2a0c:	30 f0       	brcs	.+12     	; 0x2a1a <__ftoa_engine+0x142>
    2a0e:	08 0f       	add	r16, r24
    2a10:	0a f4       	brpl	.+2      	; 0x2a14 <__ftoa_engine+0x13c>
    2a12:	00 27       	eor	r16, r16
    2a14:	02 17       	cp	r16, r18
    2a16:	08 f4       	brcc	.+2      	; 0x2a1a <__ftoa_engine+0x142>
    2a18:	20 2f       	mov	r18, r16
    2a1a:	23 95       	inc	r18
    2a1c:	02 2f       	mov	r16, r18
    2a1e:	7a 33       	cpi	r23, 0x3A	; 58
    2a20:	28 f0       	brcs	.+10     	; 0x2a2c <__ftoa_engine+0x154>
    2a22:	79 e3       	ldi	r23, 0x39	; 57
    2a24:	7d 93       	st	X+, r23
    2a26:	2a 95       	dec	r18
    2a28:	e9 f7       	brne	.-6      	; 0x2a24 <__ftoa_engine+0x14c>
    2a2a:	10 c0       	rjmp	.+32     	; 0x2a4c <__ftoa_engine+0x174>
    2a2c:	7d 93       	st	X+, r23
    2a2e:	2a 95       	dec	r18
    2a30:	89 f6       	brne	.-94     	; 0x29d4 <__ftoa_engine+0xfc>
    2a32:	06 94       	lsr	r0
    2a34:	97 95       	ror	r25
    2a36:	67 95       	ror	r22
    2a38:	37 95       	ror	r19
    2a3a:	17 95       	ror	r17
    2a3c:	17 94       	ror	r1
    2a3e:	e1 18       	sub	r14, r1
    2a40:	f1 0a       	sbc	r15, r17
    2a42:	43 0b       	sbc	r20, r19
    2a44:	56 0b       	sbc	r21, r22
    2a46:	c9 0b       	sbc	r28, r25
    2a48:	d0 09       	sbc	r29, r0
    2a4a:	98 f0       	brcs	.+38     	; 0x2a72 <__ftoa_engine+0x19a>
    2a4c:	23 95       	inc	r18
    2a4e:	7e 91       	ld	r23, -X
    2a50:	73 95       	inc	r23
    2a52:	7a 33       	cpi	r23, 0x3A	; 58
    2a54:	08 f0       	brcs	.+2      	; 0x2a58 <__ftoa_engine+0x180>
    2a56:	70 e3       	ldi	r23, 0x30	; 48
    2a58:	7c 93       	st	X, r23
    2a5a:	20 13       	cpse	r18, r16
    2a5c:	b8 f7       	brcc	.-18     	; 0x2a4c <__ftoa_engine+0x174>
    2a5e:	7e 91       	ld	r23, -X
    2a60:	70 61       	ori	r23, 0x10	; 16
    2a62:	7d 93       	st	X+, r23
    2a64:	30 f0       	brcs	.+12     	; 0x2a72 <__ftoa_engine+0x19a>
    2a66:	83 95       	inc	r24
    2a68:	71 e3       	ldi	r23, 0x31	; 49
    2a6a:	7d 93       	st	X+, r23
    2a6c:	70 e3       	ldi	r23, 0x30	; 48
    2a6e:	2a 95       	dec	r18
    2a70:	e1 f7       	brne	.-8      	; 0x2a6a <__ftoa_engine+0x192>
    2a72:	11 24       	eor	r1, r1
    2a74:	ef 90       	pop	r14
    2a76:	ff 90       	pop	r15
    2a78:	0f 91       	pop	r16
    2a7a:	1f 91       	pop	r17
    2a7c:	cf 91       	pop	r28
    2a7e:	df 91       	pop	r29
    2a80:	99 27       	eor	r25, r25
    2a82:	87 fd       	sbrc	r24, 7
    2a84:	90 95       	com	r25
    2a86:	08 95       	ret

00002a88 <strnlen_P>:
    2a88:	fc 01       	movw	r30, r24
    2a8a:	05 90       	lpm	r0, Z+
    2a8c:	61 50       	subi	r22, 0x01	; 1
    2a8e:	70 40       	sbci	r23, 0x00	; 0
    2a90:	01 10       	cpse	r0, r1
    2a92:	d8 f7       	brcc	.-10     	; 0x2a8a <strnlen_P+0x2>
    2a94:	80 95       	com	r24
    2a96:	90 95       	com	r25
    2a98:	8e 0f       	add	r24, r30
    2a9a:	9f 1f       	adc	r25, r31
    2a9c:	08 95       	ret

00002a9e <strcat>:
    2a9e:	fb 01       	movw	r30, r22
    2aa0:	dc 01       	movw	r26, r24
    2aa2:	0d 90       	ld	r0, X+
    2aa4:	00 20       	and	r0, r0
    2aa6:	e9 f7       	brne	.-6      	; 0x2aa2 <strcat+0x4>
    2aa8:	11 97       	sbiw	r26, 0x01	; 1
    2aaa:	01 90       	ld	r0, Z+
    2aac:	0d 92       	st	X+, r0
    2aae:	00 20       	and	r0, r0
    2ab0:	e1 f7       	brne	.-8      	; 0x2aaa <strcat+0xc>
    2ab2:	08 95       	ret

00002ab4 <strcmp>:
    2ab4:	fb 01       	movw	r30, r22
    2ab6:	dc 01       	movw	r26, r24
    2ab8:	8d 91       	ld	r24, X+
    2aba:	01 90       	ld	r0, Z+
    2abc:	80 19       	sub	r24, r0
    2abe:	01 10       	cpse	r0, r1
    2ac0:	d9 f3       	breq	.-10     	; 0x2ab8 <strcmp+0x4>
    2ac2:	99 0b       	sbc	r25, r25
    2ac4:	08 95       	ret

00002ac6 <strnlen>:
    2ac6:	fc 01       	movw	r30, r24
    2ac8:	61 50       	subi	r22, 0x01	; 1
    2aca:	70 40       	sbci	r23, 0x00	; 0
    2acc:	01 90       	ld	r0, Z+
    2ace:	01 10       	cpse	r0, r1
    2ad0:	d8 f7       	brcc	.-10     	; 0x2ac8 <strnlen+0x2>
    2ad2:	80 95       	com	r24
    2ad4:	90 95       	com	r25
    2ad6:	8e 0f       	add	r24, r30
    2ad8:	9f 1f       	adc	r25, r31
    2ada:	08 95       	ret

00002adc <fputc>:
    2adc:	0f 93       	push	r16
    2ade:	1f 93       	push	r17
    2ae0:	cf 93       	push	r28
    2ae2:	df 93       	push	r29
    2ae4:	fb 01       	movw	r30, r22
    2ae6:	23 81       	ldd	r18, Z+3	; 0x03
    2ae8:	21 fd       	sbrc	r18, 1
    2aea:	03 c0       	rjmp	.+6      	; 0x2af2 <fputc+0x16>
    2aec:	8f ef       	ldi	r24, 0xFF	; 255
    2aee:	9f ef       	ldi	r25, 0xFF	; 255
    2af0:	2c c0       	rjmp	.+88     	; 0x2b4a <fputc+0x6e>
    2af2:	22 ff       	sbrs	r18, 2
    2af4:	16 c0       	rjmp	.+44     	; 0x2b22 <fputc+0x46>
    2af6:	46 81       	ldd	r20, Z+6	; 0x06
    2af8:	57 81       	ldd	r21, Z+7	; 0x07
    2afa:	24 81       	ldd	r18, Z+4	; 0x04
    2afc:	35 81       	ldd	r19, Z+5	; 0x05
    2afe:	42 17       	cp	r20, r18
    2b00:	53 07       	cpc	r21, r19
    2b02:	44 f4       	brge	.+16     	; 0x2b14 <fputc+0x38>
    2b04:	a0 81       	ld	r26, Z
    2b06:	b1 81       	ldd	r27, Z+1	; 0x01
    2b08:	9d 01       	movw	r18, r26
    2b0a:	2f 5f       	subi	r18, 0xFF	; 255
    2b0c:	3f 4f       	sbci	r19, 0xFF	; 255
    2b0e:	31 83       	std	Z+1, r19	; 0x01
    2b10:	20 83       	st	Z, r18
    2b12:	8c 93       	st	X, r24
    2b14:	26 81       	ldd	r18, Z+6	; 0x06
    2b16:	37 81       	ldd	r19, Z+7	; 0x07
    2b18:	2f 5f       	subi	r18, 0xFF	; 255
    2b1a:	3f 4f       	sbci	r19, 0xFF	; 255
    2b1c:	37 83       	std	Z+7, r19	; 0x07
    2b1e:	26 83       	std	Z+6, r18	; 0x06
    2b20:	14 c0       	rjmp	.+40     	; 0x2b4a <fputc+0x6e>
    2b22:	8b 01       	movw	r16, r22
    2b24:	ec 01       	movw	r28, r24
    2b26:	fb 01       	movw	r30, r22
    2b28:	00 84       	ldd	r0, Z+8	; 0x08
    2b2a:	f1 85       	ldd	r31, Z+9	; 0x09
    2b2c:	e0 2d       	mov	r30, r0
    2b2e:	09 95       	icall
    2b30:	89 2b       	or	r24, r25
    2b32:	e1 f6       	brne	.-72     	; 0x2aec <fputc+0x10>
    2b34:	d8 01       	movw	r26, r16
    2b36:	16 96       	adiw	r26, 0x06	; 6
    2b38:	8d 91       	ld	r24, X+
    2b3a:	9c 91       	ld	r25, X
    2b3c:	17 97       	sbiw	r26, 0x07	; 7
    2b3e:	01 96       	adiw	r24, 0x01	; 1
    2b40:	17 96       	adiw	r26, 0x07	; 7
    2b42:	9c 93       	st	X, r25
    2b44:	8e 93       	st	-X, r24
    2b46:	16 97       	sbiw	r26, 0x06	; 6
    2b48:	ce 01       	movw	r24, r28
    2b4a:	df 91       	pop	r29
    2b4c:	cf 91       	pop	r28
    2b4e:	1f 91       	pop	r17
    2b50:	0f 91       	pop	r16
    2b52:	08 95       	ret

00002b54 <sprintf>:
    2b54:	ae e0       	ldi	r26, 0x0E	; 14
    2b56:	b0 e0       	ldi	r27, 0x00	; 0
    2b58:	ef ea       	ldi	r30, 0xAF	; 175
    2b5a:	f5 e1       	ldi	r31, 0x15	; 21
    2b5c:	94 ce       	rjmp	.-728    	; 0x2886 <__prologue_saves__+0x1c>
    2b5e:	0d 89       	ldd	r16, Y+21	; 0x15
    2b60:	1e 89       	ldd	r17, Y+22	; 0x16
    2b62:	86 e0       	ldi	r24, 0x06	; 6
    2b64:	8c 83       	std	Y+4, r24	; 0x04
    2b66:	1a 83       	std	Y+2, r17	; 0x02
    2b68:	09 83       	std	Y+1, r16	; 0x01
    2b6a:	8f ef       	ldi	r24, 0xFF	; 255
    2b6c:	9f e7       	ldi	r25, 0x7F	; 127
    2b6e:	9e 83       	std	Y+6, r25	; 0x06
    2b70:	8d 83       	std	Y+5, r24	; 0x05
    2b72:	ae 01       	movw	r20, r28
    2b74:	47 5e       	subi	r20, 0xE7	; 231
    2b76:	5f 4f       	sbci	r21, 0xFF	; 255
    2b78:	6f 89       	ldd	r22, Y+23	; 0x17
    2b7a:	78 8d       	ldd	r23, Y+24	; 0x18
    2b7c:	ce 01       	movw	r24, r28
    2b7e:	01 96       	adiw	r24, 0x01	; 1
    2b80:	16 db       	rcall	.-2516   	; 0x21ae <vfprintf>
    2b82:	ef 81       	ldd	r30, Y+7	; 0x07
    2b84:	f8 85       	ldd	r31, Y+8	; 0x08
    2b86:	e0 0f       	add	r30, r16
    2b88:	f1 1f       	adc	r31, r17
    2b8a:	10 82       	st	Z, r1
    2b8c:	2e 96       	adiw	r28, 0x0e	; 14
    2b8e:	e4 e0       	ldi	r30, 0x04	; 4
    2b90:	96 ce       	rjmp	.-724    	; 0x28be <__epilogue_restores__+0x1c>

00002b92 <__ultoa_invert>:
    2b92:	fa 01       	movw	r30, r20
    2b94:	aa 27       	eor	r26, r26
    2b96:	28 30       	cpi	r18, 0x08	; 8
    2b98:	51 f1       	breq	.+84     	; 0x2bee <__ultoa_invert+0x5c>
    2b9a:	20 31       	cpi	r18, 0x10	; 16
    2b9c:	81 f1       	breq	.+96     	; 0x2bfe <__ultoa_invert+0x6c>
    2b9e:	e8 94       	clt
    2ba0:	6f 93       	push	r22
    2ba2:	6e 7f       	andi	r22, 0xFE	; 254
    2ba4:	6e 5f       	subi	r22, 0xFE	; 254
    2ba6:	7f 4f       	sbci	r23, 0xFF	; 255
    2ba8:	8f 4f       	sbci	r24, 0xFF	; 255
    2baa:	9f 4f       	sbci	r25, 0xFF	; 255
    2bac:	af 4f       	sbci	r26, 0xFF	; 255
    2bae:	b1 e0       	ldi	r27, 0x01	; 1
    2bb0:	3e d0       	rcall	.+124    	; 0x2c2e <__ultoa_invert+0x9c>
    2bb2:	b4 e0       	ldi	r27, 0x04	; 4
    2bb4:	3c d0       	rcall	.+120    	; 0x2c2e <__ultoa_invert+0x9c>
    2bb6:	67 0f       	add	r22, r23
    2bb8:	78 1f       	adc	r23, r24
    2bba:	89 1f       	adc	r24, r25
    2bbc:	9a 1f       	adc	r25, r26
    2bbe:	a1 1d       	adc	r26, r1
    2bc0:	68 0f       	add	r22, r24
    2bc2:	79 1f       	adc	r23, r25
    2bc4:	8a 1f       	adc	r24, r26
    2bc6:	91 1d       	adc	r25, r1
    2bc8:	a1 1d       	adc	r26, r1
    2bca:	6a 0f       	add	r22, r26
    2bcc:	71 1d       	adc	r23, r1
    2bce:	81 1d       	adc	r24, r1
    2bd0:	91 1d       	adc	r25, r1
    2bd2:	a1 1d       	adc	r26, r1
    2bd4:	20 d0       	rcall	.+64     	; 0x2c16 <__ultoa_invert+0x84>
    2bd6:	09 f4       	brne	.+2      	; 0x2bda <__ultoa_invert+0x48>
    2bd8:	68 94       	set
    2bda:	3f 91       	pop	r19
    2bdc:	2a e0       	ldi	r18, 0x0A	; 10
    2bde:	26 9f       	mul	r18, r22
    2be0:	11 24       	eor	r1, r1
    2be2:	30 19       	sub	r19, r0
    2be4:	30 5d       	subi	r19, 0xD0	; 208
    2be6:	31 93       	st	Z+, r19
    2be8:	de f6       	brtc	.-74     	; 0x2ba0 <__ultoa_invert+0xe>
    2bea:	cf 01       	movw	r24, r30
    2bec:	08 95       	ret
    2bee:	46 2f       	mov	r20, r22
    2bf0:	47 70       	andi	r20, 0x07	; 7
    2bf2:	40 5d       	subi	r20, 0xD0	; 208
    2bf4:	41 93       	st	Z+, r20
    2bf6:	b3 e0       	ldi	r27, 0x03	; 3
    2bf8:	0f d0       	rcall	.+30     	; 0x2c18 <__ultoa_invert+0x86>
    2bfa:	c9 f7       	brne	.-14     	; 0x2bee <__ultoa_invert+0x5c>
    2bfc:	f6 cf       	rjmp	.-20     	; 0x2bea <__ultoa_invert+0x58>
    2bfe:	46 2f       	mov	r20, r22
    2c00:	4f 70       	andi	r20, 0x0F	; 15
    2c02:	40 5d       	subi	r20, 0xD0	; 208
    2c04:	4a 33       	cpi	r20, 0x3A	; 58
    2c06:	18 f0       	brcs	.+6      	; 0x2c0e <__ultoa_invert+0x7c>
    2c08:	49 5d       	subi	r20, 0xD9	; 217
    2c0a:	31 fd       	sbrc	r19, 1
    2c0c:	40 52       	subi	r20, 0x20	; 32
    2c0e:	41 93       	st	Z+, r20
    2c10:	02 d0       	rcall	.+4      	; 0x2c16 <__ultoa_invert+0x84>
    2c12:	a9 f7       	brne	.-22     	; 0x2bfe <__ultoa_invert+0x6c>
    2c14:	ea cf       	rjmp	.-44     	; 0x2bea <__ultoa_invert+0x58>
    2c16:	b4 e0       	ldi	r27, 0x04	; 4
    2c18:	a6 95       	lsr	r26
    2c1a:	97 95       	ror	r25
    2c1c:	87 95       	ror	r24
    2c1e:	77 95       	ror	r23
    2c20:	67 95       	ror	r22
    2c22:	ba 95       	dec	r27
    2c24:	c9 f7       	brne	.-14     	; 0x2c18 <__ultoa_invert+0x86>
    2c26:	00 97       	sbiw	r24, 0x00	; 0
    2c28:	61 05       	cpc	r22, r1
    2c2a:	71 05       	cpc	r23, r1
    2c2c:	08 95       	ret
    2c2e:	9b 01       	movw	r18, r22
    2c30:	ac 01       	movw	r20, r24
    2c32:	0a 2e       	mov	r0, r26
    2c34:	06 94       	lsr	r0
    2c36:	57 95       	ror	r21
    2c38:	47 95       	ror	r20
    2c3a:	37 95       	ror	r19
    2c3c:	27 95       	ror	r18
    2c3e:	ba 95       	dec	r27
    2c40:	c9 f7       	brne	.-14     	; 0x2c34 <__ultoa_invert+0xa2>
    2c42:	62 0f       	add	r22, r18
    2c44:	73 1f       	adc	r23, r19
    2c46:	84 1f       	adc	r24, r20
    2c48:	95 1f       	adc	r25, r21
    2c4a:	a0 1d       	adc	r26, r0
    2c4c:	08 95       	ret

00002c4e <_exit>:
    2c4e:	f8 94       	cli

00002c50 <__stop_program>:
    2c50:	ff cf       	rjmp	.-2      	; 0x2c50 <__stop_program>
