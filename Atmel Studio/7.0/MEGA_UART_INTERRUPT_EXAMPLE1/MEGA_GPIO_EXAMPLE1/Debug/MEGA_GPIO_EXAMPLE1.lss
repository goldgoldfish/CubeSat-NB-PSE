
MEGA_GPIO_EXAMPLE1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000020e  00800200  00001f8a  0000201e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001f8a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000004a  0080040e  0080040e  0000222c  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  0000222c  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00002288  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000001a8  00000000  00000000  000022c4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000022c1  00000000  00000000  0000246c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000012ee  00000000  00000000  0000472d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00002376  00000000  00000000  00005a1b  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000424  00000000  00000000  00007d94  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00014b9d  00000000  00000000  000081b8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000011a1  00000000  00000000  0001cd55  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000138  00000000  00000000  0001def6  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  00005769  00000000  00000000  0001e02e  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	f2 c0       	rjmp	.+484    	; 0x1e6 <__ctors_end>
       2:	00 00       	nop
       4:	0c c1       	rjmp	.+536    	; 0x21e <__bad_interrupt>
       6:	00 00       	nop
       8:	0a c1       	rjmp	.+532    	; 0x21e <__bad_interrupt>
       a:	00 00       	nop
       c:	08 c1       	rjmp	.+528    	; 0x21e <__bad_interrupt>
       e:	00 00       	nop
      10:	06 c1       	rjmp	.+524    	; 0x21e <__bad_interrupt>
      12:	00 00       	nop
      14:	04 c1       	rjmp	.+520    	; 0x21e <__bad_interrupt>
      16:	00 00       	nop
      18:	02 c1       	rjmp	.+516    	; 0x21e <__bad_interrupt>
      1a:	00 00       	nop
      1c:	00 c1       	rjmp	.+512    	; 0x21e <__bad_interrupt>
      1e:	00 00       	nop
      20:	fe c0       	rjmp	.+508    	; 0x21e <__bad_interrupt>
      22:	00 00       	nop
      24:	fc c0       	rjmp	.+504    	; 0x21e <__bad_interrupt>
      26:	00 00       	nop
      28:	fa c0       	rjmp	.+500    	; 0x21e <__bad_interrupt>
      2a:	00 00       	nop
      2c:	f8 c0       	rjmp	.+496    	; 0x21e <__bad_interrupt>
      2e:	00 00       	nop
      30:	dc c7       	rjmp	.+4024   	; 0xfea <__vector_12>
      32:	00 00       	nop
      34:	f4 c0       	rjmp	.+488    	; 0x21e <__bad_interrupt>
      36:	00 00       	nop
      38:	f2 c0       	rjmp	.+484    	; 0x21e <__bad_interrupt>
      3a:	00 00       	nop
      3c:	f0 c0       	rjmp	.+480    	; 0x21e <__bad_interrupt>
      3e:	00 00       	nop
      40:	ee c0       	rjmp	.+476    	; 0x21e <__bad_interrupt>
      42:	00 00       	nop
      44:	fb c7       	rjmp	.+4086   	; 0x103c <__vector_17>
      46:	00 00       	nop
      48:	ea c0       	rjmp	.+468    	; 0x21e <__bad_interrupt>
      4a:	00 00       	nop
      4c:	e8 c0       	rjmp	.+464    	; 0x21e <__bad_interrupt>
      4e:	00 00       	nop
      50:	e6 c0       	rjmp	.+460    	; 0x21e <__bad_interrupt>
      52:	00 00       	nop
      54:	e4 c0       	rjmp	.+456    	; 0x21e <__bad_interrupt>
      56:	00 00       	nop
      58:	e2 c0       	rjmp	.+452    	; 0x21e <__bad_interrupt>
      5a:	00 00       	nop
      5c:	e0 c0       	rjmp	.+448    	; 0x21e <__bad_interrupt>
      5e:	00 00       	nop
      60:	de c0       	rjmp	.+444    	; 0x21e <__bad_interrupt>
      62:	00 00       	nop
      64:	dc c0       	rjmp	.+440    	; 0x21e <__bad_interrupt>
      66:	00 00       	nop
      68:	da c0       	rjmp	.+436    	; 0x21e <__bad_interrupt>
      6a:	00 00       	nop
      6c:	d8 c0       	rjmp	.+432    	; 0x21e <__bad_interrupt>
      6e:	00 00       	nop
      70:	d6 c0       	rjmp	.+428    	; 0x21e <__bad_interrupt>
      72:	00 00       	nop
      74:	d4 c0       	rjmp	.+424    	; 0x21e <__bad_interrupt>
      76:	00 00       	nop
      78:	d2 c0       	rjmp	.+420    	; 0x21e <__bad_interrupt>
      7a:	00 00       	nop
      7c:	d0 c0       	rjmp	.+416    	; 0x21e <__bad_interrupt>
      7e:	00 00       	nop
      80:	ce c0       	rjmp	.+412    	; 0x21e <__bad_interrupt>
      82:	00 00       	nop
      84:	cc c0       	rjmp	.+408    	; 0x21e <__bad_interrupt>
      86:	00 00       	nop
      88:	ca c0       	rjmp	.+404    	; 0x21e <__bad_interrupt>
      8a:	00 00       	nop
      8c:	c8 c0       	rjmp	.+400    	; 0x21e <__bad_interrupt>
      8e:	00 00       	nop
      90:	c6 c0       	rjmp	.+396    	; 0x21e <__bad_interrupt>
      92:	00 00       	nop
      94:	c4 c0       	rjmp	.+392    	; 0x21e <__bad_interrupt>
      96:	00 00       	nop
      98:	c2 c0       	rjmp	.+388    	; 0x21e <__bad_interrupt>
      9a:	00 00       	nop
      9c:	c0 c0       	rjmp	.+384    	; 0x21e <__bad_interrupt>
      9e:	00 00       	nop
      a0:	be c0       	rjmp	.+380    	; 0x21e <__bad_interrupt>
      a2:	00 00       	nop
      a4:	bc c0       	rjmp	.+376    	; 0x21e <__bad_interrupt>
      a6:	00 00       	nop
      a8:	ba c0       	rjmp	.+372    	; 0x21e <__bad_interrupt>
      aa:	00 00       	nop
      ac:	b8 c0       	rjmp	.+368    	; 0x21e <__bad_interrupt>
      ae:	00 00       	nop
      b0:	b6 c0       	rjmp	.+364    	; 0x21e <__bad_interrupt>
      b2:	00 00       	nop
      b4:	b4 c0       	rjmp	.+360    	; 0x21e <__bad_interrupt>
      b6:	00 00       	nop
      b8:	b2 c0       	rjmp	.+356    	; 0x21e <__bad_interrupt>
      ba:	00 00       	nop
      bc:	b0 c0       	rjmp	.+352    	; 0x21e <__bad_interrupt>
      be:	00 00       	nop
      c0:	ae c0       	rjmp	.+348    	; 0x21e <__bad_interrupt>
      c2:	00 00       	nop
      c4:	ac c0       	rjmp	.+344    	; 0x21e <__bad_interrupt>
      c6:	00 00       	nop
      c8:	aa c0       	rjmp	.+340    	; 0x21e <__bad_interrupt>
      ca:	00 00       	nop
      cc:	a8 c0       	rjmp	.+336    	; 0x21e <__bad_interrupt>
      ce:	00 00       	nop
      d0:	a6 c0       	rjmp	.+332    	; 0x21e <__bad_interrupt>
      d2:	00 00       	nop
      d4:	a4 c0       	rjmp	.+328    	; 0x21e <__bad_interrupt>
      d6:	00 00       	nop
      d8:	a2 c0       	rjmp	.+324    	; 0x21e <__bad_interrupt>
      da:	00 00       	nop
      dc:	a0 c0       	rjmp	.+320    	; 0x21e <__bad_interrupt>
      de:	00 00       	nop
      e0:	9e c0       	rjmp	.+316    	; 0x21e <__bad_interrupt>
	...

000000e4 <__trampolines_end>:
      e4:	6e 61       	ori	r22, 0x1E	; 30
      e6:	6e 00       	.word	0x006e	; ????

000000e8 <__c.2332>:
      e8:	69 6e 66 00 00 40 7a 10 f3 5a 00 a0 72 4e 18 09     inf..@z..Z..rN..
      f8:	00 10 a5 d4 e8 00 00 e8 76 48 17 00 00 e4 0b 54     ........vH.....T
     108:	02 00 00 ca 9a 3b 00 00 00 e1 f5 05 00 00 80 96     .....;..........
     118:	98 00 00 00 40 42 0f 00 00 00 a0 86 01 00 00 00     ....@B..........
     128:	10 27 00 00 00 00 e8 03 00 00 00 00 64 00 00 00     .'..........d...
     138:	00 00 0a 00 00 00 00 00 01 00 00 00 00 00 2c 76     ..............,v
     148:	d8 88 dc 67 4f 08 23 df c1 df ae 59 e1 b1 b7 96     ...gO.#....Y....
     158:	e5 e3 e4 53 c6 3a e6 51 99 76 96 e8 e6 c2 84 26     ...S.:.Q.v.....&
     168:	eb 89 8c 9b 62 ed 40 7c 6f fc ef bc 9c 9f 40 f2     ....b.@|o.....@.
     178:	ba a5 6f a5 f4 90 05 5a 2a f7 5c 93 6b 6c f9 67     ..o....Z*.\.kl.g
     188:	6d c1 1b fc e0 e4 0d 47 fe f5 20 e6 b5 00 d0 ed     m......G.. .....
     198:	90 2e 03 00 94 35 77 05 00 80 84 1e 08 00 00 20     .....5w........ 
     1a8:	4e 0a 00 00 00 c8 0c 33 33 33 33 0f 98 6e 12 83     N......3333..n..
     1b8:	11 41 ef 8d 21 14 89 3b e6 55 16 cf fe e6 db 18     .A..!..;.U......
     1c8:	d1 84 4b 38 1b f7 7c 1d 90 1d a4 bb e4 24 20 32     ..K8..|......$ 2
     1d8:	84 72 5e 22 81 00 c9 f1 24 ec a1 e5 3d 27           .r^"....$...='

000001e6 <__ctors_end>:
     1e6:	11 24       	eor	r1, r1
     1e8:	1f be       	out	0x3f, r1	; 63
     1ea:	cf ef       	ldi	r28, 0xFF	; 255
     1ec:	d1 e2       	ldi	r29, 0x21	; 33
     1ee:	de bf       	out	0x3e, r29	; 62
     1f0:	cd bf       	out	0x3d, r28	; 61

000001f2 <__do_copy_data>:
     1f2:	14 e0       	ldi	r17, 0x04	; 4
     1f4:	a0 e0       	ldi	r26, 0x00	; 0
     1f6:	b2 e0       	ldi	r27, 0x02	; 2
     1f8:	ea e8       	ldi	r30, 0x8A	; 138
     1fa:	ff e1       	ldi	r31, 0x1F	; 31
     1fc:	02 c0       	rjmp	.+4      	; 0x202 <__do_copy_data+0x10>
     1fe:	05 90       	lpm	r0, Z+
     200:	0d 92       	st	X+, r0
     202:	ae 30       	cpi	r26, 0x0E	; 14
     204:	b1 07       	cpc	r27, r17
     206:	d9 f7       	brne	.-10     	; 0x1fe <__do_copy_data+0xc>

00000208 <__do_clear_bss>:
     208:	24 e0       	ldi	r18, 0x04	; 4
     20a:	ae e0       	ldi	r26, 0x0E	; 14
     20c:	b4 e0       	ldi	r27, 0x04	; 4
     20e:	01 c0       	rjmp	.+2      	; 0x212 <.do_clear_bss_start>

00000210 <.do_clear_bss_loop>:
     210:	1d 92       	st	X+, r1

00000212 <.do_clear_bss_start>:
     212:	a8 35       	cpi	r26, 0x58	; 88
     214:	b2 07       	cpc	r27, r18
     216:	e1 f7       	brne	.-8      	; 0x210 <.do_clear_bss_loop>
     218:	5e d7       	rcall	.+3772   	; 0x10d6 <main>
     21a:	0c 94 c3 0f 	jmp	0x1f86	; 0x1f86 <_exit>

0000021e <__bad_interrupt>:
     21e:	f0 ce       	rjmp	.-544    	; 0x0 <__vectors>

00000220 <Change_ADC>:
// Date: 2019-01-15
// Description: Change ADC_MUX to read next value
/*========================================================================================*/

void Change_ADC(int i){
	if (i < 4){
     220:	84 30       	cpi	r24, 0x04	; 4
     222:	91 05       	cpc	r25, r1
     224:	1c f4       	brge	.+6      	; 0x22c <Change_ADC+0xc>
		ADMUX = 0x00 + i;
     226:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>
     22a:	08 95       	ret
	}
	else{
		ADCSRB = 0x08;
     22c:	98 e0       	ldi	r25, 0x08	; 8
     22e:	90 93 7b 00 	sts	0x007B, r25	; 0x80007b <__TEXT_REGION_LENGTH__+0x7e007b>
		ADMUX = 0x00 + (i - 4);
     232:	84 50       	subi	r24, 0x04	; 4
     234:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>
     238:	08 95       	ret

0000023a <Read_ADC>:
/*========================================================================================*/

uint16_t Read_ADC(){
	
	// start conversion
	ADCSRA |= 0x40;
     23a:	ea e7       	ldi	r30, 0x7A	; 122
     23c:	f0 e0       	ldi	r31, 0x00	; 0
     23e:	80 81       	ld	r24, Z
     240:	80 64       	ori	r24, 0x40	; 64
     242:	80 83       	st	Z, r24
	
	// Wait until conversion is done
	while(ADCSRA & (1 << ADSC));
     244:	80 81       	ld	r24, Z
     246:	86 fd       	sbrc	r24, 6
     248:	fd cf       	rjmp	.-6      	; 0x244 <Read_ADC+0xa>

	return(ADC);
     24a:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
     24e:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
}
     252:	08 95       	ret

00000254 <Check_ADC>:
/*========================================================================================*/

float Check_ADC(int i){
	
	// Choose the correct ADC channel to read from
	Change_ADC(i);
     254:	e5 df       	rcall	.-54     	; 0x220 <Change_ADC>
	
	// Get the read value from the ADC
	return Read_ADC();	
     256:	f1 df       	rcall	.-30     	; 0x23a <Read_ADC>
     258:	bc 01       	movw	r22, r24
     25a:	80 e0       	ldi	r24, 0x00	; 0
     25c:	90 e0       	ldi	r25, 0x00	; 0
     25e:	0c 94 63 09 	jmp	0x12c6	; 0x12c6 <__floatunsisf>

00000262 <Volt_ADC>:
	
}
     262:	9c 01       	movw	r18, r24
// Date: 2019-03-06
// Description: Voltage Measurements via ADC.
/*========================================================================================*/

float Volt_ADC(int Volt_num){
	int ADC_num = Volt_num + 4; // ADC_num is the value needed for Change_ADC
     264:	2c 5f       	subi	r18, 0xFC	; 252
     266:	3f 4f       	sbci	r19, 0xFF	; 255
	
	// Explained
	// voltage = (ADC_value / total resolution)
	
	// 3V3-1 & 3V3-2 rails
	if(ADC_num == 4 || ADC_num == 5){
     268:	02 97       	sbiw	r24, 0x02	; 2
     26a:	a0 f4       	brcc	.+40     	; 0x294 <Volt_ADC+0x32>
		val = ((Check_ADC(ADC_num) / 1024) * 3.3) / 0.9090;
     26c:	c9 01       	movw	r24, r18
     26e:	f2 df       	rcall	.-28     	; 0x254 <Check_ADC>
     270:	20 e0       	ldi	r18, 0x00	; 0
     272:	30 e0       	ldi	r19, 0x00	; 0
     274:	40 e8       	ldi	r20, 0x80	; 128
     276:	5a e3       	ldi	r21, 0x3A	; 58
     278:	0e 94 19 0a 	call	0x1432	; 0x1432 <__mulsf3>
     27c:	23 e3       	ldi	r18, 0x33	; 51
     27e:	33 e3       	ldi	r19, 0x33	; 51
     280:	43 e5       	ldi	r20, 0x53	; 83
     282:	50 e4       	ldi	r21, 0x40	; 64
     284:	0e 94 19 0a 	call	0x1432	; 0x1432 <__mulsf3>
     288:	29 e3       	ldi	r18, 0x39	; 57
     28a:	34 eb       	ldi	r19, 0xB4	; 180
     28c:	48 e6       	ldi	r20, 0x68	; 104
     28e:	5f e3       	ldi	r21, 0x3F	; 63
     290:	b2 c7       	rjmp	.+3940   	; 0x11f6 <__divsf3>
     292:	08 95       	ret
	}
	// 5V rail
	else if(ADC_num == 6){
     294:	26 30       	cpi	r18, 0x06	; 6
     296:	31 05       	cpc	r19, r1
     298:	a9 f4       	brne	.+42     	; 0x2c4 <Volt_ADC+0x62>
		val = ((Check_ADC(ADC_num) / 1024) * 3.3) / 0.5997;
     29a:	86 e0       	ldi	r24, 0x06	; 6
     29c:	90 e0       	ldi	r25, 0x00	; 0
     29e:	da df       	rcall	.-76     	; 0x254 <Check_ADC>
     2a0:	20 e0       	ldi	r18, 0x00	; 0
     2a2:	30 e0       	ldi	r19, 0x00	; 0
     2a4:	40 e8       	ldi	r20, 0x80	; 128
     2a6:	5a e3       	ldi	r21, 0x3A	; 58
     2a8:	0e 94 19 0a 	call	0x1432	; 0x1432 <__mulsf3>
     2ac:	23 e3       	ldi	r18, 0x33	; 51
     2ae:	33 e3       	ldi	r19, 0x33	; 51
     2b0:	43 e5       	ldi	r20, 0x53	; 83
     2b2:	50 e4       	ldi	r21, 0x40	; 64
     2b4:	0e 94 19 0a 	call	0x1432	; 0x1432 <__mulsf3>
     2b8:	20 ef       	ldi	r18, 0xF0	; 240
     2ba:	35 e8       	ldi	r19, 0x85	; 133
     2bc:	49 e1       	ldi	r20, 0x19	; 25
     2be:	5f e3       	ldi	r21, 0x3F	; 63
     2c0:	9a c7       	rjmp	.+3892   	; 0x11f6 <__divsf3>
     2c2:	08 95       	ret
		// Correction factor (through testing)
		// 69 (mV) offset
	}
	// 8V rail
	else if(ADC_num == 7){
     2c4:	27 30       	cpi	r18, 0x07	; 7
     2c6:	31 05       	cpc	r19, r1
     2c8:	a9 f4       	brne	.+42     	; 0x2f4 <Volt_ADC+0x92>
		val = ((Check_ADC(ADC_num) / 1024) * 3.3) / 0.3597;
     2ca:	87 e0       	ldi	r24, 0x07	; 7
     2cc:	90 e0       	ldi	r25, 0x00	; 0
     2ce:	c2 df       	rcall	.-124    	; 0x254 <Check_ADC>
     2d0:	20 e0       	ldi	r18, 0x00	; 0
     2d2:	30 e0       	ldi	r19, 0x00	; 0
     2d4:	40 e8       	ldi	r20, 0x80	; 128
     2d6:	5a e3       	ldi	r21, 0x3A	; 58
     2d8:	0e 94 19 0a 	call	0x1432	; 0x1432 <__mulsf3>
     2dc:	23 e3       	ldi	r18, 0x33	; 51
     2de:	33 e3       	ldi	r19, 0x33	; 51
     2e0:	43 e5       	ldi	r20, 0x53	; 83
     2e2:	50 e4       	ldi	r21, 0x40	; 64
     2e4:	0e 94 19 0a 	call	0x1432	; 0x1432 <__mulsf3>
     2e8:	29 e9       	ldi	r18, 0x99	; 153
     2ea:	3a e2       	ldi	r19, 0x2A	; 42
     2ec:	48 eb       	ldi	r20, 0xB8	; 184
     2ee:	5e e3       	ldi	r21, 0x3E	; 62
     2f0:	82 c7       	rjmp	.+3844   	; 0x11f6 <__divsf3>
     2f2:	08 95       	ret
	}
	// VBatt rail
	else if(ADC_num == 8){
     2f4:	28 30       	cpi	r18, 0x08	; 8
     2f6:	31 05       	cpc	r19, r1
		val = ((Check_ADC(ADC_num) / 1024) * 3.3) / 0.7141;
     2f8:	a9 f4       	brne	.+42     	; 0x324 <Volt_ADC+0xc2>
     2fa:	88 e0       	ldi	r24, 0x08	; 8
     2fc:	90 e0       	ldi	r25, 0x00	; 0
     2fe:	aa df       	rcall	.-172    	; 0x254 <Check_ADC>
     300:	20 e0       	ldi	r18, 0x00	; 0
     302:	30 e0       	ldi	r19, 0x00	; 0
     304:	40 e8       	ldi	r20, 0x80	; 128
     306:	5a e3       	ldi	r21, 0x3A	; 58
     308:	0e 94 19 0a 	call	0x1432	; 0x1432 <__mulsf3>
     30c:	23 e3       	ldi	r18, 0x33	; 51
     30e:	33 e3       	ldi	r19, 0x33	; 51
     310:	43 e5       	ldi	r20, 0x53	; 83
     312:	50 e4       	ldi	r21, 0x40	; 64
     314:	0e 94 19 0a 	call	0x1432	; 0x1432 <__mulsf3>
     318:	22 e4       	ldi	r18, 0x42	; 66
     31a:	3f ec       	ldi	r19, 0xCF	; 207
     31c:	46 e3       	ldi	r20, 0x36	; 54
     31e:	5f e3       	ldi	r21, 0x3F	; 63
     320:	6a c7       	rjmp	.+3796   	; 0x11f6 <__divsf3>
     322:	08 95       	ret
// Description: Voltage Measurements via ADC.
/*========================================================================================*/

float Volt_ADC(int Volt_num){
	int ADC_num = Volt_num + 4; // ADC_num is the value needed for Change_ADC
	float val = 0;
     324:	60 e0       	ldi	r22, 0x00	; 0
     326:	70 e0       	ldi	r23, 0x00	; 0
     328:	cb 01       	movw	r24, r22
	}
	else{
		// do nothing
	}
	return val;
}
     32a:	08 95       	ret

0000032c <Amp_ADC>:
	int ADC_num = 0; // initialize ADC number to check
	float val = 0; // initialize the voltage value to 0 V
	int i = 0;
	
	// Voltage rail current 8V, 5V, 3V3-1, 3V3-2 respectively
	if(Amp_num < 4){
     32c:	84 30       	cpi	r24, 0x04	; 4
     32e:	91 05       	cpc	r25, r1
     330:	1c f1       	brlt	.+70     	; 0x378 <Amp_ADC+0x4c>
			i++;
		}
		val = val/1;
	}
	// Solar current and Battery current, respectively
	else if(Amp_num == 4 || Amp_num == 5){
     332:	9c 01       	movw	r18, r24
     334:	24 50       	subi	r18, 0x04	; 4
     336:	31 09       	sbc	r19, r1
     338:	22 30       	cpi	r18, 0x02	; 2
     33a:	31 05       	cpc	r19, r1
     33c:	c8 f4       	brcc	.+50     	; 0x370 <Amp_ADC+0x44>
		ADC_num = Amp_num + 5;
		while(i < 1){
			val = (((Check_ADC(ADC_num) / 1024) * 3.3) - 0.494) / 0.4;
     33e:	05 96       	adiw	r24, 0x05	; 5
     340:	89 df       	rcall	.-238    	; 0x254 <Check_ADC>
     342:	20 e0       	ldi	r18, 0x00	; 0
     344:	30 e0       	ldi	r19, 0x00	; 0
     346:	40 e8       	ldi	r20, 0x80	; 128
     348:	5a e3       	ldi	r21, 0x3A	; 58
     34a:	0e 94 19 0a 	call	0x1432	; 0x1432 <__mulsf3>
     34e:	23 e3       	ldi	r18, 0x33	; 51
     350:	33 e3       	ldi	r19, 0x33	; 51
     352:	43 e5       	ldi	r20, 0x53	; 83
     354:	50 e4       	ldi	r21, 0x40	; 64
     356:	0e 94 19 0a 	call	0x1432	; 0x1432 <__mulsf3>
     35a:	21 e9       	ldi	r18, 0x91	; 145
     35c:	3d ee       	ldi	r19, 0xED	; 237
     35e:	4c ef       	ldi	r20, 0xFC	; 252
     360:	5e e3       	ldi	r21, 0x3E	; 62
     362:	e0 d6       	rcall	.+3520   	; 0x1124 <__subsf3>
     364:	2d ec       	ldi	r18, 0xCD	; 205
     366:	3c ec       	ldi	r19, 0xCC	; 204
     368:	4c ec       	ldi	r20, 0xCC	; 204
     36a:	5e e3       	ldi	r21, 0x3E	; 62
     36c:	44 c7       	rjmp	.+3720   	; 0x11f6 <__divsf3>
     36e:	08 95       	ret
// Description: Ammeter measurements via ADC.
/*========================================================================================*/

float Amp_ADC(int Amp_num){
	int ADC_num = 0; // initialize ADC number to check
	float val = 0; // initialize the voltage value to 0 V
     370:	60 e0       	ldi	r22, 0x00	; 0
     372:	70 e0       	ldi	r23, 0x00	; 0
     374:	cb 01       	movw	r24, r22
	
	// Voltage rail current 8V, 5V, 3V3-1, 3V3-2 respectively
	if(Amp_num < 4){
		ADC_num = Amp_num;
		while(i < 1){
			val = (((Check_ADC(ADC_num) / 1024) * 3.3) - 0.494) / 0.4;
     376:	08 95       	ret
     378:	6d df       	rcall	.-294    	; 0x254 <Check_ADC>
     37a:	20 e0       	ldi	r18, 0x00	; 0
     37c:	30 e0       	ldi	r19, 0x00	; 0
     37e:	40 e8       	ldi	r20, 0x80	; 128
     380:	5a e3       	ldi	r21, 0x3A	; 58
     382:	0e 94 19 0a 	call	0x1432	; 0x1432 <__mulsf3>
     386:	23 e3       	ldi	r18, 0x33	; 51
     388:	33 e3       	ldi	r19, 0x33	; 51
     38a:	43 e5       	ldi	r20, 0x53	; 83
     38c:	50 e4       	ldi	r21, 0x40	; 64
     38e:	0e 94 19 0a 	call	0x1432	; 0x1432 <__mulsf3>
     392:	21 e9       	ldi	r18, 0x91	; 145
     394:	3d ee       	ldi	r19, 0xED	; 237
     396:	4c ef       	ldi	r20, 0xFC	; 252
     398:	5e e3       	ldi	r21, 0x3E	; 62
     39a:	c4 d6       	rcall	.+3464   	; 0x1124 <__subsf3>
     39c:	2d ec       	ldi	r18, 0xCD	; 205
     39e:	3c ec       	ldi	r19, 0xCC	; 204
     3a0:	4c ec       	ldi	r20, 0xCC	; 204
     3a2:	5e e3       	ldi	r21, 0x3E	; 62
     3a4:	28 c7       	rjmp	.+3664   	; 0x11f6 <__divsf3>
			i++;
		}
		val = val/1;
	}
	return val;
}
     3a6:	08 95       	ret

000003a8 <Temp_ADC>:
// Author: Chris Thomas
// Date: 2019-03-17
// Description: Temperature measurement via ADC.
/*========================================================================================*/

float Temp_ADC(){
     3a8:	cf 92       	push	r12
     3aa:	df 92       	push	r13
     3ac:	ef 92       	push	r14
     3ae:	ff 92       	push	r15
     3b0:	0f 93       	push	r16
     3b2:	1f 93       	push	r17
     3b4:	cf 93       	push	r28
     3b6:	df 93       	push	r29
	int i = 0;
	float temp;
	
	// Enable temperature sensor
	Clear_GPIO(1);
     3b8:	81 e0       	ldi	r24, 0x01	; 1
     3ba:	90 e0       	ldi	r25, 0x00	; 0
     3bc:	f9 d2       	rcall	.+1522   	; 0x9b0 <Clear_GPIO>
     3be:	01 e0       	ldi	r16, 0x01	; 1
     3c0:	10 e0       	ldi	r17, 0x00	; 0
     3c2:	c0 e0       	ldi	r28, 0x00	; 0
     3c4:	d0 e0       	ldi	r29, 0x00	; 0
     3c6:	03 c0       	rjmp	.+6      	; 0x3ce <Temp_ADC+0x26>
     3c8:	21 96       	adiw	r28, 0x01	; 1
     3ca:	0f 5f       	subi	r16, 0xFF	; 255
     3cc:	1f 4f       	sbci	r17, 0xFF	; 255
	
	 // 3 Temperature sensors on battery
	while(i < 3){
		if (i == 0){
     3ce:	20 97       	sbiw	r28, 0x00	; 0
     3d0:	51 f5       	brne	.+84     	; 0x426 <__LOCK_REGION_LENGTH__+0x26>
			Clear_GPIO(4);
     3d2:	84 e0       	ldi	r24, 0x04	; 4
     3d4:	90 e0       	ldi	r25, 0x00	; 0
     3d6:	ec d2       	rcall	.+1496   	; 0x9b0 <Clear_GPIO>
			Set_GPIO(5);
     3d8:	85 e0       	ldi	r24, 0x05	; 5
     3da:	90 e0       	ldi	r25, 0x00	; 0
     3dc:	83 d2       	rcall	.+1286   	; 0x8e4 <Set_GPIO>
			Set_GPIO(6);
     3de:	86 e0       	ldi	r24, 0x06	; 6
     3e0:	90 e0       	ldi	r25, 0x00	; 0
     3e2:	80 d2       	rcall	.+1280   	; 0x8e4 <Set_GPIO>
			temp += (((Check_ADC(11) / 1024) * 3.3) - 0.6972) / 0.0328;
     3e4:	8b e0       	ldi	r24, 0x0B	; 11
     3e6:	90 e0       	ldi	r25, 0x00	; 0
     3e8:	35 df       	rcall	.-406    	; 0x254 <Check_ADC>
     3ea:	20 e0       	ldi	r18, 0x00	; 0
     3ec:	30 e0       	ldi	r19, 0x00	; 0
     3ee:	40 e8       	ldi	r20, 0x80	; 128
     3f0:	5a e3       	ldi	r21, 0x3A	; 58
     3f2:	0e 94 19 0a 	call	0x1432	; 0x1432 <__mulsf3>
     3f6:	23 e3       	ldi	r18, 0x33	; 51
     3f8:	33 e3       	ldi	r19, 0x33	; 51
     3fa:	43 e5       	ldi	r20, 0x53	; 83
     3fc:	50 e4       	ldi	r21, 0x40	; 64
     3fe:	0e 94 19 0a 	call	0x1432	; 0x1432 <__mulsf3>
     402:	23 eb       	ldi	r18, 0xB3	; 179
     404:	3b e7       	ldi	r19, 0x7B	; 123
     406:	42 e3       	ldi	r20, 0x32	; 50
     408:	5f e3       	ldi	r21, 0x3F	; 63
     40a:	8c d6       	rcall	.+3352   	; 0x1124 <__subsf3>
     40c:	2b e4       	ldi	r18, 0x4B	; 75
     40e:	39 e5       	ldi	r19, 0x59	; 89
     410:	46 e0       	ldi	r20, 0x06	; 6
     412:	5d e3       	ldi	r21, 0x3D	; 61
     414:	f0 d6       	rcall	.+3552   	; 0x11f6 <__divsf3>
     416:	9b 01       	movw	r18, r22
     418:	ac 01       	movw	r20, r24
     41a:	c7 01       	movw	r24, r14
     41c:	b6 01       	movw	r22, r12
     41e:	83 d6       	rcall	.+3334   	; 0x1126 <__addsf3>
     420:	6b 01       	movw	r12, r22
     422:	7c 01       	movw	r14, r24
     424:	d1 cf       	rjmp	.-94     	; 0x3c8 <Temp_ADC+0x20>
     426:	c1 30       	cpi	r28, 0x01	; 1
		}
		else if(i == 1){
     428:	d1 05       	cpc	r29, r1
     42a:	41 f5       	brne	.+80     	; 0x47c <__LOCK_REGION_LENGTH__+0x7c>
			Set_GPIO(4);
     42c:	84 e0       	ldi	r24, 0x04	; 4
     42e:	90 e0       	ldi	r25, 0x00	; 0
     430:	59 d2       	rcall	.+1202   	; 0x8e4 <Set_GPIO>
			Set_GPIO(5);
     432:	85 e0       	ldi	r24, 0x05	; 5
     434:	90 e0       	ldi	r25, 0x00	; 0
     436:	56 d2       	rcall	.+1196   	; 0x8e4 <Set_GPIO>
     438:	86 e0       	ldi	r24, 0x06	; 6
			Clear_GPIO(6);
     43a:	90 e0       	ldi	r25, 0x00	; 0
     43c:	b9 d2       	rcall	.+1394   	; 0x9b0 <Clear_GPIO>
     43e:	8b e0       	ldi	r24, 0x0B	; 11
			temp += (((Check_ADC(11) / 1024) * 3.3) - 0.6972) / 0.0328;
     440:	90 e0       	ldi	r25, 0x00	; 0
     442:	08 df       	rcall	.-496    	; 0x254 <Check_ADC>
     444:	20 e0       	ldi	r18, 0x00	; 0
     446:	30 e0       	ldi	r19, 0x00	; 0
     448:	40 e8       	ldi	r20, 0x80	; 128
     44a:	5a e3       	ldi	r21, 0x3A	; 58
     44c:	f2 d7       	rcall	.+4068   	; 0x1432 <__mulsf3>
     44e:	23 e3       	ldi	r18, 0x33	; 51
     450:	33 e3       	ldi	r19, 0x33	; 51
     452:	43 e5       	ldi	r20, 0x53	; 83
     454:	50 e4       	ldi	r21, 0x40	; 64
     456:	ed d7       	rcall	.+4058   	; 0x1432 <__mulsf3>
     458:	23 eb       	ldi	r18, 0xB3	; 179
     45a:	3b e7       	ldi	r19, 0x7B	; 123
     45c:	42 e3       	ldi	r20, 0x32	; 50
     45e:	5f e3       	ldi	r21, 0x3F	; 63
     460:	61 d6       	rcall	.+3266   	; 0x1124 <__subsf3>
     462:	2b e4       	ldi	r18, 0x4B	; 75
     464:	39 e5       	ldi	r19, 0x59	; 89
     466:	46 e0       	ldi	r20, 0x06	; 6
     468:	5d e3       	ldi	r21, 0x3D	; 61
     46a:	c5 d6       	rcall	.+3466   	; 0x11f6 <__divsf3>
     46c:	9b 01       	movw	r18, r22
     46e:	ac 01       	movw	r20, r24
     470:	c7 01       	movw	r24, r14
     472:	b6 01       	movw	r22, r12
     474:	58 d6       	rcall	.+3248   	; 0x1126 <__addsf3>
     476:	6b 01       	movw	r12, r22
     478:	7c 01       	movw	r14, r24
     47a:	a6 cf       	rjmp	.-180    	; 0x3c8 <Temp_ADC+0x20>
     47c:	c2 30       	cpi	r28, 0x02	; 2
		}
		else if (i == 2){
     47e:	d1 05       	cpc	r29, r1
     480:	41 f5       	brne	.+80     	; 0x4d2 <__LOCK_REGION_LENGTH__+0xd2>
			Set_GPIO(4);
     482:	84 e0       	ldi	r24, 0x04	; 4
     484:	90 e0       	ldi	r25, 0x00	; 0
     486:	2e d2       	rcall	.+1116   	; 0x8e4 <Set_GPIO>
     488:	85 e0       	ldi	r24, 0x05	; 5
			Set_GPIO(5);
     48a:	90 e0       	ldi	r25, 0x00	; 0
     48c:	2b d2       	rcall	.+1110   	; 0x8e4 <Set_GPIO>
     48e:	86 e0       	ldi	r24, 0x06	; 6
			Set_GPIO(6);
     490:	90 e0       	ldi	r25, 0x00	; 0
     492:	28 d2       	rcall	.+1104   	; 0x8e4 <Set_GPIO>
     494:	8b e0       	ldi	r24, 0x0B	; 11
     496:	90 e0       	ldi	r25, 0x00	; 0
			temp += (((Check_ADC(11) / 1024) * 3.3) - 0.6972) / 0.0328;
     498:	dd de       	rcall	.-582    	; 0x254 <Check_ADC>
     49a:	20 e0       	ldi	r18, 0x00	; 0
     49c:	30 e0       	ldi	r19, 0x00	; 0
     49e:	40 e8       	ldi	r20, 0x80	; 128
     4a0:	5a e3       	ldi	r21, 0x3A	; 58
     4a2:	c7 d7       	rcall	.+3982   	; 0x1432 <__mulsf3>
     4a4:	23 e3       	ldi	r18, 0x33	; 51
     4a6:	33 e3       	ldi	r19, 0x33	; 51
     4a8:	43 e5       	ldi	r20, 0x53	; 83
     4aa:	50 e4       	ldi	r21, 0x40	; 64
     4ac:	c2 d7       	rcall	.+3972   	; 0x1432 <__mulsf3>
     4ae:	23 eb       	ldi	r18, 0xB3	; 179
     4b0:	3b e7       	ldi	r19, 0x7B	; 123
     4b2:	42 e3       	ldi	r20, 0x32	; 50
     4b4:	5f e3       	ldi	r21, 0x3F	; 63
     4b6:	36 d6       	rcall	.+3180   	; 0x1124 <__subsf3>
     4b8:	2b e4       	ldi	r18, 0x4B	; 75
     4ba:	39 e5       	ldi	r19, 0x59	; 89
     4bc:	46 e0       	ldi	r20, 0x06	; 6
     4be:	5d e3       	ldi	r21, 0x3D	; 61
     4c0:	9a d6       	rcall	.+3380   	; 0x11f6 <__divsf3>
     4c2:	9b 01       	movw	r18, r22
     4c4:	ac 01       	movw	r20, r24
     4c6:	c7 01       	movw	r24, r14
     4c8:	b6 01       	movw	r22, r12
     4ca:	2d d6       	rcall	.+3162   	; 0x1126 <__addsf3>
     4cc:	6b 01       	movw	r12, r22
     4ce:	7c 01       	movw	r14, r24
     4d0:	04 c0       	rjmp	.+8      	; 0x4da <__LOCK_REGION_LENGTH__+0xda>
     4d2:	03 30       	cpi	r16, 0x03	; 3
     4d4:	11 05       	cpc	r17, r1
     4d6:	0c f4       	brge	.+2      	; 0x4da <__LOCK_REGION_LENGTH__+0xda>
     4d8:	77 cf       	rjmp	.-274    	; 0x3c8 <Temp_ADC+0x20>
	
	// Enable temperature sensor
	Clear_GPIO(1);
	
	 // 3 Temperature sensors on battery
	while(i < 3){
     4da:	20 e0       	ldi	r18, 0x00	; 0
     4dc:	30 e0       	ldi	r19, 0x00	; 0
     4de:	40 e4       	ldi	r20, 0x40	; 64
     4e0:	50 e4       	ldi	r21, 0x40	; 64
		else{
			// do nothing (ADD error message)
		}
		i++;
	}
	return temp/3;
     4e2:	c7 01       	movw	r24, r14
     4e4:	b6 01       	movw	r22, r12
     4e6:	87 d6       	rcall	.+3342   	; 0x11f6 <__divsf3>
     4e8:	df 91       	pop	r29
     4ea:	cf 91       	pop	r28
     4ec:	1f 91       	pop	r17
     4ee:	0f 91       	pop	r16
     4f0:	ff 90       	pop	r15
}
     4f2:	ef 90       	pop	r14
     4f4:	df 90       	pop	r13
     4f6:	cf 90       	pop	r12
     4f8:	08 95       	ret

000004fa <SoC_ADC>:
     4fa:	8f 92       	push	r8
     4fc:	9f 92       	push	r9
     4fe:	af 92       	push	r10
     500:	bf 92       	push	r11
     502:	cf 92       	push	r12
// Author: Chris Thomas
// Date: 2019-03-17
// Description: Temperature measurement via ADC.
/*========================================================================================*/

int SoC_ADC(float volt, float amp){
     504:	df 92       	push	r13
     506:	ef 92       	push	r14
     508:	ff 92       	push	r15
     50a:	4b 01       	movw	r8, r22
     50c:	5c 01       	movw	r10, r24
     50e:	69 01       	movw	r12, r18
     510:	7a 01       	movw	r14, r20
	int soc = 0;
	
	// Check Battery voltage and current
	
	// Lookup table
	if (amp < 0.6 && amp > 0){
     512:	2a e9       	ldi	r18, 0x9A	; 154
     514:	39 e9       	ldi	r19, 0x99	; 153
     516:	49 e1       	ldi	r20, 0x19	; 25
     518:	5f e3       	ldi	r21, 0x3F	; 63
     51a:	c7 01       	movw	r24, r14
     51c:	b6 01       	movw	r22, r12
     51e:	67 d6       	rcall	.+3278   	; 0x11ee <__cmpsf2>
     520:	88 23       	and	r24, r24
     522:	0c f0       	brlt	.+2      	; 0x526 <SoC_ADC+0x2c>
     524:	82 c0       	rjmp	.+260    	; 0x62a <SoC_ADC+0x130>
     526:	20 e0       	ldi	r18, 0x00	; 0
     528:	30 e0       	ldi	r19, 0x00	; 0
     52a:	a9 01       	movw	r20, r18
     52c:	c7 01       	movw	r24, r14
     52e:	b6 01       	movw	r22, r12
     530:	7c d7       	rcall	.+3832   	; 0x142a <__gesf2>
     532:	18 16       	cp	r1, r24
     534:	0c f0       	brlt	.+2      	; 0x538 <SoC_ADC+0x3e>
     536:	79 c0       	rjmp	.+242    	; 0x62a <SoC_ADC+0x130>
		if (volt > 4.00) {
     538:	20 e0       	ldi	r18, 0x00	; 0
     53a:	30 e0       	ldi	r19, 0x00	; 0
     53c:	40 e8       	ldi	r20, 0x80	; 128
     53e:	50 e4       	ldi	r21, 0x40	; 64
     540:	c5 01       	movw	r24, r10
     542:	b4 01       	movw	r22, r8
     544:	72 d7       	rcall	.+3812   	; 0x142a <__gesf2>
     546:	18 16       	cp	r1, r24
     548:	0c f4       	brge	.+2      	; 0x54c <SoC_ADC+0x52>
     54a:	85 c1       	rjmp	.+778    	; 0x856 <SoC_ADC+0x35c>
			soc = 80;
		} //end if
		else if (volt < 4.00 && volt > 3.80) {
     54c:	20 e0       	ldi	r18, 0x00	; 0
     54e:	30 e0       	ldi	r19, 0x00	; 0
     550:	40 e8       	ldi	r20, 0x80	; 128
     552:	50 e4       	ldi	r21, 0x40	; 64
     554:	c5 01       	movw	r24, r10
     556:	b4 01       	movw	r22, r8
     558:	4a d6       	rcall	.+3220   	; 0x11ee <__cmpsf2>
     55a:	88 23       	and	r24, r24
     55c:	54 f4       	brge	.+20     	; 0x572 <SoC_ADC+0x78>
     55e:	23 e3       	ldi	r18, 0x33	; 51
     560:	33 e3       	ldi	r19, 0x33	; 51
     562:	43 e7       	ldi	r20, 0x73	; 115
     564:	50 e4       	ldi	r21, 0x40	; 64
     566:	c5 01       	movw	r24, r10
     568:	b4 01       	movw	r22, r8
     56a:	5f d7       	rcall	.+3774   	; 0x142a <__gesf2>
     56c:	18 16       	cp	r1, r24
     56e:	0c f4       	brge	.+2      	; 0x572 <SoC_ADC+0x78>
     570:	75 c1       	rjmp	.+746    	; 0x85c <SoC_ADC+0x362>
			soc = 70;
		} //end else if
		else if (volt < 3.80 && volt > 3.75) {
     572:	23 e3       	ldi	r18, 0x33	; 51
     574:	33 e3       	ldi	r19, 0x33	; 51
     576:	43 e7       	ldi	r20, 0x73	; 115
     578:	50 e4       	ldi	r21, 0x40	; 64
     57a:	c5 01       	movw	r24, r10
     57c:	b4 01       	movw	r22, r8
     57e:	37 d6       	rcall	.+3182   	; 0x11ee <__cmpsf2>
     580:	88 23       	and	r24, r24
     582:	54 f4       	brge	.+20     	; 0x598 <SoC_ADC+0x9e>
     584:	20 e0       	ldi	r18, 0x00	; 0
     586:	30 e0       	ldi	r19, 0x00	; 0
     588:	40 e7       	ldi	r20, 0x70	; 112
     58a:	50 e4       	ldi	r21, 0x40	; 64
     58c:	c5 01       	movw	r24, r10
     58e:	b4 01       	movw	r22, r8
     590:	4c d7       	rcall	.+3736   	; 0x142a <__gesf2>
     592:	18 16       	cp	r1, r24
     594:	0c f4       	brge	.+2      	; 0x598 <SoC_ADC+0x9e>
     596:	65 c1       	rjmp	.+714    	; 0x862 <SoC_ADC+0x368>
			soc = 60;
		} //end else if
		else if (volt < 3.75 && volt > 3.70) {
     598:	20 e0       	ldi	r18, 0x00	; 0
     59a:	30 e0       	ldi	r19, 0x00	; 0
     59c:	40 e7       	ldi	r20, 0x70	; 112
     59e:	50 e4       	ldi	r21, 0x40	; 64
     5a0:	c5 01       	movw	r24, r10
     5a2:	b4 01       	movw	r22, r8
     5a4:	24 d6       	rcall	.+3144   	; 0x11ee <__cmpsf2>
     5a6:	88 23       	and	r24, r24
     5a8:	54 f4       	brge	.+20     	; 0x5be <SoC_ADC+0xc4>
     5aa:	2d ec       	ldi	r18, 0xCD	; 205
     5ac:	3c ec       	ldi	r19, 0xCC	; 204
     5ae:	4c e6       	ldi	r20, 0x6C	; 108
     5b0:	50 e4       	ldi	r21, 0x40	; 64
     5b2:	c5 01       	movw	r24, r10
     5b4:	b4 01       	movw	r22, r8
     5b6:	39 d7       	rcall	.+3698   	; 0x142a <__gesf2>
     5b8:	18 16       	cp	r1, r24
     5ba:	0c f4       	brge	.+2      	; 0x5be <SoC_ADC+0xc4>
     5bc:	55 c1       	rjmp	.+682    	; 0x868 <SoC_ADC+0x36e>
			soc = 50;
		} //end else if
		else if (volt < 3.70 && volt > 3.60) {
     5be:	2d ec       	ldi	r18, 0xCD	; 205
     5c0:	3c ec       	ldi	r19, 0xCC	; 204
     5c2:	4c e6       	ldi	r20, 0x6C	; 108
     5c4:	50 e4       	ldi	r21, 0x40	; 64
     5c6:	c5 01       	movw	r24, r10
     5c8:	b4 01       	movw	r22, r8
     5ca:	11 d6       	rcall	.+3106   	; 0x11ee <__cmpsf2>
     5cc:	88 23       	and	r24, r24
     5ce:	54 f4       	brge	.+20     	; 0x5e4 <SoC_ADC+0xea>
     5d0:	26 e6       	ldi	r18, 0x66	; 102
     5d2:	36 e6       	ldi	r19, 0x66	; 102
     5d4:	46 e6       	ldi	r20, 0x66	; 102
     5d6:	50 e4       	ldi	r21, 0x40	; 64
     5d8:	c5 01       	movw	r24, r10
     5da:	b4 01       	movw	r22, r8
     5dc:	26 d7       	rcall	.+3660   	; 0x142a <__gesf2>
     5de:	18 16       	cp	r1, r24
     5e0:	0c f4       	brge	.+2      	; 0x5e4 <SoC_ADC+0xea>
     5e2:	45 c1       	rjmp	.+650    	; 0x86e <SoC_ADC+0x374>
			soc = 40;
		} //end else if
		else if (volt < 3.60 && volt > 3.5) {
     5e4:	26 e6       	ldi	r18, 0x66	; 102
     5e6:	36 e6       	ldi	r19, 0x66	; 102
     5e8:	46 e6       	ldi	r20, 0x66	; 102
     5ea:	50 e4       	ldi	r21, 0x40	; 64
     5ec:	c5 01       	movw	r24, r10
     5ee:	b4 01       	movw	r22, r8
     5f0:	fe d5       	rcall	.+3068   	; 0x11ee <__cmpsf2>
     5f2:	88 23       	and	r24, r24
     5f4:	54 f4       	brge	.+20     	; 0x60a <SoC_ADC+0x110>
     5f6:	20 e0       	ldi	r18, 0x00	; 0
     5f8:	30 e0       	ldi	r19, 0x00	; 0
     5fa:	40 e6       	ldi	r20, 0x60	; 96
     5fc:	50 e4       	ldi	r21, 0x40	; 64
     5fe:	c5 01       	movw	r24, r10
     600:	b4 01       	movw	r22, r8
     602:	13 d7       	rcall	.+3622   	; 0x142a <__gesf2>
     604:	18 16       	cp	r1, r24
     606:	0c f4       	brge	.+2      	; 0x60a <SoC_ADC+0x110>
     608:	35 c1       	rjmp	.+618    	; 0x874 <SoC_ADC+0x37a>
			soc = 30;
		} //end else if
		else if (volt < 3.50) {
     60a:	20 e0       	ldi	r18, 0x00	; 0
     60c:	30 e0       	ldi	r19, 0x00	; 0
     60e:	40 e6       	ldi	r20, 0x60	; 96
     610:	50 e4       	ldi	r21, 0x40	; 64
     612:	c5 01       	movw	r24, r10
     614:	b4 01       	movw	r22, r8
     616:	eb d5       	rcall	.+3030   	; 0x11ee <__cmpsf2>
     618:	88 23       	and	r24, r24
     61a:	0c f4       	brge	.+2      	; 0x61e <SoC_ADC+0x124>
     61c:	2e c1       	rjmp	.+604    	; 0x87a <SoC_ADC+0x380>
			soc = 20;
		} //end else if
		else {
			UART0_putstring("Error Reading State of Charge \n\n\r");
     61e:	81 e3       	ldi	r24, 0x31	; 49
     620:	93 e0       	ldi	r25, 0x03	; 3
     622:	d5 d4       	rcall	.+2474   	; 0xfce <UART0_putstring>
     624:	80 e0       	ldi	r24, 0x00	; 0
// Description: Temperature measurement via ADC.
/*========================================================================================*/

int SoC_ADC(float volt, float amp){
	// return value
	int soc = 0;
     626:	90 e0       	ldi	r25, 0x00	; 0
     628:	54 c1       	rjmp	.+680    	; 0x8d2 <SoC_ADC+0x3d8>
     62a:	2a e9       	ldi	r18, 0x9A	; 154
		} //end else if
		else {
			UART0_putstring("Error Reading State of Charge \n\n\r");
		} //end else
	}
	else if(amp > 0.6 && amp < 3){
     62c:	39 e9       	ldi	r19, 0x99	; 153
     62e:	49 e1       	ldi	r20, 0x19	; 25
     630:	5f e3       	ldi	r21, 0x3F	; 63
     632:	c7 01       	movw	r24, r14
     634:	b6 01       	movw	r22, r12
     636:	f9 d6       	rcall	.+3570   	; 0x142a <__gesf2>
     638:	18 16       	cp	r1, r24
     63a:	0c f0       	brlt	.+2      	; 0x63e <SoC_ADC+0x144>
     63c:	83 c0       	rjmp	.+262    	; 0x744 <SoC_ADC+0x24a>
     63e:	20 e0       	ldi	r18, 0x00	; 0
     640:	30 e0       	ldi	r19, 0x00	; 0
     642:	40 e4       	ldi	r20, 0x40	; 64
     644:	50 e4       	ldi	r21, 0x40	; 64
     646:	c7 01       	movw	r24, r14
     648:	b6 01       	movw	r22, r12
     64a:	d1 d5       	rcall	.+2978   	; 0x11ee <__cmpsf2>
     64c:	88 23       	and	r24, r24
     64e:	0c f0       	brlt	.+2      	; 0x652 <SoC_ADC+0x158>
     650:	79 c0       	rjmp	.+242    	; 0x744 <SoC_ADC+0x24a>
     652:	20 e0       	ldi	r18, 0x00	; 0
		if (volt > 3.75) {
     654:	30 e0       	ldi	r19, 0x00	; 0
     656:	40 e7       	ldi	r20, 0x70	; 112
     658:	50 e4       	ldi	r21, 0x40	; 64
     65a:	c5 01       	movw	r24, r10
     65c:	b4 01       	movw	r22, r8
     65e:	e5 d6       	rcall	.+3530   	; 0x142a <__gesf2>
     660:	18 16       	cp	r1, r24
     662:	0c f4       	brge	.+2      	; 0x666 <SoC_ADC+0x16c>
     664:	0d c1       	rjmp	.+538    	; 0x880 <SoC_ADC+0x386>
     666:	20 e0       	ldi	r18, 0x00	; 0
			soc = 80;
		} //end if
		else if (volt < 3.75 && volt > 3.65) {
     668:	30 e0       	ldi	r19, 0x00	; 0
     66a:	40 e7       	ldi	r20, 0x70	; 112
     66c:	50 e4       	ldi	r21, 0x40	; 64
     66e:	c5 01       	movw	r24, r10
     670:	b4 01       	movw	r22, r8
     672:	bd d5       	rcall	.+2938   	; 0x11ee <__cmpsf2>
     674:	88 23       	and	r24, r24
     676:	54 f4       	brge	.+20     	; 0x68c <SoC_ADC+0x192>
     678:	2a e9       	ldi	r18, 0x9A	; 154
     67a:	39 e9       	ldi	r19, 0x99	; 153
     67c:	49 e6       	ldi	r20, 0x69	; 105
     67e:	50 e4       	ldi	r21, 0x40	; 64
     680:	c5 01       	movw	r24, r10
     682:	b4 01       	movw	r22, r8
     684:	d2 d6       	rcall	.+3492   	; 0x142a <__gesf2>
     686:	18 16       	cp	r1, r24
     688:	0c f4       	brge	.+2      	; 0x68c <SoC_ADC+0x192>
     68a:	fd c0       	rjmp	.+506    	; 0x886 <SoC_ADC+0x38c>
     68c:	2a e9       	ldi	r18, 0x9A	; 154
			soc = 70;
		} //end else if
		else if (volt < 3.65 && volt > 3.55) {
     68e:	39 e9       	ldi	r19, 0x99	; 153
     690:	49 e6       	ldi	r20, 0x69	; 105
     692:	50 e4       	ldi	r21, 0x40	; 64
     694:	c5 01       	movw	r24, r10
     696:	b4 01       	movw	r22, r8
     698:	aa d5       	rcall	.+2900   	; 0x11ee <__cmpsf2>
     69a:	88 23       	and	r24, r24
     69c:	54 f4       	brge	.+20     	; 0x6b2 <SoC_ADC+0x1b8>
     69e:	23 e3       	ldi	r18, 0x33	; 51
     6a0:	33 e3       	ldi	r19, 0x33	; 51
     6a2:	43 e6       	ldi	r20, 0x63	; 99
     6a4:	50 e4       	ldi	r21, 0x40	; 64
     6a6:	c5 01       	movw	r24, r10
     6a8:	b4 01       	movw	r22, r8
     6aa:	bf d6       	rcall	.+3454   	; 0x142a <__gesf2>
     6ac:	18 16       	cp	r1, r24
     6ae:	0c f4       	brge	.+2      	; 0x6b2 <SoC_ADC+0x1b8>
     6b0:	ed c0       	rjmp	.+474    	; 0x88c <SoC_ADC+0x392>
     6b2:	23 e3       	ldi	r18, 0x33	; 51
			soc = 60;
		} //end else if
		else if (volt < 3.55 && volt > 3.45) {
     6b4:	33 e3       	ldi	r19, 0x33	; 51
     6b6:	43 e6       	ldi	r20, 0x63	; 99
     6b8:	50 e4       	ldi	r21, 0x40	; 64
     6ba:	c5 01       	movw	r24, r10
     6bc:	b4 01       	movw	r22, r8
     6be:	97 d5       	rcall	.+2862   	; 0x11ee <__cmpsf2>
     6c0:	88 23       	and	r24, r24
     6c2:	54 f4       	brge	.+20     	; 0x6d8 <SoC_ADC+0x1de>
     6c4:	2d ec       	ldi	r18, 0xCD	; 205
     6c6:	3c ec       	ldi	r19, 0xCC	; 204
     6c8:	4c e5       	ldi	r20, 0x5C	; 92
     6ca:	50 e4       	ldi	r21, 0x40	; 64
     6cc:	c5 01       	movw	r24, r10
     6ce:	b4 01       	movw	r22, r8
     6d0:	ac d6       	rcall	.+3416   	; 0x142a <__gesf2>
     6d2:	18 16       	cp	r1, r24
     6d4:	0c f4       	brge	.+2      	; 0x6d8 <SoC_ADC+0x1de>
     6d6:	dd c0       	rjmp	.+442    	; 0x892 <SoC_ADC+0x398>
     6d8:	2d ec       	ldi	r18, 0xCD	; 205
			soc = 50;
		} //end else if
 		else if (volt < 3.45 && volt > 3.35) {
     6da:	3c ec       	ldi	r19, 0xCC	; 204
     6dc:	4c e5       	ldi	r20, 0x5C	; 92
     6de:	50 e4       	ldi	r21, 0x40	; 64
     6e0:	c5 01       	movw	r24, r10
     6e2:	b4 01       	movw	r22, r8
     6e4:	84 d5       	rcall	.+2824   	; 0x11ee <__cmpsf2>
     6e6:	88 23       	and	r24, r24
     6e8:	54 f4       	brge	.+20     	; 0x6fe <SoC_ADC+0x204>
     6ea:	26 e6       	ldi	r18, 0x66	; 102
     6ec:	36 e6       	ldi	r19, 0x66	; 102
     6ee:	46 e5       	ldi	r20, 0x56	; 86
     6f0:	50 e4       	ldi	r21, 0x40	; 64
     6f2:	c5 01       	movw	r24, r10
     6f4:	b4 01       	movw	r22, r8
     6f6:	99 d6       	rcall	.+3378   	; 0x142a <__gesf2>
     6f8:	18 16       	cp	r1, r24
     6fa:	0c f4       	brge	.+2      	; 0x6fe <SoC_ADC+0x204>
     6fc:	cd c0       	rjmp	.+410    	; 0x898 <SoC_ADC+0x39e>
     6fe:	26 e6       	ldi	r18, 0x66	; 102
			soc = 40;
		 } //end else if
		else if (volt < 3.35 && volt > 3.30) {
     700:	36 e6       	ldi	r19, 0x66	; 102
     702:	46 e5       	ldi	r20, 0x56	; 86
     704:	50 e4       	ldi	r21, 0x40	; 64
     706:	c5 01       	movw	r24, r10
     708:	b4 01       	movw	r22, r8
     70a:	71 d5       	rcall	.+2786   	; 0x11ee <__cmpsf2>
     70c:	88 23       	and	r24, r24
     70e:	54 f4       	brge	.+20     	; 0x724 <SoC_ADC+0x22a>
     710:	23 e3       	ldi	r18, 0x33	; 51
     712:	33 e3       	ldi	r19, 0x33	; 51
     714:	43 e5       	ldi	r20, 0x53	; 83
     716:	50 e4       	ldi	r21, 0x40	; 64
     718:	c5 01       	movw	r24, r10
     71a:	b4 01       	movw	r22, r8
     71c:	86 d6       	rcall	.+3340   	; 0x142a <__gesf2>
     71e:	18 16       	cp	r1, r24
     720:	0c f4       	brge	.+2      	; 0x724 <SoC_ADC+0x22a>
     722:	bd c0       	rjmp	.+378    	; 0x89e <SoC_ADC+0x3a4>
     724:	23 e3       	ldi	r18, 0x33	; 51
			soc = 30;
		 } //end else if
		else if (volt < 3.30) {
     726:	33 e3       	ldi	r19, 0x33	; 51
     728:	43 e5       	ldi	r20, 0x53	; 83
     72a:	50 e4       	ldi	r21, 0x40	; 64
     72c:	c5 01       	movw	r24, r10
     72e:	b4 01       	movw	r22, r8
     730:	5e d5       	rcall	.+2748   	; 0x11ee <__cmpsf2>
     732:	88 23       	and	r24, r24
     734:	0c f4       	brge	.+2      	; 0x738 <SoC_ADC+0x23e>
     736:	b6 c0       	rjmp	.+364    	; 0x8a4 <SoC_ADC+0x3aa>
     738:	81 e3       	ldi	r24, 0x31	; 49
			soc = 20;
		}
		else {
			UART0_putstring("Error Reading State of Charge \n\n\r");
     73a:	93 e0       	ldi	r25, 0x03	; 3
     73c:	48 d4       	rcall	.+2192   	; 0xfce <UART0_putstring>
     73e:	80 e0       	ldi	r24, 0x00	; 0
// Description: Temperature measurement via ADC.
/*========================================================================================*/

int SoC_ADC(float volt, float amp){
	// return value
	int soc = 0;
     740:	90 e0       	ldi	r25, 0x00	; 0
     742:	c7 c0       	rjmp	.+398    	; 0x8d2 <SoC_ADC+0x3d8>
     744:	20 e0       	ldi	r18, 0x00	; 0
		}
		else {
			UART0_putstring("Error Reading State of Charge \n\n\r");
		} //end else
	}
	else if(amp > 3){
     746:	30 e0       	ldi	r19, 0x00	; 0
     748:	40 e4       	ldi	r20, 0x40	; 64
     74a:	50 e4       	ldi	r21, 0x40	; 64
     74c:	c7 01       	movw	r24, r14
     74e:	b6 01       	movw	r22, r12
     750:	6c d6       	rcall	.+3288   	; 0x142a <__gesf2>
     752:	18 16       	cp	r1, r24
     754:	0c f0       	brlt	.+2      	; 0x758 <SoC_ADC+0x25e>
     756:	79 c0       	rjmp	.+242    	; 0x84a <SoC_ADC+0x350>
     758:	23 e3       	ldi	r18, 0x33	; 51
		if (volt > 3.80) {
     75a:	33 e3       	ldi	r19, 0x33	; 51
     75c:	43 e7       	ldi	r20, 0x73	; 115
     75e:	50 e4       	ldi	r21, 0x40	; 64
     760:	c5 01       	movw	r24, r10
     762:	b4 01       	movw	r22, r8
     764:	62 d6       	rcall	.+3268   	; 0x142a <__gesf2>
     766:	18 16       	cp	r1, r24
     768:	0c f4       	brge	.+2      	; 0x76c <SoC_ADC+0x272>
     76a:	9f c0       	rjmp	.+318    	; 0x8aa <SoC_ADC+0x3b0>
     76c:	23 e3       	ldi	r18, 0x33	; 51
			soc = 80;
		} //end if
		else if (volt < 3.80 && volt > 3.75) {
     76e:	33 e3       	ldi	r19, 0x33	; 51
     770:	43 e7       	ldi	r20, 0x73	; 115
     772:	50 e4       	ldi	r21, 0x40	; 64
     774:	c5 01       	movw	r24, r10
     776:	b4 01       	movw	r22, r8
     778:	3a d5       	rcall	.+2676   	; 0x11ee <__cmpsf2>
     77a:	88 23       	and	r24, r24
     77c:	54 f4       	brge	.+20     	; 0x792 <SoC_ADC+0x298>
     77e:	20 e0       	ldi	r18, 0x00	; 0
     780:	30 e0       	ldi	r19, 0x00	; 0
     782:	40 e7       	ldi	r20, 0x70	; 112
     784:	50 e4       	ldi	r21, 0x40	; 64
     786:	c5 01       	movw	r24, r10
     788:	b4 01       	movw	r22, r8
     78a:	4f d6       	rcall	.+3230   	; 0x142a <__gesf2>
     78c:	18 16       	cp	r1, r24
     78e:	0c f4       	brge	.+2      	; 0x792 <SoC_ADC+0x298>
     790:	8f c0       	rjmp	.+286    	; 0x8b0 <SoC_ADC+0x3b6>
     792:	20 e0       	ldi	r18, 0x00	; 0
			soc = 70;
		} //end else if
		else if (volt < 3.75 && volt > 3.65) {
     794:	30 e0       	ldi	r19, 0x00	; 0
     796:	40 e7       	ldi	r20, 0x70	; 112
     798:	50 e4       	ldi	r21, 0x40	; 64
     79a:	c5 01       	movw	r24, r10
     79c:	b4 01       	movw	r22, r8
     79e:	27 d5       	rcall	.+2638   	; 0x11ee <__cmpsf2>
     7a0:	88 23       	and	r24, r24
     7a2:	54 f4       	brge	.+20     	; 0x7b8 <SoC_ADC+0x2be>
     7a4:	2a e9       	ldi	r18, 0x9A	; 154
     7a6:	39 e9       	ldi	r19, 0x99	; 153
     7a8:	49 e6       	ldi	r20, 0x69	; 105
     7aa:	50 e4       	ldi	r21, 0x40	; 64
     7ac:	c5 01       	movw	r24, r10
     7ae:	b4 01       	movw	r22, r8
     7b0:	3c d6       	rcall	.+3192   	; 0x142a <__gesf2>
     7b2:	18 16       	cp	r1, r24
     7b4:	0c f4       	brge	.+2      	; 0x7b8 <SoC_ADC+0x2be>
     7b6:	7f c0       	rjmp	.+254    	; 0x8b6 <SoC_ADC+0x3bc>
			soc = 60;
		} //end else if
		else if (volt < 3.65 && volt > 3.50) {
     7b8:	2a e9       	ldi	r18, 0x9A	; 154
     7ba:	39 e9       	ldi	r19, 0x99	; 153
     7bc:	49 e6       	ldi	r20, 0x69	; 105
     7be:	50 e4       	ldi	r21, 0x40	; 64
     7c0:	c5 01       	movw	r24, r10
     7c2:	b4 01       	movw	r22, r8
     7c4:	14 d5       	rcall	.+2600   	; 0x11ee <__cmpsf2>
     7c6:	88 23       	and	r24, r24
     7c8:	54 f4       	brge	.+20     	; 0x7de <SoC_ADC+0x2e4>
     7ca:	20 e0       	ldi	r18, 0x00	; 0
     7cc:	30 e0       	ldi	r19, 0x00	; 0
     7ce:	40 e6       	ldi	r20, 0x60	; 96
     7d0:	50 e4       	ldi	r21, 0x40	; 64
     7d2:	c5 01       	movw	r24, r10
     7d4:	b4 01       	movw	r22, r8
     7d6:	29 d6       	rcall	.+3154   	; 0x142a <__gesf2>
     7d8:	18 16       	cp	r1, r24
     7da:	0c f4       	brge	.+2      	; 0x7de <SoC_ADC+0x2e4>
     7dc:	6f c0       	rjmp	.+222    	; 0x8bc <SoC_ADC+0x3c2>
			soc = 50;
		} //end else if
		else if (volt < 3.50 && volt > 3.40) {
     7de:	20 e0       	ldi	r18, 0x00	; 0
     7e0:	30 e0       	ldi	r19, 0x00	; 0
     7e2:	40 e6       	ldi	r20, 0x60	; 96
     7e4:	50 e4       	ldi	r21, 0x40	; 64
     7e6:	c5 01       	movw	r24, r10
     7e8:	b4 01       	movw	r22, r8
     7ea:	01 d5       	rcall	.+2562   	; 0x11ee <__cmpsf2>
     7ec:	88 23       	and	r24, r24
     7ee:	54 f4       	brge	.+20     	; 0x804 <SoC_ADC+0x30a>
     7f0:	2a e9       	ldi	r18, 0x9A	; 154
     7f2:	39 e9       	ldi	r19, 0x99	; 153
     7f4:	49 e5       	ldi	r20, 0x59	; 89
     7f6:	50 e4       	ldi	r21, 0x40	; 64
     7f8:	c5 01       	movw	r24, r10
     7fa:	b4 01       	movw	r22, r8
     7fc:	16 d6       	rcall	.+3116   	; 0x142a <__gesf2>
     7fe:	18 16       	cp	r1, r24
     800:	0c f4       	brge	.+2      	; 0x804 <SoC_ADC+0x30a>
			soc = 40;
		} //end else if
		else if (volt < 3.40 && volt > 3.25) {
     802:	5f c0       	rjmp	.+190    	; 0x8c2 <SoC_ADC+0x3c8>
     804:	2a e9       	ldi	r18, 0x9A	; 154
     806:	39 e9       	ldi	r19, 0x99	; 153
     808:	49 e5       	ldi	r20, 0x59	; 89
     80a:	50 e4       	ldi	r21, 0x40	; 64
     80c:	c5 01       	movw	r24, r10
     80e:	b4 01       	movw	r22, r8
     810:	ee d4       	rcall	.+2524   	; 0x11ee <__cmpsf2>
     812:	88 23       	and	r24, r24
     814:	54 f4       	brge	.+20     	; 0x82a <SoC_ADC+0x330>
     816:	20 e0       	ldi	r18, 0x00	; 0
     818:	30 e0       	ldi	r19, 0x00	; 0
     81a:	40 e5       	ldi	r20, 0x50	; 80
     81c:	50 e4       	ldi	r21, 0x40	; 64
     81e:	c5 01       	movw	r24, r10
     820:	b4 01       	movw	r22, r8
     822:	03 d6       	rcall	.+3078   	; 0x142a <__gesf2>
     824:	18 16       	cp	r1, r24
     826:	0c f4       	brge	.+2      	; 0x82a <SoC_ADC+0x330>
     828:	4f c0       	rjmp	.+158    	; 0x8c8 <SoC_ADC+0x3ce>
     82a:	20 e0       	ldi	r18, 0x00	; 0
			soc = 30;
		} //end else if
		else if (volt < 3.25) {
     82c:	30 e0       	ldi	r19, 0x00	; 0
     82e:	40 e5       	ldi	r20, 0x50	; 80
     830:	50 e4       	ldi	r21, 0x40	; 64
     832:	c5 01       	movw	r24, r10
     834:	b4 01       	movw	r22, r8
     836:	db d4       	rcall	.+2486   	; 0x11ee <__cmpsf2>
     838:	88 23       	and	r24, r24
     83a:	0c f4       	brge	.+2      	; 0x83e <SoC_ADC+0x344>
     83c:	48 c0       	rjmp	.+144    	; 0x8ce <SoC_ADC+0x3d4>
     83e:	81 e3       	ldi	r24, 0x31	; 49
     840:	93 e0       	ldi	r25, 0x03	; 3
			soc = 20;
		} //end else if
		else {
			UART0_putstring("Error Reading State of Charge \n\n\r");
     842:	c5 d3       	rcall	.+1930   	; 0xfce <UART0_putstring>
     844:	80 e0       	ldi	r24, 0x00	; 0
     846:	90 e0       	ldi	r25, 0x00	; 0
     848:	44 c0       	rjmp	.+136    	; 0x8d2 <SoC_ADC+0x3d8>
// Description: Temperature measurement via ADC.
/*========================================================================================*/

int SoC_ADC(float volt, float amp){
	// return value
	int soc = 0;
     84a:	83 e5       	ldi	r24, 0x53	; 83
     84c:	93 e0       	ldi	r25, 0x03	; 3
     84e:	bf d3       	rcall	.+1918   	; 0xfce <UART0_putstring>
		else {
			UART0_putstring("Error Reading State of Charge \n\n\r");
		} //end else
	}
	else{
		UART0_putstring("Battery Charging");
     850:	80 e0       	ldi	r24, 0x00	; 0
     852:	90 e0       	ldi	r25, 0x00	; 0
     854:	3e c0       	rjmp	.+124    	; 0x8d2 <SoC_ADC+0x3d8>
     856:	80 e5       	ldi	r24, 0x50	; 80
// Description: Temperature measurement via ADC.
/*========================================================================================*/

int SoC_ADC(float volt, float amp){
	// return value
	int soc = 0;
     858:	90 e0       	ldi	r25, 0x00	; 0
     85a:	3b c0       	rjmp	.+118    	; 0x8d2 <SoC_ADC+0x3d8>
     85c:	86 e4       	ldi	r24, 0x46	; 70
	// Check Battery voltage and current
	
	// Lookup table
	if (amp < 0.6 && amp > 0){
		if (volt > 4.00) {
			soc = 80;
     85e:	90 e0       	ldi	r25, 0x00	; 0
     860:	38 c0       	rjmp	.+112    	; 0x8d2 <SoC_ADC+0x3d8>
     862:	8c e3       	ldi	r24, 0x3C	; 60
		} //end if
		else if (volt < 4.00 && volt > 3.80) {
			soc = 70;
     864:	90 e0       	ldi	r25, 0x00	; 0
     866:	35 c0       	rjmp	.+106    	; 0x8d2 <SoC_ADC+0x3d8>
     868:	82 e3       	ldi	r24, 0x32	; 50
		} //end else if
		else if (volt < 3.80 && volt > 3.75) {
			soc = 60;
     86a:	90 e0       	ldi	r25, 0x00	; 0
     86c:	32 c0       	rjmp	.+100    	; 0x8d2 <SoC_ADC+0x3d8>
     86e:	88 e2       	ldi	r24, 0x28	; 40
		} //end else if
		else if (volt < 3.75 && volt > 3.70) {
			soc = 50;
     870:	90 e0       	ldi	r25, 0x00	; 0
     872:	2f c0       	rjmp	.+94     	; 0x8d2 <SoC_ADC+0x3d8>
     874:	8e e1       	ldi	r24, 0x1E	; 30
		} //end else if
		else if (volt < 3.70 && volt > 3.60) {
			soc = 40;
     876:	90 e0       	ldi	r25, 0x00	; 0
     878:	2c c0       	rjmp	.+88     	; 0x8d2 <SoC_ADC+0x3d8>
     87a:	84 e1       	ldi	r24, 0x14	; 20
		} //end else if
		else if (volt < 3.60 && volt > 3.5) {
			soc = 30;
     87c:	90 e0       	ldi	r25, 0x00	; 0
     87e:	29 c0       	rjmp	.+82     	; 0x8d2 <SoC_ADC+0x3d8>
     880:	80 e5       	ldi	r24, 0x50	; 80
		} //end else if
		else if (volt < 3.50) {
			soc = 20;
     882:	90 e0       	ldi	r25, 0x00	; 0
     884:	26 c0       	rjmp	.+76     	; 0x8d2 <SoC_ADC+0x3d8>
     886:	86 e4       	ldi	r24, 0x46	; 70
			UART0_putstring("Error Reading State of Charge \n\n\r");
		} //end else
	}
	else if(amp > 0.6 && amp < 3){
		if (volt > 3.75) {
			soc = 80;
     888:	90 e0       	ldi	r25, 0x00	; 0
     88a:	23 c0       	rjmp	.+70     	; 0x8d2 <SoC_ADC+0x3d8>
     88c:	8c e3       	ldi	r24, 0x3C	; 60
		} //end if
		else if (volt < 3.75 && volt > 3.65) {
			soc = 70;
     88e:	90 e0       	ldi	r25, 0x00	; 0
     890:	20 c0       	rjmp	.+64     	; 0x8d2 <SoC_ADC+0x3d8>
     892:	82 e3       	ldi	r24, 0x32	; 50
		} //end else if
		else if (volt < 3.65 && volt > 3.55) {
			soc = 60;
     894:	90 e0       	ldi	r25, 0x00	; 0
     896:	1d c0       	rjmp	.+58     	; 0x8d2 <SoC_ADC+0x3d8>
     898:	88 e2       	ldi	r24, 0x28	; 40
		} //end else if
		else if (volt < 3.55 && volt > 3.45) {
			soc = 50;
     89a:	90 e0       	ldi	r25, 0x00	; 0
     89c:	1a c0       	rjmp	.+52     	; 0x8d2 <SoC_ADC+0x3d8>
     89e:	8e e1       	ldi	r24, 0x1E	; 30
		} //end else if
 		else if (volt < 3.45 && volt > 3.35) {
			soc = 40;
     8a0:	90 e0       	ldi	r25, 0x00	; 0
     8a2:	17 c0       	rjmp	.+46     	; 0x8d2 <SoC_ADC+0x3d8>
     8a4:	84 e1       	ldi	r24, 0x14	; 20
		 } //end else if
		else if (volt < 3.35 && volt > 3.30) {
			soc = 30;
     8a6:	90 e0       	ldi	r25, 0x00	; 0
     8a8:	14 c0       	rjmp	.+40     	; 0x8d2 <SoC_ADC+0x3d8>
     8aa:	80 e5       	ldi	r24, 0x50	; 80
		 } //end else if
		else if (volt < 3.30) {
			soc = 20;
     8ac:	90 e0       	ldi	r25, 0x00	; 0
     8ae:	11 c0       	rjmp	.+34     	; 0x8d2 <SoC_ADC+0x3d8>
     8b0:	86 e4       	ldi	r24, 0x46	; 70
			UART0_putstring("Error Reading State of Charge \n\n\r");
		} //end else
	}
	else if(amp > 3){
		if (volt > 3.80) {
			soc = 80;
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	0e c0       	rjmp	.+28     	; 0x8d2 <SoC_ADC+0x3d8>
     8b6:	8c e3       	ldi	r24, 0x3C	; 60
		} //end if
		else if (volt < 3.80 && volt > 3.75) {
			soc = 70;
     8b8:	90 e0       	ldi	r25, 0x00	; 0
     8ba:	0b c0       	rjmp	.+22     	; 0x8d2 <SoC_ADC+0x3d8>
     8bc:	82 e3       	ldi	r24, 0x32	; 50
		} //end else if
		else if (volt < 3.75 && volt > 3.65) {
			soc = 60;
     8be:	90 e0       	ldi	r25, 0x00	; 0
     8c0:	08 c0       	rjmp	.+16     	; 0x8d2 <SoC_ADC+0x3d8>
     8c2:	88 e2       	ldi	r24, 0x28	; 40
		} //end else if
		else if (volt < 3.65 && volt > 3.50) {
			soc = 50;
     8c4:	90 e0       	ldi	r25, 0x00	; 0
     8c6:	05 c0       	rjmp	.+10     	; 0x8d2 <SoC_ADC+0x3d8>
     8c8:	8e e1       	ldi	r24, 0x1E	; 30
		} //end else if
		else if (volt < 3.50 && volt > 3.40) {
			soc = 40;
     8ca:	90 e0       	ldi	r25, 0x00	; 0
     8cc:	02 c0       	rjmp	.+4      	; 0x8d2 <SoC_ADC+0x3d8>
     8ce:	84 e1       	ldi	r24, 0x14	; 20
		} //end else if
		else if (volt < 3.40 && volt > 3.25) {
			soc = 30;
     8d0:	90 e0       	ldi	r25, 0x00	; 0
     8d2:	ff 90       	pop	r15
     8d4:	ef 90       	pop	r14
		} //end else if
		else if (volt < 3.25) {
			soc = 20;
     8d6:	df 90       	pop	r13
     8d8:	cf 90       	pop	r12
	}
	else{
		UART0_putstring("Battery Charging");
	}
	return soc;
}
     8da:	bf 90       	pop	r11
     8dc:	af 90       	pop	r10
     8de:	9f 90       	pop	r9
     8e0:	8f 90       	pop	r8
     8e2:	08 95       	ret

000008e4 <Set_GPIO>:
void Set_GPIO(int gpio_num){
	
	int gpio = 0x01; // initialize gpio selection to bit 0
	
	// PORT H
	if (gpio_num < 7){
     8e4:	87 30       	cpi	r24, 0x07	; 7
     8e6:	91 05       	cpc	r25, r1
     8e8:	7c f4       	brge	.+30     	; 0x908 <Set_GPIO+0x24>
		gpio = gpio << gpio_num; // shift to correct bit
		PORTH |= gpio; // set selected pin high
     8ea:	e2 e0       	ldi	r30, 0x02	; 2
     8ec:	f1 e0       	ldi	r31, 0x01	; 1
     8ee:	40 81       	ld	r20, Z
     8f0:	21 e0       	ldi	r18, 0x01	; 1
     8f2:	30 e0       	ldi	r19, 0x00	; 0
     8f4:	b9 01       	movw	r22, r18
     8f6:	02 c0       	rjmp	.+4      	; 0x8fc <Set_GPIO+0x18>
     8f8:	66 0f       	add	r22, r22
     8fa:	77 1f       	adc	r23, r23
     8fc:	8a 95       	dec	r24
     8fe:	e2 f7       	brpl	.-8      	; 0x8f8 <Set_GPIO+0x14>
     900:	cb 01       	movw	r24, r22
     902:	84 2b       	or	r24, r20
     904:	80 83       	st	Z, r24
     906:	08 95       	ret
	}
	// PORT L
	else if (gpio_num >= 7 && gpio_num < 10){
     908:	9c 01       	movw	r18, r24
     90a:	27 50       	subi	r18, 0x07	; 7
     90c:	31 09       	sbc	r19, r1
     90e:	23 30       	cpi	r18, 0x03	; 3
     910:	31 05       	cpc	r19, r1
     912:	80 f4       	brcc	.+32     	; 0x934 <Set_GPIO+0x50>
		gpio = gpio << (gpio_num - 6); // shift to correct bit
		PORTL |= gpio; // set selected pin high
     914:	eb e0       	ldi	r30, 0x0B	; 11
     916:	f1 e0       	ldi	r31, 0x01	; 1
     918:	40 81       	ld	r20, Z
     91a:	06 97       	sbiw	r24, 0x06	; 6
     91c:	21 e0       	ldi	r18, 0x01	; 1
     91e:	30 e0       	ldi	r19, 0x00	; 0
     920:	b9 01       	movw	r22, r18
     922:	02 c0       	rjmp	.+4      	; 0x928 <Set_GPIO+0x44>
     924:	66 0f       	add	r22, r22
     926:	77 1f       	adc	r23, r23
     928:	8a 95       	dec	r24
     92a:	e2 f7       	brpl	.-8      	; 0x924 <Set_GPIO+0x40>
     92c:	cb 01       	movw	r24, r22
     92e:	84 2b       	or	r24, r20
     930:	80 83       	st	Z, r24
     932:	08 95       	ret
	}
	// PORT A
	else if(gpio_num >= 10 && gpio_num < 14){
     934:	9c 01       	movw	r18, r24
     936:	2a 50       	subi	r18, 0x0A	; 10
     938:	31 09       	sbc	r19, r1
     93a:	24 30       	cpi	r18, 0x04	; 4
     93c:	31 05       	cpc	r19, r1
     93e:	70 f4       	brcc	.+28     	; 0x95c <Set_GPIO+0x78>
		gpio = gpio << (gpio_num - 6); // shift to correct bit
		PORTA |= gpio; // set selected pin high
     940:	42 b1       	in	r20, 0x02	; 2
     942:	06 97       	sbiw	r24, 0x06	; 6
     944:	21 e0       	ldi	r18, 0x01	; 1
     946:	30 e0       	ldi	r19, 0x00	; 0
     948:	b9 01       	movw	r22, r18
     94a:	02 c0       	rjmp	.+4      	; 0x950 <Set_GPIO+0x6c>
     94c:	66 0f       	add	r22, r22
     94e:	77 1f       	adc	r23, r23
     950:	8a 95       	dec	r24
     952:	e2 f7       	brpl	.-8      	; 0x94c <Set_GPIO+0x68>
     954:	cb 01       	movw	r24, r22
     956:	84 2b       	or	r24, r20
     958:	82 b9       	out	0x02, r24	; 2
     95a:	08 95       	ret
	}
	// PORT J
	else if(gpio_num >= 14 && gpio_num < 21){
     95c:	9c 01       	movw	r18, r24
     95e:	2e 50       	subi	r18, 0x0E	; 14
     960:	31 09       	sbc	r19, r1
     962:	27 30       	cpi	r18, 0x07	; 7
     964:	31 05       	cpc	r19, r1
     966:	80 f4       	brcc	.+32     	; 0x988 <Set_GPIO+0xa4>
		gpio = gpio << (gpio_num - 14); // shift to correct bit
		PORTJ |= gpio; // set selected pin high
     968:	e5 e0       	ldi	r30, 0x05	; 5
     96a:	f1 e0       	ldi	r31, 0x01	; 1
     96c:	40 81       	ld	r20, Z
     96e:	c9 01       	movw	r24, r18
     970:	21 e0       	ldi	r18, 0x01	; 1
     972:	30 e0       	ldi	r19, 0x00	; 0
     974:	b9 01       	movw	r22, r18
     976:	02 c0       	rjmp	.+4      	; 0x97c <Set_GPIO+0x98>
     978:	66 0f       	add	r22, r22
     97a:	77 1f       	adc	r23, r23
     97c:	8a 95       	dec	r24
     97e:	e2 f7       	brpl	.-8      	; 0x978 <Set_GPIO+0x94>
     980:	cb 01       	movw	r24, r22
     982:	84 2b       	or	r24, r20
     984:	80 83       	st	Z, r24
     986:	08 95       	ret
	}
	// PORT C
	else if (gpio_num >= 21 && gpio_num < 29){
     988:	9c 01       	movw	r18, r24
     98a:	25 51       	subi	r18, 0x15	; 21
     98c:	31 09       	sbc	r19, r1
     98e:	28 30       	cpi	r18, 0x08	; 8
     990:	31 05       	cpc	r19, r1
     992:	68 f4       	brcc	.+26     	; 0x9ae <Set_GPIO+0xca>
		gpio = gpio << (gpio_num - 21); // shift to correct bit
		PORTC |= gpio; // set selected pin high
     994:	48 b1       	in	r20, 0x08	; 8
     996:	c9 01       	movw	r24, r18
     998:	21 e0       	ldi	r18, 0x01	; 1
     99a:	30 e0       	ldi	r19, 0x00	; 0
     99c:	b9 01       	movw	r22, r18
     99e:	02 c0       	rjmp	.+4      	; 0x9a4 <Set_GPIO+0xc0>
     9a0:	66 0f       	add	r22, r22
     9a2:	77 1f       	adc	r23, r23
     9a4:	8a 95       	dec	r24
     9a6:	e2 f7       	brpl	.-8      	; 0x9a0 <Set_GPIO+0xbc>
     9a8:	cb 01       	movw	r24, r22
     9aa:	84 2b       	or	r24, r20
     9ac:	88 b9       	out	0x08, r24	; 8
     9ae:	08 95       	ret

000009b0 <Clear_GPIO>:
	
	int gpio = 0x01; // initialize gpio selection to bit 0
	int gpio_mask = 0xFE; //gpio mask
	
	// PORT H
	if (gpio_num < 7){
     9b0:	87 30       	cpi	r24, 0x07	; 7
     9b2:	91 05       	cpc	r25, r1
     9b4:	84 f4       	brge	.+32     	; 0x9d6 <Clear_GPIO+0x26>
		gpio = gpio << gpio_num; // shift to correct bit
		PORTH &= (gpio^gpio_mask); // use mask to clear bit
     9b6:	e2 e0       	ldi	r30, 0x02	; 2
     9b8:	f1 e0       	ldi	r31, 0x01	; 1
     9ba:	90 81       	ld	r25, Z
     9bc:	41 e0       	ldi	r20, 0x01	; 1
     9be:	50 e0       	ldi	r21, 0x00	; 0
     9c0:	02 c0       	rjmp	.+4      	; 0x9c6 <Clear_GPIO+0x16>
     9c2:	44 0f       	add	r20, r20
     9c4:	55 1f       	adc	r21, r21
     9c6:	8a 95       	dec	r24
     9c8:	e2 f7       	brpl	.-8      	; 0x9c2 <Clear_GPIO+0x12>
     9ca:	2e ef       	ldi	r18, 0xFE	; 254
     9cc:	84 2f       	mov	r24, r20
     9ce:	82 27       	eor	r24, r18
     9d0:	89 23       	and	r24, r25
     9d2:	80 83       	st	Z, r24
     9d4:	08 95       	ret
	}
	// PORT L
	else if (gpio_num >= 7 && gpio_num < 10){
     9d6:	9c 01       	movw	r18, r24
     9d8:	27 50       	subi	r18, 0x07	; 7
     9da:	31 09       	sbc	r19, r1
     9dc:	23 30       	cpi	r18, 0x03	; 3
     9de:	31 05       	cpc	r19, r1
     9e0:	90 f4       	brcc	.+36     	; 0xa06 <Clear_GPIO+0x56>
		gpio = gpio << (gpio_num - 6); // shift to correct bit
		PORTL &= (gpio^gpio_mask); // use mask to clear bit
     9e2:	eb e0       	ldi	r30, 0x0B	; 11
     9e4:	f1 e0       	ldi	r31, 0x01	; 1
     9e6:	20 81       	ld	r18, Z
     9e8:	ac 01       	movw	r20, r24
     9ea:	46 50       	subi	r20, 0x06	; 6
     9ec:	51 09       	sbc	r21, r1
     9ee:	81 e0       	ldi	r24, 0x01	; 1
     9f0:	90 e0       	ldi	r25, 0x00	; 0
     9f2:	02 c0       	rjmp	.+4      	; 0x9f8 <Clear_GPIO+0x48>
     9f4:	88 0f       	add	r24, r24
     9f6:	99 1f       	adc	r25, r25
     9f8:	4a 95       	dec	r20
     9fa:	e2 f7       	brpl	.-8      	; 0x9f4 <Clear_GPIO+0x44>
     9fc:	9e ef       	ldi	r25, 0xFE	; 254
     9fe:	89 27       	eor	r24, r25
     a00:	82 23       	and	r24, r18
     a02:	80 83       	st	Z, r24
     a04:	08 95       	ret
	}
	// PORT A
	else if(gpio_num >= 10 && gpio_num < 14){
     a06:	9c 01       	movw	r18, r24
     a08:	2a 50       	subi	r18, 0x0A	; 10
     a0a:	31 09       	sbc	r19, r1
     a0c:	24 30       	cpi	r18, 0x04	; 4
     a0e:	31 05       	cpc	r19, r1
     a10:	80 f4       	brcc	.+32     	; 0xa32 <Clear_GPIO+0x82>
		gpio = gpio << (gpio_num - 6); // shift to correct bit
		PORTA &= (gpio^gpio_mask); // use mask to clear bit
     a12:	22 b1       	in	r18, 0x02	; 2
     a14:	ac 01       	movw	r20, r24
     a16:	46 50       	subi	r20, 0x06	; 6
     a18:	51 09       	sbc	r21, r1
     a1a:	81 e0       	ldi	r24, 0x01	; 1
     a1c:	90 e0       	ldi	r25, 0x00	; 0
     a1e:	02 c0       	rjmp	.+4      	; 0xa24 <Clear_GPIO+0x74>
     a20:	88 0f       	add	r24, r24
     a22:	99 1f       	adc	r25, r25
     a24:	4a 95       	dec	r20
     a26:	e2 f7       	brpl	.-8      	; 0xa20 <Clear_GPIO+0x70>
     a28:	9e ef       	ldi	r25, 0xFE	; 254
     a2a:	89 27       	eor	r24, r25
     a2c:	82 23       	and	r24, r18
     a2e:	82 b9       	out	0x02, r24	; 2
     a30:	08 95       	ret
	}
	// PORT J
	else if(gpio_num >= 14 && gpio_num < 21){
     a32:	9c 01       	movw	r18, r24
     a34:	2e 50       	subi	r18, 0x0E	; 14
     a36:	31 09       	sbc	r19, r1
     a38:	27 30       	cpi	r18, 0x07	; 7
     a3a:	31 05       	cpc	r19, r1
     a3c:	90 f4       	brcc	.+36     	; 0xa62 <Clear_GPIO+0xb2>
		gpio = gpio << (gpio_num - 14); // shift to correct bit
		PORTJ &= (gpio^gpio_mask); // use mask to clear bit
     a3e:	e5 e0       	ldi	r30, 0x05	; 5
     a40:	f1 e0       	ldi	r31, 0x01	; 1
     a42:	20 81       	ld	r18, Z
     a44:	ac 01       	movw	r20, r24
     a46:	4e 50       	subi	r20, 0x0E	; 14
     a48:	51 09       	sbc	r21, r1
     a4a:	81 e0       	ldi	r24, 0x01	; 1
     a4c:	90 e0       	ldi	r25, 0x00	; 0
     a4e:	02 c0       	rjmp	.+4      	; 0xa54 <Clear_GPIO+0xa4>
     a50:	88 0f       	add	r24, r24
     a52:	99 1f       	adc	r25, r25
     a54:	4a 95       	dec	r20
     a56:	e2 f7       	brpl	.-8      	; 0xa50 <Clear_GPIO+0xa0>
     a58:	9e ef       	ldi	r25, 0xFE	; 254
     a5a:	89 27       	eor	r24, r25
     a5c:	82 23       	and	r24, r18
     a5e:	80 83       	st	Z, r24
     a60:	08 95       	ret
	}
	// PORT C
	else if (gpio_num >= 21 && gpio_num < 29){
     a62:	9c 01       	movw	r18, r24
     a64:	25 51       	subi	r18, 0x15	; 21
     a66:	31 09       	sbc	r19, r1
     a68:	28 30       	cpi	r18, 0x08	; 8
     a6a:	31 05       	cpc	r19, r1
     a6c:	78 f4       	brcc	.+30     	; 0xa8c <Clear_GPIO+0xdc>
		gpio = gpio << (gpio_num - 21); // shift to correct bit
		PORTC &= (gpio^gpio_mask); // use mask to clear bit
     a6e:	28 b1       	in	r18, 0x08	; 8
     a70:	45 97       	sbiw	r24, 0x15	; 21
     a72:	41 e0       	ldi	r20, 0x01	; 1
     a74:	50 e0       	ldi	r21, 0x00	; 0
     a76:	ba 01       	movw	r22, r20
     a78:	02 c0       	rjmp	.+4      	; 0xa7e <Clear_GPIO+0xce>
     a7a:	66 0f       	add	r22, r22
     a7c:	77 1f       	adc	r23, r23
     a7e:	8a 95       	dec	r24
     a80:	e2 f7       	brpl	.-8      	; 0xa7a <Clear_GPIO+0xca>
     a82:	cb 01       	movw	r24, r22
     a84:	9e ef       	ldi	r25, 0xFE	; 254
     a86:	89 27       	eor	r24, r25
     a88:	82 23       	and	r24, r18
     a8a:	88 b9       	out	0x08, r24	; 8
     a8c:	08 95       	ret

00000a8e <Update_TELEM>:
// Author: Ben Wedemire
// Date: 2019-03-17
// Description: Determines if a sub System can be powered up
/*========================================================================================*/

void subSysRqt () {
     a8e:	cf 93       	push	r28
     a90:	df 93       	push	r29
     a92:	ec 01       	movw	r28, r24
     a94:	8b e0       	ldi	r24, 0x0B	; 11
     a96:	90 e0       	ldi	r25, 0x00	; 0
     a98:	25 df       	rcall	.-438    	; 0x8e4 <Set_GPIO>
     a9a:	82 e0       	ldi	r24, 0x02	; 2
     a9c:	90 e0       	ldi	r25, 0x00	; 0
     a9e:	e1 db       	rcall	.-2110   	; 0x262 <Volt_ADC>
     aa0:	2a e9       	ldi	r18, 0x9A	; 154
     aa2:	39 e9       	ldi	r19, 0x99	; 153
     aa4:	49 e9       	ldi	r20, 0x99	; 153
     aa6:	50 e4       	ldi	r21, 0x40	; 64
     aa8:	a2 d3       	rcall	.+1860   	; 0x11ee <__cmpsf2>
     aaa:	88 23       	and	r24, r24
     aac:	b4 f3       	brlt	.-20     	; 0xa9a <Update_TELEM+0xc>
     aae:	82 e0       	ldi	r24, 0x02	; 2
     ab0:	90 e0       	ldi	r25, 0x00	; 0
     ab2:	3c dc       	rcall	.-1928   	; 0x32c <Amp_ADC>
     ab4:	68 83       	st	Y, r22
     ab6:	79 83       	std	Y+1, r23	; 0x01
     ab8:	8a 83       	std	Y+2, r24	; 0x02
     aba:	9b 83       	std	Y+3, r25	; 0x03
     abc:	83 e0       	ldi	r24, 0x03	; 3
     abe:	90 e0       	ldi	r25, 0x00	; 0
     ac0:	35 dc       	rcall	.-1942   	; 0x32c <Amp_ADC>
     ac2:	6c 83       	std	Y+4, r22	; 0x04
     ac4:	7d 83       	std	Y+5, r23	; 0x05
     ac6:	8e 83       	std	Y+6, r24	; 0x06
     ac8:	9f 83       	std	Y+7, r25	; 0x07
     aca:	81 e0       	ldi	r24, 0x01	; 1
     acc:	90 e0       	ldi	r25, 0x00	; 0
     ace:	2e dc       	rcall	.-1956   	; 0x32c <Amp_ADC>
     ad0:	68 87       	std	Y+8, r22	; 0x08
     ad2:	79 87       	std	Y+9, r23	; 0x09
     ad4:	8a 87       	std	Y+10, r24	; 0x0a
     ad6:	9b 87       	std	Y+11, r25	; 0x0b
     ad8:	80 e0       	ldi	r24, 0x00	; 0
     ada:	90 e0       	ldi	r25, 0x00	; 0
     adc:	27 dc       	rcall	.-1970   	; 0x32c <Amp_ADC>
     ade:	6c 87       	std	Y+12, r22	; 0x0c
     ae0:	7d 87       	std	Y+13, r23	; 0x0d
     ae2:	8e 87       	std	Y+14, r24	; 0x0e
     ae4:	9f 87       	std	Y+15, r25	; 0x0f
     ae6:	85 e0       	ldi	r24, 0x05	; 5
     ae8:	90 e0       	ldi	r25, 0x00	; 0
     aea:	20 dc       	rcall	.-1984   	; 0x32c <Amp_ADC>
     aec:	68 8b       	std	Y+16, r22	; 0x10
     aee:	79 8b       	std	Y+17, r23	; 0x11
     af0:	8a 8b       	std	Y+18, r24	; 0x12
     af2:	9b 8b       	std	Y+19, r25	; 0x13
     af4:	84 e0       	ldi	r24, 0x04	; 4
     af6:	90 e0       	ldi	r25, 0x00	; 0
     af8:	19 dc       	rcall	.-1998   	; 0x32c <Amp_ADC>
     afa:	6c 8b       	std	Y+20, r22	; 0x14
     afc:	7d 8b       	std	Y+21, r23	; 0x15
     afe:	8e 8b       	std	Y+22, r24	; 0x16
     b00:	9f 8b       	std	Y+23, r25	; 0x17
     b02:	80 e0       	ldi	r24, 0x00	; 0
     b04:	90 e0       	ldi	r25, 0x00	; 0
     b06:	ad db       	rcall	.-2214   	; 0x262 <Volt_ADC>
     b08:	68 8f       	std	Y+24, r22	; 0x18
     b0a:	79 8f       	std	Y+25, r23	; 0x19
     b0c:	8a 8f       	std	Y+26, r24	; 0x1a
     b0e:	9b 8f       	std	Y+27, r25	; 0x1b
     b10:	81 e0       	ldi	r24, 0x01	; 1
     b12:	90 e0       	ldi	r25, 0x00	; 0
     b14:	a6 db       	rcall	.-2228   	; 0x262 <Volt_ADC>
     b16:	6c 8f       	std	Y+28, r22	; 0x1c
     b18:	7d 8f       	std	Y+29, r23	; 0x1d
     b1a:	8e 8f       	std	Y+30, r24	; 0x1e
     b1c:	9f 8f       	std	Y+31, r25	; 0x1f
     b1e:	82 e0       	ldi	r24, 0x02	; 2
     b20:	90 e0       	ldi	r25, 0x00	; 0
     b22:	9f db       	rcall	.-2242   	; 0x262 <Volt_ADC>
     b24:	68 a3       	std	Y+32, r22	; 0x20
     b26:	79 a3       	std	Y+33, r23	; 0x21
     b28:	8a a3       	std	Y+34, r24	; 0x22
     b2a:	9b a3       	std	Y+35, r25	; 0x23
     b2c:	83 e0       	ldi	r24, 0x03	; 3
     b2e:	90 e0       	ldi	r25, 0x00	; 0
     b30:	98 db       	rcall	.-2256   	; 0x262 <Volt_ADC>
     b32:	6c a3       	std	Y+36, r22	; 0x24
     b34:	7d a3       	std	Y+37, r23	; 0x25
     b36:	8e a3       	std	Y+38, r24	; 0x26
     b38:	9f a3       	std	Y+39, r25	; 0x27
     b3a:	84 e0       	ldi	r24, 0x04	; 4
     b3c:	90 e0       	ldi	r25, 0x00	; 0
     b3e:	91 db       	rcall	.-2270   	; 0x262 <Volt_ADC>
     b40:	68 a7       	std	Y+40, r22	; 0x28
     b42:	79 a7       	std	Y+41, r23	; 0x29
     b44:	8a a7       	std	Y+42, r24	; 0x2a
     b46:	9b a7       	std	Y+43, r25	; 0x2b
     b48:	2f dc       	rcall	.-1954   	; 0x3a8 <Temp_ADC>
     b4a:	6c a7       	std	Y+44, r22	; 0x2c
     b4c:	7d a7       	std	Y+45, r23	; 0x2d
     b4e:	8e a7       	std	Y+46, r24	; 0x2e
     b50:	9f a7       	std	Y+47, r25	; 0x2f
     b52:	df 91       	pop	r29
     b54:	cf 91       	pop	r28
     b56:	08 95       	ret

00000b58 <Update_STATE>:
     b58:	fc 01       	movw	r30, r24
     b5a:	ac 01       	movw	r20, r24
     b5c:	48 5f       	subi	r20, 0xF8	; 248
     b5e:	5f 4f       	sbci	r21, 0xFF	; 255
     b60:	91 e0       	ldi	r25, 0x01	; 1
     b62:	3e e4       	ldi	r19, 0x4E	; 78
     b64:	89 e5       	ldi	r24, 0x59	; 89
     b66:	26 2f       	mov	r18, r22
     b68:	29 23       	and	r18, r25
     b6a:	19 f0       	breq	.+6      	; 0xb72 <Update_STATE+0x1a>
     b6c:	80 83       	st	Z, r24
     b6e:	99 0f       	add	r25, r25
     b70:	02 c0       	rjmp	.+4      	; 0xb76 <Update_STATE+0x1e>
     b72:	30 83       	st	Z, r19
     b74:	99 0f       	add	r25, r25
     b76:	31 96       	adiw	r30, 0x01	; 1
     b78:	e4 17       	cp	r30, r20
     b7a:	f5 07       	cpc	r31, r21
     b7c:	a1 f7       	brne	.-24     	; 0xb66 <Update_STATE+0xe>
     b7e:	08 95       	ret

00000b80 <Update_OBC>:
// Author: Chris Thomas
// Date: 2019-02-03
// Description: Updates the telemetry information to the OBC.
/*========================================================================================*/

void Update_OBC(float* telem, char* power){
     b80:	2f 92       	push	r2
     b82:	3f 92       	push	r3
     b84:	4f 92       	push	r4
     b86:	5f 92       	push	r5
     b88:	6f 92       	push	r6
     b8a:	7f 92       	push	r7
     b8c:	8f 92       	push	r8
     b8e:	9f 92       	push	r9
     b90:	af 92       	push	r10
     b92:	bf 92       	push	r11
     b94:	cf 92       	push	r12
     b96:	df 92       	push	r13
     b98:	ef 92       	push	r14
     b9a:	ff 92       	push	r15
     b9c:	0f 93       	push	r16
     b9e:	1f 93       	push	r17
     ba0:	cf 93       	push	r28
     ba2:	df 93       	push	r29
     ba4:	cd b7       	in	r28, 0x3d	; 61
     ba6:	de b7       	in	r29, 0x3e	; 62
     ba8:	cf 53       	subi	r28, 0x3F	; 63
     baa:	d1 40       	sbci	r29, 0x01	; 1
     bac:	0f b6       	in	r0, 0x3f	; 63
     bae:	f8 94       	cli
     bb0:	de bf       	out	0x3e, r29	; 62
     bb2:	0f be       	out	0x3f, r0	; 63
     bb4:	cd bf       	out	0x3d, r28	; 61
     bb6:	c4 5c       	subi	r28, 0xC4	; 196
     bb8:	de 4f       	sbci	r29, 0xFE	; 254
     bba:	99 83       	std	Y+1, r25	; 0x01
     bbc:	88 83       	st	Y, r24
     bbe:	cc 53       	subi	r28, 0x3C	; 60
     bc0:	d1 40       	sbci	r29, 0x01	; 1
     bc2:	4b 01       	movw	r8, r22
	// Prints a border to the Putty
	char stars[60] = "/***************************************CubeSat EPS"; // left side of border
     bc4:	84 e3       	ldi	r24, 0x34	; 52
     bc6:	e0 e0       	ldi	r30, 0x00	; 0
     bc8:	f2 e0       	ldi	r31, 0x02	; 2
     bca:	de 01       	movw	r26, r28
     bcc:	11 96       	adiw	r26, 0x01	; 1
     bce:	01 90       	ld	r0, Z+
     bd0:	0d 92       	st	X+, r0
     bd2:	8a 95       	dec	r24
     bd4:	e1 f7       	brne	.-8      	; 0xbce <Update_OBC+0x4e>
     bd6:	fe 01       	movw	r30, r28
     bd8:	f5 96       	adiw	r30, 0x35	; 53
     bda:	88 e0       	ldi	r24, 0x08	; 8
     bdc:	df 01       	movw	r26, r30
     bde:	1d 92       	st	X+, r1
     be0:	8a 95       	dec	r24
     be2:	e9 f7       	brne	.-6      	; 0xbde <Update_OBC+0x5e>
	char stars2[45] = "***************************************/"; // right side of border
     be4:	89 e2       	ldi	r24, 0x29	; 41
     be6:	ec e3       	ldi	r30, 0x3C	; 60
     be8:	f2 e0       	ldi	r31, 0x02	; 2
     bea:	de 01       	movw	r26, r28
     bec:	dd 96       	adiw	r26, 0x3d	; 61
     bee:	01 90       	ld	r0, Z+
     bf0:	0d 92       	st	X+, r0
     bf2:	8a 95       	dec	r24
     bf4:	e1 f7       	brne	.-8      	; 0xbee <Update_OBC+0x6e>
     bf6:	fe 01       	movw	r30, r28
     bf8:	ea 59       	subi	r30, 0x9A	; 154
     bfa:	ff 4f       	sbci	r31, 0xFF	; 255
     bfc:	84 e0       	ldi	r24, 0x04	; 4
     bfe:	df 01       	movw	r26, r30
     c00:	1d 92       	st	X+, r1
     c02:	8a 95       	dec	r24
     c04:	e9 f7       	brne	.-6      	; 0xc00 <Update_OBC+0x80>
	char* border; // complete border top and bottom
	border = strcat(stars,stars2);
     c06:	be 01       	movw	r22, r28
     c08:	63 5c       	subi	r22, 0xC3	; 195
     c0a:	7f 4f       	sbci	r23, 0xFF	; 255
     c0c:	ce 01       	movw	r24, r28
     c0e:	01 96       	adiw	r24, 0x01	; 1
     c10:	0e 94 f4 0e 	call	0x1de8	; 0x1de8 <strcat>
	
	// Print border
	UART0_putstring(border);
     c14:	dc d1       	rcall	.+952    	; 0xfce <UART0_putstring>
	
	// Spacing
	UART0_putchar('\n');
     c16:	8a e0       	ldi	r24, 0x0A	; 10
     c18:	d2 d1       	rcall	.+932    	; 0xfbe <UART0_putchar>
	UART0_putchar('\n');
     c1a:	8a e0       	ldi	r24, 0x0A	; 10
     c1c:	d0 d1       	rcall	.+928    	; 0xfbe <UART0_putchar>
	UART0_putchar('\r');
     c1e:	8d e0       	ldi	r24, 0x0D	; 13
     c20:	ce d1       	rcall	.+924    	; 0xfbe <UART0_putchar>
     c22:	80 e5       	ldi	r24, 0x50	; 80
	
	// String Initializations
	char loads[8][10] = {"Heater 1", "Heater 2", "Heater 3", "OBC", "Imager", "GRIPS", "S-Band", "UHF"};
     c24:	e9 e6       	ldi	r30, 0x69	; 105
     c26:	f2 e0       	ldi	r31, 0x02	; 2
     c28:	de 01       	movw	r26, r28
     c2a:	a6 59       	subi	r26, 0x96	; 150
     c2c:	bf 4f       	sbci	r27, 0xFF	; 255
     c2e:	01 90       	ld	r0, Z+
     c30:	0d 92       	st	X+, r0
     c32:	8a 95       	dec	r24
     c34:	e1 f7       	brne	.-8      	; 0xc2e <Update_OBC+0xae>
     c36:	88 e7       	ldi	r24, 0x78	; 120
	char sensors[12][10] = {"3V3-1 [A]", "3V3-2 [A]", "5V [A]", "8V [A]", "VBatt [A]", "Solar [A]",
     c38:	e9 eb       	ldi	r30, 0xB9	; 185
     c3a:	f2 e0       	ldi	r31, 0x02	; 2
     c3c:	de 01       	movw	r26, r28
     c3e:	a6 54       	subi	r26, 0x46	; 70
     c40:	bf 4f       	sbci	r27, 0xFF	; 255
     c42:	01 90       	ld	r0, Z+
     c44:	0d 92       	st	X+, r0
     c46:	8a 95       	dec	r24
     c48:	e1 f7       	brne	.-8      	; 0xc42 <Update_OBC+0xc2>
     c4a:	fe 01       	movw	r30, r28
     c4c:	e6 54       	subi	r30, 0x46	; 70
     c4e:	ff 4f       	sbci	r31, 0xFF	; 255
     c50:	7f 01       	movw	r14, r30
     c52:	c1 2c       	mov	r12, r1
	// Doing to the spacing correctly						
	int spacing = 15;
	int spaces = 0;
	int spaces2 = 0; // for inner loops
	int l_incr = 0; // load increment (8)
	int s_incr = 0; // sensor increment (12)
     c54:	d1 2c       	mov	r13, r1
     c56:	41 2c       	mov	r4, r1
							"3V3-1 [V]", "3V3-2 [V]", "5V [V]", "8V [V]", "VBatt [V]", "Temp [C]"};
							
	// Doing to the spacing correctly						
	int spacing = 15;
	int spaces = 0;
	int spaces2 = 0; // for inner loops
     c58:	51 2c       	mov	r5, r1
     c5a:	00 e0       	ldi	r16, 0x00	; 0
	char sensors[12][10] = {"3V3-1 [A]", "3V3-2 [A]", "5V [A]", "8V [A]", "VBatt [A]", "Solar [A]",
							"3V3-1 [V]", "3V3-2 [V]", "5V [V]", "8V [V]", "VBatt [V]", "Temp [C]"};
							
	// Doing to the spacing correctly						
	int spacing = 15;
	int spaces = 0;
     c5c:	10 e0       	ldi	r17, 0x00	; 0
     c5e:	0f 2e       	mov	r0, r31
			UART0_putchar(' ');
			spaces--;
		}
		UART0_putstring(sensors[s_incr]);
		s_incr++;
		spaces = spacing - strlen(sensors[s_incr - 1]);
     c60:	ff e0       	ldi	r31, 0x0F	; 15
     c62:	af 2e       	mov	r10, r31
     c64:	b1 2c       	mov	r11, r1
     c66:	f0 2d       	mov	r31, r0
     c68:	3e 01       	movw	r6, r28
			while(i < s_incr){
				while(spaces2){
					UART0_putchar(' ');
					spaces2--;
				}
				sprintf(measure,"%f",telem[i]);
     c6a:	fe ec       	ldi	r31, 0xCE	; 206
     c6c:	6f 1a       	sub	r6, r31
     c6e:	fe ef       	ldi	r31, 0xFE	; 254
     c70:	7f 0a       	sbc	r7, r31
     c72:	c2 5c       	subi	r28, 0xC2	; 194
     c74:	de 4f       	sbci	r29, 0xFE	; 254
     c76:	68 82       	st	Y, r6
     c78:	ce 53       	subi	r28, 0x3E	; 62
     c7a:	d1 40       	sbci	r29, 0x01	; 1
     c7c:	c1 5c       	subi	r28, 0xC1	; 193
     c7e:	de 4f       	sbci	r29, 0xFE	; 254
     c80:	78 82       	st	Y, r7
     c82:	cf 53       	subi	r28, 0x3F	; 63
     c84:	d1 40       	sbci	r29, 0x01	; 1
     c86:	26 e0       	ldi	r18, 0x06	; 6
	// Print the telemetry information
	while (s_incr < 12){
		
		// Switch lines after 6 titles are written and write
		// data on the next line
		if (s_incr == 6){
     c88:	c2 16       	cp	r12, r18
     c8a:	d1 04       	cpc	r13, r1
     c8c:	09 f0       	breq	.+2      	; 0xc90 <Update_OBC+0x110>
     c8e:	71 c0       	rjmp	.+226    	; 0xd72 <Update_OBC+0x1f2>
			UART0_putchar('\n');
     c90:	8a e0       	ldi	r24, 0x0A	; 10
     c92:	95 d1       	rcall	.+810    	; 0xfbe <UART0_putchar>
     c94:	8d e0       	ldi	r24, 0x0D	; 13
			UART0_putchar('\r');
     c96:	93 d1       	rcall	.+806    	; 0xfbe <UART0_putchar>
     c98:	46 e0       	ldi	r20, 0x06	; 6
     c9a:	24 16       	cp	r2, r20
			// print values
			while(i < s_incr){
     c9c:	31 04       	cpc	r3, r1
     c9e:	0c f0       	brlt	.+2      	; 0xca2 <Update_OBC+0x122>
     ca0:	52 c0       	rjmp	.+164    	; 0xd46 <Update_OBC+0x1c6>
     ca2:	81 01       	movw	r16, r2
     ca4:	00 0f       	add	r16, r16
     ca6:	11 1f       	adc	r17, r17
     ca8:	00 0f       	add	r16, r16
     caa:	11 1f       	adc	r17, r17
     cac:	c4 5c       	subi	r28, 0xC4	; 196
     cae:	de 4f       	sbci	r29, 0xFE	; 254
     cb0:	88 81       	ld	r24, Y
     cb2:	99 81       	ldd	r25, Y+1	; 0x01
     cb4:	cc 53       	subi	r28, 0x3C	; 60
     cb6:	d1 40       	sbci	r29, 0x01	; 1
     cb8:	08 0f       	add	r16, r24
     cba:	19 1f       	adc	r17, r25
     cbc:	3f c0       	rjmp	.+126    	; 0xd3c <Update_OBC+0x1bc>
     cbe:	80 e2       	ldi	r24, 0x20	; 32
				while(spaces2){
					UART0_putchar(' ');
     cc0:	7e d1       	rcall	.+764    	; 0xfbe <UART0_putchar>
     cc2:	91 e0       	ldi	r25, 0x01	; 1
     cc4:	49 1a       	sub	r4, r25
					spaces2--;
     cc6:	51 08       	sbc	r5, r1
     cc8:	d1 f7       	brne	.-12     	; 0xcbe <Update_OBC+0x13e>
     cca:	d8 01       	movw	r26, r16
		if (s_incr == 6){
			UART0_putchar('\n');
			UART0_putchar('\r');
			// print values
			while(i < s_incr){
				while(spaces2){
     ccc:	8c 91       	ld	r24, X
					UART0_putchar(' ');
					spaces2--;
				}
				sprintf(measure,"%f",telem[i]);
     cce:	11 96       	adiw	r26, 0x01	; 1
     cd0:	9c 91       	ld	r25, X
     cd2:	11 97       	sbiw	r26, 0x01	; 1
     cd4:	12 96       	adiw	r26, 0x02	; 2
     cd6:	2c 91       	ld	r18, X
     cd8:	12 97       	sbiw	r26, 0x02	; 2
     cda:	13 96       	adiw	r26, 0x03	; 3
     cdc:	3c 91       	ld	r19, X
     cde:	0c 5f       	subi	r16, 0xFC	; 252
     ce0:	1f 4f       	sbci	r17, 0xFF	; 255
     ce2:	3f 93       	push	r19
     ce4:	2f 93       	push	r18
     ce6:	9f 93       	push	r25
     ce8:	8f 93       	push	r24
     cea:	eb e0       	ldi	r30, 0x0B	; 11
     cec:	f4 e0       	ldi	r31, 0x04	; 4
     cee:	ff 93       	push	r31
     cf0:	ef 93       	push	r30
     cf2:	7f 92       	push	r7
     cf4:	6f 92       	push	r6
     cf6:	0e 94 46 0f 	call	0x1e8c	; 0x1e8c <sprintf>
     cfa:	c2 5c       	subi	r28, 0xC2	; 194
     cfc:	de 4f       	sbci	r29, 0xFE	; 254
				UART0_putstring(measure);
     cfe:	88 81       	ld	r24, Y
     d00:	ce 53       	subi	r28, 0x3E	; 62
     d02:	d1 40       	sbci	r29, 0x01	; 1
     d04:	c1 5c       	subi	r28, 0xC1	; 193
     d06:	de 4f       	sbci	r29, 0xFE	; 254
     d08:	98 81       	ld	r25, Y
     d0a:	cf 53       	subi	r28, 0x3F	; 63
     d0c:	d1 40       	sbci	r29, 0x01	; 1
     d0e:	5f d1       	rcall	.+702    	; 0xfce <UART0_putstring>
     d10:	4f ef       	ldi	r20, 0xFF	; 255
     d12:	24 1a       	sub	r2, r20
				i++;
     d14:	34 0a       	sbc	r3, r20
     d16:	f3 01       	movw	r30, r6
     d18:	01 90       	ld	r0, Z+
				spaces2 = spacing - strlen(measure);
     d1a:	00 20       	and	r0, r0
     d1c:	e9 f7       	brne	.-6      	; 0xd18 <Update_OBC+0x198>
     d1e:	31 97       	sbiw	r30, 0x01	; 1
     d20:	e6 19       	sub	r30, r6
     d22:	f7 09       	sbc	r31, r7
     d24:	25 01       	movw	r4, r10
     d26:	4e 1a       	sub	r4, r30
     d28:	5f 0a       	sbc	r5, r31
     d2a:	0f b6       	in	r0, 0x3f	; 63
     d2c:	f8 94       	cli
		// data on the next line
		if (s_incr == 6){
			UART0_putchar('\n');
			UART0_putchar('\r');
			// print values
			while(i < s_incr){
     d2e:	de bf       	out	0x3e, r29	; 62
     d30:	0f be       	out	0x3f, r0	; 63
     d32:	cd bf       	out	0x3d, r28	; 61
     d34:	96 e0       	ldi	r25, 0x06	; 6
     d36:	29 16       	cp	r2, r25
     d38:	31 04       	cpc	r3, r1
     d3a:	29 f0       	breq	.+10     	; 0xd46 <Update_OBC+0x1c6>
     d3c:	41 14       	cp	r4, r1
				while(spaces2){
     d3e:	51 04       	cpc	r5, r1
     d40:	09 f0       	breq	.+2      	; 0xd44 <Update_OBC+0x1c4>
     d42:	bd cf       	rjmp	.-134    	; 0xcbe <Update_OBC+0x13e>
				sprintf(measure,"%f",telem[i]);
				UART0_putstring(measure);
				i++;
				spaces2 = spacing - strlen(measure);
			}
			UART0_putchar('\n');
     d44:	c2 cf       	rjmp	.-124    	; 0xcca <Update_OBC+0x14a>
     d46:	8a e0       	ldi	r24, 0x0A	; 10
     d48:	3a d1       	rcall	.+628    	; 0xfbe <UART0_putchar>
			UART0_putchar('\n');
     d4a:	8a e0       	ldi	r24, 0x0A	; 10
     d4c:	38 d1       	rcall	.+624    	; 0xfbe <UART0_putchar>
     d4e:	8d e0       	ldi	r24, 0x0D	; 13
			UART0_putchar('\r');
     d50:	36 d1       	rcall	.+620    	; 0xfbe <UART0_putchar>
     d52:	c7 01       	movw	r24, r14
     d54:	3c d1       	rcall	.+632    	; 0xfce <UART0_putstring>
		// re-initialize the spaces
		while(spaces){
			UART0_putchar(' ');
			spaces--;
		}
		UART0_putstring(sensors[s_incr]);
     d56:	af ef       	ldi	r26, 0xFF	; 255
     d58:	ca 1a       	sub	r12, r26
     d5a:	da 0a       	sbc	r13, r26
		s_incr++;
     d5c:	f7 01       	movw	r30, r14
     d5e:	01 90       	ld	r0, Z+
     d60:	00 20       	and	r0, r0
		spaces = spacing - strlen(sensors[s_incr - 1]);
     d62:	e9 f7       	brne	.-6      	; 0xd5e <Update_OBC+0x1de>
     d64:	31 97       	sbiw	r30, 0x01	; 1
     d66:	ee 19       	sub	r30, r14
     d68:	ff 09       	sbc	r31, r15
     d6a:	85 01       	movw	r16, r10
     d6c:	0e 1b       	sub	r16, r30
     d6e:	1f 0b       	sbc	r17, r31
     d70:	7b c0       	rjmp	.+246    	; 0xe68 <Update_OBC+0x2e8>
     d72:	01 15       	cp	r16, r1
			spaces = 0; // reset for next line of titles
		}
		
		// Put the titles in normally
		// re-initialize the spaces
		while(spaces){
     d74:	11 05       	cpc	r17, r1
     d76:	29 f0       	breq	.+10     	; 0xd82 <Update_OBC+0x202>
     d78:	80 e2       	ldi	r24, 0x20	; 32
			UART0_putchar(' ');
     d7a:	21 d1       	rcall	.+578    	; 0xfbe <UART0_putchar>
     d7c:	01 50       	subi	r16, 0x01	; 1
     d7e:	11 09       	sbc	r17, r1
			spaces--;
     d80:	d9 f7       	brne	.-10     	; 0xd78 <Update_OBC+0x1f8>
     d82:	c7 01       	movw	r24, r14
			spaces = 0; // reset for next line of titles
		}
		
		// Put the titles in normally
		// re-initialize the spaces
		while(spaces){
     d84:	24 d1       	rcall	.+584    	; 0xfce <UART0_putstring>
			UART0_putchar(' ');
			spaces--;
		}
		UART0_putstring(sensors[s_incr]);
     d86:	bf ef       	ldi	r27, 0xFF	; 255
     d88:	cb 1a       	sub	r12, r27
     d8a:	db 0a       	sbc	r13, r27
		s_incr++;
     d8c:	f7 01       	movw	r30, r14
     d8e:	01 90       	ld	r0, Z+
     d90:	00 20       	and	r0, r0
		spaces = spacing - strlen(sensors[s_incr - 1]);
     d92:	e9 f7       	brne	.-6      	; 0xd8e <Update_OBC+0x20e>
     d94:	31 97       	sbiw	r30, 0x01	; 1
     d96:	ee 19       	sub	r30, r14
     d98:	ff 09       	sbc	r31, r15
     d9a:	85 01       	movw	r16, r10
     d9c:	0e 1b       	sub	r16, r30
     d9e:	1f 0b       	sbc	r17, r31
     da0:	ec e0       	ldi	r30, 0x0C	; 12
		
		// Print the second round of telemetry data
		if (s_incr == 12){
     da2:	ce 16       	cp	r12, r30
     da4:	d1 04       	cpc	r13, r1
     da6:	09 f0       	breq	.+2      	; 0xdaa <Update_OBC+0x22a>
     da8:	5f c0       	rjmp	.+190    	; 0xe68 <Update_OBC+0x2e8>
     daa:	8a e0       	ldi	r24, 0x0A	; 10
			spaces2 = 0; // re-initialize spaces to 0
			UART0_putchar('\n');
     dac:	08 d1       	rcall	.+528    	; 0xfbe <UART0_putchar>
     dae:	8d e0       	ldi	r24, 0x0D	; 13
     db0:	06 d1       	rcall	.+524    	; 0xfbe <UART0_putchar>
			UART0_putchar('\r');
     db2:	fc e0       	ldi	r31, 0x0C	; 12
     db4:	2f 16       	cp	r2, r31
     db6:	31 04       	cpc	r3, r1
			// print values
			while(i < s_incr){
     db8:	0c f0       	brlt	.+2      	; 0xdbc <Update_OBC+0x23c>
     dba:	99 c0       	rjmp	.+306    	; 0xeee <Update_OBC+0x36e>
     dbc:	c1 01       	movw	r24, r2
     dbe:	88 0f       	add	r24, r24
     dc0:	99 1f       	adc	r25, r25
     dc2:	88 0f       	add	r24, r24
     dc4:	99 1f       	adc	r25, r25
     dc6:	c4 5c       	subi	r28, 0xC4	; 196
     dc8:	de 4f       	sbci	r29, 0xFE	; 254
     dca:	48 80       	ld	r4, Y
     dcc:	59 80       	ldd	r5, Y+1	; 0x01
     dce:	cc 53       	subi	r28, 0x3C	; 60
     dd0:	d1 40       	sbci	r29, 0x01	; 1
     dd2:	48 0e       	add	r4, r24
     dd4:	59 1e       	adc	r5, r25
     dd6:	0f 2e       	mov	r0, r31
     dd8:	fb e0       	ldi	r31, 0x0B	; 11
     dda:	af 2e       	mov	r10, r31
				while(spaces2){
					UART0_putchar(' ');
					spaces2--;
				}
				sprintf(measure,"%f",telem[i]);
     ddc:	f4 e0       	ldi	r31, 0x04	; 4
     dde:	bf 2e       	mov	r11, r31
     de0:	f0 2d       	mov	r31, r0
     de2:	8e 01       	movw	r16, r28
     de4:	0e 5c       	subi	r16, 0xCE	; 206
     de6:	1e 4f       	sbci	r17, 0xFE	; 254
     de8:	0f 2e       	mov	r0, r31
     dea:	ff e0       	ldi	r31, 0x0F	; 15
				UART0_putstring(measure);
				i++;
				spaces2 = spacing - strlen(measure);
     dec:	cf 2e       	mov	r12, r31
     dee:	d1 2c       	mov	r13, r1
     df0:	f0 2d       	mov	r31, r0
     df2:	06 c0       	rjmp	.+12     	; 0xe00 <Update_OBC+0x280>
     df4:	80 e2       	ldi	r24, 0x20	; 32
     df6:	e3 d0       	rcall	.+454    	; 0xfbe <UART0_putchar>
			UART0_putchar('\n');
			UART0_putchar('\r');
			// print values
			while(i < s_incr){
				while(spaces2){
					UART0_putchar(' ');
     df8:	21 e0       	ldi	r18, 0x01	; 1
     dfa:	e2 1a       	sub	r14, r18
     dfc:	f1 08       	sbc	r15, r1
					spaces2--;
     dfe:	d1 f7       	brne	.-12     	; 0xdf4 <Update_OBC+0x274>
     e00:	d2 01       	movw	r26, r4
     e02:	8c 91       	ld	r24, X
			spaces2 = 0; // re-initialize spaces to 0
			UART0_putchar('\n');
			UART0_putchar('\r');
			// print values
			while(i < s_incr){
				while(spaces2){
     e04:	11 96       	adiw	r26, 0x01	; 1
					UART0_putchar(' ');
					spaces2--;
				}
				sprintf(measure,"%f",telem[i]);
     e06:	9c 91       	ld	r25, X
     e08:	11 97       	sbiw	r26, 0x01	; 1
     e0a:	12 96       	adiw	r26, 0x02	; 2
     e0c:	2c 91       	ld	r18, X
     e0e:	12 97       	sbiw	r26, 0x02	; 2
     e10:	13 96       	adiw	r26, 0x03	; 3
     e12:	3c 91       	ld	r19, X
     e14:	b4 e0       	ldi	r27, 0x04	; 4
     e16:	4b 0e       	add	r4, r27
     e18:	51 1c       	adc	r5, r1
     e1a:	3f 93       	push	r19
     e1c:	2f 93       	push	r18
     e1e:	9f 93       	push	r25
     e20:	8f 93       	push	r24
     e22:	bf 92       	push	r11
     e24:	af 92       	push	r10
     e26:	1f 93       	push	r17
     e28:	0f 93       	push	r16
     e2a:	0e 94 46 0f 	call	0x1e8c	; 0x1e8c <sprintf>
     e2e:	c8 01       	movw	r24, r16
     e30:	ce d0       	rcall	.+412    	; 0xfce <UART0_putstring>
				UART0_putstring(measure);
     e32:	ef ef       	ldi	r30, 0xFF	; 255
     e34:	2e 1a       	sub	r2, r30
     e36:	3e 0a       	sbc	r3, r30
				i++;
     e38:	f8 01       	movw	r30, r16
     e3a:	01 90       	ld	r0, Z+
     e3c:	00 20       	and	r0, r0
				spaces2 = spacing - strlen(measure);
     e3e:	e9 f7       	brne	.-6      	; 0xe3a <Update_OBC+0x2ba>
     e40:	31 97       	sbiw	r30, 0x01	; 1
     e42:	e0 1b       	sub	r30, r16
     e44:	f1 0b       	sbc	r31, r17
     e46:	76 01       	movw	r14, r12
     e48:	ee 1a       	sub	r14, r30
     e4a:	ff 0a       	sbc	r15, r31
     e4c:	0f b6       	in	r0, 0x3f	; 63
     e4e:	f8 94       	cli
     e50:	de bf       	out	0x3e, r29	; 62
		if (s_incr == 12){
			spaces2 = 0; // re-initialize spaces to 0
			UART0_putchar('\n');
			UART0_putchar('\r');
			// print values
			while(i < s_incr){
     e52:	0f be       	out	0x3f, r0	; 63
     e54:	cd bf       	out	0x3d, r28	; 61
     e56:	9c e0       	ldi	r25, 0x0C	; 12
     e58:	29 16       	cp	r2, r25
     e5a:	31 04       	cpc	r3, r1
     e5c:	09 f4       	brne	.+2      	; 0xe60 <Update_OBC+0x2e0>
     e5e:	47 c0       	rjmp	.+142    	; 0xeee <Update_OBC+0x36e>
     e60:	e1 14       	cp	r14, r1
     e62:	f1 04       	cpc	r15, r1
				while(spaces2){
     e64:	39 f6       	brne	.-114    	; 0xdf4 <Update_OBC+0x274>
     e66:	cc cf       	rjmp	.-104    	; 0xe00 <Update_OBC+0x280>
     e68:	aa e0       	ldi	r26, 0x0A	; 10
     e6a:	ea 0e       	add	r14, r26
     e6c:	f1 1c       	adc	r15, r1
     e6e:	0b cf       	rjmp	.-490    	; 0xc86 <Update_OBC+0x106>
     e70:	80 e2       	ldi	r24, 0x20	; 32
     e72:	a5 d0       	rcall	.+330    	; 0xfbe <UART0_putchar>
	UART0_putchar('\n');
	UART0_putchar('\n');
	UART0_putchar('\r');
	while(l_incr < 8){
		while(spaces){
			UART0_putchar(' ');
     e74:	01 50       	subi	r16, 0x01	; 1
     e76:	11 09       	sbc	r17, r1
     e78:	d9 f7       	brne	.-10     	; 0xe70 <Update_OBC+0x2f0>
			spaces--;
     e7a:	ba e0       	ldi	r27, 0x0A	; 10
     e7c:	eb 0e       	add	r14, r27
	spaces = 0; // re initialize spaces
	UART0_putchar('\n');
	UART0_putchar('\n');
	UART0_putchar('\r');
	while(l_incr < 8){
		while(spaces){
     e7e:	f1 1c       	adc	r15, r1
     e80:	c7 01       	movw	r24, r14
     e82:	a5 d0       	rcall	.+330    	; 0xfce <UART0_putstring>
     e84:	f7 01       	movw	r30, r14
			UART0_putchar(' ');
			spaces--;
		}
		UART0_putstring(loads[l_incr]);
     e86:	01 90       	ld	r0, Z+
     e88:	00 20       	and	r0, r0
		l_incr++;
		spaces = spacing - strlen(loads[l_incr - 1]);
     e8a:	e9 f7       	brne	.-6      	; 0xe86 <Update_OBC+0x306>
     e8c:	31 97       	sbiw	r30, 0x01	; 1
     e8e:	ee 19       	sub	r30, r14
     e90:	ff 09       	sbc	r31, r15
     e92:	86 01       	movw	r16, r12
     e94:	0e 1b       	sub	r16, r30
     e96:	1f 0b       	sbc	r17, r31
     e98:	ae 14       	cp	r10, r14
     e9a:	bf 04       	cpc	r11, r15
	// Print the Load Titles
	spaces = 0; // re initialize spaces
	UART0_putchar('\n');
	UART0_putchar('\n');
	UART0_putchar('\r');
	while(l_incr < 8){
     e9c:	21 f0       	breq	.+8      	; 0xea6 <Update_OBC+0x326>
     e9e:	01 15       	cp	r16, r1
     ea0:	11 05       	cpc	r17, r1
		while(spaces){
     ea2:	31 f7       	brne	.-52     	; 0xe70 <Update_OBC+0x2f0>
     ea4:	ea cf       	rjmp	.-44     	; 0xe7a <Update_OBC+0x2fa>
     ea6:	8a e0       	ldi	r24, 0x0A	; 10
	
	// Print the load states
	// Print the Load Titles
	l_incr = 0; // reset load increment to 0
	spaces = 0; // re initialize spaces
	UART0_putchar('\n');
     ea8:	8a d0       	rcall	.+276    	; 0xfbe <UART0_putchar>
     eaa:	8d e0       	ldi	r24, 0x0D	; 13
     eac:	88 d0       	rcall	.+272    	; 0xfbe <UART0_putchar>
	UART0_putchar('\r');
     eae:	74 01       	movw	r14, r8
     eb0:	e8 e0       	ldi	r30, 0x08	; 8
     eb2:	8e 0e       	add	r8, r30
     eb4:	91 1c       	adc	r9, r1
     eb6:	00 e0       	ldi	r16, 0x00	; 0
     eb8:	10 e0       	ldi	r17, 0x00	; 0
     eba:	0e c0       	rjmp	.+28     	; 0xed8 <Update_OBC+0x358>
	}
	
	// Print the load states
	// Print the Load Titles
	l_incr = 0; // reset load increment to 0
	spaces = 0; // re initialize spaces
     ebc:	80 e2       	ldi	r24, 0x20	; 32
     ebe:	7f d0       	rcall	.+254    	; 0xfbe <UART0_putchar>
	UART0_putchar('\n');
	UART0_putchar('\r');
	while(l_incr < 8){
		while(spaces){
			UART0_putchar(' ');
     ec0:	01 50       	subi	r16, 0x01	; 1
     ec2:	11 09       	sbc	r17, r1
			spaces--;
     ec4:	d9 f7       	brne	.-10     	; 0xebc <Update_OBC+0x33c>
	l_incr = 0; // reset load increment to 0
	spaces = 0; // re initialize spaces
	UART0_putchar('\n');
	UART0_putchar('\r');
	while(l_incr < 8){
		while(spaces){
     ec6:	d7 01       	movw	r26, r14
			UART0_putchar(' ');
			spaces--;
		}
		UART0_putchar(power[l_incr]);
     ec8:	8d 91       	ld	r24, X+
     eca:	7d 01       	movw	r14, r26
     ecc:	78 d0       	rcall	.+240    	; 0xfbe <UART0_putchar>
		l_incr++;
		spaces = spacing - 1;
     ece:	0e e0       	ldi	r16, 0x0E	; 14
     ed0:	10 e0       	ldi	r17, 0x00	; 0
	// Print the Load Titles
	l_incr = 0; // reset load increment to 0
	spaces = 0; // re initialize spaces
	UART0_putchar('\n');
	UART0_putchar('\r');
	while(l_incr < 8){
     ed2:	8e 14       	cp	r8, r14
     ed4:	9f 04       	cpc	r9, r15
     ed6:	21 f0       	breq	.+8      	; 0xee0 <Update_OBC+0x360>
		while(spaces){
     ed8:	01 15       	cp	r16, r1
     eda:	11 05       	cpc	r17, r1
     edc:	79 f7       	brne	.-34     	; 0xebc <Update_OBC+0x33c>
     ede:	f3 cf       	rjmp	.-26     	; 0xec6 <Update_OBC+0x346>
		}
		UART0_putchar(power[l_incr]);
		l_incr++;
		spaces = spacing - 1;
	}
	UART0_putchar('\n');
     ee0:	8a e0       	ldi	r24, 0x0A	; 10
     ee2:	6d d0       	rcall	.+218    	; 0xfbe <UART0_putchar>
     ee4:	8a e0       	ldi	r24, 0x0A	; 10
	UART0_putchar('\n');
     ee6:	6b d0       	rcall	.+214    	; 0xfbe <UART0_putchar>
     ee8:	8d e0       	ldi	r24, 0x0D	; 13
     eea:	69 d0       	rcall	.+210    	; 0xfbe <UART0_putchar>
	UART0_putchar('\r');
     eec:	14 c0       	rjmp	.+40     	; 0xf16 <Update_OBC+0x396>
     eee:	8a e0       	ldi	r24, 0x0A	; 10
     ef0:	66 d0       	rcall	.+204    	; 0xfbe <UART0_putchar>
}
     ef2:	8a e0       	ldi	r24, 0x0A	; 10
	}
	
	
	// Print the Load Titles
	spaces = 0; // re initialize spaces
	UART0_putchar('\n');
     ef4:	64 d0       	rcall	.+200    	; 0xfbe <UART0_putchar>
     ef6:	8d e0       	ldi	r24, 0x0D	; 13
     ef8:	62 d0       	rcall	.+196    	; 0xfbe <UART0_putchar>
	UART0_putchar('\n');
     efa:	7e 01       	movw	r14, r28
     efc:	ba e6       	ldi	r27, 0x6A	; 106
     efe:	eb 0e       	add	r14, r27
	UART0_putchar('\r');
     f00:	f1 1c       	adc	r15, r1
     f02:	5e 01       	movw	r10, r28
     f04:	e0 eb       	ldi	r30, 0xB0	; 176
     f06:	ae 0e       	add	r10, r30
     f08:	b1 1c       	adc	r11, r1
     f0a:	0f 2e       	mov	r0, r31
     f0c:	ff e0       	ldi	r31, 0x0F	; 15
     f0e:	cf 2e       	mov	r12, r31
     f10:	d1 2c       	mov	r13, r1
     f12:	f0 2d       	mov	r31, r0
     f14:	b5 cf       	rjmp	.-150    	; 0xe80 <Update_OBC+0x300>
			UART0_putchar(' ');
			spaces--;
		}
		UART0_putstring(loads[l_incr]);
		l_incr++;
		spaces = spacing - strlen(loads[l_incr - 1]);
     f16:	c1 5c       	subi	r28, 0xC1	; 193
     f18:	de 4f       	sbci	r29, 0xFE	; 254
     f1a:	0f b6       	in	r0, 0x3f	; 63
     f1c:	f8 94       	cli
     f1e:	de bf       	out	0x3e, r29	; 62
     f20:	0f be       	out	0x3f, r0	; 63
		spaces = spacing - 1;
	}
	UART0_putchar('\n');
	UART0_putchar('\n');
	UART0_putchar('\r');
}
     f22:	cd bf       	out	0x3d, r28	; 61
     f24:	df 91       	pop	r29
     f26:	cf 91       	pop	r28
     f28:	1f 91       	pop	r17
     f2a:	0f 91       	pop	r16
     f2c:	ff 90       	pop	r15
     f2e:	ef 90       	pop	r14
     f30:	df 90       	pop	r13
     f32:	cf 90       	pop	r12
     f34:	bf 90       	pop	r11
     f36:	af 90       	pop	r10
     f38:	9f 90       	pop	r9
     f3a:	8f 90       	pop	r8
     f3c:	7f 90       	pop	r7
     f3e:	6f 90       	pop	r6
     f40:	5f 90       	pop	r5
     f42:	4f 90       	pop	r4
     f44:	3f 90       	pop	r3
     f46:	2f 90       	pop	r2
     f48:	08 95       	ret

00000f4a <GPIO_init>:

void GPIO_init(){
	
	// Initializing the PORTs
	
	DDRH = 0x7F; // PORTH pins 0-6 set as outputs
     f4a:	8f e7       	ldi	r24, 0x7F	; 127
     f4c:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <__TEXT_REGION_LENGTH__+0x7e0101>
	DDRL = 0x0E; // PORTL pins 1-3 set as outputs
     f50:	9e e0       	ldi	r25, 0x0E	; 14
     f52:	90 93 0a 01 	sts	0x010A, r25	; 0x80010a <__TEXT_REGION_LENGTH__+0x7e010a>
	DDRA = 0xF0; // PORTA pins 4-7 set as outputs
     f56:	90 ef       	ldi	r25, 0xF0	; 240
     f58:	91 b9       	out	0x01, r25	; 1
	DDRJ = 0x7F; // PORTJ pins 0-6 set as outputs
     f5a:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <__TEXT_REGION_LENGTH__+0x7e0104>
	DDRC = 0xFF; // PORTC pins 0-7 set as outputs
     f5e:	8f ef       	ldi	r24, 0xFF	; 255
     f60:	87 b9       	out	0x07, r24	; 7
	
	// Set Output as Low
	PORTH = 0x02; // pin 1 set high to inhibit temperature measurement
     f62:	82 e0       	ldi	r24, 0x02	; 2
     f64:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <__TEXT_REGION_LENGTH__+0x7e0102>
	PORTL = 0x00;
     f68:	10 92 0b 01 	sts	0x010B, r1	; 0x80010b <__TEXT_REGION_LENGTH__+0x7e010b>
	PORTA = 0x00;
     f6c:	12 b8       	out	0x02, r1	; 2
	PORTJ = 0x00; 
     f6e:	10 92 05 01 	sts	0x0105, r1	; 0x800105 <__TEXT_REGION_LENGTH__+0x7e0105>
	PORTC = 0x00;
     f72:	18 b8       	out	0x08, r1	; 8
     f74:	08 95       	ret

00000f76 <ADC_init>:
/*========================================================================================*/

void ADC_init(){
	
	// Enable as Input
	DDRF = 0x00;
     f76:	10 ba       	out	0x10, r1	; 16
	
	// Enable the 1.1V internal reference
	//ADMUX |= ((REFS1 << 0) | (REFS0 << 0)); // set the first bit to 1
	ADMUX = 0x00;
     f78:	10 92 7c 00 	sts	0x007C, r1	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>
	
	// Enable the ADC via the status control register & enable interrupt
	//ADCSRA |= (ADEN << 1) | (ADPS2 << 1) | (ADPS0 << 1) | (ADIE << 1);
	ADCSRA = 0x85;
     f7c:	85 e8       	ldi	r24, 0x85	; 133
     f7e:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
     f82:	08 95       	ret

00000f84 <CLK_init>:
/*========================================================================================*/

CLK_init(){
	
	// Enable Timer 1
	TCCR1B = 0x05;
     f84:	85 e0       	ldi	r24, 0x05	; 5
     f86:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
	
	// Enable Output Compare Interrupt
	TIMSK1 = 0x02;
     f8a:	82 e0       	ldi	r24, 0x02	; 2
     f8c:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__TEXT_REGION_LENGTH__+0x7e006f>
	
	// Set Counter to 65,536 clock cycles (MAX)
	OCR1A = 0x1fff;
     f90:	8f ef       	ldi	r24, 0xFF	; 255
     f92:	9f e1       	ldi	r25, 0x1F	; 31
     f94:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
     f98:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
	
	// Set clock to 0
	TCNT1 = 0x0000;
     f9c:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
     fa0:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
     fa4:	08 95       	ret

00000fa6 <UART0_init>:
/*========================================================================================*/

void UART0_init(){
	
	// Using the values from set baud tool
	UBRR0H = UBRRH_VALUE;
     fa6:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
	UBRR0L = UBRRL_VALUE;
     faa:	8c e0       	ldi	r24, 0x0C	; 12
     fac:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
	
	// Enable TX & RX and Enable RX complete interrupt
	UCSR0B = 0x18; // enabling bits 4 & 3 (RX & TX) ****** RE-ENABLE INTERRUPT!!!!!!!
     fb0:	88 e1       	ldi	r24, 0x18	; 24
     fb2:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
	
	
	// Set up the format 8bit no parity
	UCSR0C = 0x06; // enable 8 bit chars
     fb6:	86 e0       	ldi	r24, 0x06	; 6
     fb8:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7e00c2>
     fbc:	08 95       	ret

00000fbe <UART0_putchar>:
	while (!( UCSR0A & (1 << RXC0)));
	
	// return the received character
	return UDR0;
	
}
     fbe:	e0 ec       	ldi	r30, 0xC0	; 192
     fc0:	f0 e0       	ldi	r31, 0x00	; 0
     fc2:	90 81       	ld	r25, Z
     fc4:	95 ff       	sbrs	r25, 5
     fc6:	fd cf       	rjmp	.-6      	; 0xfc2 <UART0_putchar+0x4>
     fc8:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
     fcc:	08 95       	ret

00000fce <UART0_putstring>:
// Author: Chris Thomas
// Date: 2019-03-13
// Description: Writes strings via UART0 using putchar.
/*========================================================================================*/

void UART0_putstring(char *string){
     fce:	cf 93       	push	r28
     fd0:	df 93       	push	r29
     fd2:	ec 01       	movw	r28, r24
	while(*string){
     fd4:	88 81       	ld	r24, Y
     fd6:	88 23       	and	r24, r24
     fd8:	29 f0       	breq	.+10     	; 0xfe4 <UART0_putstring+0x16>
     fda:	21 96       	adiw	r28, 0x01	; 1
		UART0_putchar(*string++);
     fdc:	f0 df       	rcall	.-32     	; 0xfbe <UART0_putchar>
// Date: 2019-03-13
// Description: Writes strings via UART0 using putchar.
/*========================================================================================*/

void UART0_putstring(char *string){
	while(*string){
     fde:	89 91       	ld	r24, Y+
     fe0:	81 11       	cpse	r24, r1
     fe2:	fc cf       	rjmp	.-8      	; 0xfdc <UART0_putstring+0xe>
		UART0_putchar(*string++);
	}
}
     fe4:	df 91       	pop	r29
     fe6:	cf 91       	pop	r28
     fe8:	08 95       	ret

00000fea <__vector_12>:
 * This function will handle interrupt on WDT Timer overflow and
 * call the callback function.
 */

ISR(WDT_vect)
{
     fea:	1f 92       	push	r1
     fec:	0f 92       	push	r0
     fee:	0f b6       	in	r0, 0x3f	; 63
     ff0:	0f 92       	push	r0
     ff2:	11 24       	eor	r1, r1
     ff4:	2f 93       	push	r18
     ff6:	3f 93       	push	r19
     ff8:	4f 93       	push	r20
     ffa:	5f 93       	push	r21
     ffc:	6f 93       	push	r22
     ffe:	7f 93       	push	r23
    1000:	8f 93       	push	r24
    1002:	9f 93       	push	r25
    1004:	af 93       	push	r26
    1006:	bf 93       	push	r27
    1008:	ef 93       	push	r30
    100a:	ff 93       	push	r31
	if (wdt_timer_callback) {
    100c:	e0 91 0e 04 	lds	r30, 0x040E	; 0x80040e <__data_end>
    1010:	f0 91 0f 04 	lds	r31, 0x040F	; 0x80040f <__data_end+0x1>
    1014:	30 97       	sbiw	r30, 0x00	; 0
    1016:	09 f0       	breq	.+2      	; 0x101a <__vector_12+0x30>
		wdt_timer_callback();
    1018:	09 95       	icall
	}
}
    101a:	ff 91       	pop	r31
    101c:	ef 91       	pop	r30
    101e:	bf 91       	pop	r27
    1020:	af 91       	pop	r26
    1022:	9f 91       	pop	r25
    1024:	8f 91       	pop	r24
    1026:	7f 91       	pop	r23
    1028:	6f 91       	pop	r22
    102a:	5f 91       	pop	r21
    102c:	4f 91       	pop	r20
    102e:	3f 91       	pop	r19
    1030:	2f 91       	pop	r18
    1032:	0f 90       	pop	r0
    1034:	0f be       	out	0x3f, r0	; 63
    1036:	0f 90       	pop	r0
    1038:	1f 90       	pop	r1
    103a:	18 95       	reti

0000103c <__vector_17>:
// Date: 2019-03-18
// Description: Interrupt occurs when timer register overflow flag is set, and
//				calls for telemetry data to be updated.
/*========================================================================================*/

ISR(TIMER1_COMPA_vect){
    103c:	1f 92       	push	r1
    103e:	0f 92       	push	r0
    1040:	0f b6       	in	r0, 0x3f	; 63
    1042:	0f 92       	push	r0
    1044:	11 24       	eor	r1, r1
    1046:	2f 93       	push	r18
    1048:	3f 93       	push	r19
    104a:	4f 93       	push	r20
    104c:	5f 93       	push	r21
    104e:	6f 93       	push	r22
    1050:	7f 93       	push	r23
    1052:	8f 93       	push	r24
    1054:	9f 93       	push	r25
    1056:	af 93       	push	r26
    1058:	bf 93       	push	r27
    105a:	ef 93       	push	r30
    105c:	ff 93       	push	r31
	
	// Disable Interrupts
	cli();
    105e:	f8 94       	cli
	
	Update_STATE(power,state);
    1060:	60 91 10 04 	lds	r22, 0x0410	; 0x800410 <state>
    1064:	83 e1       	ldi	r24, 0x13	; 19
    1066:	94 e0       	ldi	r25, 0x04	; 4
    1068:	77 dd       	rcall	.-1298   	; 0xb58 <Update_STATE>
	Update_TELEM(telem);
    106a:	83 e2       	ldi	r24, 0x23	; 35
    106c:	94 e0       	ldi	r25, 0x04	; 4
    106e:	0f dd       	rcall	.-1506   	; 0xa8e <Update_TELEM>
	Update_OBC(telem, power);
    1070:	63 e1       	ldi	r22, 0x13	; 19
    1072:	74 e0       	ldi	r23, 0x04	; 4
    1074:	83 e2       	ldi	r24, 0x23	; 35
    1076:	94 e0       	ldi	r25, 0x04	; 4
    1078:	83 dd       	rcall	.-1274   	; 0xb80 <Update_OBC>
	soc = SoC_ADC(telem[10],telem[4]);
    107a:	e3 e2       	ldi	r30, 0x23	; 35
    107c:	f4 e0       	ldi	r31, 0x04	; 4
    107e:	20 89       	ldd	r18, Z+16	; 0x10
    1080:	31 89       	ldd	r19, Z+17	; 0x11
    1082:	42 89       	ldd	r20, Z+18	; 0x12
    1084:	53 89       	ldd	r21, Z+19	; 0x13
    1086:	60 a5       	ldd	r22, Z+40	; 0x28
    1088:	71 a5       	ldd	r23, Z+41	; 0x29
    108a:	82 a5       	ldd	r24, Z+42	; 0x2a
    108c:	93 a5       	ldd	r25, Z+43	; 0x2b
    108e:	35 da       	rcall	.-2966   	; 0x4fa <SoC_ADC>
    1090:	90 93 12 04 	sts	0x0412, r25	; 0x800412 <soc+0x1>
    1094:	80 93 11 04 	sts	0x0411, r24	; 0x800411 <soc>
	if(soc >= 70){
    1098:	86 34       	cpi	r24, 0x46	; 70
    109a:	91 05       	cpc	r25, r1
    109c:	24 f0       	brlt	.+8      	; 0x10a6 <__vector_17+0x6a>
		charge[0] = '7';
    109e:	87 e3       	ldi	r24, 0x37	; 55
    10a0:	80 93 53 04 	sts	0x0453, r24	; 0x800453 <charge>
    10a4:	03 c0       	rjmp	.+6      	; 0x10ac <__vector_17+0x70>
	}
	else{
		charge[0] = '0';
    10a6:	80 e3       	ldi	r24, 0x30	; 48
    10a8:	80 93 53 04 	sts	0x0453, r24	; 0x800453 <charge>
	}
	UART0_putchar(charge[0]);
    10ac:	80 91 53 04 	lds	r24, 0x0453	; 0x800453 <charge>
    10b0:	86 df       	rcall	.-244    	; 0xfbe <UART0_putchar>
	// Re-enable Interrupts
	sei();
    10b2:	78 94       	sei
		
}
    10b4:	ff 91       	pop	r31
    10b6:	ef 91       	pop	r30
    10b8:	bf 91       	pop	r27
    10ba:	af 91       	pop	r26
    10bc:	9f 91       	pop	r25
    10be:	8f 91       	pop	r24
    10c0:	7f 91       	pop	r23
    10c2:	6f 91       	pop	r22
    10c4:	5f 91       	pop	r21
    10c6:	4f 91       	pop	r20
    10c8:	3f 91       	pop	r19
    10ca:	2f 91       	pop	r18
    10cc:	0f 90       	pop	r0
    10ce:	0f be       	out	0x3f, r0	; 63
    10d0:	0f 90       	pop	r0
    10d2:	1f 90       	pop	r1
    10d4:	18 95       	reti

000010d6 <main>:

int main(void){
	GPIO_init();
    10d6:	39 df       	rcall	.-398    	; 0xf4a <GPIO_init>
	UART0_init();
    10d8:	66 df       	rcall	.-308    	; 0xfa6 <UART0_init>
	ADC_init();
    10da:	4d df       	rcall	.-358    	; 0xf76 <ADC_init>
    10dc:	53 df       	rcall	.-346    	; 0xf84 <CLK_init>
	CLK_init();
    10de:	78 94       	sei
	
	sei();
    10e0:	8b e0       	ldi	r24, 0x0B	; 11
	Set_GPIO(11);
    10e2:	90 e0       	ldi	r25, 0x00	; 0
    10e4:	ff db       	rcall	.-2050   	; 0x8e4 <Set_GPIO>
    10e6:	2f e3       	ldi	r18, 0x3F	; 63
    10e8:	8d e0       	ldi	r24, 0x0D	; 13
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    10ea:	93 e0       	ldi	r25, 0x03	; 3
    10ec:	21 50       	subi	r18, 0x01	; 1
    10ee:	80 40       	sbci	r24, 0x00	; 0
    10f0:	90 40       	sbci	r25, 0x00	; 0
    10f2:	e1 f7       	brne	.-8      	; 0x10ec <main+0x16>
    10f4:	00 c0       	rjmp	.+0      	; 0x10f6 <main+0x20>
    10f6:	00 00       	nop
    10f8:	8a e0       	ldi	r24, 0x0A	; 10
	//Set_GPIO(3);
	_delay_ms(1000);
	Set_GPIO(10);
    10fa:	90 e0       	ldi	r25, 0x00	; 0
    10fc:	f3 db       	rcall	.-2074   	; 0x8e4 <Set_GPIO>
    10fe:	8c e1       	ldi	r24, 0x1C	; 28
	Set_GPIO(28);
    1100:	90 e0       	ldi	r25, 0x00	; 0
    1102:	f0 db       	rcall	.-2080   	; 0x8e4 <Set_GPIO>
    1104:	2f e3       	ldi	r18, 0x3F	; 63
    1106:	8d e0       	ldi	r24, 0x0D	; 13
    1108:	93 e0       	ldi	r25, 0x03	; 3
    110a:	21 50       	subi	r18, 0x01	; 1
    110c:	80 40       	sbci	r24, 0x00	; 0
    110e:	90 40       	sbci	r25, 0x00	; 0
    1110:	e1 f7       	brne	.-8      	; 0x110a <main+0x34>
    1112:	00 c0       	rjmp	.+0      	; 0x1114 <main+0x3e>
    1114:	00 00       	nop
	_delay_ms(1000);
	Set_GPIO(16);
    1116:	80 e1       	ldi	r24, 0x10	; 16
    1118:	90 e0       	ldi	r25, 0x00	; 0
    111a:	e4 db       	rcall	.-2104   	; 0x8e4 <Set_GPIO>
    111c:	8a e1       	ldi	r24, 0x1A	; 26
	Set_GPIO(26);
    111e:	90 e0       	ldi	r25, 0x00	; 0
    1120:	e1 db       	rcall	.-2110   	; 0x8e4 <Set_GPIO>
    1122:	ff cf       	rjmp	.-2      	; 0x1122 <main+0x4c>

00001124 <__subsf3>:
    1124:	50 58       	subi	r21, 0x80	; 128

00001126 <__addsf3>:
    1126:	bb 27       	eor	r27, r27
    1128:	aa 27       	eor	r26, r26
    112a:	0e d0       	rcall	.+28     	; 0x1148 <__addsf3x>
    112c:	44 c1       	rjmp	.+648    	; 0x13b6 <__fp_round>
    112e:	35 d1       	rcall	.+618    	; 0x139a <__fp_pscA>
    1130:	30 f0       	brcs	.+12     	; 0x113e <__addsf3+0x18>
    1132:	3a d1       	rcall	.+628    	; 0x13a8 <__fp_pscB>
    1134:	20 f0       	brcs	.+8      	; 0x113e <__addsf3+0x18>
    1136:	31 f4       	brne	.+12     	; 0x1144 <__addsf3+0x1e>
    1138:	9f 3f       	cpi	r25, 0xFF	; 255
    113a:	11 f4       	brne	.+4      	; 0x1140 <__addsf3+0x1a>
    113c:	1e f4       	brtc	.+6      	; 0x1144 <__addsf3+0x1e>
    113e:	2a c1       	rjmp	.+596    	; 0x1394 <__fp_nan>
    1140:	0e f4       	brtc	.+2      	; 0x1144 <__addsf3+0x1e>
    1142:	e0 95       	com	r30
    1144:	e7 fb       	bst	r30, 7
    1146:	20 c1       	rjmp	.+576    	; 0x1388 <__fp_inf>

00001148 <__addsf3x>:
    1148:	e9 2f       	mov	r30, r25
    114a:	46 d1       	rcall	.+652    	; 0x13d8 <__fp_split3>
    114c:	80 f3       	brcs	.-32     	; 0x112e <__addsf3+0x8>
    114e:	ba 17       	cp	r27, r26
    1150:	62 07       	cpc	r22, r18
    1152:	73 07       	cpc	r23, r19
    1154:	84 07       	cpc	r24, r20
    1156:	95 07       	cpc	r25, r21
    1158:	18 f0       	brcs	.+6      	; 0x1160 <__addsf3x+0x18>
    115a:	71 f4       	brne	.+28     	; 0x1178 <__addsf3x+0x30>
    115c:	9e f5       	brtc	.+102    	; 0x11c4 <__addsf3x+0x7c>
    115e:	5e c1       	rjmp	.+700    	; 0x141c <__fp_zero>
    1160:	0e f4       	brtc	.+2      	; 0x1164 <__addsf3x+0x1c>
    1162:	e0 95       	com	r30
    1164:	0b 2e       	mov	r0, r27
    1166:	ba 2f       	mov	r27, r26
    1168:	a0 2d       	mov	r26, r0
    116a:	0b 01       	movw	r0, r22
    116c:	b9 01       	movw	r22, r18
    116e:	90 01       	movw	r18, r0
    1170:	0c 01       	movw	r0, r24
    1172:	ca 01       	movw	r24, r20
    1174:	a0 01       	movw	r20, r0
    1176:	11 24       	eor	r1, r1
    1178:	ff 27       	eor	r31, r31
    117a:	59 1b       	sub	r21, r25
    117c:	99 f0       	breq	.+38     	; 0x11a4 <__addsf3x+0x5c>
    117e:	59 3f       	cpi	r21, 0xF9	; 249
    1180:	50 f4       	brcc	.+20     	; 0x1196 <__addsf3x+0x4e>
    1182:	50 3e       	cpi	r21, 0xE0	; 224
    1184:	68 f1       	brcs	.+90     	; 0x11e0 <__addsf3x+0x98>
    1186:	1a 16       	cp	r1, r26
    1188:	f0 40       	sbci	r31, 0x00	; 0
    118a:	a2 2f       	mov	r26, r18
    118c:	23 2f       	mov	r18, r19
    118e:	34 2f       	mov	r19, r20
    1190:	44 27       	eor	r20, r20
    1192:	58 5f       	subi	r21, 0xF8	; 248
    1194:	f3 cf       	rjmp	.-26     	; 0x117c <__addsf3x+0x34>
    1196:	46 95       	lsr	r20
    1198:	37 95       	ror	r19
    119a:	27 95       	ror	r18
    119c:	a7 95       	ror	r26
    119e:	f0 40       	sbci	r31, 0x00	; 0
    11a0:	53 95       	inc	r21
    11a2:	c9 f7       	brne	.-14     	; 0x1196 <__addsf3x+0x4e>
    11a4:	7e f4       	brtc	.+30     	; 0x11c4 <__addsf3x+0x7c>
    11a6:	1f 16       	cp	r1, r31
    11a8:	ba 0b       	sbc	r27, r26
    11aa:	62 0b       	sbc	r22, r18
    11ac:	73 0b       	sbc	r23, r19
    11ae:	84 0b       	sbc	r24, r20
    11b0:	ba f0       	brmi	.+46     	; 0x11e0 <__addsf3x+0x98>
    11b2:	91 50       	subi	r25, 0x01	; 1
    11b4:	a1 f0       	breq	.+40     	; 0x11de <__addsf3x+0x96>
    11b6:	ff 0f       	add	r31, r31
    11b8:	bb 1f       	adc	r27, r27
    11ba:	66 1f       	adc	r22, r22
    11bc:	77 1f       	adc	r23, r23
    11be:	88 1f       	adc	r24, r24
    11c0:	c2 f7       	brpl	.-16     	; 0x11b2 <__addsf3x+0x6a>
    11c2:	0e c0       	rjmp	.+28     	; 0x11e0 <__addsf3x+0x98>
    11c4:	ba 0f       	add	r27, r26
    11c6:	62 1f       	adc	r22, r18
    11c8:	73 1f       	adc	r23, r19
    11ca:	84 1f       	adc	r24, r20
    11cc:	48 f4       	brcc	.+18     	; 0x11e0 <__addsf3x+0x98>
    11ce:	87 95       	ror	r24
    11d0:	77 95       	ror	r23
    11d2:	67 95       	ror	r22
    11d4:	b7 95       	ror	r27
    11d6:	f7 95       	ror	r31
    11d8:	9e 3f       	cpi	r25, 0xFE	; 254
    11da:	08 f0       	brcs	.+2      	; 0x11de <__addsf3x+0x96>
    11dc:	b3 cf       	rjmp	.-154    	; 0x1144 <__addsf3+0x1e>
    11de:	93 95       	inc	r25
    11e0:	88 0f       	add	r24, r24
    11e2:	08 f0       	brcs	.+2      	; 0x11e6 <__addsf3x+0x9e>
    11e4:	99 27       	eor	r25, r25
    11e6:	ee 0f       	add	r30, r30
    11e8:	97 95       	ror	r25
    11ea:	87 95       	ror	r24
    11ec:	08 95       	ret

000011ee <__cmpsf2>:
    11ee:	a8 d0       	rcall	.+336    	; 0x1340 <__fp_cmp>
    11f0:	08 f4       	brcc	.+2      	; 0x11f4 <__cmpsf2+0x6>
    11f2:	81 e0       	ldi	r24, 0x01	; 1
    11f4:	08 95       	ret

000011f6 <__divsf3>:
    11f6:	0c d0       	rcall	.+24     	; 0x1210 <__divsf3x>
    11f8:	de c0       	rjmp	.+444    	; 0x13b6 <__fp_round>
    11fa:	d6 d0       	rcall	.+428    	; 0x13a8 <__fp_pscB>
    11fc:	40 f0       	brcs	.+16     	; 0x120e <__divsf3+0x18>
    11fe:	cd d0       	rcall	.+410    	; 0x139a <__fp_pscA>
    1200:	30 f0       	brcs	.+12     	; 0x120e <__divsf3+0x18>
    1202:	21 f4       	brne	.+8      	; 0x120c <__divsf3+0x16>
    1204:	5f 3f       	cpi	r21, 0xFF	; 255
    1206:	19 f0       	breq	.+6      	; 0x120e <__divsf3+0x18>
    1208:	bf c0       	rjmp	.+382    	; 0x1388 <__fp_inf>
    120a:	51 11       	cpse	r21, r1
    120c:	08 c1       	rjmp	.+528    	; 0x141e <__fp_szero>
    120e:	c2 c0       	rjmp	.+388    	; 0x1394 <__fp_nan>

00001210 <__divsf3x>:
    1210:	e3 d0       	rcall	.+454    	; 0x13d8 <__fp_split3>
    1212:	98 f3       	brcs	.-26     	; 0x11fa <__divsf3+0x4>

00001214 <__divsf3_pse>:
    1214:	99 23       	and	r25, r25
    1216:	c9 f3       	breq	.-14     	; 0x120a <__divsf3+0x14>
    1218:	55 23       	and	r21, r21
    121a:	b1 f3       	breq	.-20     	; 0x1208 <__divsf3+0x12>
    121c:	95 1b       	sub	r25, r21
    121e:	55 0b       	sbc	r21, r21
    1220:	bb 27       	eor	r27, r27
    1222:	aa 27       	eor	r26, r26
    1224:	62 17       	cp	r22, r18
    1226:	73 07       	cpc	r23, r19
    1228:	84 07       	cpc	r24, r20
    122a:	38 f0       	brcs	.+14     	; 0x123a <__divsf3_pse+0x26>
    122c:	9f 5f       	subi	r25, 0xFF	; 255
    122e:	5f 4f       	sbci	r21, 0xFF	; 255
    1230:	22 0f       	add	r18, r18
    1232:	33 1f       	adc	r19, r19
    1234:	44 1f       	adc	r20, r20
    1236:	aa 1f       	adc	r26, r26
    1238:	a9 f3       	breq	.-22     	; 0x1224 <__divsf3_pse+0x10>
    123a:	33 d0       	rcall	.+102    	; 0x12a2 <__divsf3_pse+0x8e>
    123c:	0e 2e       	mov	r0, r30
    123e:	3a f0       	brmi	.+14     	; 0x124e <__divsf3_pse+0x3a>
    1240:	e0 e8       	ldi	r30, 0x80	; 128
    1242:	30 d0       	rcall	.+96     	; 0x12a4 <__divsf3_pse+0x90>
    1244:	91 50       	subi	r25, 0x01	; 1
    1246:	50 40       	sbci	r21, 0x00	; 0
    1248:	e6 95       	lsr	r30
    124a:	00 1c       	adc	r0, r0
    124c:	ca f7       	brpl	.-14     	; 0x1240 <__divsf3_pse+0x2c>
    124e:	29 d0       	rcall	.+82     	; 0x12a2 <__divsf3_pse+0x8e>
    1250:	fe 2f       	mov	r31, r30
    1252:	27 d0       	rcall	.+78     	; 0x12a2 <__divsf3_pse+0x8e>
    1254:	66 0f       	add	r22, r22
    1256:	77 1f       	adc	r23, r23
    1258:	88 1f       	adc	r24, r24
    125a:	bb 1f       	adc	r27, r27
    125c:	26 17       	cp	r18, r22
    125e:	37 07       	cpc	r19, r23
    1260:	48 07       	cpc	r20, r24
    1262:	ab 07       	cpc	r26, r27
    1264:	b0 e8       	ldi	r27, 0x80	; 128
    1266:	09 f0       	breq	.+2      	; 0x126a <__divsf3_pse+0x56>
    1268:	bb 0b       	sbc	r27, r27
    126a:	80 2d       	mov	r24, r0
    126c:	bf 01       	movw	r22, r30
    126e:	ff 27       	eor	r31, r31
    1270:	93 58       	subi	r25, 0x83	; 131
    1272:	5f 4f       	sbci	r21, 0xFF	; 255
    1274:	2a f0       	brmi	.+10     	; 0x1280 <__divsf3_pse+0x6c>
    1276:	9e 3f       	cpi	r25, 0xFE	; 254
    1278:	51 05       	cpc	r21, r1
    127a:	68 f0       	brcs	.+26     	; 0x1296 <__divsf3_pse+0x82>
    127c:	85 c0       	rjmp	.+266    	; 0x1388 <__fp_inf>
    127e:	cf c0       	rjmp	.+414    	; 0x141e <__fp_szero>
    1280:	5f 3f       	cpi	r21, 0xFF	; 255
    1282:	ec f3       	brlt	.-6      	; 0x127e <__divsf3_pse+0x6a>
    1284:	98 3e       	cpi	r25, 0xE8	; 232
    1286:	dc f3       	brlt	.-10     	; 0x127e <__divsf3_pse+0x6a>
    1288:	86 95       	lsr	r24
    128a:	77 95       	ror	r23
    128c:	67 95       	ror	r22
    128e:	b7 95       	ror	r27
    1290:	f7 95       	ror	r31
    1292:	9f 5f       	subi	r25, 0xFF	; 255
    1294:	c9 f7       	brne	.-14     	; 0x1288 <__divsf3_pse+0x74>
    1296:	88 0f       	add	r24, r24
    1298:	91 1d       	adc	r25, r1
    129a:	96 95       	lsr	r25
    129c:	87 95       	ror	r24
    129e:	97 f9       	bld	r25, 7
    12a0:	08 95       	ret
    12a2:	e1 e0       	ldi	r30, 0x01	; 1
    12a4:	66 0f       	add	r22, r22
    12a6:	77 1f       	adc	r23, r23
    12a8:	88 1f       	adc	r24, r24
    12aa:	bb 1f       	adc	r27, r27
    12ac:	62 17       	cp	r22, r18
    12ae:	73 07       	cpc	r23, r19
    12b0:	84 07       	cpc	r24, r20
    12b2:	ba 07       	cpc	r27, r26
    12b4:	20 f0       	brcs	.+8      	; 0x12be <__divsf3_pse+0xaa>
    12b6:	62 1b       	sub	r22, r18
    12b8:	73 0b       	sbc	r23, r19
    12ba:	84 0b       	sbc	r24, r20
    12bc:	ba 0b       	sbc	r27, r26
    12be:	ee 1f       	adc	r30, r30
    12c0:	88 f7       	brcc	.-30     	; 0x12a4 <__divsf3_pse+0x90>
    12c2:	e0 95       	com	r30
    12c4:	08 95       	ret

000012c6 <__floatunsisf>:
    12c6:	e8 94       	clt
    12c8:	09 c0       	rjmp	.+18     	; 0x12dc <__floatsisf+0x12>

000012ca <__floatsisf>:
    12ca:	97 fb       	bst	r25, 7
    12cc:	3e f4       	brtc	.+14     	; 0x12dc <__floatsisf+0x12>
    12ce:	90 95       	com	r25
    12d0:	80 95       	com	r24
    12d2:	70 95       	com	r23
    12d4:	61 95       	neg	r22
    12d6:	7f 4f       	sbci	r23, 0xFF	; 255
    12d8:	8f 4f       	sbci	r24, 0xFF	; 255
    12da:	9f 4f       	sbci	r25, 0xFF	; 255
    12dc:	99 23       	and	r25, r25
    12de:	a9 f0       	breq	.+42     	; 0x130a <__floatsisf+0x40>
    12e0:	f9 2f       	mov	r31, r25
    12e2:	96 e9       	ldi	r25, 0x96	; 150
    12e4:	bb 27       	eor	r27, r27
    12e6:	93 95       	inc	r25
    12e8:	f6 95       	lsr	r31
    12ea:	87 95       	ror	r24
    12ec:	77 95       	ror	r23
    12ee:	67 95       	ror	r22
    12f0:	b7 95       	ror	r27
    12f2:	f1 11       	cpse	r31, r1
    12f4:	f8 cf       	rjmp	.-16     	; 0x12e6 <__floatsisf+0x1c>
    12f6:	fa f4       	brpl	.+62     	; 0x1336 <__floatsisf+0x6c>
    12f8:	bb 0f       	add	r27, r27
    12fa:	11 f4       	brne	.+4      	; 0x1300 <__floatsisf+0x36>
    12fc:	60 ff       	sbrs	r22, 0
    12fe:	1b c0       	rjmp	.+54     	; 0x1336 <__floatsisf+0x6c>
    1300:	6f 5f       	subi	r22, 0xFF	; 255
    1302:	7f 4f       	sbci	r23, 0xFF	; 255
    1304:	8f 4f       	sbci	r24, 0xFF	; 255
    1306:	9f 4f       	sbci	r25, 0xFF	; 255
    1308:	16 c0       	rjmp	.+44     	; 0x1336 <__floatsisf+0x6c>
    130a:	88 23       	and	r24, r24
    130c:	11 f0       	breq	.+4      	; 0x1312 <__floatsisf+0x48>
    130e:	96 e9       	ldi	r25, 0x96	; 150
    1310:	11 c0       	rjmp	.+34     	; 0x1334 <__floatsisf+0x6a>
    1312:	77 23       	and	r23, r23
    1314:	21 f0       	breq	.+8      	; 0x131e <__floatsisf+0x54>
    1316:	9e e8       	ldi	r25, 0x8E	; 142
    1318:	87 2f       	mov	r24, r23
    131a:	76 2f       	mov	r23, r22
    131c:	05 c0       	rjmp	.+10     	; 0x1328 <__floatsisf+0x5e>
    131e:	66 23       	and	r22, r22
    1320:	71 f0       	breq	.+28     	; 0x133e <__floatsisf+0x74>
    1322:	96 e8       	ldi	r25, 0x86	; 134
    1324:	86 2f       	mov	r24, r22
    1326:	70 e0       	ldi	r23, 0x00	; 0
    1328:	60 e0       	ldi	r22, 0x00	; 0
    132a:	2a f0       	brmi	.+10     	; 0x1336 <__floatsisf+0x6c>
    132c:	9a 95       	dec	r25
    132e:	66 0f       	add	r22, r22
    1330:	77 1f       	adc	r23, r23
    1332:	88 1f       	adc	r24, r24
    1334:	da f7       	brpl	.-10     	; 0x132c <__floatsisf+0x62>
    1336:	88 0f       	add	r24, r24
    1338:	96 95       	lsr	r25
    133a:	87 95       	ror	r24
    133c:	97 f9       	bld	r25, 7
    133e:	08 95       	ret

00001340 <__fp_cmp>:
    1340:	99 0f       	add	r25, r25
    1342:	00 08       	sbc	r0, r0
    1344:	55 0f       	add	r21, r21
    1346:	aa 0b       	sbc	r26, r26
    1348:	e0 e8       	ldi	r30, 0x80	; 128
    134a:	fe ef       	ldi	r31, 0xFE	; 254
    134c:	16 16       	cp	r1, r22
    134e:	17 06       	cpc	r1, r23
    1350:	e8 07       	cpc	r30, r24
    1352:	f9 07       	cpc	r31, r25
    1354:	c0 f0       	brcs	.+48     	; 0x1386 <__fp_cmp+0x46>
    1356:	12 16       	cp	r1, r18
    1358:	13 06       	cpc	r1, r19
    135a:	e4 07       	cpc	r30, r20
    135c:	f5 07       	cpc	r31, r21
    135e:	98 f0       	brcs	.+38     	; 0x1386 <__fp_cmp+0x46>
    1360:	62 1b       	sub	r22, r18
    1362:	73 0b       	sbc	r23, r19
    1364:	84 0b       	sbc	r24, r20
    1366:	95 0b       	sbc	r25, r21
    1368:	39 f4       	brne	.+14     	; 0x1378 <__fp_cmp+0x38>
    136a:	0a 26       	eor	r0, r26
    136c:	61 f0       	breq	.+24     	; 0x1386 <__fp_cmp+0x46>
    136e:	23 2b       	or	r18, r19
    1370:	24 2b       	or	r18, r20
    1372:	25 2b       	or	r18, r21
    1374:	21 f4       	brne	.+8      	; 0x137e <__fp_cmp+0x3e>
    1376:	08 95       	ret
    1378:	0a 26       	eor	r0, r26
    137a:	09 f4       	brne	.+2      	; 0x137e <__fp_cmp+0x3e>
    137c:	a1 40       	sbci	r26, 0x01	; 1
    137e:	a6 95       	lsr	r26
    1380:	8f ef       	ldi	r24, 0xFF	; 255
    1382:	81 1d       	adc	r24, r1
    1384:	81 1d       	adc	r24, r1
    1386:	08 95       	ret

00001388 <__fp_inf>:
    1388:	97 f9       	bld	r25, 7
    138a:	9f 67       	ori	r25, 0x7F	; 127
    138c:	80 e8       	ldi	r24, 0x80	; 128
    138e:	70 e0       	ldi	r23, 0x00	; 0
    1390:	60 e0       	ldi	r22, 0x00	; 0
    1392:	08 95       	ret

00001394 <__fp_nan>:
    1394:	9f ef       	ldi	r25, 0xFF	; 255
    1396:	80 ec       	ldi	r24, 0xC0	; 192
    1398:	08 95       	ret

0000139a <__fp_pscA>:
    139a:	00 24       	eor	r0, r0
    139c:	0a 94       	dec	r0
    139e:	16 16       	cp	r1, r22
    13a0:	17 06       	cpc	r1, r23
    13a2:	18 06       	cpc	r1, r24
    13a4:	09 06       	cpc	r0, r25
    13a6:	08 95       	ret

000013a8 <__fp_pscB>:
    13a8:	00 24       	eor	r0, r0
    13aa:	0a 94       	dec	r0
    13ac:	12 16       	cp	r1, r18
    13ae:	13 06       	cpc	r1, r19
    13b0:	14 06       	cpc	r1, r20
    13b2:	05 06       	cpc	r0, r21
    13b4:	08 95       	ret

000013b6 <__fp_round>:
    13b6:	09 2e       	mov	r0, r25
    13b8:	03 94       	inc	r0
    13ba:	00 0c       	add	r0, r0
    13bc:	11 f4       	brne	.+4      	; 0x13c2 <__fp_round+0xc>
    13be:	88 23       	and	r24, r24
    13c0:	52 f0       	brmi	.+20     	; 0x13d6 <__fp_round+0x20>
    13c2:	bb 0f       	add	r27, r27
    13c4:	40 f4       	brcc	.+16     	; 0x13d6 <__fp_round+0x20>
    13c6:	bf 2b       	or	r27, r31
    13c8:	11 f4       	brne	.+4      	; 0x13ce <__fp_round+0x18>
    13ca:	60 ff       	sbrs	r22, 0
    13cc:	04 c0       	rjmp	.+8      	; 0x13d6 <__fp_round+0x20>
    13ce:	6f 5f       	subi	r22, 0xFF	; 255
    13d0:	7f 4f       	sbci	r23, 0xFF	; 255
    13d2:	8f 4f       	sbci	r24, 0xFF	; 255
    13d4:	9f 4f       	sbci	r25, 0xFF	; 255
    13d6:	08 95       	ret

000013d8 <__fp_split3>:
    13d8:	57 fd       	sbrc	r21, 7
    13da:	90 58       	subi	r25, 0x80	; 128
    13dc:	44 0f       	add	r20, r20
    13de:	55 1f       	adc	r21, r21
    13e0:	59 f0       	breq	.+22     	; 0x13f8 <__fp_splitA+0x10>
    13e2:	5f 3f       	cpi	r21, 0xFF	; 255
    13e4:	71 f0       	breq	.+28     	; 0x1402 <__fp_splitA+0x1a>
    13e6:	47 95       	ror	r20

000013e8 <__fp_splitA>:
    13e8:	88 0f       	add	r24, r24
    13ea:	97 fb       	bst	r25, 7
    13ec:	99 1f       	adc	r25, r25
    13ee:	61 f0       	breq	.+24     	; 0x1408 <__fp_splitA+0x20>
    13f0:	9f 3f       	cpi	r25, 0xFF	; 255
    13f2:	79 f0       	breq	.+30     	; 0x1412 <__fp_splitA+0x2a>
    13f4:	87 95       	ror	r24
    13f6:	08 95       	ret
    13f8:	12 16       	cp	r1, r18
    13fa:	13 06       	cpc	r1, r19
    13fc:	14 06       	cpc	r1, r20
    13fe:	55 1f       	adc	r21, r21
    1400:	f2 cf       	rjmp	.-28     	; 0x13e6 <__fp_split3+0xe>
    1402:	46 95       	lsr	r20
    1404:	f1 df       	rcall	.-30     	; 0x13e8 <__fp_splitA>
    1406:	08 c0       	rjmp	.+16     	; 0x1418 <__fp_splitA+0x30>
    1408:	16 16       	cp	r1, r22
    140a:	17 06       	cpc	r1, r23
    140c:	18 06       	cpc	r1, r24
    140e:	99 1f       	adc	r25, r25
    1410:	f1 cf       	rjmp	.-30     	; 0x13f4 <__fp_splitA+0xc>
    1412:	86 95       	lsr	r24
    1414:	71 05       	cpc	r23, r1
    1416:	61 05       	cpc	r22, r1
    1418:	08 94       	sec
    141a:	08 95       	ret

0000141c <__fp_zero>:
    141c:	e8 94       	clt

0000141e <__fp_szero>:
    141e:	bb 27       	eor	r27, r27
    1420:	66 27       	eor	r22, r22
    1422:	77 27       	eor	r23, r23
    1424:	cb 01       	movw	r24, r22
    1426:	97 f9       	bld	r25, 7
    1428:	08 95       	ret

0000142a <__gesf2>:
    142a:	8a df       	rcall	.-236    	; 0x1340 <__fp_cmp>
    142c:	08 f4       	brcc	.+2      	; 0x1430 <__gesf2+0x6>
    142e:	8f ef       	ldi	r24, 0xFF	; 255
    1430:	08 95       	ret

00001432 <__mulsf3>:
    1432:	0b d0       	rcall	.+22     	; 0x144a <__mulsf3x>
    1434:	c0 cf       	rjmp	.-128    	; 0x13b6 <__fp_round>
    1436:	b1 df       	rcall	.-158    	; 0x139a <__fp_pscA>
    1438:	28 f0       	brcs	.+10     	; 0x1444 <__mulsf3+0x12>
    143a:	b6 df       	rcall	.-148    	; 0x13a8 <__fp_pscB>
    143c:	18 f0       	brcs	.+6      	; 0x1444 <__mulsf3+0x12>
    143e:	95 23       	and	r25, r21
    1440:	09 f0       	breq	.+2      	; 0x1444 <__mulsf3+0x12>
    1442:	a2 cf       	rjmp	.-188    	; 0x1388 <__fp_inf>
    1444:	a7 cf       	rjmp	.-178    	; 0x1394 <__fp_nan>
    1446:	11 24       	eor	r1, r1
    1448:	ea cf       	rjmp	.-44     	; 0x141e <__fp_szero>

0000144a <__mulsf3x>:
    144a:	c6 df       	rcall	.-116    	; 0x13d8 <__fp_split3>
    144c:	a0 f3       	brcs	.-24     	; 0x1436 <__mulsf3+0x4>

0000144e <__mulsf3_pse>:
    144e:	95 9f       	mul	r25, r21
    1450:	d1 f3       	breq	.-12     	; 0x1446 <__mulsf3+0x14>
    1452:	95 0f       	add	r25, r21
    1454:	50 e0       	ldi	r21, 0x00	; 0
    1456:	55 1f       	adc	r21, r21
    1458:	62 9f       	mul	r22, r18
    145a:	f0 01       	movw	r30, r0
    145c:	72 9f       	mul	r23, r18
    145e:	bb 27       	eor	r27, r27
    1460:	f0 0d       	add	r31, r0
    1462:	b1 1d       	adc	r27, r1
    1464:	63 9f       	mul	r22, r19
    1466:	aa 27       	eor	r26, r26
    1468:	f0 0d       	add	r31, r0
    146a:	b1 1d       	adc	r27, r1
    146c:	aa 1f       	adc	r26, r26
    146e:	64 9f       	mul	r22, r20
    1470:	66 27       	eor	r22, r22
    1472:	b0 0d       	add	r27, r0
    1474:	a1 1d       	adc	r26, r1
    1476:	66 1f       	adc	r22, r22
    1478:	82 9f       	mul	r24, r18
    147a:	22 27       	eor	r18, r18
    147c:	b0 0d       	add	r27, r0
    147e:	a1 1d       	adc	r26, r1
    1480:	62 1f       	adc	r22, r18
    1482:	73 9f       	mul	r23, r19
    1484:	b0 0d       	add	r27, r0
    1486:	a1 1d       	adc	r26, r1
    1488:	62 1f       	adc	r22, r18
    148a:	83 9f       	mul	r24, r19
    148c:	a0 0d       	add	r26, r0
    148e:	61 1d       	adc	r22, r1
    1490:	22 1f       	adc	r18, r18
    1492:	74 9f       	mul	r23, r20
    1494:	33 27       	eor	r19, r19
    1496:	a0 0d       	add	r26, r0
    1498:	61 1d       	adc	r22, r1
    149a:	23 1f       	adc	r18, r19
    149c:	84 9f       	mul	r24, r20
    149e:	60 0d       	add	r22, r0
    14a0:	21 1d       	adc	r18, r1
    14a2:	82 2f       	mov	r24, r18
    14a4:	76 2f       	mov	r23, r22
    14a6:	6a 2f       	mov	r22, r26
    14a8:	11 24       	eor	r1, r1
    14aa:	9f 57       	subi	r25, 0x7F	; 127
    14ac:	50 40       	sbci	r21, 0x00	; 0
    14ae:	8a f0       	brmi	.+34     	; 0x14d2 <__mulsf3_pse+0x84>
    14b0:	e1 f0       	breq	.+56     	; 0x14ea <__mulsf3_pse+0x9c>
    14b2:	88 23       	and	r24, r24
    14b4:	4a f0       	brmi	.+18     	; 0x14c8 <__mulsf3_pse+0x7a>
    14b6:	ee 0f       	add	r30, r30
    14b8:	ff 1f       	adc	r31, r31
    14ba:	bb 1f       	adc	r27, r27
    14bc:	66 1f       	adc	r22, r22
    14be:	77 1f       	adc	r23, r23
    14c0:	88 1f       	adc	r24, r24
    14c2:	91 50       	subi	r25, 0x01	; 1
    14c4:	50 40       	sbci	r21, 0x00	; 0
    14c6:	a9 f7       	brne	.-22     	; 0x14b2 <__mulsf3_pse+0x64>
    14c8:	9e 3f       	cpi	r25, 0xFE	; 254
    14ca:	51 05       	cpc	r21, r1
    14cc:	70 f0       	brcs	.+28     	; 0x14ea <__mulsf3_pse+0x9c>
    14ce:	5c cf       	rjmp	.-328    	; 0x1388 <__fp_inf>
    14d0:	a6 cf       	rjmp	.-180    	; 0x141e <__fp_szero>
    14d2:	5f 3f       	cpi	r21, 0xFF	; 255
    14d4:	ec f3       	brlt	.-6      	; 0x14d0 <__mulsf3_pse+0x82>
    14d6:	98 3e       	cpi	r25, 0xE8	; 232
    14d8:	dc f3       	brlt	.-10     	; 0x14d0 <__mulsf3_pse+0x82>
    14da:	86 95       	lsr	r24
    14dc:	77 95       	ror	r23
    14de:	67 95       	ror	r22
    14e0:	b7 95       	ror	r27
    14e2:	f7 95       	ror	r31
    14e4:	e7 95       	ror	r30
    14e6:	9f 5f       	subi	r25, 0xFF	; 255
    14e8:	c1 f7       	brne	.-16     	; 0x14da <__mulsf3_pse+0x8c>
    14ea:	fe 2b       	or	r31, r30
    14ec:	88 0f       	add	r24, r24
    14ee:	91 1d       	adc	r25, r1
    14f0:	96 95       	lsr	r25
    14f2:	87 95       	ror	r24
    14f4:	97 f9       	bld	r25, 7
    14f6:	08 95       	ret

000014f8 <vfprintf>:
    14f8:	a0 e1       	ldi	r26, 0x10	; 16
    14fa:	b0 e0       	ldi	r27, 0x00	; 0
    14fc:	e1 e8       	ldi	r30, 0x81	; 129
    14fe:	fa e0       	ldi	r31, 0x0A	; 10
    1500:	59 c3       	rjmp	.+1714   	; 0x1bb4 <__prologue_saves__>
    1502:	7c 01       	movw	r14, r24
    1504:	1b 01       	movw	r2, r22
    1506:	6a 01       	movw	r12, r20
    1508:	fc 01       	movw	r30, r24
    150a:	17 82       	std	Z+7, r1	; 0x07
    150c:	16 82       	std	Z+6, r1	; 0x06
    150e:	83 81       	ldd	r24, Z+3	; 0x03
    1510:	81 ff       	sbrs	r24, 1
    1512:	2a c3       	rjmp	.+1620   	; 0x1b68 <vfprintf+0x670>
    1514:	9e 01       	movw	r18, r28
    1516:	2f 5f       	subi	r18, 0xFF	; 255
    1518:	3f 4f       	sbci	r19, 0xFF	; 255
    151a:	39 01       	movw	r6, r18
    151c:	f7 01       	movw	r30, r14
    151e:	93 81       	ldd	r25, Z+3	; 0x03
    1520:	f1 01       	movw	r30, r2
    1522:	93 fd       	sbrc	r25, 3
    1524:	85 91       	lpm	r24, Z+
    1526:	93 ff       	sbrs	r25, 3
    1528:	81 91       	ld	r24, Z+
    152a:	1f 01       	movw	r2, r30
    152c:	88 23       	and	r24, r24
    152e:	09 f4       	brne	.+2      	; 0x1532 <vfprintf+0x3a>
    1530:	17 c3       	rjmp	.+1582   	; 0x1b60 <vfprintf+0x668>
    1532:	85 32       	cpi	r24, 0x25	; 37
    1534:	39 f4       	brne	.+14     	; 0x1544 <vfprintf+0x4c>
    1536:	93 fd       	sbrc	r25, 3
    1538:	85 91       	lpm	r24, Z+
    153a:	93 ff       	sbrs	r25, 3
    153c:	81 91       	ld	r24, Z+
    153e:	1f 01       	movw	r2, r30
    1540:	85 32       	cpi	r24, 0x25	; 37
    1542:	31 f4       	brne	.+12     	; 0x1550 <vfprintf+0x58>
    1544:	b7 01       	movw	r22, r14
    1546:	90 e0       	ldi	r25, 0x00	; 0
    1548:	65 d4       	rcall	.+2250   	; 0x1e14 <fputc>
    154a:	56 01       	movw	r10, r12
    154c:	65 01       	movw	r12, r10
    154e:	e6 cf       	rjmp	.-52     	; 0x151c <vfprintf+0x24>
    1550:	10 e0       	ldi	r17, 0x00	; 0
    1552:	51 2c       	mov	r5, r1
    1554:	91 2c       	mov	r9, r1
    1556:	ff e1       	ldi	r31, 0x1F	; 31
    1558:	f9 15       	cp	r31, r9
    155a:	d8 f0       	brcs	.+54     	; 0x1592 <vfprintf+0x9a>
    155c:	8b 32       	cpi	r24, 0x2B	; 43
    155e:	79 f0       	breq	.+30     	; 0x157e <vfprintf+0x86>
    1560:	38 f4       	brcc	.+14     	; 0x1570 <vfprintf+0x78>
    1562:	80 32       	cpi	r24, 0x20	; 32
    1564:	79 f0       	breq	.+30     	; 0x1584 <vfprintf+0x8c>
    1566:	83 32       	cpi	r24, 0x23	; 35
    1568:	a1 f4       	brne	.+40     	; 0x1592 <vfprintf+0x9a>
    156a:	f9 2d       	mov	r31, r9
    156c:	f0 61       	ori	r31, 0x10	; 16
    156e:	2e c0       	rjmp	.+92     	; 0x15cc <vfprintf+0xd4>
    1570:	8d 32       	cpi	r24, 0x2D	; 45
    1572:	61 f0       	breq	.+24     	; 0x158c <vfprintf+0x94>
    1574:	80 33       	cpi	r24, 0x30	; 48
    1576:	69 f4       	brne	.+26     	; 0x1592 <vfprintf+0x9a>
    1578:	29 2d       	mov	r18, r9
    157a:	21 60       	ori	r18, 0x01	; 1
    157c:	2d c0       	rjmp	.+90     	; 0x15d8 <vfprintf+0xe0>
    157e:	39 2d       	mov	r19, r9
    1580:	32 60       	ori	r19, 0x02	; 2
    1582:	93 2e       	mov	r9, r19
    1584:	89 2d       	mov	r24, r9
    1586:	84 60       	ori	r24, 0x04	; 4
    1588:	98 2e       	mov	r9, r24
    158a:	2a c0       	rjmp	.+84     	; 0x15e0 <vfprintf+0xe8>
    158c:	e9 2d       	mov	r30, r9
    158e:	e8 60       	ori	r30, 0x08	; 8
    1590:	15 c0       	rjmp	.+42     	; 0x15bc <vfprintf+0xc4>
    1592:	97 fc       	sbrc	r9, 7
    1594:	2d c0       	rjmp	.+90     	; 0x15f0 <vfprintf+0xf8>
    1596:	20 ed       	ldi	r18, 0xD0	; 208
    1598:	28 0f       	add	r18, r24
    159a:	2a 30       	cpi	r18, 0x0A	; 10
    159c:	88 f4       	brcc	.+34     	; 0x15c0 <vfprintf+0xc8>
    159e:	96 fe       	sbrs	r9, 6
    15a0:	06 c0       	rjmp	.+12     	; 0x15ae <vfprintf+0xb6>
    15a2:	3a e0       	ldi	r19, 0x0A	; 10
    15a4:	13 9f       	mul	r17, r19
    15a6:	20 0d       	add	r18, r0
    15a8:	11 24       	eor	r1, r1
    15aa:	12 2f       	mov	r17, r18
    15ac:	19 c0       	rjmp	.+50     	; 0x15e0 <vfprintf+0xe8>
    15ae:	8a e0       	ldi	r24, 0x0A	; 10
    15b0:	58 9e       	mul	r5, r24
    15b2:	20 0d       	add	r18, r0
    15b4:	11 24       	eor	r1, r1
    15b6:	52 2e       	mov	r5, r18
    15b8:	e9 2d       	mov	r30, r9
    15ba:	e0 62       	ori	r30, 0x20	; 32
    15bc:	9e 2e       	mov	r9, r30
    15be:	10 c0       	rjmp	.+32     	; 0x15e0 <vfprintf+0xe8>
    15c0:	8e 32       	cpi	r24, 0x2E	; 46
    15c2:	31 f4       	brne	.+12     	; 0x15d0 <vfprintf+0xd8>
    15c4:	96 fc       	sbrc	r9, 6
    15c6:	cc c2       	rjmp	.+1432   	; 0x1b60 <vfprintf+0x668>
    15c8:	f9 2d       	mov	r31, r9
    15ca:	f0 64       	ori	r31, 0x40	; 64
    15cc:	9f 2e       	mov	r9, r31
    15ce:	08 c0       	rjmp	.+16     	; 0x15e0 <vfprintf+0xe8>
    15d0:	8c 36       	cpi	r24, 0x6C	; 108
    15d2:	21 f4       	brne	.+8      	; 0x15dc <vfprintf+0xe4>
    15d4:	29 2d       	mov	r18, r9
    15d6:	20 68       	ori	r18, 0x80	; 128
    15d8:	92 2e       	mov	r9, r18
    15da:	02 c0       	rjmp	.+4      	; 0x15e0 <vfprintf+0xe8>
    15dc:	88 36       	cpi	r24, 0x68	; 104
    15de:	41 f4       	brne	.+16     	; 0x15f0 <vfprintf+0xf8>
    15e0:	f1 01       	movw	r30, r2
    15e2:	93 fd       	sbrc	r25, 3
    15e4:	85 91       	lpm	r24, Z+
    15e6:	93 ff       	sbrs	r25, 3
    15e8:	81 91       	ld	r24, Z+
    15ea:	1f 01       	movw	r2, r30
    15ec:	81 11       	cpse	r24, r1
    15ee:	b3 cf       	rjmp	.-154    	; 0x1556 <vfprintf+0x5e>
    15f0:	9b eb       	ldi	r25, 0xBB	; 187
    15f2:	98 0f       	add	r25, r24
    15f4:	93 30       	cpi	r25, 0x03	; 3
    15f6:	20 f4       	brcc	.+8      	; 0x1600 <vfprintf+0x108>
    15f8:	99 2d       	mov	r25, r9
    15fa:	90 61       	ori	r25, 0x10	; 16
    15fc:	80 5e       	subi	r24, 0xE0	; 224
    15fe:	07 c0       	rjmp	.+14     	; 0x160e <vfprintf+0x116>
    1600:	9b e9       	ldi	r25, 0x9B	; 155
    1602:	98 0f       	add	r25, r24
    1604:	93 30       	cpi	r25, 0x03	; 3
    1606:	08 f0       	brcs	.+2      	; 0x160a <vfprintf+0x112>
    1608:	59 c1       	rjmp	.+690    	; 0x18bc <vfprintf+0x3c4>
    160a:	99 2d       	mov	r25, r9
    160c:	9f 7e       	andi	r25, 0xEF	; 239
    160e:	96 ff       	sbrs	r25, 6
    1610:	16 e0       	ldi	r17, 0x06	; 6
    1612:	9f 73       	andi	r25, 0x3F	; 63
    1614:	99 2e       	mov	r9, r25
    1616:	85 36       	cpi	r24, 0x65	; 101
    1618:	19 f4       	brne	.+6      	; 0x1620 <vfprintf+0x128>
    161a:	90 64       	ori	r25, 0x40	; 64
    161c:	99 2e       	mov	r9, r25
    161e:	08 c0       	rjmp	.+16     	; 0x1630 <vfprintf+0x138>
    1620:	86 36       	cpi	r24, 0x66	; 102
    1622:	21 f4       	brne	.+8      	; 0x162c <vfprintf+0x134>
    1624:	39 2f       	mov	r19, r25
    1626:	30 68       	ori	r19, 0x80	; 128
    1628:	93 2e       	mov	r9, r19
    162a:	02 c0       	rjmp	.+4      	; 0x1630 <vfprintf+0x138>
    162c:	11 11       	cpse	r17, r1
    162e:	11 50       	subi	r17, 0x01	; 1
    1630:	97 fe       	sbrs	r9, 7
    1632:	07 c0       	rjmp	.+14     	; 0x1642 <vfprintf+0x14a>
    1634:	1c 33       	cpi	r17, 0x3C	; 60
    1636:	50 f4       	brcc	.+20     	; 0x164c <vfprintf+0x154>
    1638:	44 24       	eor	r4, r4
    163a:	43 94       	inc	r4
    163c:	41 0e       	add	r4, r17
    163e:	27 e0       	ldi	r18, 0x07	; 7
    1640:	0b c0       	rjmp	.+22     	; 0x1658 <vfprintf+0x160>
    1642:	18 30       	cpi	r17, 0x08	; 8
    1644:	38 f0       	brcs	.+14     	; 0x1654 <vfprintf+0x15c>
    1646:	27 e0       	ldi	r18, 0x07	; 7
    1648:	17 e0       	ldi	r17, 0x07	; 7
    164a:	05 c0       	rjmp	.+10     	; 0x1656 <vfprintf+0x15e>
    164c:	27 e0       	ldi	r18, 0x07	; 7
    164e:	9c e3       	ldi	r25, 0x3C	; 60
    1650:	49 2e       	mov	r4, r25
    1652:	02 c0       	rjmp	.+4      	; 0x1658 <vfprintf+0x160>
    1654:	21 2f       	mov	r18, r17
    1656:	41 2c       	mov	r4, r1
    1658:	56 01       	movw	r10, r12
    165a:	84 e0       	ldi	r24, 0x04	; 4
    165c:	a8 0e       	add	r10, r24
    165e:	b1 1c       	adc	r11, r1
    1660:	f6 01       	movw	r30, r12
    1662:	60 81       	ld	r22, Z
    1664:	71 81       	ldd	r23, Z+1	; 0x01
    1666:	82 81       	ldd	r24, Z+2	; 0x02
    1668:	93 81       	ldd	r25, Z+3	; 0x03
    166a:	04 2d       	mov	r16, r4
    166c:	a3 01       	movw	r20, r6
    166e:	d9 d2       	rcall	.+1458   	; 0x1c22 <__ftoa_engine>
    1670:	6c 01       	movw	r12, r24
    1672:	f9 81       	ldd	r31, Y+1	; 0x01
    1674:	fc 87       	std	Y+12, r31	; 0x0c
    1676:	f0 ff       	sbrs	r31, 0
    1678:	02 c0       	rjmp	.+4      	; 0x167e <vfprintf+0x186>
    167a:	f3 ff       	sbrs	r31, 3
    167c:	06 c0       	rjmp	.+12     	; 0x168a <vfprintf+0x192>
    167e:	91 fc       	sbrc	r9, 1
    1680:	06 c0       	rjmp	.+12     	; 0x168e <vfprintf+0x196>
    1682:	92 fe       	sbrs	r9, 2
    1684:	06 c0       	rjmp	.+12     	; 0x1692 <vfprintf+0x19a>
    1686:	00 e2       	ldi	r16, 0x20	; 32
    1688:	05 c0       	rjmp	.+10     	; 0x1694 <vfprintf+0x19c>
    168a:	0d e2       	ldi	r16, 0x2D	; 45
    168c:	03 c0       	rjmp	.+6      	; 0x1694 <vfprintf+0x19c>
    168e:	0b e2       	ldi	r16, 0x2B	; 43
    1690:	01 c0       	rjmp	.+2      	; 0x1694 <vfprintf+0x19c>
    1692:	00 e0       	ldi	r16, 0x00	; 0
    1694:	8c 85       	ldd	r24, Y+12	; 0x0c
    1696:	8c 70       	andi	r24, 0x0C	; 12
    1698:	19 f0       	breq	.+6      	; 0x16a0 <vfprintf+0x1a8>
    169a:	01 11       	cpse	r16, r1
    169c:	43 c2       	rjmp	.+1158   	; 0x1b24 <vfprintf+0x62c>
    169e:	80 c2       	rjmp	.+1280   	; 0x1ba0 <vfprintf+0x6a8>
    16a0:	97 fe       	sbrs	r9, 7
    16a2:	10 c0       	rjmp	.+32     	; 0x16c4 <vfprintf+0x1cc>
    16a4:	4c 0c       	add	r4, r12
    16a6:	fc 85       	ldd	r31, Y+12	; 0x0c
    16a8:	f4 ff       	sbrs	r31, 4
    16aa:	04 c0       	rjmp	.+8      	; 0x16b4 <vfprintf+0x1bc>
    16ac:	8a 81       	ldd	r24, Y+2	; 0x02
    16ae:	81 33       	cpi	r24, 0x31	; 49
    16b0:	09 f4       	brne	.+2      	; 0x16b4 <vfprintf+0x1bc>
    16b2:	4a 94       	dec	r4
    16b4:	14 14       	cp	r1, r4
    16b6:	74 f5       	brge	.+92     	; 0x1714 <vfprintf+0x21c>
    16b8:	28 e0       	ldi	r18, 0x08	; 8
    16ba:	24 15       	cp	r18, r4
    16bc:	78 f5       	brcc	.+94     	; 0x171c <vfprintf+0x224>
    16be:	88 e0       	ldi	r24, 0x08	; 8
    16c0:	48 2e       	mov	r4, r24
    16c2:	2c c0       	rjmp	.+88     	; 0x171c <vfprintf+0x224>
    16c4:	96 fc       	sbrc	r9, 6
    16c6:	2a c0       	rjmp	.+84     	; 0x171c <vfprintf+0x224>
    16c8:	81 2f       	mov	r24, r17
    16ca:	90 e0       	ldi	r25, 0x00	; 0
    16cc:	8c 15       	cp	r24, r12
    16ce:	9d 05       	cpc	r25, r13
    16d0:	9c f0       	brlt	.+38     	; 0x16f8 <vfprintf+0x200>
    16d2:	3c ef       	ldi	r19, 0xFC	; 252
    16d4:	c3 16       	cp	r12, r19
    16d6:	3f ef       	ldi	r19, 0xFF	; 255
    16d8:	d3 06       	cpc	r13, r19
    16da:	74 f0       	brlt	.+28     	; 0x16f8 <vfprintf+0x200>
    16dc:	89 2d       	mov	r24, r9
    16de:	80 68       	ori	r24, 0x80	; 128
    16e0:	98 2e       	mov	r9, r24
    16e2:	0a c0       	rjmp	.+20     	; 0x16f8 <vfprintf+0x200>
    16e4:	e2 e0       	ldi	r30, 0x02	; 2
    16e6:	f0 e0       	ldi	r31, 0x00	; 0
    16e8:	ec 0f       	add	r30, r28
    16ea:	fd 1f       	adc	r31, r29
    16ec:	e1 0f       	add	r30, r17
    16ee:	f1 1d       	adc	r31, r1
    16f0:	80 81       	ld	r24, Z
    16f2:	80 33       	cpi	r24, 0x30	; 48
    16f4:	19 f4       	brne	.+6      	; 0x16fc <vfprintf+0x204>
    16f6:	11 50       	subi	r17, 0x01	; 1
    16f8:	11 11       	cpse	r17, r1
    16fa:	f4 cf       	rjmp	.-24     	; 0x16e4 <vfprintf+0x1ec>
    16fc:	97 fe       	sbrs	r9, 7
    16fe:	0e c0       	rjmp	.+28     	; 0x171c <vfprintf+0x224>
    1700:	44 24       	eor	r4, r4
    1702:	43 94       	inc	r4
    1704:	41 0e       	add	r4, r17
    1706:	81 2f       	mov	r24, r17
    1708:	90 e0       	ldi	r25, 0x00	; 0
    170a:	c8 16       	cp	r12, r24
    170c:	d9 06       	cpc	r13, r25
    170e:	2c f4       	brge	.+10     	; 0x171a <vfprintf+0x222>
    1710:	1c 19       	sub	r17, r12
    1712:	04 c0       	rjmp	.+8      	; 0x171c <vfprintf+0x224>
    1714:	44 24       	eor	r4, r4
    1716:	43 94       	inc	r4
    1718:	01 c0       	rjmp	.+2      	; 0x171c <vfprintf+0x224>
    171a:	10 e0       	ldi	r17, 0x00	; 0
    171c:	97 fe       	sbrs	r9, 7
    171e:	06 c0       	rjmp	.+12     	; 0x172c <vfprintf+0x234>
    1720:	1c 14       	cp	r1, r12
    1722:	1d 04       	cpc	r1, r13
    1724:	34 f4       	brge	.+12     	; 0x1732 <vfprintf+0x23a>
    1726:	c6 01       	movw	r24, r12
    1728:	01 96       	adiw	r24, 0x01	; 1
    172a:	05 c0       	rjmp	.+10     	; 0x1736 <vfprintf+0x23e>
    172c:	85 e0       	ldi	r24, 0x05	; 5
    172e:	90 e0       	ldi	r25, 0x00	; 0
    1730:	02 c0       	rjmp	.+4      	; 0x1736 <vfprintf+0x23e>
    1732:	81 e0       	ldi	r24, 0x01	; 1
    1734:	90 e0       	ldi	r25, 0x00	; 0
    1736:	01 11       	cpse	r16, r1
    1738:	01 96       	adiw	r24, 0x01	; 1
    173a:	11 23       	and	r17, r17
    173c:	31 f0       	breq	.+12     	; 0x174a <vfprintf+0x252>
    173e:	21 2f       	mov	r18, r17
    1740:	30 e0       	ldi	r19, 0x00	; 0
    1742:	2f 5f       	subi	r18, 0xFF	; 255
    1744:	3f 4f       	sbci	r19, 0xFF	; 255
    1746:	82 0f       	add	r24, r18
    1748:	93 1f       	adc	r25, r19
    174a:	25 2d       	mov	r18, r5
    174c:	30 e0       	ldi	r19, 0x00	; 0
    174e:	82 17       	cp	r24, r18
    1750:	93 07       	cpc	r25, r19
    1752:	14 f4       	brge	.+4      	; 0x1758 <vfprintf+0x260>
    1754:	58 1a       	sub	r5, r24
    1756:	01 c0       	rjmp	.+2      	; 0x175a <vfprintf+0x262>
    1758:	51 2c       	mov	r5, r1
    175a:	89 2d       	mov	r24, r9
    175c:	89 70       	andi	r24, 0x09	; 9
    175e:	41 f4       	brne	.+16     	; 0x1770 <vfprintf+0x278>
    1760:	55 20       	and	r5, r5
    1762:	31 f0       	breq	.+12     	; 0x1770 <vfprintf+0x278>
    1764:	b7 01       	movw	r22, r14
    1766:	80 e2       	ldi	r24, 0x20	; 32
    1768:	90 e0       	ldi	r25, 0x00	; 0
    176a:	54 d3       	rcall	.+1704   	; 0x1e14 <fputc>
    176c:	5a 94       	dec	r5
    176e:	f8 cf       	rjmp	.-16     	; 0x1760 <vfprintf+0x268>
    1770:	00 23       	and	r16, r16
    1772:	21 f0       	breq	.+8      	; 0x177c <vfprintf+0x284>
    1774:	b7 01       	movw	r22, r14
    1776:	80 2f       	mov	r24, r16
    1778:	90 e0       	ldi	r25, 0x00	; 0
    177a:	4c d3       	rcall	.+1688   	; 0x1e14 <fputc>
    177c:	93 fc       	sbrc	r9, 3
    177e:	08 c0       	rjmp	.+16     	; 0x1790 <vfprintf+0x298>
    1780:	55 20       	and	r5, r5
    1782:	31 f0       	breq	.+12     	; 0x1790 <vfprintf+0x298>
    1784:	b7 01       	movw	r22, r14
    1786:	80 e3       	ldi	r24, 0x30	; 48
    1788:	90 e0       	ldi	r25, 0x00	; 0
    178a:	44 d3       	rcall	.+1672   	; 0x1e14 <fputc>
    178c:	5a 94       	dec	r5
    178e:	f8 cf       	rjmp	.-16     	; 0x1780 <vfprintf+0x288>
    1790:	97 fe       	sbrs	r9, 7
    1792:	4a c0       	rjmp	.+148    	; 0x1828 <vfprintf+0x330>
    1794:	46 01       	movw	r8, r12
    1796:	d7 fe       	sbrs	r13, 7
    1798:	02 c0       	rjmp	.+4      	; 0x179e <vfprintf+0x2a6>
    179a:	81 2c       	mov	r8, r1
    179c:	91 2c       	mov	r9, r1
    179e:	c6 01       	movw	r24, r12
    17a0:	88 19       	sub	r24, r8
    17a2:	99 09       	sbc	r25, r9
    17a4:	f3 01       	movw	r30, r6
    17a6:	e8 0f       	add	r30, r24
    17a8:	f9 1f       	adc	r31, r25
    17aa:	fe 87       	std	Y+14, r31	; 0x0e
    17ac:	ed 87       	std	Y+13, r30	; 0x0d
    17ae:	96 01       	movw	r18, r12
    17b0:	24 19       	sub	r18, r4
    17b2:	31 09       	sbc	r19, r1
    17b4:	38 8b       	std	Y+16, r19	; 0x10
    17b6:	2f 87       	std	Y+15, r18	; 0x0f
    17b8:	01 2f       	mov	r16, r17
    17ba:	10 e0       	ldi	r17, 0x00	; 0
    17bc:	11 95       	neg	r17
    17be:	01 95       	neg	r16
    17c0:	11 09       	sbc	r17, r1
    17c2:	3f ef       	ldi	r19, 0xFF	; 255
    17c4:	83 16       	cp	r8, r19
    17c6:	93 06       	cpc	r9, r19
    17c8:	21 f4       	brne	.+8      	; 0x17d2 <vfprintf+0x2da>
    17ca:	b7 01       	movw	r22, r14
    17cc:	8e e2       	ldi	r24, 0x2E	; 46
    17ce:	90 e0       	ldi	r25, 0x00	; 0
    17d0:	21 d3       	rcall	.+1602   	; 0x1e14 <fputc>
    17d2:	c8 14       	cp	r12, r8
    17d4:	d9 04       	cpc	r13, r9
    17d6:	4c f0       	brlt	.+18     	; 0x17ea <vfprintf+0x2f2>
    17d8:	8f 85       	ldd	r24, Y+15	; 0x0f
    17da:	98 89       	ldd	r25, Y+16	; 0x10
    17dc:	88 15       	cp	r24, r8
    17de:	99 05       	cpc	r25, r9
    17e0:	24 f4       	brge	.+8      	; 0x17ea <vfprintf+0x2f2>
    17e2:	ed 85       	ldd	r30, Y+13	; 0x0d
    17e4:	fe 85       	ldd	r31, Y+14	; 0x0e
    17e6:	81 81       	ldd	r24, Z+1	; 0x01
    17e8:	01 c0       	rjmp	.+2      	; 0x17ec <vfprintf+0x2f4>
    17ea:	80 e3       	ldi	r24, 0x30	; 48
    17ec:	f1 e0       	ldi	r31, 0x01	; 1
    17ee:	8f 1a       	sub	r8, r31
    17f0:	91 08       	sbc	r9, r1
    17f2:	2d 85       	ldd	r18, Y+13	; 0x0d
    17f4:	3e 85       	ldd	r19, Y+14	; 0x0e
    17f6:	2f 5f       	subi	r18, 0xFF	; 255
    17f8:	3f 4f       	sbci	r19, 0xFF	; 255
    17fa:	3e 87       	std	Y+14, r19	; 0x0e
    17fc:	2d 87       	std	Y+13, r18	; 0x0d
    17fe:	80 16       	cp	r8, r16
    1800:	91 06       	cpc	r9, r17
    1802:	24 f0       	brlt	.+8      	; 0x180c <vfprintf+0x314>
    1804:	b7 01       	movw	r22, r14
    1806:	90 e0       	ldi	r25, 0x00	; 0
    1808:	05 d3       	rcall	.+1546   	; 0x1e14 <fputc>
    180a:	db cf       	rjmp	.-74     	; 0x17c2 <vfprintf+0x2ca>
    180c:	c8 14       	cp	r12, r8
    180e:	d9 04       	cpc	r13, r9
    1810:	41 f4       	brne	.+16     	; 0x1822 <vfprintf+0x32a>
    1812:	9a 81       	ldd	r25, Y+2	; 0x02
    1814:	96 33       	cpi	r25, 0x36	; 54
    1816:	20 f4       	brcc	.+8      	; 0x1820 <vfprintf+0x328>
    1818:	95 33       	cpi	r25, 0x35	; 53
    181a:	19 f4       	brne	.+6      	; 0x1822 <vfprintf+0x32a>
    181c:	3c 85       	ldd	r19, Y+12	; 0x0c
    181e:	34 ff       	sbrs	r19, 4
    1820:	81 e3       	ldi	r24, 0x31	; 49
    1822:	b7 01       	movw	r22, r14
    1824:	90 e0       	ldi	r25, 0x00	; 0
    1826:	48 c0       	rjmp	.+144    	; 0x18b8 <vfprintf+0x3c0>
    1828:	8a 81       	ldd	r24, Y+2	; 0x02
    182a:	81 33       	cpi	r24, 0x31	; 49
    182c:	19 f0       	breq	.+6      	; 0x1834 <vfprintf+0x33c>
    182e:	9c 85       	ldd	r25, Y+12	; 0x0c
    1830:	9f 7e       	andi	r25, 0xEF	; 239
    1832:	9c 87       	std	Y+12, r25	; 0x0c
    1834:	b7 01       	movw	r22, r14
    1836:	90 e0       	ldi	r25, 0x00	; 0
    1838:	ed d2       	rcall	.+1498   	; 0x1e14 <fputc>
    183a:	11 11       	cpse	r17, r1
    183c:	05 c0       	rjmp	.+10     	; 0x1848 <vfprintf+0x350>
    183e:	94 fc       	sbrc	r9, 4
    1840:	16 c0       	rjmp	.+44     	; 0x186e <vfprintf+0x376>
    1842:	85 e6       	ldi	r24, 0x65	; 101
    1844:	90 e0       	ldi	r25, 0x00	; 0
    1846:	15 c0       	rjmp	.+42     	; 0x1872 <vfprintf+0x37a>
    1848:	b7 01       	movw	r22, r14
    184a:	8e e2       	ldi	r24, 0x2E	; 46
    184c:	90 e0       	ldi	r25, 0x00	; 0
    184e:	e2 d2       	rcall	.+1476   	; 0x1e14 <fputc>
    1850:	1e 5f       	subi	r17, 0xFE	; 254
    1852:	82 e0       	ldi	r24, 0x02	; 2
    1854:	01 e0       	ldi	r16, 0x01	; 1
    1856:	08 0f       	add	r16, r24
    1858:	f3 01       	movw	r30, r6
    185a:	e8 0f       	add	r30, r24
    185c:	f1 1d       	adc	r31, r1
    185e:	80 81       	ld	r24, Z
    1860:	b7 01       	movw	r22, r14
    1862:	90 e0       	ldi	r25, 0x00	; 0
    1864:	d7 d2       	rcall	.+1454   	; 0x1e14 <fputc>
    1866:	80 2f       	mov	r24, r16
    1868:	01 13       	cpse	r16, r17
    186a:	f4 cf       	rjmp	.-24     	; 0x1854 <vfprintf+0x35c>
    186c:	e8 cf       	rjmp	.-48     	; 0x183e <vfprintf+0x346>
    186e:	85 e4       	ldi	r24, 0x45	; 69
    1870:	90 e0       	ldi	r25, 0x00	; 0
    1872:	b7 01       	movw	r22, r14
    1874:	cf d2       	rcall	.+1438   	; 0x1e14 <fputc>
    1876:	d7 fc       	sbrc	r13, 7
    1878:	06 c0       	rjmp	.+12     	; 0x1886 <vfprintf+0x38e>
    187a:	c1 14       	cp	r12, r1
    187c:	d1 04       	cpc	r13, r1
    187e:	41 f4       	brne	.+16     	; 0x1890 <vfprintf+0x398>
    1880:	ec 85       	ldd	r30, Y+12	; 0x0c
    1882:	e4 ff       	sbrs	r30, 4
    1884:	05 c0       	rjmp	.+10     	; 0x1890 <vfprintf+0x398>
    1886:	d1 94       	neg	r13
    1888:	c1 94       	neg	r12
    188a:	d1 08       	sbc	r13, r1
    188c:	8d e2       	ldi	r24, 0x2D	; 45
    188e:	01 c0       	rjmp	.+2      	; 0x1892 <vfprintf+0x39a>
    1890:	8b e2       	ldi	r24, 0x2B	; 43
    1892:	b7 01       	movw	r22, r14
    1894:	90 e0       	ldi	r25, 0x00	; 0
    1896:	be d2       	rcall	.+1404   	; 0x1e14 <fputc>
    1898:	80 e3       	ldi	r24, 0x30	; 48
    189a:	2a e0       	ldi	r18, 0x0A	; 10
    189c:	c2 16       	cp	r12, r18
    189e:	d1 04       	cpc	r13, r1
    18a0:	2c f0       	brlt	.+10     	; 0x18ac <vfprintf+0x3b4>
    18a2:	8f 5f       	subi	r24, 0xFF	; 255
    18a4:	fa e0       	ldi	r31, 0x0A	; 10
    18a6:	cf 1a       	sub	r12, r31
    18a8:	d1 08       	sbc	r13, r1
    18aa:	f7 cf       	rjmp	.-18     	; 0x189a <vfprintf+0x3a2>
    18ac:	b7 01       	movw	r22, r14
    18ae:	90 e0       	ldi	r25, 0x00	; 0
    18b0:	b1 d2       	rcall	.+1378   	; 0x1e14 <fputc>
    18b2:	b7 01       	movw	r22, r14
    18b4:	c6 01       	movw	r24, r12
    18b6:	c0 96       	adiw	r24, 0x30	; 48
    18b8:	ad d2       	rcall	.+1370   	; 0x1e14 <fputc>
    18ba:	49 c1       	rjmp	.+658    	; 0x1b4e <vfprintf+0x656>
    18bc:	83 36       	cpi	r24, 0x63	; 99
    18be:	31 f0       	breq	.+12     	; 0x18cc <vfprintf+0x3d4>
    18c0:	83 37       	cpi	r24, 0x73	; 115
    18c2:	79 f0       	breq	.+30     	; 0x18e2 <vfprintf+0x3ea>
    18c4:	83 35       	cpi	r24, 0x53	; 83
    18c6:	09 f0       	breq	.+2      	; 0x18ca <vfprintf+0x3d2>
    18c8:	52 c0       	rjmp	.+164    	; 0x196e <vfprintf+0x476>
    18ca:	1f c0       	rjmp	.+62     	; 0x190a <vfprintf+0x412>
    18cc:	56 01       	movw	r10, r12
    18ce:	32 e0       	ldi	r19, 0x02	; 2
    18d0:	a3 0e       	add	r10, r19
    18d2:	b1 1c       	adc	r11, r1
    18d4:	f6 01       	movw	r30, r12
    18d6:	80 81       	ld	r24, Z
    18d8:	89 83       	std	Y+1, r24	; 0x01
    18da:	01 e0       	ldi	r16, 0x01	; 1
    18dc:	10 e0       	ldi	r17, 0x00	; 0
    18de:	63 01       	movw	r12, r6
    18e0:	11 c0       	rjmp	.+34     	; 0x1904 <vfprintf+0x40c>
    18e2:	56 01       	movw	r10, r12
    18e4:	f2 e0       	ldi	r31, 0x02	; 2
    18e6:	af 0e       	add	r10, r31
    18e8:	b1 1c       	adc	r11, r1
    18ea:	f6 01       	movw	r30, r12
    18ec:	c0 80       	ld	r12, Z
    18ee:	d1 80       	ldd	r13, Z+1	; 0x01
    18f0:	96 fe       	sbrs	r9, 6
    18f2:	03 c0       	rjmp	.+6      	; 0x18fa <vfprintf+0x402>
    18f4:	61 2f       	mov	r22, r17
    18f6:	70 e0       	ldi	r23, 0x00	; 0
    18f8:	02 c0       	rjmp	.+4      	; 0x18fe <vfprintf+0x406>
    18fa:	6f ef       	ldi	r22, 0xFF	; 255
    18fc:	7f ef       	ldi	r23, 0xFF	; 255
    18fe:	c6 01       	movw	r24, r12
    1900:	7e d2       	rcall	.+1276   	; 0x1dfe <strnlen>
    1902:	8c 01       	movw	r16, r24
    1904:	f9 2d       	mov	r31, r9
    1906:	ff 77       	andi	r31, 0x7F	; 127
    1908:	13 c0       	rjmp	.+38     	; 0x1930 <vfprintf+0x438>
    190a:	56 01       	movw	r10, r12
    190c:	22 e0       	ldi	r18, 0x02	; 2
    190e:	a2 0e       	add	r10, r18
    1910:	b1 1c       	adc	r11, r1
    1912:	f6 01       	movw	r30, r12
    1914:	c0 80       	ld	r12, Z
    1916:	d1 80       	ldd	r13, Z+1	; 0x01
    1918:	96 fe       	sbrs	r9, 6
    191a:	03 c0       	rjmp	.+6      	; 0x1922 <vfprintf+0x42a>
    191c:	61 2f       	mov	r22, r17
    191e:	70 e0       	ldi	r23, 0x00	; 0
    1920:	02 c0       	rjmp	.+4      	; 0x1926 <vfprintf+0x42e>
    1922:	6f ef       	ldi	r22, 0xFF	; 255
    1924:	7f ef       	ldi	r23, 0xFF	; 255
    1926:	c6 01       	movw	r24, r12
    1928:	54 d2       	rcall	.+1192   	; 0x1dd2 <strnlen_P>
    192a:	8c 01       	movw	r16, r24
    192c:	f9 2d       	mov	r31, r9
    192e:	f0 68       	ori	r31, 0x80	; 128
    1930:	9f 2e       	mov	r9, r31
    1932:	f3 fd       	sbrc	r31, 3
    1934:	18 c0       	rjmp	.+48     	; 0x1966 <vfprintf+0x46e>
    1936:	85 2d       	mov	r24, r5
    1938:	90 e0       	ldi	r25, 0x00	; 0
    193a:	08 17       	cp	r16, r24
    193c:	19 07       	cpc	r17, r25
    193e:	98 f4       	brcc	.+38     	; 0x1966 <vfprintf+0x46e>
    1940:	b7 01       	movw	r22, r14
    1942:	80 e2       	ldi	r24, 0x20	; 32
    1944:	90 e0       	ldi	r25, 0x00	; 0
    1946:	66 d2       	rcall	.+1228   	; 0x1e14 <fputc>
    1948:	5a 94       	dec	r5
    194a:	f5 cf       	rjmp	.-22     	; 0x1936 <vfprintf+0x43e>
    194c:	f6 01       	movw	r30, r12
    194e:	97 fc       	sbrc	r9, 7
    1950:	85 91       	lpm	r24, Z+
    1952:	97 fe       	sbrs	r9, 7
    1954:	81 91       	ld	r24, Z+
    1956:	6f 01       	movw	r12, r30
    1958:	b7 01       	movw	r22, r14
    195a:	90 e0       	ldi	r25, 0x00	; 0
    195c:	5b d2       	rcall	.+1206   	; 0x1e14 <fputc>
    195e:	51 10       	cpse	r5, r1
    1960:	5a 94       	dec	r5
    1962:	01 50       	subi	r16, 0x01	; 1
    1964:	11 09       	sbc	r17, r1
    1966:	01 15       	cp	r16, r1
    1968:	11 05       	cpc	r17, r1
    196a:	81 f7       	brne	.-32     	; 0x194c <vfprintf+0x454>
    196c:	f0 c0       	rjmp	.+480    	; 0x1b4e <vfprintf+0x656>
    196e:	84 36       	cpi	r24, 0x64	; 100
    1970:	11 f0       	breq	.+4      	; 0x1976 <vfprintf+0x47e>
    1972:	89 36       	cpi	r24, 0x69	; 105
    1974:	59 f5       	brne	.+86     	; 0x19cc <vfprintf+0x4d4>
    1976:	56 01       	movw	r10, r12
    1978:	97 fe       	sbrs	r9, 7
    197a:	09 c0       	rjmp	.+18     	; 0x198e <vfprintf+0x496>
    197c:	24 e0       	ldi	r18, 0x04	; 4
    197e:	a2 0e       	add	r10, r18
    1980:	b1 1c       	adc	r11, r1
    1982:	f6 01       	movw	r30, r12
    1984:	60 81       	ld	r22, Z
    1986:	71 81       	ldd	r23, Z+1	; 0x01
    1988:	82 81       	ldd	r24, Z+2	; 0x02
    198a:	93 81       	ldd	r25, Z+3	; 0x03
    198c:	0a c0       	rjmp	.+20     	; 0x19a2 <vfprintf+0x4aa>
    198e:	f2 e0       	ldi	r31, 0x02	; 2
    1990:	af 0e       	add	r10, r31
    1992:	b1 1c       	adc	r11, r1
    1994:	f6 01       	movw	r30, r12
    1996:	60 81       	ld	r22, Z
    1998:	71 81       	ldd	r23, Z+1	; 0x01
    199a:	07 2e       	mov	r0, r23
    199c:	00 0c       	add	r0, r0
    199e:	88 0b       	sbc	r24, r24
    19a0:	99 0b       	sbc	r25, r25
    19a2:	f9 2d       	mov	r31, r9
    19a4:	ff 76       	andi	r31, 0x6F	; 111
    19a6:	9f 2e       	mov	r9, r31
    19a8:	97 ff       	sbrs	r25, 7
    19aa:	09 c0       	rjmp	.+18     	; 0x19be <vfprintf+0x4c6>
    19ac:	90 95       	com	r25
    19ae:	80 95       	com	r24
    19b0:	70 95       	com	r23
    19b2:	61 95       	neg	r22
    19b4:	7f 4f       	sbci	r23, 0xFF	; 255
    19b6:	8f 4f       	sbci	r24, 0xFF	; 255
    19b8:	9f 4f       	sbci	r25, 0xFF	; 255
    19ba:	f0 68       	ori	r31, 0x80	; 128
    19bc:	9f 2e       	mov	r9, r31
    19be:	2a e0       	ldi	r18, 0x0A	; 10
    19c0:	30 e0       	ldi	r19, 0x00	; 0
    19c2:	a3 01       	movw	r20, r6
    19c4:	82 d2       	rcall	.+1284   	; 0x1eca <__ultoa_invert>
    19c6:	c8 2e       	mov	r12, r24
    19c8:	c6 18       	sub	r12, r6
    19ca:	3e c0       	rjmp	.+124    	; 0x1a48 <vfprintf+0x550>
    19cc:	09 2d       	mov	r16, r9
    19ce:	85 37       	cpi	r24, 0x75	; 117
    19d0:	21 f4       	brne	.+8      	; 0x19da <vfprintf+0x4e2>
    19d2:	0f 7e       	andi	r16, 0xEF	; 239
    19d4:	2a e0       	ldi	r18, 0x0A	; 10
    19d6:	30 e0       	ldi	r19, 0x00	; 0
    19d8:	1d c0       	rjmp	.+58     	; 0x1a14 <vfprintf+0x51c>
    19da:	09 7f       	andi	r16, 0xF9	; 249
    19dc:	8f 36       	cpi	r24, 0x6F	; 111
    19de:	91 f0       	breq	.+36     	; 0x1a04 <vfprintf+0x50c>
    19e0:	18 f4       	brcc	.+6      	; 0x19e8 <vfprintf+0x4f0>
    19e2:	88 35       	cpi	r24, 0x58	; 88
    19e4:	59 f0       	breq	.+22     	; 0x19fc <vfprintf+0x504>
    19e6:	bc c0       	rjmp	.+376    	; 0x1b60 <vfprintf+0x668>
    19e8:	80 37       	cpi	r24, 0x70	; 112
    19ea:	19 f0       	breq	.+6      	; 0x19f2 <vfprintf+0x4fa>
    19ec:	88 37       	cpi	r24, 0x78	; 120
    19ee:	11 f0       	breq	.+4      	; 0x19f4 <vfprintf+0x4fc>
    19f0:	b7 c0       	rjmp	.+366    	; 0x1b60 <vfprintf+0x668>
    19f2:	00 61       	ori	r16, 0x10	; 16
    19f4:	04 ff       	sbrs	r16, 4
    19f6:	09 c0       	rjmp	.+18     	; 0x1a0a <vfprintf+0x512>
    19f8:	04 60       	ori	r16, 0x04	; 4
    19fa:	07 c0       	rjmp	.+14     	; 0x1a0a <vfprintf+0x512>
    19fc:	94 fe       	sbrs	r9, 4
    19fe:	08 c0       	rjmp	.+16     	; 0x1a10 <vfprintf+0x518>
    1a00:	06 60       	ori	r16, 0x06	; 6
    1a02:	06 c0       	rjmp	.+12     	; 0x1a10 <vfprintf+0x518>
    1a04:	28 e0       	ldi	r18, 0x08	; 8
    1a06:	30 e0       	ldi	r19, 0x00	; 0
    1a08:	05 c0       	rjmp	.+10     	; 0x1a14 <vfprintf+0x51c>
    1a0a:	20 e1       	ldi	r18, 0x10	; 16
    1a0c:	30 e0       	ldi	r19, 0x00	; 0
    1a0e:	02 c0       	rjmp	.+4      	; 0x1a14 <vfprintf+0x51c>
    1a10:	20 e1       	ldi	r18, 0x10	; 16
    1a12:	32 e0       	ldi	r19, 0x02	; 2
    1a14:	56 01       	movw	r10, r12
    1a16:	07 ff       	sbrs	r16, 7
    1a18:	09 c0       	rjmp	.+18     	; 0x1a2c <vfprintf+0x534>
    1a1a:	84 e0       	ldi	r24, 0x04	; 4
    1a1c:	a8 0e       	add	r10, r24
    1a1e:	b1 1c       	adc	r11, r1
    1a20:	f6 01       	movw	r30, r12
    1a22:	60 81       	ld	r22, Z
    1a24:	71 81       	ldd	r23, Z+1	; 0x01
    1a26:	82 81       	ldd	r24, Z+2	; 0x02
    1a28:	93 81       	ldd	r25, Z+3	; 0x03
    1a2a:	08 c0       	rjmp	.+16     	; 0x1a3c <vfprintf+0x544>
    1a2c:	f2 e0       	ldi	r31, 0x02	; 2
    1a2e:	af 0e       	add	r10, r31
    1a30:	b1 1c       	adc	r11, r1
    1a32:	f6 01       	movw	r30, r12
    1a34:	60 81       	ld	r22, Z
    1a36:	71 81       	ldd	r23, Z+1	; 0x01
    1a38:	80 e0       	ldi	r24, 0x00	; 0
    1a3a:	90 e0       	ldi	r25, 0x00	; 0
    1a3c:	a3 01       	movw	r20, r6
    1a3e:	45 d2       	rcall	.+1162   	; 0x1eca <__ultoa_invert>
    1a40:	c8 2e       	mov	r12, r24
    1a42:	c6 18       	sub	r12, r6
    1a44:	0f 77       	andi	r16, 0x7F	; 127
    1a46:	90 2e       	mov	r9, r16
    1a48:	96 fe       	sbrs	r9, 6
    1a4a:	0b c0       	rjmp	.+22     	; 0x1a62 <vfprintf+0x56a>
    1a4c:	09 2d       	mov	r16, r9
    1a4e:	0e 7f       	andi	r16, 0xFE	; 254
    1a50:	c1 16       	cp	r12, r17
    1a52:	50 f4       	brcc	.+20     	; 0x1a68 <vfprintf+0x570>
    1a54:	94 fe       	sbrs	r9, 4
    1a56:	0a c0       	rjmp	.+20     	; 0x1a6c <vfprintf+0x574>
    1a58:	92 fc       	sbrc	r9, 2
    1a5a:	08 c0       	rjmp	.+16     	; 0x1a6c <vfprintf+0x574>
    1a5c:	09 2d       	mov	r16, r9
    1a5e:	0e 7e       	andi	r16, 0xEE	; 238
    1a60:	05 c0       	rjmp	.+10     	; 0x1a6c <vfprintf+0x574>
    1a62:	dc 2c       	mov	r13, r12
    1a64:	09 2d       	mov	r16, r9
    1a66:	03 c0       	rjmp	.+6      	; 0x1a6e <vfprintf+0x576>
    1a68:	dc 2c       	mov	r13, r12
    1a6a:	01 c0       	rjmp	.+2      	; 0x1a6e <vfprintf+0x576>
    1a6c:	d1 2e       	mov	r13, r17
    1a6e:	04 ff       	sbrs	r16, 4
    1a70:	0d c0       	rjmp	.+26     	; 0x1a8c <vfprintf+0x594>
    1a72:	fe 01       	movw	r30, r28
    1a74:	ec 0d       	add	r30, r12
    1a76:	f1 1d       	adc	r31, r1
    1a78:	80 81       	ld	r24, Z
    1a7a:	80 33       	cpi	r24, 0x30	; 48
    1a7c:	11 f4       	brne	.+4      	; 0x1a82 <vfprintf+0x58a>
    1a7e:	09 7e       	andi	r16, 0xE9	; 233
    1a80:	09 c0       	rjmp	.+18     	; 0x1a94 <vfprintf+0x59c>
    1a82:	02 ff       	sbrs	r16, 2
    1a84:	06 c0       	rjmp	.+12     	; 0x1a92 <vfprintf+0x59a>
    1a86:	d3 94       	inc	r13
    1a88:	d3 94       	inc	r13
    1a8a:	04 c0       	rjmp	.+8      	; 0x1a94 <vfprintf+0x59c>
    1a8c:	80 2f       	mov	r24, r16
    1a8e:	86 78       	andi	r24, 0x86	; 134
    1a90:	09 f0       	breq	.+2      	; 0x1a94 <vfprintf+0x59c>
    1a92:	d3 94       	inc	r13
    1a94:	03 fd       	sbrc	r16, 3
    1a96:	10 c0       	rjmp	.+32     	; 0x1ab8 <vfprintf+0x5c0>
    1a98:	00 ff       	sbrs	r16, 0
    1a9a:	06 c0       	rjmp	.+12     	; 0x1aa8 <vfprintf+0x5b0>
    1a9c:	1c 2d       	mov	r17, r12
    1a9e:	d5 14       	cp	r13, r5
    1aa0:	78 f4       	brcc	.+30     	; 0x1ac0 <vfprintf+0x5c8>
    1aa2:	15 0d       	add	r17, r5
    1aa4:	1d 19       	sub	r17, r13
    1aa6:	0c c0       	rjmp	.+24     	; 0x1ac0 <vfprintf+0x5c8>
    1aa8:	d5 14       	cp	r13, r5
    1aaa:	50 f4       	brcc	.+20     	; 0x1ac0 <vfprintf+0x5c8>
    1aac:	b7 01       	movw	r22, r14
    1aae:	80 e2       	ldi	r24, 0x20	; 32
    1ab0:	90 e0       	ldi	r25, 0x00	; 0
    1ab2:	b0 d1       	rcall	.+864    	; 0x1e14 <fputc>
    1ab4:	d3 94       	inc	r13
    1ab6:	f8 cf       	rjmp	.-16     	; 0x1aa8 <vfprintf+0x5b0>
    1ab8:	d5 14       	cp	r13, r5
    1aba:	10 f4       	brcc	.+4      	; 0x1ac0 <vfprintf+0x5c8>
    1abc:	5d 18       	sub	r5, r13
    1abe:	01 c0       	rjmp	.+2      	; 0x1ac2 <vfprintf+0x5ca>
    1ac0:	51 2c       	mov	r5, r1
    1ac2:	04 ff       	sbrs	r16, 4
    1ac4:	0f c0       	rjmp	.+30     	; 0x1ae4 <vfprintf+0x5ec>
    1ac6:	b7 01       	movw	r22, r14
    1ac8:	80 e3       	ldi	r24, 0x30	; 48
    1aca:	90 e0       	ldi	r25, 0x00	; 0
    1acc:	a3 d1       	rcall	.+838    	; 0x1e14 <fputc>
    1ace:	02 ff       	sbrs	r16, 2
    1ad0:	16 c0       	rjmp	.+44     	; 0x1afe <vfprintf+0x606>
    1ad2:	01 fd       	sbrc	r16, 1
    1ad4:	03 c0       	rjmp	.+6      	; 0x1adc <vfprintf+0x5e4>
    1ad6:	88 e7       	ldi	r24, 0x78	; 120
    1ad8:	90 e0       	ldi	r25, 0x00	; 0
    1ada:	02 c0       	rjmp	.+4      	; 0x1ae0 <vfprintf+0x5e8>
    1adc:	88 e5       	ldi	r24, 0x58	; 88
    1ade:	90 e0       	ldi	r25, 0x00	; 0
    1ae0:	b7 01       	movw	r22, r14
    1ae2:	0c c0       	rjmp	.+24     	; 0x1afc <vfprintf+0x604>
    1ae4:	80 2f       	mov	r24, r16
    1ae6:	86 78       	andi	r24, 0x86	; 134
    1ae8:	51 f0       	breq	.+20     	; 0x1afe <vfprintf+0x606>
    1aea:	01 ff       	sbrs	r16, 1
    1aec:	02 c0       	rjmp	.+4      	; 0x1af2 <vfprintf+0x5fa>
    1aee:	8b e2       	ldi	r24, 0x2B	; 43
    1af0:	01 c0       	rjmp	.+2      	; 0x1af4 <vfprintf+0x5fc>
    1af2:	80 e2       	ldi	r24, 0x20	; 32
    1af4:	07 fd       	sbrc	r16, 7
    1af6:	8d e2       	ldi	r24, 0x2D	; 45
    1af8:	b7 01       	movw	r22, r14
    1afa:	90 e0       	ldi	r25, 0x00	; 0
    1afc:	8b d1       	rcall	.+790    	; 0x1e14 <fputc>
    1afe:	c1 16       	cp	r12, r17
    1b00:	30 f4       	brcc	.+12     	; 0x1b0e <vfprintf+0x616>
    1b02:	b7 01       	movw	r22, r14
    1b04:	80 e3       	ldi	r24, 0x30	; 48
    1b06:	90 e0       	ldi	r25, 0x00	; 0
    1b08:	85 d1       	rcall	.+778    	; 0x1e14 <fputc>
    1b0a:	11 50       	subi	r17, 0x01	; 1
    1b0c:	f8 cf       	rjmp	.-16     	; 0x1afe <vfprintf+0x606>
    1b0e:	ca 94       	dec	r12
    1b10:	f3 01       	movw	r30, r6
    1b12:	ec 0d       	add	r30, r12
    1b14:	f1 1d       	adc	r31, r1
    1b16:	80 81       	ld	r24, Z
    1b18:	b7 01       	movw	r22, r14
    1b1a:	90 e0       	ldi	r25, 0x00	; 0
    1b1c:	7b d1       	rcall	.+758    	; 0x1e14 <fputc>
    1b1e:	c1 10       	cpse	r12, r1
    1b20:	f6 cf       	rjmp	.-20     	; 0x1b0e <vfprintf+0x616>
    1b22:	15 c0       	rjmp	.+42     	; 0x1b4e <vfprintf+0x656>
    1b24:	f4 e0       	ldi	r31, 0x04	; 4
    1b26:	f5 15       	cp	r31, r5
    1b28:	50 f5       	brcc	.+84     	; 0x1b7e <vfprintf+0x686>
    1b2a:	84 e0       	ldi	r24, 0x04	; 4
    1b2c:	58 1a       	sub	r5, r24
    1b2e:	93 fe       	sbrs	r9, 3
    1b30:	1e c0       	rjmp	.+60     	; 0x1b6e <vfprintf+0x676>
    1b32:	01 11       	cpse	r16, r1
    1b34:	25 c0       	rjmp	.+74     	; 0x1b80 <vfprintf+0x688>
    1b36:	2c 85       	ldd	r18, Y+12	; 0x0c
    1b38:	23 ff       	sbrs	r18, 3
    1b3a:	27 c0       	rjmp	.+78     	; 0x1b8a <vfprintf+0x692>
    1b3c:	04 ee       	ldi	r16, 0xE4	; 228
    1b3e:	10 e0       	ldi	r17, 0x00	; 0
    1b40:	39 2d       	mov	r19, r9
    1b42:	30 71       	andi	r19, 0x10	; 16
    1b44:	93 2e       	mov	r9, r19
    1b46:	f8 01       	movw	r30, r16
    1b48:	84 91       	lpm	r24, Z
    1b4a:	81 11       	cpse	r24, r1
    1b4c:	21 c0       	rjmp	.+66     	; 0x1b90 <vfprintf+0x698>
    1b4e:	55 20       	and	r5, r5
    1b50:	09 f4       	brne	.+2      	; 0x1b54 <vfprintf+0x65c>
    1b52:	fc cc       	rjmp	.-1544   	; 0x154c <vfprintf+0x54>
    1b54:	b7 01       	movw	r22, r14
    1b56:	80 e2       	ldi	r24, 0x20	; 32
    1b58:	90 e0       	ldi	r25, 0x00	; 0
    1b5a:	5c d1       	rcall	.+696    	; 0x1e14 <fputc>
    1b5c:	5a 94       	dec	r5
    1b5e:	f7 cf       	rjmp	.-18     	; 0x1b4e <vfprintf+0x656>
    1b60:	f7 01       	movw	r30, r14
    1b62:	86 81       	ldd	r24, Z+6	; 0x06
    1b64:	97 81       	ldd	r25, Z+7	; 0x07
    1b66:	23 c0       	rjmp	.+70     	; 0x1bae <vfprintf+0x6b6>
    1b68:	8f ef       	ldi	r24, 0xFF	; 255
    1b6a:	9f ef       	ldi	r25, 0xFF	; 255
    1b6c:	20 c0       	rjmp	.+64     	; 0x1bae <vfprintf+0x6b6>
    1b6e:	b7 01       	movw	r22, r14
    1b70:	80 e2       	ldi	r24, 0x20	; 32
    1b72:	90 e0       	ldi	r25, 0x00	; 0
    1b74:	4f d1       	rcall	.+670    	; 0x1e14 <fputc>
    1b76:	5a 94       	dec	r5
    1b78:	51 10       	cpse	r5, r1
    1b7a:	f9 cf       	rjmp	.-14     	; 0x1b6e <vfprintf+0x676>
    1b7c:	da cf       	rjmp	.-76     	; 0x1b32 <vfprintf+0x63a>
    1b7e:	51 2c       	mov	r5, r1
    1b80:	b7 01       	movw	r22, r14
    1b82:	80 2f       	mov	r24, r16
    1b84:	90 e0       	ldi	r25, 0x00	; 0
    1b86:	46 d1       	rcall	.+652    	; 0x1e14 <fputc>
    1b88:	d6 cf       	rjmp	.-84     	; 0x1b36 <vfprintf+0x63e>
    1b8a:	08 ee       	ldi	r16, 0xE8	; 232
    1b8c:	10 e0       	ldi	r17, 0x00	; 0
    1b8e:	d8 cf       	rjmp	.-80     	; 0x1b40 <vfprintf+0x648>
    1b90:	91 10       	cpse	r9, r1
    1b92:	80 52       	subi	r24, 0x20	; 32
    1b94:	b7 01       	movw	r22, r14
    1b96:	90 e0       	ldi	r25, 0x00	; 0
    1b98:	3d d1       	rcall	.+634    	; 0x1e14 <fputc>
    1b9a:	0f 5f       	subi	r16, 0xFF	; 255
    1b9c:	1f 4f       	sbci	r17, 0xFF	; 255
    1b9e:	d3 cf       	rjmp	.-90     	; 0x1b46 <vfprintf+0x64e>
    1ba0:	23 e0       	ldi	r18, 0x03	; 3
    1ba2:	25 15       	cp	r18, r5
    1ba4:	10 f4       	brcc	.+4      	; 0x1baa <vfprintf+0x6b2>
    1ba6:	83 e0       	ldi	r24, 0x03	; 3
    1ba8:	c1 cf       	rjmp	.-126    	; 0x1b2c <vfprintf+0x634>
    1baa:	51 2c       	mov	r5, r1
    1bac:	c4 cf       	rjmp	.-120    	; 0x1b36 <vfprintf+0x63e>
    1bae:	60 96       	adiw	r28, 0x10	; 16
    1bb0:	e2 e1       	ldi	r30, 0x12	; 18
    1bb2:	1c c0       	rjmp	.+56     	; 0x1bec <__epilogue_restores__>

00001bb4 <__prologue_saves__>:
    1bb4:	2f 92       	push	r2
    1bb6:	3f 92       	push	r3
    1bb8:	4f 92       	push	r4
    1bba:	5f 92       	push	r5
    1bbc:	6f 92       	push	r6
    1bbe:	7f 92       	push	r7
    1bc0:	8f 92       	push	r8
    1bc2:	9f 92       	push	r9
    1bc4:	af 92       	push	r10
    1bc6:	bf 92       	push	r11
    1bc8:	cf 92       	push	r12
    1bca:	df 92       	push	r13
    1bcc:	ef 92       	push	r14
    1bce:	ff 92       	push	r15
    1bd0:	0f 93       	push	r16
    1bd2:	1f 93       	push	r17
    1bd4:	cf 93       	push	r28
    1bd6:	df 93       	push	r29
    1bd8:	cd b7       	in	r28, 0x3d	; 61
    1bda:	de b7       	in	r29, 0x3e	; 62
    1bdc:	ca 1b       	sub	r28, r26
    1bde:	db 0b       	sbc	r29, r27
    1be0:	0f b6       	in	r0, 0x3f	; 63
    1be2:	f8 94       	cli
    1be4:	de bf       	out	0x3e, r29	; 62
    1be6:	0f be       	out	0x3f, r0	; 63
    1be8:	cd bf       	out	0x3d, r28	; 61
    1bea:	09 94       	ijmp

00001bec <__epilogue_restores__>:
    1bec:	2a 88       	ldd	r2, Y+18	; 0x12
    1bee:	39 88       	ldd	r3, Y+17	; 0x11
    1bf0:	48 88       	ldd	r4, Y+16	; 0x10
    1bf2:	5f 84       	ldd	r5, Y+15	; 0x0f
    1bf4:	6e 84       	ldd	r6, Y+14	; 0x0e
    1bf6:	7d 84       	ldd	r7, Y+13	; 0x0d
    1bf8:	8c 84       	ldd	r8, Y+12	; 0x0c
    1bfa:	9b 84       	ldd	r9, Y+11	; 0x0b
    1bfc:	aa 84       	ldd	r10, Y+10	; 0x0a
    1bfe:	b9 84       	ldd	r11, Y+9	; 0x09
    1c00:	c8 84       	ldd	r12, Y+8	; 0x08
    1c02:	df 80       	ldd	r13, Y+7	; 0x07
    1c04:	ee 80       	ldd	r14, Y+6	; 0x06
    1c06:	fd 80       	ldd	r15, Y+5	; 0x05
    1c08:	0c 81       	ldd	r16, Y+4	; 0x04
    1c0a:	1b 81       	ldd	r17, Y+3	; 0x03
    1c0c:	aa 81       	ldd	r26, Y+2	; 0x02
    1c0e:	b9 81       	ldd	r27, Y+1	; 0x01
    1c10:	ce 0f       	add	r28, r30
    1c12:	d1 1d       	adc	r29, r1
    1c14:	0f b6       	in	r0, 0x3f	; 63
    1c16:	f8 94       	cli
    1c18:	de bf       	out	0x3e, r29	; 62
    1c1a:	0f be       	out	0x3f, r0	; 63
    1c1c:	cd bf       	out	0x3d, r28	; 61
    1c1e:	ed 01       	movw	r28, r26
    1c20:	08 95       	ret

00001c22 <__ftoa_engine>:
    1c22:	28 30       	cpi	r18, 0x08	; 8
    1c24:	08 f0       	brcs	.+2      	; 0x1c28 <__ftoa_engine+0x6>
    1c26:	27 e0       	ldi	r18, 0x07	; 7
    1c28:	33 27       	eor	r19, r19
    1c2a:	da 01       	movw	r26, r20
    1c2c:	99 0f       	add	r25, r25
    1c2e:	31 1d       	adc	r19, r1
    1c30:	87 fd       	sbrc	r24, 7
    1c32:	91 60       	ori	r25, 0x01	; 1
    1c34:	00 96       	adiw	r24, 0x00	; 0
    1c36:	61 05       	cpc	r22, r1
    1c38:	71 05       	cpc	r23, r1
    1c3a:	39 f4       	brne	.+14     	; 0x1c4a <__ftoa_engine+0x28>
    1c3c:	32 60       	ori	r19, 0x02	; 2
    1c3e:	2e 5f       	subi	r18, 0xFE	; 254
    1c40:	3d 93       	st	X+, r19
    1c42:	30 e3       	ldi	r19, 0x30	; 48
    1c44:	2a 95       	dec	r18
    1c46:	e1 f7       	brne	.-8      	; 0x1c40 <__ftoa_engine+0x1e>
    1c48:	08 95       	ret
    1c4a:	9f 3f       	cpi	r25, 0xFF	; 255
    1c4c:	30 f0       	brcs	.+12     	; 0x1c5a <__ftoa_engine+0x38>
    1c4e:	80 38       	cpi	r24, 0x80	; 128
    1c50:	71 05       	cpc	r23, r1
    1c52:	61 05       	cpc	r22, r1
    1c54:	09 f0       	breq	.+2      	; 0x1c58 <__ftoa_engine+0x36>
    1c56:	3c 5f       	subi	r19, 0xFC	; 252
    1c58:	3c 5f       	subi	r19, 0xFC	; 252
    1c5a:	3d 93       	st	X+, r19
    1c5c:	91 30       	cpi	r25, 0x01	; 1
    1c5e:	08 f0       	brcs	.+2      	; 0x1c62 <__ftoa_engine+0x40>
    1c60:	80 68       	ori	r24, 0x80	; 128
    1c62:	91 1d       	adc	r25, r1
    1c64:	df 93       	push	r29
    1c66:	cf 93       	push	r28
    1c68:	1f 93       	push	r17
    1c6a:	0f 93       	push	r16
    1c6c:	ff 92       	push	r15
    1c6e:	ef 92       	push	r14
    1c70:	19 2f       	mov	r17, r25
    1c72:	98 7f       	andi	r25, 0xF8	; 248
    1c74:	96 95       	lsr	r25
    1c76:	e9 2f       	mov	r30, r25
    1c78:	96 95       	lsr	r25
    1c7a:	96 95       	lsr	r25
    1c7c:	e9 0f       	add	r30, r25
    1c7e:	ff 27       	eor	r31, r31
    1c80:	ea 5b       	subi	r30, 0xBA	; 186
    1c82:	fe 4f       	sbci	r31, 0xFE	; 254
    1c84:	99 27       	eor	r25, r25
    1c86:	33 27       	eor	r19, r19
    1c88:	ee 24       	eor	r14, r14
    1c8a:	ff 24       	eor	r15, r15
    1c8c:	a7 01       	movw	r20, r14
    1c8e:	e7 01       	movw	r28, r14
    1c90:	05 90       	lpm	r0, Z+
    1c92:	08 94       	sec
    1c94:	07 94       	ror	r0
    1c96:	28 f4       	brcc	.+10     	; 0x1ca2 <__ftoa_engine+0x80>
    1c98:	36 0f       	add	r19, r22
    1c9a:	e7 1e       	adc	r14, r23
    1c9c:	f8 1e       	adc	r15, r24
    1c9e:	49 1f       	adc	r20, r25
    1ca0:	51 1d       	adc	r21, r1
    1ca2:	66 0f       	add	r22, r22
    1ca4:	77 1f       	adc	r23, r23
    1ca6:	88 1f       	adc	r24, r24
    1ca8:	99 1f       	adc	r25, r25
    1caa:	06 94       	lsr	r0
    1cac:	a1 f7       	brne	.-24     	; 0x1c96 <__ftoa_engine+0x74>
    1cae:	05 90       	lpm	r0, Z+
    1cb0:	07 94       	ror	r0
    1cb2:	28 f4       	brcc	.+10     	; 0x1cbe <__ftoa_engine+0x9c>
    1cb4:	e7 0e       	add	r14, r23
    1cb6:	f8 1e       	adc	r15, r24
    1cb8:	49 1f       	adc	r20, r25
    1cba:	56 1f       	adc	r21, r22
    1cbc:	c1 1d       	adc	r28, r1
    1cbe:	77 0f       	add	r23, r23
    1cc0:	88 1f       	adc	r24, r24
    1cc2:	99 1f       	adc	r25, r25
    1cc4:	66 1f       	adc	r22, r22
    1cc6:	06 94       	lsr	r0
    1cc8:	a1 f7       	brne	.-24     	; 0x1cb2 <__ftoa_engine+0x90>
    1cca:	05 90       	lpm	r0, Z+
    1ccc:	07 94       	ror	r0
    1cce:	28 f4       	brcc	.+10     	; 0x1cda <__ftoa_engine+0xb8>
    1cd0:	f8 0e       	add	r15, r24
    1cd2:	49 1f       	adc	r20, r25
    1cd4:	56 1f       	adc	r21, r22
    1cd6:	c7 1f       	adc	r28, r23
    1cd8:	d1 1d       	adc	r29, r1
    1cda:	88 0f       	add	r24, r24
    1cdc:	99 1f       	adc	r25, r25
    1cde:	66 1f       	adc	r22, r22
    1ce0:	77 1f       	adc	r23, r23
    1ce2:	06 94       	lsr	r0
    1ce4:	a1 f7       	brne	.-24     	; 0x1cce <__ftoa_engine+0xac>
    1ce6:	05 90       	lpm	r0, Z+
    1ce8:	07 94       	ror	r0
    1cea:	20 f4       	brcc	.+8      	; 0x1cf4 <__ftoa_engine+0xd2>
    1cec:	49 0f       	add	r20, r25
    1cee:	56 1f       	adc	r21, r22
    1cf0:	c7 1f       	adc	r28, r23
    1cf2:	d8 1f       	adc	r29, r24
    1cf4:	99 0f       	add	r25, r25
    1cf6:	66 1f       	adc	r22, r22
    1cf8:	77 1f       	adc	r23, r23
    1cfa:	88 1f       	adc	r24, r24
    1cfc:	06 94       	lsr	r0
    1cfe:	a9 f7       	brne	.-22     	; 0x1cea <__ftoa_engine+0xc8>
    1d00:	84 91       	lpm	r24, Z
    1d02:	10 95       	com	r17
    1d04:	17 70       	andi	r17, 0x07	; 7
    1d06:	41 f0       	breq	.+16     	; 0x1d18 <__ftoa_engine+0xf6>
    1d08:	d6 95       	lsr	r29
    1d0a:	c7 95       	ror	r28
    1d0c:	57 95       	ror	r21
    1d0e:	47 95       	ror	r20
    1d10:	f7 94       	ror	r15
    1d12:	e7 94       	ror	r14
    1d14:	1a 95       	dec	r17
    1d16:	c1 f7       	brne	.-16     	; 0x1d08 <__ftoa_engine+0xe6>
    1d18:	ec ee       	ldi	r30, 0xEC	; 236
    1d1a:	f0 e0       	ldi	r31, 0x00	; 0
    1d1c:	68 94       	set
    1d1e:	15 90       	lpm	r1, Z+
    1d20:	15 91       	lpm	r17, Z+
    1d22:	35 91       	lpm	r19, Z+
    1d24:	65 91       	lpm	r22, Z+
    1d26:	95 91       	lpm	r25, Z+
    1d28:	05 90       	lpm	r0, Z+
    1d2a:	7f e2       	ldi	r23, 0x2F	; 47
    1d2c:	73 95       	inc	r23
    1d2e:	e1 18       	sub	r14, r1
    1d30:	f1 0a       	sbc	r15, r17
    1d32:	43 0b       	sbc	r20, r19
    1d34:	56 0b       	sbc	r21, r22
    1d36:	c9 0b       	sbc	r28, r25
    1d38:	d0 09       	sbc	r29, r0
    1d3a:	c0 f7       	brcc	.-16     	; 0x1d2c <__ftoa_engine+0x10a>
    1d3c:	e1 0c       	add	r14, r1
    1d3e:	f1 1e       	adc	r15, r17
    1d40:	43 1f       	adc	r20, r19
    1d42:	56 1f       	adc	r21, r22
    1d44:	c9 1f       	adc	r28, r25
    1d46:	d0 1d       	adc	r29, r0
    1d48:	7e f4       	brtc	.+30     	; 0x1d68 <__ftoa_engine+0x146>
    1d4a:	70 33       	cpi	r23, 0x30	; 48
    1d4c:	11 f4       	brne	.+4      	; 0x1d52 <__ftoa_engine+0x130>
    1d4e:	8a 95       	dec	r24
    1d50:	e6 cf       	rjmp	.-52     	; 0x1d1e <__ftoa_engine+0xfc>
    1d52:	e8 94       	clt
    1d54:	01 50       	subi	r16, 0x01	; 1
    1d56:	30 f0       	brcs	.+12     	; 0x1d64 <__ftoa_engine+0x142>
    1d58:	08 0f       	add	r16, r24
    1d5a:	0a f4       	brpl	.+2      	; 0x1d5e <__ftoa_engine+0x13c>
    1d5c:	00 27       	eor	r16, r16
    1d5e:	02 17       	cp	r16, r18
    1d60:	08 f4       	brcc	.+2      	; 0x1d64 <__ftoa_engine+0x142>
    1d62:	20 2f       	mov	r18, r16
    1d64:	23 95       	inc	r18
    1d66:	02 2f       	mov	r16, r18
    1d68:	7a 33       	cpi	r23, 0x3A	; 58
    1d6a:	28 f0       	brcs	.+10     	; 0x1d76 <__ftoa_engine+0x154>
    1d6c:	79 e3       	ldi	r23, 0x39	; 57
    1d6e:	7d 93       	st	X+, r23
    1d70:	2a 95       	dec	r18
    1d72:	e9 f7       	brne	.-6      	; 0x1d6e <__ftoa_engine+0x14c>
    1d74:	10 c0       	rjmp	.+32     	; 0x1d96 <__ftoa_engine+0x174>
    1d76:	7d 93       	st	X+, r23
    1d78:	2a 95       	dec	r18
    1d7a:	89 f6       	brne	.-94     	; 0x1d1e <__ftoa_engine+0xfc>
    1d7c:	06 94       	lsr	r0
    1d7e:	97 95       	ror	r25
    1d80:	67 95       	ror	r22
    1d82:	37 95       	ror	r19
    1d84:	17 95       	ror	r17
    1d86:	17 94       	ror	r1
    1d88:	e1 18       	sub	r14, r1
    1d8a:	f1 0a       	sbc	r15, r17
    1d8c:	43 0b       	sbc	r20, r19
    1d8e:	56 0b       	sbc	r21, r22
    1d90:	c9 0b       	sbc	r28, r25
    1d92:	d0 09       	sbc	r29, r0
    1d94:	98 f0       	brcs	.+38     	; 0x1dbc <__ftoa_engine+0x19a>
    1d96:	23 95       	inc	r18
    1d98:	7e 91       	ld	r23, -X
    1d9a:	73 95       	inc	r23
    1d9c:	7a 33       	cpi	r23, 0x3A	; 58
    1d9e:	08 f0       	brcs	.+2      	; 0x1da2 <__ftoa_engine+0x180>
    1da0:	70 e3       	ldi	r23, 0x30	; 48
    1da2:	7c 93       	st	X, r23
    1da4:	20 13       	cpse	r18, r16
    1da6:	b8 f7       	brcc	.-18     	; 0x1d96 <__ftoa_engine+0x174>
    1da8:	7e 91       	ld	r23, -X
    1daa:	70 61       	ori	r23, 0x10	; 16
    1dac:	7d 93       	st	X+, r23
    1dae:	30 f0       	brcs	.+12     	; 0x1dbc <__ftoa_engine+0x19a>
    1db0:	83 95       	inc	r24
    1db2:	71 e3       	ldi	r23, 0x31	; 49
    1db4:	7d 93       	st	X+, r23
    1db6:	70 e3       	ldi	r23, 0x30	; 48
    1db8:	2a 95       	dec	r18
    1dba:	e1 f7       	brne	.-8      	; 0x1db4 <__ftoa_engine+0x192>
    1dbc:	11 24       	eor	r1, r1
    1dbe:	ef 90       	pop	r14
    1dc0:	ff 90       	pop	r15
    1dc2:	0f 91       	pop	r16
    1dc4:	1f 91       	pop	r17
    1dc6:	cf 91       	pop	r28
    1dc8:	df 91       	pop	r29
    1dca:	99 27       	eor	r25, r25
    1dcc:	87 fd       	sbrc	r24, 7
    1dce:	90 95       	com	r25
    1dd0:	08 95       	ret

00001dd2 <strnlen_P>:
    1dd2:	fc 01       	movw	r30, r24
    1dd4:	05 90       	lpm	r0, Z+
    1dd6:	61 50       	subi	r22, 0x01	; 1
    1dd8:	70 40       	sbci	r23, 0x00	; 0
    1dda:	01 10       	cpse	r0, r1
    1ddc:	d8 f7       	brcc	.-10     	; 0x1dd4 <strnlen_P+0x2>
    1dde:	80 95       	com	r24
    1de0:	90 95       	com	r25
    1de2:	8e 0f       	add	r24, r30
    1de4:	9f 1f       	adc	r25, r31
    1de6:	08 95       	ret

00001de8 <strcat>:
    1de8:	fb 01       	movw	r30, r22
    1dea:	dc 01       	movw	r26, r24
    1dec:	0d 90       	ld	r0, X+
    1dee:	00 20       	and	r0, r0
    1df0:	e9 f7       	brne	.-6      	; 0x1dec <strcat+0x4>
    1df2:	11 97       	sbiw	r26, 0x01	; 1
    1df4:	01 90       	ld	r0, Z+
    1df6:	0d 92       	st	X+, r0
    1df8:	00 20       	and	r0, r0
    1dfa:	e1 f7       	brne	.-8      	; 0x1df4 <strcat+0xc>
    1dfc:	08 95       	ret

00001dfe <strnlen>:
    1dfe:	fc 01       	movw	r30, r24
    1e00:	61 50       	subi	r22, 0x01	; 1
    1e02:	70 40       	sbci	r23, 0x00	; 0
    1e04:	01 90       	ld	r0, Z+
    1e06:	01 10       	cpse	r0, r1
    1e08:	d8 f7       	brcc	.-10     	; 0x1e00 <strnlen+0x2>
    1e0a:	80 95       	com	r24
    1e0c:	90 95       	com	r25
    1e0e:	8e 0f       	add	r24, r30
    1e10:	9f 1f       	adc	r25, r31
    1e12:	08 95       	ret

00001e14 <fputc>:
    1e14:	0f 93       	push	r16
    1e16:	1f 93       	push	r17
    1e18:	cf 93       	push	r28
    1e1a:	df 93       	push	r29
    1e1c:	fb 01       	movw	r30, r22
    1e1e:	23 81       	ldd	r18, Z+3	; 0x03
    1e20:	21 fd       	sbrc	r18, 1
    1e22:	03 c0       	rjmp	.+6      	; 0x1e2a <fputc+0x16>
    1e24:	8f ef       	ldi	r24, 0xFF	; 255
    1e26:	9f ef       	ldi	r25, 0xFF	; 255
    1e28:	2c c0       	rjmp	.+88     	; 0x1e82 <fputc+0x6e>
    1e2a:	22 ff       	sbrs	r18, 2
    1e2c:	16 c0       	rjmp	.+44     	; 0x1e5a <fputc+0x46>
    1e2e:	46 81       	ldd	r20, Z+6	; 0x06
    1e30:	57 81       	ldd	r21, Z+7	; 0x07
    1e32:	24 81       	ldd	r18, Z+4	; 0x04
    1e34:	35 81       	ldd	r19, Z+5	; 0x05
    1e36:	42 17       	cp	r20, r18
    1e38:	53 07       	cpc	r21, r19
    1e3a:	44 f4       	brge	.+16     	; 0x1e4c <fputc+0x38>
    1e3c:	a0 81       	ld	r26, Z
    1e3e:	b1 81       	ldd	r27, Z+1	; 0x01
    1e40:	9d 01       	movw	r18, r26
    1e42:	2f 5f       	subi	r18, 0xFF	; 255
    1e44:	3f 4f       	sbci	r19, 0xFF	; 255
    1e46:	31 83       	std	Z+1, r19	; 0x01
    1e48:	20 83       	st	Z, r18
    1e4a:	8c 93       	st	X, r24
    1e4c:	26 81       	ldd	r18, Z+6	; 0x06
    1e4e:	37 81       	ldd	r19, Z+7	; 0x07
    1e50:	2f 5f       	subi	r18, 0xFF	; 255
    1e52:	3f 4f       	sbci	r19, 0xFF	; 255
    1e54:	37 83       	std	Z+7, r19	; 0x07
    1e56:	26 83       	std	Z+6, r18	; 0x06
    1e58:	14 c0       	rjmp	.+40     	; 0x1e82 <fputc+0x6e>
    1e5a:	8b 01       	movw	r16, r22
    1e5c:	ec 01       	movw	r28, r24
    1e5e:	fb 01       	movw	r30, r22
    1e60:	00 84       	ldd	r0, Z+8	; 0x08
    1e62:	f1 85       	ldd	r31, Z+9	; 0x09
    1e64:	e0 2d       	mov	r30, r0
    1e66:	09 95       	icall
    1e68:	89 2b       	or	r24, r25
    1e6a:	e1 f6       	brne	.-72     	; 0x1e24 <fputc+0x10>
    1e6c:	d8 01       	movw	r26, r16
    1e6e:	16 96       	adiw	r26, 0x06	; 6
    1e70:	8d 91       	ld	r24, X+
    1e72:	9c 91       	ld	r25, X
    1e74:	17 97       	sbiw	r26, 0x07	; 7
    1e76:	01 96       	adiw	r24, 0x01	; 1
    1e78:	17 96       	adiw	r26, 0x07	; 7
    1e7a:	9c 93       	st	X, r25
    1e7c:	8e 93       	st	-X, r24
    1e7e:	16 97       	sbiw	r26, 0x06	; 6
    1e80:	ce 01       	movw	r24, r28
    1e82:	df 91       	pop	r29
    1e84:	cf 91       	pop	r28
    1e86:	1f 91       	pop	r17
    1e88:	0f 91       	pop	r16
    1e8a:	08 95       	ret

00001e8c <sprintf>:
    1e8c:	ae e0       	ldi	r26, 0x0E	; 14
    1e8e:	b0 e0       	ldi	r27, 0x00	; 0
    1e90:	eb e4       	ldi	r30, 0x4B	; 75
    1e92:	ff e0       	ldi	r31, 0x0F	; 15
    1e94:	9d ce       	rjmp	.-710    	; 0x1bd0 <__prologue_saves__+0x1c>
    1e96:	0d 89       	ldd	r16, Y+21	; 0x15
    1e98:	1e 89       	ldd	r17, Y+22	; 0x16
    1e9a:	86 e0       	ldi	r24, 0x06	; 6
    1e9c:	8c 83       	std	Y+4, r24	; 0x04
    1e9e:	1a 83       	std	Y+2, r17	; 0x02
    1ea0:	09 83       	std	Y+1, r16	; 0x01
    1ea2:	8f ef       	ldi	r24, 0xFF	; 255
    1ea4:	9f e7       	ldi	r25, 0x7F	; 127
    1ea6:	9e 83       	std	Y+6, r25	; 0x06
    1ea8:	8d 83       	std	Y+5, r24	; 0x05
    1eaa:	ae 01       	movw	r20, r28
    1eac:	47 5e       	subi	r20, 0xE7	; 231
    1eae:	5f 4f       	sbci	r21, 0xFF	; 255
    1eb0:	6f 89       	ldd	r22, Y+23	; 0x17
    1eb2:	78 8d       	ldd	r23, Y+24	; 0x18
    1eb4:	ce 01       	movw	r24, r28
    1eb6:	01 96       	adiw	r24, 0x01	; 1
    1eb8:	1f db       	rcall	.-2498   	; 0x14f8 <vfprintf>
    1eba:	ef 81       	ldd	r30, Y+7	; 0x07
    1ebc:	f8 85       	ldd	r31, Y+8	; 0x08
    1ebe:	e0 0f       	add	r30, r16
    1ec0:	f1 1f       	adc	r31, r17
    1ec2:	10 82       	st	Z, r1
    1ec4:	2e 96       	adiw	r28, 0x0e	; 14
    1ec6:	e4 e0       	ldi	r30, 0x04	; 4
    1ec8:	9f ce       	rjmp	.-706    	; 0x1c08 <__epilogue_restores__+0x1c>

00001eca <__ultoa_invert>:
    1eca:	fa 01       	movw	r30, r20
    1ecc:	aa 27       	eor	r26, r26
    1ece:	28 30       	cpi	r18, 0x08	; 8
    1ed0:	51 f1       	breq	.+84     	; 0x1f26 <__ultoa_invert+0x5c>
    1ed2:	20 31       	cpi	r18, 0x10	; 16
    1ed4:	81 f1       	breq	.+96     	; 0x1f36 <__ultoa_invert+0x6c>
    1ed6:	e8 94       	clt
    1ed8:	6f 93       	push	r22
    1eda:	6e 7f       	andi	r22, 0xFE	; 254
    1edc:	6e 5f       	subi	r22, 0xFE	; 254
    1ede:	7f 4f       	sbci	r23, 0xFF	; 255
    1ee0:	8f 4f       	sbci	r24, 0xFF	; 255
    1ee2:	9f 4f       	sbci	r25, 0xFF	; 255
    1ee4:	af 4f       	sbci	r26, 0xFF	; 255
    1ee6:	b1 e0       	ldi	r27, 0x01	; 1
    1ee8:	3e d0       	rcall	.+124    	; 0x1f66 <__ultoa_invert+0x9c>
    1eea:	b4 e0       	ldi	r27, 0x04	; 4
    1eec:	3c d0       	rcall	.+120    	; 0x1f66 <__ultoa_invert+0x9c>
    1eee:	67 0f       	add	r22, r23
    1ef0:	78 1f       	adc	r23, r24
    1ef2:	89 1f       	adc	r24, r25
    1ef4:	9a 1f       	adc	r25, r26
    1ef6:	a1 1d       	adc	r26, r1
    1ef8:	68 0f       	add	r22, r24
    1efa:	79 1f       	adc	r23, r25
    1efc:	8a 1f       	adc	r24, r26
    1efe:	91 1d       	adc	r25, r1
    1f00:	a1 1d       	adc	r26, r1
    1f02:	6a 0f       	add	r22, r26
    1f04:	71 1d       	adc	r23, r1
    1f06:	81 1d       	adc	r24, r1
    1f08:	91 1d       	adc	r25, r1
    1f0a:	a1 1d       	adc	r26, r1
    1f0c:	20 d0       	rcall	.+64     	; 0x1f4e <__ultoa_invert+0x84>
    1f0e:	09 f4       	brne	.+2      	; 0x1f12 <__ultoa_invert+0x48>
    1f10:	68 94       	set
    1f12:	3f 91       	pop	r19
    1f14:	2a e0       	ldi	r18, 0x0A	; 10
    1f16:	26 9f       	mul	r18, r22
    1f18:	11 24       	eor	r1, r1
    1f1a:	30 19       	sub	r19, r0
    1f1c:	30 5d       	subi	r19, 0xD0	; 208
    1f1e:	31 93       	st	Z+, r19
    1f20:	de f6       	brtc	.-74     	; 0x1ed8 <__ultoa_invert+0xe>
    1f22:	cf 01       	movw	r24, r30
    1f24:	08 95       	ret
    1f26:	46 2f       	mov	r20, r22
    1f28:	47 70       	andi	r20, 0x07	; 7
    1f2a:	40 5d       	subi	r20, 0xD0	; 208
    1f2c:	41 93       	st	Z+, r20
    1f2e:	b3 e0       	ldi	r27, 0x03	; 3
    1f30:	0f d0       	rcall	.+30     	; 0x1f50 <__ultoa_invert+0x86>
    1f32:	c9 f7       	brne	.-14     	; 0x1f26 <__ultoa_invert+0x5c>
    1f34:	f6 cf       	rjmp	.-20     	; 0x1f22 <__ultoa_invert+0x58>
    1f36:	46 2f       	mov	r20, r22
    1f38:	4f 70       	andi	r20, 0x0F	; 15
    1f3a:	40 5d       	subi	r20, 0xD0	; 208
    1f3c:	4a 33       	cpi	r20, 0x3A	; 58
    1f3e:	18 f0       	brcs	.+6      	; 0x1f46 <__ultoa_invert+0x7c>
    1f40:	49 5d       	subi	r20, 0xD9	; 217
    1f42:	31 fd       	sbrc	r19, 1
    1f44:	40 52       	subi	r20, 0x20	; 32
    1f46:	41 93       	st	Z+, r20
    1f48:	02 d0       	rcall	.+4      	; 0x1f4e <__ultoa_invert+0x84>
    1f4a:	a9 f7       	brne	.-22     	; 0x1f36 <__ultoa_invert+0x6c>
    1f4c:	ea cf       	rjmp	.-44     	; 0x1f22 <__ultoa_invert+0x58>
    1f4e:	b4 e0       	ldi	r27, 0x04	; 4
    1f50:	a6 95       	lsr	r26
    1f52:	97 95       	ror	r25
    1f54:	87 95       	ror	r24
    1f56:	77 95       	ror	r23
    1f58:	67 95       	ror	r22
    1f5a:	ba 95       	dec	r27
    1f5c:	c9 f7       	brne	.-14     	; 0x1f50 <__ultoa_invert+0x86>
    1f5e:	00 97       	sbiw	r24, 0x00	; 0
    1f60:	61 05       	cpc	r22, r1
    1f62:	71 05       	cpc	r23, r1
    1f64:	08 95       	ret
    1f66:	9b 01       	movw	r18, r22
    1f68:	ac 01       	movw	r20, r24
    1f6a:	0a 2e       	mov	r0, r26
    1f6c:	06 94       	lsr	r0
    1f6e:	57 95       	ror	r21
    1f70:	47 95       	ror	r20
    1f72:	37 95       	ror	r19
    1f74:	27 95       	ror	r18
    1f76:	ba 95       	dec	r27
    1f78:	c9 f7       	brne	.-14     	; 0x1f6c <__ultoa_invert+0xa2>
    1f7a:	62 0f       	add	r22, r18
    1f7c:	73 1f       	adc	r23, r19
    1f7e:	84 1f       	adc	r24, r20
    1f80:	95 1f       	adc	r25, r21
    1f82:	a0 1d       	adc	r26, r0
    1f84:	08 95       	ret

00001f86 <_exit>:
    1f86:	f8 94       	cli

00001f88 <__stop_program>:
    1f88:	ff cf       	rjmp	.-2      	; 0x1f88 <__stop_program>
