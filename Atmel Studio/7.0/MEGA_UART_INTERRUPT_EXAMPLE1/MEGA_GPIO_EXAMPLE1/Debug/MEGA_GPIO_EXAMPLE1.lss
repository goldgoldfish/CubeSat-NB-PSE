
MEGA_GPIO_EXAMPLE1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000006d8  00800200  000036d6  0000376a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000036d6  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000006a  008008d8  008008d8  00003e42  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00003e42  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00003ea0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000310  00000000  00000000  00003edc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000046be  00000000  00000000  000041ec  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000184a  00000000  00000000  000088aa  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000040b8  00000000  00000000  0000a0f4  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000864  00000000  00000000  0000e1ac  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00014de9  00000000  00000000  0000ea10  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000229f  00000000  00000000  000237f9  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000250  00000000  00000000  00025a98  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  0000619b  00000000  00000000  00025ce8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	f2 c0       	rjmp	.+484    	; 0x1e6 <__ctors_end>
       2:	00 00       	nop
       4:	0d c1       	rjmp	.+538    	; 0x220 <__bad_interrupt>
       6:	00 00       	nop
       8:	0b c1       	rjmp	.+534    	; 0x220 <__bad_interrupt>
       a:	00 00       	nop
       c:	09 c1       	rjmp	.+530    	; 0x220 <__bad_interrupt>
       e:	00 00       	nop
      10:	07 c1       	rjmp	.+526    	; 0x220 <__bad_interrupt>
      12:	00 00       	nop
      14:	05 c1       	rjmp	.+522    	; 0x220 <__bad_interrupt>
      16:	00 00       	nop
      18:	03 c1       	rjmp	.+518    	; 0x220 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	01 c1       	rjmp	.+514    	; 0x220 <__bad_interrupt>
      1e:	00 00       	nop
      20:	ff c0       	rjmp	.+510    	; 0x220 <__bad_interrupt>
      22:	00 00       	nop
      24:	fd c0       	rjmp	.+506    	; 0x220 <__bad_interrupt>
      26:	00 00       	nop
      28:	fb c0       	rjmp	.+502    	; 0x220 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	f9 c0       	rjmp	.+498    	; 0x220 <__bad_interrupt>
      2e:	00 00       	nop
      30:	0c 94 c7 13 	jmp	0x278e	; 0x278e <__vector_12>
      34:	f5 c0       	rjmp	.+490    	; 0x220 <__bad_interrupt>
      36:	00 00       	nop
      38:	f3 c0       	rjmp	.+486    	; 0x220 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	f1 c0       	rjmp	.+482    	; 0x220 <__bad_interrupt>
      3e:	00 00       	nop
      40:	ef c0       	rjmp	.+478    	; 0x220 <__bad_interrupt>
      42:	00 00       	nop
      44:	0c 94 f0 11 	jmp	0x23e0	; 0x23e0 <__vector_17>
      48:	eb c0       	rjmp	.+470    	; 0x220 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	e9 c0       	rjmp	.+466    	; 0x220 <__bad_interrupt>
      4e:	00 00       	nop
      50:	e7 c0       	rjmp	.+462    	; 0x220 <__bad_interrupt>
      52:	00 00       	nop
      54:	e5 c0       	rjmp	.+458    	; 0x220 <__bad_interrupt>
      56:	00 00       	nop
      58:	e3 c0       	rjmp	.+454    	; 0x220 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	e1 c0       	rjmp	.+450    	; 0x220 <__bad_interrupt>
      5e:	00 00       	nop
      60:	df c0       	rjmp	.+446    	; 0x220 <__bad_interrupt>
      62:	00 00       	nop
      64:	0c 94 6b 13 	jmp	0x26d6	; 0x26d6 <__vector_25>
      68:	db c0       	rjmp	.+438    	; 0x220 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	d9 c0       	rjmp	.+434    	; 0x220 <__bad_interrupt>
      6e:	00 00       	nop
      70:	d7 c0       	rjmp	.+430    	; 0x220 <__bad_interrupt>
      72:	00 00       	nop
      74:	d5 c0       	rjmp	.+426    	; 0x220 <__bad_interrupt>
      76:	00 00       	nop
      78:	d3 c0       	rjmp	.+422    	; 0x220 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	d1 c0       	rjmp	.+418    	; 0x220 <__bad_interrupt>
      7e:	00 00       	nop
      80:	cf c0       	rjmp	.+414    	; 0x220 <__bad_interrupt>
      82:	00 00       	nop
      84:	cd c0       	rjmp	.+410    	; 0x220 <__bad_interrupt>
      86:	00 00       	nop
      88:	cb c0       	rjmp	.+406    	; 0x220 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	c9 c0       	rjmp	.+402    	; 0x220 <__bad_interrupt>
      8e:	00 00       	nop
      90:	c7 c0       	rjmp	.+398    	; 0x220 <__bad_interrupt>
      92:	00 00       	nop
      94:	c5 c0       	rjmp	.+394    	; 0x220 <__bad_interrupt>
      96:	00 00       	nop
      98:	c3 c0       	rjmp	.+390    	; 0x220 <__bad_interrupt>
      9a:	00 00       	nop
      9c:	c1 c0       	rjmp	.+386    	; 0x220 <__bad_interrupt>
      9e:	00 00       	nop
      a0:	bf c0       	rjmp	.+382    	; 0x220 <__bad_interrupt>
      a2:	00 00       	nop
      a4:	bd c0       	rjmp	.+378    	; 0x220 <__bad_interrupt>
      a6:	00 00       	nop
      a8:	bb c0       	rjmp	.+374    	; 0x220 <__bad_interrupt>
      aa:	00 00       	nop
      ac:	b9 c0       	rjmp	.+370    	; 0x220 <__bad_interrupt>
      ae:	00 00       	nop
      b0:	b7 c0       	rjmp	.+366    	; 0x220 <__bad_interrupt>
      b2:	00 00       	nop
      b4:	b5 c0       	rjmp	.+362    	; 0x220 <__bad_interrupt>
      b6:	00 00       	nop
      b8:	b3 c0       	rjmp	.+358    	; 0x220 <__bad_interrupt>
      ba:	00 00       	nop
      bc:	b1 c0       	rjmp	.+354    	; 0x220 <__bad_interrupt>
      be:	00 00       	nop
      c0:	af c0       	rjmp	.+350    	; 0x220 <__bad_interrupt>
      c2:	00 00       	nop
      c4:	ad c0       	rjmp	.+346    	; 0x220 <__bad_interrupt>
      c6:	00 00       	nop
      c8:	ab c0       	rjmp	.+342    	; 0x220 <__bad_interrupt>
      ca:	00 00       	nop
      cc:	a9 c0       	rjmp	.+338    	; 0x220 <__bad_interrupt>
      ce:	00 00       	nop
      d0:	a7 c0       	rjmp	.+334    	; 0x220 <__bad_interrupt>
      d2:	00 00       	nop
      d4:	a5 c0       	rjmp	.+330    	; 0x220 <__bad_interrupt>
      d6:	00 00       	nop
      d8:	a3 c0       	rjmp	.+326    	; 0x220 <__bad_interrupt>
      da:	00 00       	nop
      dc:	a1 c0       	rjmp	.+322    	; 0x220 <__bad_interrupt>
      de:	00 00       	nop
      e0:	9f c0       	rjmp	.+318    	; 0x220 <__bad_interrupt>
	...

000000e4 <__trampolines_end>:
      e4:	6e 61       	ori	r22, 0x1E	; 30
      e6:	6e 00       	.word	0x006e	; ????

000000e8 <__c.2332>:
      e8:	69 6e 66 00 00 40 7a 10 f3 5a 00 a0 72 4e 18 09     inf..@z..Z..rN..
      f8:	00 10 a5 d4 e8 00 00 e8 76 48 17 00 00 e4 0b 54     ........vH.....T
     108:	02 00 00 ca 9a 3b 00 00 00 e1 f5 05 00 00 80 96     .....;..........
     118:	98 00 00 00 40 42 0f 00 00 00 a0 86 01 00 00 00     ....@B..........
     128:	10 27 00 00 00 00 e8 03 00 00 00 00 64 00 00 00     .'..........d...
     138:	00 00 0a 00 00 00 00 00 01 00 00 00 00 00 2c 76     ..............,v
     148:	d8 88 dc 67 4f 08 23 df c1 df ae 59 e1 b1 b7 96     ...gO.#....Y....
     158:	e5 e3 e4 53 c6 3a e6 51 99 76 96 e8 e6 c2 84 26     ...S.:.Q.v.....&
     168:	eb 89 8c 9b 62 ed 40 7c 6f fc ef bc 9c 9f 40 f2     ....b.@|o.....@.
     178:	ba a5 6f a5 f4 90 05 5a 2a f7 5c 93 6b 6c f9 67     ..o....Z*.\.kl.g
     188:	6d c1 1b fc e0 e4 0d 47 fe f5 20 e6 b5 00 d0 ed     m......G.. .....
     198:	90 2e 03 00 94 35 77 05 00 80 84 1e 08 00 00 20     .....5w........ 
     1a8:	4e 0a 00 00 00 c8 0c 33 33 33 33 0f 98 6e 12 83     N......3333..n..
     1b8:	11 41 ef 8d 21 14 89 3b e6 55 16 cf fe e6 db 18     .A..!..;.U......
     1c8:	d1 84 4b 38 1b f7 7c 1d 90 1d a4 bb e4 24 20 32     ..K8..|......$ 2
     1d8:	84 72 5e 22 81 00 c9 f1 24 ec a1 e5 3d 27           .r^"....$...='

000001e6 <__ctors_end>:
     1e6:	11 24       	eor	r1, r1
     1e8:	1f be       	out	0x3f, r1	; 63
     1ea:	cf ef       	ldi	r28, 0xFF	; 255
     1ec:	d1 e2       	ldi	r29, 0x21	; 33
     1ee:	de bf       	out	0x3e, r29	; 62
     1f0:	cd bf       	out	0x3d, r28	; 61

000001f2 <__do_copy_data>:
     1f2:	18 e0       	ldi	r17, 0x08	; 8
     1f4:	a0 e0       	ldi	r26, 0x00	; 0
     1f6:	b2 e0       	ldi	r27, 0x02	; 2
     1f8:	e6 ed       	ldi	r30, 0xD6	; 214
     1fa:	f6 e3       	ldi	r31, 0x36	; 54
     1fc:	02 c0       	rjmp	.+4      	; 0x202 <__do_copy_data+0x10>
     1fe:	05 90       	lpm	r0, Z+
     200:	0d 92       	st	X+, r0
     202:	a8 3d       	cpi	r26, 0xD8	; 216
     204:	b1 07       	cpc	r27, r17
     206:	d9 f7       	brne	.-10     	; 0x1fe <__do_copy_data+0xc>

00000208 <__do_clear_bss>:
     208:	29 e0       	ldi	r18, 0x09	; 9
     20a:	a8 ed       	ldi	r26, 0xD8	; 216
     20c:	b8 e0       	ldi	r27, 0x08	; 8
     20e:	01 c0       	rjmp	.+2      	; 0x212 <.do_clear_bss_start>

00000210 <.do_clear_bss_loop>:
     210:	1d 92       	st	X+, r1

00000212 <.do_clear_bss_start>:
     212:	a2 34       	cpi	r26, 0x42	; 66
     214:	b2 07       	cpc	r27, r18
     216:	e1 f7       	brne	.-8      	; 0x210 <.do_clear_bss_loop>
     218:	0e 94 ec 13 	call	0x27d8	; 0x27d8 <main>
     21c:	0c 94 69 1b 	jmp	0x36d2	; 0x36d2 <_exit>

00000220 <__bad_interrupt>:
     220:	ef ce       	rjmp	.-546    	; 0x0 <__vectors>

00000222 <Change_ADC>:
// Date: 2019-01-15
// Description: Change ADC_MUX to read next value
/*========================================================================================*/

void Change_ADC(int i){
	if (i < 4){
     222:	84 30       	cpi	r24, 0x04	; 4
     224:	91 05       	cpc	r25, r1
     226:	44 f4       	brge	.+16     	; 0x238 <Change_ADC+0x16>
		ADCSRB &= 0xf7;
     228:	eb e7       	ldi	r30, 0x7B	; 123
     22a:	f0 e0       	ldi	r31, 0x00	; 0
     22c:	90 81       	ld	r25, Z
     22e:	97 7f       	andi	r25, 0xF7	; 247
     230:	90 83       	st	Z, r25
		ADMUX = 0x00 + i;
     232:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>
     236:	08 95       	ret
	}
	else{
		ADCSRB = 0x08;
     238:	98 e0       	ldi	r25, 0x08	; 8
     23a:	90 93 7b 00 	sts	0x007B, r25	; 0x80007b <__TEXT_REGION_LENGTH__+0x7e007b>
		ADMUX = 0x00 + (i - 4);
     23e:	84 50       	subi	r24, 0x04	; 4
     240:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>
     244:	08 95       	ret

00000246 <Read_ADC>:
/*========================================================================================*/

uint16_t Read_ADC(){
	
	// start conversion
	ADCSRA |= 0x40;
     246:	ea e7       	ldi	r30, 0x7A	; 122
     248:	f0 e0       	ldi	r31, 0x00	; 0
     24a:	80 81       	ld	r24, Z
     24c:	80 64       	ori	r24, 0x40	; 64
     24e:	80 83       	st	Z, r24
	
	// Wait until conversion is done
	while(ADCSRA & 0x40);
     250:	80 81       	ld	r24, Z
     252:	86 fd       	sbrc	r24, 6
     254:	fd cf       	rjmp	.-6      	; 0x250 <Read_ADC+0xa>
	
	return ADC;
     256:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
     25a:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
}
     25e:	08 95       	ret

00000260 <Check_ADC>:
/*========================================================================================*/

float Check_ADC(int i){
	
	// Choose the correct ADC channel to read from
	Change_ADC(i);
     260:	e0 df       	rcall	.-64     	; 0x222 <Change_ADC>
	
	// Get the read value from the ADC
	return Read_ADC();	
     262:	f1 df       	rcall	.-30     	; 0x246 <Read_ADC>
     264:	bc 01       	movw	r22, r24
     266:	80 e0       	ldi	r24, 0x00	; 0
     268:	90 e0       	ldi	r25, 0x00	; 0
     26a:	0c 94 00 15 	jmp	0x2a00	; 0x2a00 <__floatunsisf>
     26e:	08 95       	ret

00000270 <Volt_ADC>:
	
}
     270:	9c 01       	movw	r18, r24
// Date: 2019-03-06
// Description: Voltage Measurements via ADC.
/*========================================================================================*/

float Volt_ADC(int Volt_num){
	int ADC_num = Volt_num + 4; // ADC_num is the value needed for Change_ADC
     272:	2c 5f       	subi	r18, 0xFC	; 252
     274:	3f 4f       	sbci	r19, 0xFF	; 255
	
	// Explained
	// voltage = (ADC_value / total resolution)
	
	// 3V3-1 & 3V3-2 rails
	if(ADC_num == 4 || ADC_num == 5){
     276:	02 97       	sbiw	r24, 0x02	; 2
     278:	a8 f4       	brcc	.+42     	; 0x2a4 <Volt_ADC+0x34>
		val = ((Check_ADC(ADC_num) / 1024) * 3.3) / 0.9090;
     27a:	c9 01       	movw	r24, r18
     27c:	f1 df       	rcall	.-30     	; 0x260 <Check_ADC>
     27e:	20 e0       	ldi	r18, 0x00	; 0
     280:	30 e0       	ldi	r19, 0x00	; 0
     282:	40 e8       	ldi	r20, 0x80	; 128
     284:	5a e3       	ldi	r21, 0x3A	; 58
     286:	0e 94 b6 15 	call	0x2b6c	; 0x2b6c <__mulsf3>
     28a:	23 e3       	ldi	r18, 0x33	; 51
     28c:	33 e3       	ldi	r19, 0x33	; 51
     28e:	43 e5       	ldi	r20, 0x53	; 83
     290:	50 e4       	ldi	r21, 0x40	; 64
     292:	0e 94 b6 15 	call	0x2b6c	; 0x2b6c <__mulsf3>
     296:	29 e3       	ldi	r18, 0x39	; 57
     298:	34 eb       	ldi	r19, 0xB4	; 180
     29a:	48 e6       	ldi	r20, 0x68	; 104
     29c:	5f e3       	ldi	r21, 0x3F	; 63
     29e:	0c 94 67 14 	jmp	0x28ce	; 0x28ce <__divsf3>
     2a2:	08 95       	ret
	}
	// 5V rail
	else if(ADC_num == 6){
     2a4:	26 30       	cpi	r18, 0x06	; 6
     2a6:	31 05       	cpc	r19, r1
     2a8:	b1 f4       	brne	.+44     	; 0x2d6 <Volt_ADC+0x66>
		val = ((Check_ADC(ADC_num) / 1024) * 3.3) / 0.5997;
     2aa:	86 e0       	ldi	r24, 0x06	; 6
     2ac:	90 e0       	ldi	r25, 0x00	; 0
     2ae:	d8 df       	rcall	.-80     	; 0x260 <Check_ADC>
     2b0:	20 e0       	ldi	r18, 0x00	; 0
     2b2:	30 e0       	ldi	r19, 0x00	; 0
     2b4:	40 e8       	ldi	r20, 0x80	; 128
     2b6:	5a e3       	ldi	r21, 0x3A	; 58
     2b8:	0e 94 b6 15 	call	0x2b6c	; 0x2b6c <__mulsf3>
     2bc:	23 e3       	ldi	r18, 0x33	; 51
     2be:	33 e3       	ldi	r19, 0x33	; 51
     2c0:	43 e5       	ldi	r20, 0x53	; 83
     2c2:	50 e4       	ldi	r21, 0x40	; 64
     2c4:	0e 94 b6 15 	call	0x2b6c	; 0x2b6c <__mulsf3>
     2c8:	20 ef       	ldi	r18, 0xF0	; 240
     2ca:	35 e8       	ldi	r19, 0x85	; 133
     2cc:	49 e1       	ldi	r20, 0x19	; 25
     2ce:	5f e3       	ldi	r21, 0x3F	; 63
     2d0:	0c 94 67 14 	jmp	0x28ce	; 0x28ce <__divsf3>
     2d4:	08 95       	ret
		// Correction factor (through testing)
		// 69 (mV) offset
	}
	// 8V rail
	else if(ADC_num == 7){
     2d6:	27 30       	cpi	r18, 0x07	; 7
     2d8:	31 05       	cpc	r19, r1
     2da:	b1 f4       	brne	.+44     	; 0x308 <Volt_ADC+0x98>
		val = ((Check_ADC(ADC_num) / 1024) * 3.3) / 0.3597;
     2dc:	87 e0       	ldi	r24, 0x07	; 7
     2de:	90 e0       	ldi	r25, 0x00	; 0
     2e0:	bf df       	rcall	.-130    	; 0x260 <Check_ADC>
     2e2:	20 e0       	ldi	r18, 0x00	; 0
     2e4:	30 e0       	ldi	r19, 0x00	; 0
     2e6:	40 e8       	ldi	r20, 0x80	; 128
     2e8:	5a e3       	ldi	r21, 0x3A	; 58
     2ea:	0e 94 b6 15 	call	0x2b6c	; 0x2b6c <__mulsf3>
     2ee:	23 e3       	ldi	r18, 0x33	; 51
     2f0:	33 e3       	ldi	r19, 0x33	; 51
     2f2:	43 e5       	ldi	r20, 0x53	; 83
     2f4:	50 e4       	ldi	r21, 0x40	; 64
     2f6:	0e 94 b6 15 	call	0x2b6c	; 0x2b6c <__mulsf3>
     2fa:	29 e9       	ldi	r18, 0x99	; 153
     2fc:	3a e2       	ldi	r19, 0x2A	; 42
     2fe:	48 eb       	ldi	r20, 0xB8	; 184
     300:	5e e3       	ldi	r21, 0x3E	; 62
     302:	0c 94 67 14 	jmp	0x28ce	; 0x28ce <__divsf3>
     306:	08 95       	ret
	}
	// VBatt rail
	else if(ADC_num == 8){
     308:	28 30       	cpi	r18, 0x08	; 8
     30a:	31 05       	cpc	r19, r1
		val = ((Check_ADC(ADC_num) / 1024) * 3.3) / 0.7141;
     30c:	b1 f4       	brne	.+44     	; 0x33a <Volt_ADC+0xca>
     30e:	88 e0       	ldi	r24, 0x08	; 8
     310:	90 e0       	ldi	r25, 0x00	; 0
     312:	a6 df       	rcall	.-180    	; 0x260 <Check_ADC>
     314:	20 e0       	ldi	r18, 0x00	; 0
     316:	30 e0       	ldi	r19, 0x00	; 0
     318:	40 e8       	ldi	r20, 0x80	; 128
     31a:	5a e3       	ldi	r21, 0x3A	; 58
     31c:	0e 94 b6 15 	call	0x2b6c	; 0x2b6c <__mulsf3>
     320:	23 e3       	ldi	r18, 0x33	; 51
     322:	33 e3       	ldi	r19, 0x33	; 51
     324:	43 e5       	ldi	r20, 0x53	; 83
     326:	50 e4       	ldi	r21, 0x40	; 64
     328:	0e 94 b6 15 	call	0x2b6c	; 0x2b6c <__mulsf3>
     32c:	22 e4       	ldi	r18, 0x42	; 66
     32e:	3f ec       	ldi	r19, 0xCF	; 207
     330:	46 e3       	ldi	r20, 0x36	; 54
     332:	5f e3       	ldi	r21, 0x3F	; 63
     334:	0c 94 67 14 	jmp	0x28ce	; 0x28ce <__divsf3>
     338:	08 95       	ret
// Description: Voltage Measurements via ADC.
/*========================================================================================*/

float Volt_ADC(int Volt_num){
	int ADC_num = Volt_num + 4; // ADC_num is the value needed for Change_ADC
	float val = 0;
     33a:	60 e0       	ldi	r22, 0x00	; 0
     33c:	70 e0       	ldi	r23, 0x00	; 0
     33e:	cb 01       	movw	r24, r22
	}
	else{
		// do nothing
	}
	return val;
}
     340:	08 95       	ret

00000342 <Amp_ADC>:
// Author: Chris Thomas
// Date: 2019-03-06
// Description: Ammeter measurements via ADC.
/*========================================================================================*/

float Amp_ADC(int Amp_num){
     342:	4f 92       	push	r4
     344:	5f 92       	push	r5
     346:	6f 92       	push	r6
     348:	7f 92       	push	r7
     34a:	8f 92       	push	r8
     34c:	9f 92       	push	r9
     34e:	af 92       	push	r10
     350:	bf 92       	push	r11
     352:	cf 92       	push	r12
     354:	df 92       	push	r13
     356:	ef 92       	push	r14
     358:	ff 92       	push	r15
     35a:	0f 93       	push	r16
     35c:	1f 93       	push	r17
     35e:	cf 93       	push	r28
     360:	df 93       	push	r29
     362:	cd b7       	in	r28, 0x3d	; 61
     364:	de b7       	in	r29, 0x3e	; 62
     366:	68 97       	sbiw	r28, 0x18	; 24
     368:	0f b6       	in	r0, 0x3f	; 63
     36a:	f8 94       	cli
     36c:	de bf       	out	0x3e, r29	; 62
     36e:	0f be       	out	0x3f, r0	; 63
     370:	cd bf       	out	0x3d, r28	; 61
     372:	5c 01       	movw	r10, r24
	int ADC_num = 0; // initialize ADC number to check
	float val = 0; // initialize the voltage value to 0 V
	float zero[6] = {0.515, 0.542, 0.523, 0.505, 0.508, 0.530};
     374:	88 e1       	ldi	r24, 0x18	; 24
     376:	e2 e0       	ldi	r30, 0x02	; 2
     378:	f2 e0       	ldi	r31, 0x02	; 2
     37a:	de 01       	movw	r26, r28
     37c:	11 96       	adiw	r26, 0x01	; 1
     37e:	01 90       	ld	r0, Z+
     380:	0d 92       	st	X+, r0
     382:	8a 95       	dec	r24
     384:	e1 f7       	brne	.-8      	; 0x37e <Amp_ADC+0x3c>
	int i = 0;
	
	// Voltage rail current 8V, 5V, 3V3-1, 3V3-2 respectively
	if(Amp_num < 4){
     386:	84 e0       	ldi	r24, 0x04	; 4
     388:	a8 16       	cp	r10, r24
     38a:	b1 04       	cpc	r11, r1
     38c:	0c f0       	brlt	.+2      	; 0x390 <Amp_ADC+0x4e>
     38e:	3d c0       	rjmp	.+122    	; 0x40a <__LOCK_REGION_LENGTH__+0xa>
     390:	09 e1       	ldi	r16, 0x19	; 25
     392:	10 e0       	ldi	r17, 0x00	; 0
     394:	c1 2c       	mov	r12, r1
     396:	d1 2c       	mov	r13, r1
     398:	76 01       	movw	r14, r12
		ADC_num = Amp_num;
		while(i < 25){
			val += (((Check_ADC(ADC_num) / 1024) * 3.3) - zero[Amp_num]) / 0.4;
     39a:	45 01       	movw	r8, r10
     39c:	88 0c       	add	r8, r8
     39e:	99 1c       	adc	r9, r9
     3a0:	88 0c       	add	r8, r8
     3a2:	99 1c       	adc	r9, r9
     3a4:	e1 e0       	ldi	r30, 0x01	; 1
     3a6:	f0 e0       	ldi	r31, 0x00	; 0
     3a8:	ec 0f       	add	r30, r28
     3aa:	fd 1f       	adc	r31, r29
     3ac:	8e 0e       	add	r8, r30
     3ae:	9f 1e       	adc	r9, r31
     3b0:	c5 01       	movw	r24, r10
     3b2:	56 df       	rcall	.-340    	; 0x260 <Check_ADC>
     3b4:	20 e0       	ldi	r18, 0x00	; 0
     3b6:	30 e0       	ldi	r19, 0x00	; 0
     3b8:	40 e8       	ldi	r20, 0x80	; 128
     3ba:	5a e3       	ldi	r21, 0x3A	; 58
     3bc:	0e 94 b6 15 	call	0x2b6c	; 0x2b6c <__mulsf3>
     3c0:	23 e3       	ldi	r18, 0x33	; 51
     3c2:	33 e3       	ldi	r19, 0x33	; 51
     3c4:	43 e5       	ldi	r20, 0x53	; 83
     3c6:	50 e4       	ldi	r21, 0x40	; 64
     3c8:	0e 94 b6 15 	call	0x2b6c	; 0x2b6c <__mulsf3>
     3cc:	f4 01       	movw	r30, r8
     3ce:	20 81       	ld	r18, Z
     3d0:	31 81       	ldd	r19, Z+1	; 0x01
     3d2:	42 81       	ldd	r20, Z+2	; 0x02
     3d4:	53 81       	ldd	r21, Z+3	; 0x03
     3d6:	0e 94 fe 13 	call	0x27fc	; 0x27fc <__subsf3>
     3da:	2d ec       	ldi	r18, 0xCD	; 205
     3dc:	3c ec       	ldi	r19, 0xCC	; 204
     3de:	4c ec       	ldi	r20, 0xCC	; 204
     3e0:	5e e3       	ldi	r21, 0x3E	; 62
     3e2:	0e 94 67 14 	call	0x28ce	; 0x28ce <__divsf3>
     3e6:	9b 01       	movw	r18, r22
     3e8:	ac 01       	movw	r20, r24
     3ea:	c7 01       	movw	r24, r14
     3ec:	b6 01       	movw	r22, r12
     3ee:	0e 94 ff 13 	call	0x27fe	; 0x27fe <__addsf3>
     3f2:	6b 01       	movw	r12, r22
     3f4:	7c 01       	movw	r14, r24
     3f6:	01 50       	subi	r16, 0x01	; 1
     3f8:	11 09       	sbc	r17, r1
	int i = 0;
	
	// Voltage rail current 8V, 5V, 3V3-1, 3V3-2 respectively
	if(Amp_num < 4){
		ADC_num = Amp_num;
		while(i < 25){
     3fa:	d1 f6       	brne	.-76     	; 0x3b0 <Amp_ADC+0x6e>
			val += (((Check_ADC(ADC_num) / 1024) * 3.3) - zero[Amp_num]) / 0.4;
			i++;
		}
		val = val/25;
     3fc:	20 e0       	ldi	r18, 0x00	; 0
     3fe:	30 e0       	ldi	r19, 0x00	; 0
     400:	48 ec       	ldi	r20, 0xC8	; 200
     402:	51 e4       	ldi	r21, 0x41	; 65
     404:	0e 94 67 14 	call	0x28ce	; 0x28ce <__divsf3>
     408:	48 c0       	rjmp	.+144    	; 0x49a <__LOCK_REGION_LENGTH__+0x9a>
	}
	// Solar current and Battery current, respectively
	else if(Amp_num == 4 || Amp_num == 5){
     40a:	c5 01       	movw	r24, r10
     40c:	04 97       	sbiw	r24, 0x04	; 4
     40e:	02 97       	sbiw	r24, 0x02	; 2
     410:	08 f0       	brcs	.+2      	; 0x414 <__LOCK_REGION_LENGTH__+0x14>
     412:	40 c0       	rjmp	.+128    	; 0x494 <__LOCK_REGION_LENGTH__+0x94>
		ADC_num = Amp_num + 5;
     414:	75 01       	movw	r14, r10
     416:	f5 e0       	ldi	r31, 0x05	; 5
     418:	ef 0e       	add	r14, r31
     41a:	f1 1c       	adc	r15, r1
     41c:	09 e1       	ldi	r16, 0x19	; 25
     41e:	10 e0       	ldi	r17, 0x00	; 0
// Description: Ammeter measurements via ADC.
/*========================================================================================*/

float Amp_ADC(int Amp_num){
	int ADC_num = 0; // initialize ADC number to check
	float val = 0; // initialize the voltage value to 0 V
     420:	41 2c       	mov	r4, r1
     422:	51 2c       	mov	r5, r1
     424:	32 01       	movw	r6, r4
	}
	// Solar current and Battery current, respectively
	else if(Amp_num == 4 || Amp_num == 5){
		ADC_num = Amp_num + 5;
		while(i < 25){
			val += (((Check_ADC(ADC_num) / 1024) * 3.3) - zero[Amp_num]) / 0.4;
     426:	aa 0c       	add	r10, r10
     428:	bb 1c       	adc	r11, r11
     42a:	aa 0c       	add	r10, r10
     42c:	bb 1c       	adc	r11, r11
     42e:	81 e0       	ldi	r24, 0x01	; 1
     430:	90 e0       	ldi	r25, 0x00	; 0
     432:	8c 0f       	add	r24, r28
     434:	9d 1f       	adc	r25, r29
     436:	a8 0e       	add	r10, r24
     438:	b9 1e       	adc	r11, r25
     43a:	c7 01       	movw	r24, r14
     43c:	11 df       	rcall	.-478    	; 0x260 <Check_ADC>
     43e:	20 e0       	ldi	r18, 0x00	; 0
     440:	30 e0       	ldi	r19, 0x00	; 0
     442:	40 e8       	ldi	r20, 0x80	; 128
     444:	5a e3       	ldi	r21, 0x3A	; 58
     446:	0e 94 b6 15 	call	0x2b6c	; 0x2b6c <__mulsf3>
     44a:	23 e3       	ldi	r18, 0x33	; 51
     44c:	33 e3       	ldi	r19, 0x33	; 51
     44e:	43 e5       	ldi	r20, 0x53	; 83
     450:	50 e4       	ldi	r21, 0x40	; 64
     452:	0e 94 b6 15 	call	0x2b6c	; 0x2b6c <__mulsf3>
     456:	f5 01       	movw	r30, r10
     458:	20 81       	ld	r18, Z
     45a:	31 81       	ldd	r19, Z+1	; 0x01
     45c:	42 81       	ldd	r20, Z+2	; 0x02
     45e:	53 81       	ldd	r21, Z+3	; 0x03
     460:	0e 94 fe 13 	call	0x27fc	; 0x27fc <__subsf3>
     464:	2d ec       	ldi	r18, 0xCD	; 205
     466:	3c ec       	ldi	r19, 0xCC	; 204
     468:	4c ec       	ldi	r20, 0xCC	; 204
     46a:	5e e3       	ldi	r21, 0x3E	; 62
     46c:	0e 94 67 14 	call	0x28ce	; 0x28ce <__divsf3>
     470:	9b 01       	movw	r18, r22
     472:	ac 01       	movw	r20, r24
     474:	c3 01       	movw	r24, r6
     476:	b2 01       	movw	r22, r4
     478:	0e 94 ff 13 	call	0x27fe	; 0x27fe <__addsf3>
     47c:	2b 01       	movw	r4, r22
     47e:	3c 01       	movw	r6, r24
     480:	01 50       	subi	r16, 0x01	; 1
     482:	11 09       	sbc	r17, r1
		val = val/25;
	}
	// Solar current and Battery current, respectively
	else if(Amp_num == 4 || Amp_num == 5){
		ADC_num = Amp_num + 5;
		while(i < 25){
     484:	d1 f6       	brne	.-76     	; 0x43a <__LOCK_REGION_LENGTH__+0x3a>
			val += (((Check_ADC(ADC_num) / 1024) * 3.3) - zero[Amp_num]) / 0.4;
			i++;
		}
		val = val/25;
     486:	20 e0       	ldi	r18, 0x00	; 0
     488:	30 e0       	ldi	r19, 0x00	; 0
     48a:	48 ec       	ldi	r20, 0xC8	; 200
     48c:	51 e4       	ldi	r21, 0x41	; 65
     48e:	0e 94 67 14 	call	0x28ce	; 0x28ce <__divsf3>
     492:	03 c0       	rjmp	.+6      	; 0x49a <__LOCK_REGION_LENGTH__+0x9a>
// Description: Ammeter measurements via ADC.
/*========================================================================================*/

float Amp_ADC(int Amp_num){
	int ADC_num = 0; // initialize ADC number to check
	float val = 0; // initialize the voltage value to 0 V
     494:	60 e0       	ldi	r22, 0x00	; 0
     496:	70 e0       	ldi	r23, 0x00	; 0
     498:	cb 01       	movw	r24, r22
			i++;
		}
		val = val/25;
	}
	return val;
}
     49a:	68 96       	adiw	r28, 0x18	; 24
     49c:	0f b6       	in	r0, 0x3f	; 63
     49e:	f8 94       	cli
     4a0:	de bf       	out	0x3e, r29	; 62
     4a2:	0f be       	out	0x3f, r0	; 63
     4a4:	cd bf       	out	0x3d, r28	; 61
     4a6:	df 91       	pop	r29
     4a8:	cf 91       	pop	r28
     4aa:	1f 91       	pop	r17
     4ac:	0f 91       	pop	r16
     4ae:	ff 90       	pop	r15
     4b0:	ef 90       	pop	r14
     4b2:	df 90       	pop	r13
     4b4:	cf 90       	pop	r12
     4b6:	bf 90       	pop	r11
     4b8:	af 90       	pop	r10
     4ba:	9f 90       	pop	r9
     4bc:	8f 90       	pop	r8
     4be:	7f 90       	pop	r7
     4c0:	6f 90       	pop	r6
     4c2:	5f 90       	pop	r5
     4c4:	4f 90       	pop	r4
     4c6:	08 95       	ret

000004c8 <Temp_ADC>:
// Author: Chris Thomas
// Date: 2019-03-17
// Description: Temperature measurement via ADC.
/*========================================================================================*/

float Temp_ADC(){
     4c8:	af 92       	push	r10
     4ca:	bf 92       	push	r11
     4cc:	cf 92       	push	r12
     4ce:	df 92       	push	r13
     4d0:	ef 92       	push	r14
     4d2:	ff 92       	push	r15
     4d4:	0f 93       	push	r16
     4d6:	1f 93       	push	r17
     4d8:	cf 93       	push	r28
     4da:	df 93       	push	r29
     4dc:	cd b7       	in	r28, 0x3d	; 61
     4de:	de b7       	in	r29, 0x3e	; 62
     4e0:	2c 97       	sbiw	r28, 0x0c	; 12
     4e2:	0f b6       	in	r0, 0x3f	; 63
     4e4:	f8 94       	cli
     4e6:	de bf       	out	0x3e, r29	; 62
     4e8:	0f be       	out	0x3f, r0	; 63
     4ea:	cd bf       	out	0x3d, r28	; 61
	int i = 0;
	float temp[3];
	float high; // return the highest temperature for symposium demo
	
	// Enable temperature sensor
	Clear_GPIO(1);
     4ec:	81 e0       	ldi	r24, 0x01	; 1
     4ee:	90 e0       	ldi	r25, 0x00	; 0
     4f0:	0e 94 07 0b 	call	0x160e	; 0x160e <Clear_GPIO>
     4f4:	ee 24       	eor	r14, r14
     4f6:	e3 94       	inc	r14
     4f8:	f1 2c       	mov	r15, r1
     4fa:	00 e0       	ldi	r16, 0x00	; 0
     4fc:	10 e0       	ldi	r17, 0x00	; 0
     4fe:	05 c0       	rjmp	.+10     	; 0x50a <Temp_ADC+0x42>
     500:	0f 5f       	subi	r16, 0xFF	; 255
     502:	1f 4f       	sbci	r17, 0xFF	; 255
     504:	8f ef       	ldi	r24, 0xFF	; 255
     506:	e8 1a       	sub	r14, r24
     508:	f8 0a       	sbc	r15, r24
	
	 // 3 Temperature sensors on battery
	while(i < 3){
		if (i == 0){
     50a:	01 15       	cp	r16, r1
     50c:	11 05       	cpc	r17, r1
     50e:	61 f5       	brne	.+88     	; 0x568 <Temp_ADC+0xa0>
			Clear_GPIO(4);
     510:	84 e0       	ldi	r24, 0x04	; 4
     512:	90 e0       	ldi	r25, 0x00	; 0
     514:	0e 94 07 0b 	call	0x160e	; 0x160e <Clear_GPIO>
			Set_GPIO(5);
     518:	85 e0       	ldi	r24, 0x05	; 5
     51a:	90 e0       	ldi	r25, 0x00	; 0
     51c:	0e 94 a1 0a 	call	0x1542	; 0x1542 <Set_GPIO>
			Set_GPIO(6);
     520:	86 e0       	ldi	r24, 0x06	; 6
     522:	90 e0       	ldi	r25, 0x00	; 0
     524:	0e 94 a1 0a 	call	0x1542	; 0x1542 <Set_GPIO>
			temp[0] = (((Check_ADC(11) / 1024) * 3.3) - 0.6972) / 0.0328;
     528:	8b e0       	ldi	r24, 0x0B	; 11
     52a:	90 e0       	ldi	r25, 0x00	; 0
     52c:	99 de       	rcall	.-718    	; 0x260 <Check_ADC>
     52e:	20 e0       	ldi	r18, 0x00	; 0
     530:	30 e0       	ldi	r19, 0x00	; 0
     532:	40 e8       	ldi	r20, 0x80	; 128
     534:	5a e3       	ldi	r21, 0x3A	; 58
     536:	0e 94 b6 15 	call	0x2b6c	; 0x2b6c <__mulsf3>
     53a:	23 e3       	ldi	r18, 0x33	; 51
     53c:	33 e3       	ldi	r19, 0x33	; 51
     53e:	43 e5       	ldi	r20, 0x53	; 83
     540:	50 e4       	ldi	r21, 0x40	; 64
     542:	0e 94 b6 15 	call	0x2b6c	; 0x2b6c <__mulsf3>
     546:	23 eb       	ldi	r18, 0xB3	; 179
     548:	3b e7       	ldi	r19, 0x7B	; 123
     54a:	42 e3       	ldi	r20, 0x32	; 50
     54c:	5f e3       	ldi	r21, 0x3F	; 63
     54e:	0e 94 fe 13 	call	0x27fc	; 0x27fc <__subsf3>
     552:	2b e4       	ldi	r18, 0x4B	; 75
     554:	39 e5       	ldi	r19, 0x59	; 89
     556:	46 e0       	ldi	r20, 0x06	; 6
     558:	5d e3       	ldi	r21, 0x3D	; 61
     55a:	0e 94 67 14 	call	0x28ce	; 0x28ce <__divsf3>
     55e:	69 83       	std	Y+1, r22	; 0x01
     560:	7a 83       	std	Y+2, r23	; 0x02
     562:	8b 83       	std	Y+3, r24	; 0x03
     564:	9c 83       	std	Y+4, r25	; 0x04
     566:	cc cf       	rjmp	.-104    	; 0x500 <Temp_ADC+0x38>
		}
		else if(i == 1){
     568:	01 30       	cpi	r16, 0x01	; 1
     56a:	11 05       	cpc	r17, r1
     56c:	51 f5       	brne	.+84     	; 0x5c2 <Temp_ADC+0xfa>
			Set_GPIO(4);
     56e:	84 e0       	ldi	r24, 0x04	; 4
     570:	90 e0       	ldi	r25, 0x00	; 0
     572:	e7 d7       	rcall	.+4046   	; 0x1542 <Set_GPIO>
			Set_GPIO(5);
     574:	85 e0       	ldi	r24, 0x05	; 5
     576:	90 e0       	ldi	r25, 0x00	; 0
     578:	e4 d7       	rcall	.+4040   	; 0x1542 <Set_GPIO>
			Clear_GPIO(6);
     57a:	86 e0       	ldi	r24, 0x06	; 6
     57c:	90 e0       	ldi	r25, 0x00	; 0
     57e:	0e 94 07 0b 	call	0x160e	; 0x160e <Clear_GPIO>
			temp[1] = (((Check_ADC(11) / 1024) * 3.3) - 0.6972) / 0.0328;
     582:	8b e0       	ldi	r24, 0x0B	; 11
     584:	90 e0       	ldi	r25, 0x00	; 0
     586:	6c de       	rcall	.-808    	; 0x260 <Check_ADC>
     588:	20 e0       	ldi	r18, 0x00	; 0
     58a:	30 e0       	ldi	r19, 0x00	; 0
     58c:	40 e8       	ldi	r20, 0x80	; 128
     58e:	5a e3       	ldi	r21, 0x3A	; 58
     590:	0e 94 b6 15 	call	0x2b6c	; 0x2b6c <__mulsf3>
     594:	23 e3       	ldi	r18, 0x33	; 51
     596:	33 e3       	ldi	r19, 0x33	; 51
     598:	43 e5       	ldi	r20, 0x53	; 83
     59a:	50 e4       	ldi	r21, 0x40	; 64
     59c:	0e 94 b6 15 	call	0x2b6c	; 0x2b6c <__mulsf3>
     5a0:	23 eb       	ldi	r18, 0xB3	; 179
     5a2:	3b e7       	ldi	r19, 0x7B	; 123
     5a4:	42 e3       	ldi	r20, 0x32	; 50
     5a6:	5f e3       	ldi	r21, 0x3F	; 63
     5a8:	0e 94 fe 13 	call	0x27fc	; 0x27fc <__subsf3>
     5ac:	2b e4       	ldi	r18, 0x4B	; 75
     5ae:	39 e5       	ldi	r19, 0x59	; 89
     5b0:	46 e0       	ldi	r20, 0x06	; 6
     5b2:	5d e3       	ldi	r21, 0x3D	; 61
     5b4:	0e 94 67 14 	call	0x28ce	; 0x28ce <__divsf3>
     5b8:	6d 83       	std	Y+5, r22	; 0x05
     5ba:	7e 83       	std	Y+6, r23	; 0x06
     5bc:	8f 83       	std	Y+7, r24	; 0x07
     5be:	98 87       	std	Y+8, r25	; 0x08
     5c0:	9f cf       	rjmp	.-194    	; 0x500 <Temp_ADC+0x38>
		}
		else if (i == 2){
     5c2:	02 30       	cpi	r16, 0x02	; 2
     5c4:	11 05       	cpc	r17, r1
			Set_GPIO(4);
     5c6:	49 f5       	brne	.+82     	; 0x61a <Temp_ADC+0x152>
     5c8:	84 e0       	ldi	r24, 0x04	; 4
     5ca:	90 e0       	ldi	r25, 0x00	; 0
			Set_GPIO(5);
     5cc:	ba d7       	rcall	.+3956   	; 0x1542 <Set_GPIO>
     5ce:	85 e0       	ldi	r24, 0x05	; 5
     5d0:	90 e0       	ldi	r25, 0x00	; 0
			Set_GPIO(6);
     5d2:	b7 d7       	rcall	.+3950   	; 0x1542 <Set_GPIO>
     5d4:	86 e0       	ldi	r24, 0x06	; 6
     5d6:	90 e0       	ldi	r25, 0x00	; 0
     5d8:	b4 d7       	rcall	.+3944   	; 0x1542 <Set_GPIO>
			temp[2] = (((Check_ADC(11) / 1024) * 3.3) - 0.6972) / 0.0328;
     5da:	8b e0       	ldi	r24, 0x0B	; 11
     5dc:	90 e0       	ldi	r25, 0x00	; 0
     5de:	40 de       	rcall	.-896    	; 0x260 <Check_ADC>
     5e0:	20 e0       	ldi	r18, 0x00	; 0
     5e2:	30 e0       	ldi	r19, 0x00	; 0
     5e4:	40 e8       	ldi	r20, 0x80	; 128
     5e6:	5a e3       	ldi	r21, 0x3A	; 58
     5e8:	0e 94 b6 15 	call	0x2b6c	; 0x2b6c <__mulsf3>
     5ec:	23 e3       	ldi	r18, 0x33	; 51
     5ee:	33 e3       	ldi	r19, 0x33	; 51
     5f0:	43 e5       	ldi	r20, 0x53	; 83
     5f2:	50 e4       	ldi	r21, 0x40	; 64
     5f4:	0e 94 b6 15 	call	0x2b6c	; 0x2b6c <__mulsf3>
     5f8:	23 eb       	ldi	r18, 0xB3	; 179
     5fa:	3b e7       	ldi	r19, 0x7B	; 123
     5fc:	42 e3       	ldi	r20, 0x32	; 50
     5fe:	5f e3       	ldi	r21, 0x3F	; 63
     600:	0e 94 fe 13 	call	0x27fc	; 0x27fc <__subsf3>
     604:	2b e4       	ldi	r18, 0x4B	; 75
     606:	39 e5       	ldi	r19, 0x59	; 89
     608:	46 e0       	ldi	r20, 0x06	; 6
     60a:	5d e3       	ldi	r21, 0x3D	; 61
     60c:	0e 94 67 14 	call	0x28ce	; 0x28ce <__divsf3>
     610:	69 87       	std	Y+9, r22	; 0x09
     612:	7a 87       	std	Y+10, r23	; 0x0a
     614:	8b 87       	std	Y+11, r24	; 0x0b
     616:	9c 87       	std	Y+12, r25	; 0x0c
     618:	05 c0       	rjmp	.+10     	; 0x624 <Temp_ADC+0x15c>
	
	// Enable temperature sensor
	Clear_GPIO(1);
	
	 // 3 Temperature sensors on battery
	while(i < 3){
     61a:	83 e0       	ldi	r24, 0x03	; 3
     61c:	e8 16       	cp	r14, r24
     61e:	f1 04       	cpc	r15, r1
		}
		i++;
	}
	
	// Disable temperature Sensor
	Set_GPIO(1);
     620:	0c f4       	brge	.+2      	; 0x624 <Temp_ADC+0x15c>
     622:	6e cf       	rjmp	.-292    	; 0x500 <Temp_ADC+0x38>
     624:	81 e0       	ldi	r24, 0x01	; 1
	
	// Pull GPIO 4,5 & 6 low
	Clear_GPIO(4);
     626:	90 e0       	ldi	r25, 0x00	; 0
     628:	8c d7       	rcall	.+3864   	; 0x1542 <Set_GPIO>
     62a:	84 e0       	ldi	r24, 0x04	; 4
     62c:	90 e0       	ldi	r25, 0x00	; 0
	Clear_GPIO(5);
     62e:	ef d7       	rcall	.+4062   	; 0x160e <Clear_GPIO>
     630:	85 e0       	ldi	r24, 0x05	; 5
     632:	90 e0       	ldi	r25, 0x00	; 0
     634:	ec d7       	rcall	.+4056   	; 0x160e <Clear_GPIO>
	Clear_GPIO(6);
     636:	86 e0       	ldi	r24, 0x06	; 6
     638:	90 e0       	ldi	r25, 0x00	; 0
     63a:	e9 d7       	rcall	.+4050   	; 0x160e <Clear_GPIO>
     63c:	f9 80       	ldd	r15, Y+1	; 0x01
	
	i = 1; // start at the second index
	high = temp[0]; // initialize the highest temperature to the first index
     63e:	0a 81       	ldd	r16, Y+2	; 0x02
     640:	1b 81       	ldd	r17, Y+3	; 0x03
     642:	ec 80       	ldd	r14, Y+4	; 0x04
     644:	ad 80       	ldd	r10, Y+5	; 0x05
	while(i < 3){
		if(temp[i] > high){
     646:	be 80       	ldd	r11, Y+6	; 0x06
     648:	cf 80       	ldd	r12, Y+7	; 0x07
     64a:	d8 84       	ldd	r13, Y+8	; 0x08
     64c:	2a 2d       	mov	r18, r10
     64e:	3b 2d       	mov	r19, r11
     650:	4c 2d       	mov	r20, r12
     652:	5d 2d       	mov	r21, r13
     654:	6f 2d       	mov	r22, r15
     656:	70 2f       	mov	r23, r16
     658:	81 2f       	mov	r24, r17
     65a:	9e 2d       	mov	r25, r14
     65c:	0e 94 63 14 	call	0x28c6	; 0x28c6 <__cmpsf2>
     660:	88 23       	and	r24, r24
     662:	24 f4       	brge	.+8      	; 0x66c <Temp_ADC+0x1a4>
     664:	fa 2c       	mov	r15, r10
     666:	0b 2d       	mov	r16, r11
     668:	1c 2d       	mov	r17, r12
     66a:	ed 2c       	mov	r14, r13
     66c:	a9 84       	ldd	r10, Y+9	; 0x09
     66e:	ba 84       	ldd	r11, Y+10	; 0x0a
     670:	cb 84       	ldd	r12, Y+11	; 0x0b
     672:	dc 84       	ldd	r13, Y+12	; 0x0c
     674:	2f 2d       	mov	r18, r15
     676:	30 2f       	mov	r19, r16
     678:	41 2f       	mov	r20, r17
     67a:	5e 2d       	mov	r21, r14
     67c:	6a 2d       	mov	r22, r10
     67e:	7b 2d       	mov	r23, r11
     680:	8c 2d       	mov	r24, r12
     682:	9d 2d       	mov	r25, r13
     684:	0e 94 b2 15 	call	0x2b64	; 0x2b64 <__gesf2>
     688:	18 16       	cp	r1, r24
     68a:	24 f4       	brge	.+8      	; 0x694 <Temp_ADC+0x1cc>
     68c:	fa 2c       	mov	r15, r10
     68e:	0b 2d       	mov	r16, r11
     690:	1c 2d       	mov	r17, r12
     692:	ed 2c       	mov	r14, r13
     694:	6f 2d       	mov	r22, r15
		i++;
	}
	
	// Divide temperature measurements by 3 to get an average (To be discussed)
	return high;
}
     696:	70 2f       	mov	r23, r16
     698:	81 2f       	mov	r24, r17
     69a:	9e 2d       	mov	r25, r14
     69c:	2c 96       	adiw	r28, 0x0c	; 12
     69e:	0f b6       	in	r0, 0x3f	; 63
     6a0:	f8 94       	cli
     6a2:	de bf       	out	0x3e, r29	; 62
     6a4:	0f be       	out	0x3f, r0	; 63
     6a6:	cd bf       	out	0x3d, r28	; 61
     6a8:	df 91       	pop	r29
     6aa:	cf 91       	pop	r28
     6ac:	1f 91       	pop	r17
     6ae:	0f 91       	pop	r16
     6b0:	ff 90       	pop	r15
     6b2:	ef 90       	pop	r14
     6b4:	df 90       	pop	r13
     6b6:	cf 90       	pop	r12
     6b8:	bf 90       	pop	r11
     6ba:	af 90       	pop	r10
     6bc:	08 95       	ret

000006be <SoC_ADC>:
     6be:	8f 92       	push	r8
// Author: Chris Thomas
// Date: 2019-03-17
// Description: Temperature measurement via ADC.
/*========================================================================================*/

float SoC_ADC(float volt, float amp){
     6c0:	9f 92       	push	r9
     6c2:	af 92       	push	r10
     6c4:	bf 92       	push	r11
     6c6:	cf 92       	push	r12
     6c8:	df 92       	push	r13
     6ca:	ef 92       	push	r14
     6cc:	ff 92       	push	r15
     6ce:	6b 01       	movw	r12, r22
     6d0:	7c 01       	movw	r14, r24
     6d2:	49 01       	movw	r8, r18
     6d4:	5a 01       	movw	r10, r20
	
	// Check Battery voltage and current
	
	
	// Lookup table
	if (amp < 0.6){
     6d6:	2a e9       	ldi	r18, 0x9A	; 154
     6d8:	39 e9       	ldi	r19, 0x99	; 153
     6da:	49 e1       	ldi	r20, 0x19	; 25
     6dc:	5f e3       	ldi	r21, 0x3F	; 63
     6de:	c5 01       	movw	r24, r10
     6e0:	b4 01       	movw	r22, r8
     6e2:	0e 94 63 14 	call	0x28c6	; 0x28c6 <__cmpsf2>
     6e6:	88 23       	and	r24, r24
     6e8:	0c f0       	brlt	.+2      	; 0x6ec <SoC_ADC+0x2e>
     6ea:	87 c0       	rjmp	.+270    	; 0x7fa <SoC_ADC+0x13c>
		if (volt > 4.00) {
     6ec:	20 e0       	ldi	r18, 0x00	; 0
     6ee:	30 e0       	ldi	r19, 0x00	; 0
     6f0:	40 e8       	ldi	r20, 0x80	; 128
     6f2:	50 e4       	ldi	r21, 0x40	; 64
     6f4:	c7 01       	movw	r24, r14
     6f6:	b6 01       	movw	r22, r12
     6f8:	0e 94 b2 15 	call	0x2b64	; 0x2b64 <__gesf2>
     6fc:	18 16       	cp	r1, r24
     6fe:	0c f4       	brge	.+2      	; 0x702 <SoC_ADC+0x44>
     700:	ab c1       	rjmp	.+854    	; 0xa58 <SoC_ADC+0x39a>
			soc = 80;
		} //end if
		else if (volt < 4.00 && volt > 3.80) {
     702:	20 e0       	ldi	r18, 0x00	; 0
     704:	30 e0       	ldi	r19, 0x00	; 0
     706:	40 e8       	ldi	r20, 0x80	; 128
     708:	50 e4       	ldi	r21, 0x40	; 64
     70a:	c7 01       	movw	r24, r14
     70c:	b6 01       	movw	r22, r12
     70e:	0e 94 63 14 	call	0x28c6	; 0x28c6 <__cmpsf2>
     712:	88 23       	and	r24, r24
     714:	5c f4       	brge	.+22     	; 0x72c <SoC_ADC+0x6e>
     716:	23 e3       	ldi	r18, 0x33	; 51
     718:	33 e3       	ldi	r19, 0x33	; 51
     71a:	43 e7       	ldi	r20, 0x73	; 115
     71c:	50 e4       	ldi	r21, 0x40	; 64
     71e:	c7 01       	movw	r24, r14
     720:	b6 01       	movw	r22, r12
     722:	0e 94 b2 15 	call	0x2b64	; 0x2b64 <__gesf2>
     726:	18 16       	cp	r1, r24
     728:	0c f4       	brge	.+2      	; 0x72c <SoC_ADC+0x6e>
     72a:	9b c1       	rjmp	.+822    	; 0xa62 <SoC_ADC+0x3a4>
			soc = 70;
		} //end else if
		else if (volt < 3.80 && volt > 3.75) {
     72c:	23 e3       	ldi	r18, 0x33	; 51
     72e:	33 e3       	ldi	r19, 0x33	; 51
     730:	43 e7       	ldi	r20, 0x73	; 115
     732:	50 e4       	ldi	r21, 0x40	; 64
     734:	c7 01       	movw	r24, r14
     736:	b6 01       	movw	r22, r12
     738:	0e 94 63 14 	call	0x28c6	; 0x28c6 <__cmpsf2>
     73c:	88 23       	and	r24, r24
     73e:	5c f4       	brge	.+22     	; 0x756 <SoC_ADC+0x98>
     740:	20 e0       	ldi	r18, 0x00	; 0
     742:	30 e0       	ldi	r19, 0x00	; 0
     744:	40 e7       	ldi	r20, 0x70	; 112
     746:	50 e4       	ldi	r21, 0x40	; 64
     748:	c7 01       	movw	r24, r14
     74a:	b6 01       	movw	r22, r12
     74c:	0e 94 b2 15 	call	0x2b64	; 0x2b64 <__gesf2>
     750:	18 16       	cp	r1, r24
     752:	0c f4       	brge	.+2      	; 0x756 <SoC_ADC+0x98>
     754:	8b c1       	rjmp	.+790    	; 0xa6c <SoC_ADC+0x3ae>
			soc = 60;
		} //end else if
		else if (volt < 3.75 && volt > 3.70) {
     756:	20 e0       	ldi	r18, 0x00	; 0
     758:	30 e0       	ldi	r19, 0x00	; 0
     75a:	40 e7       	ldi	r20, 0x70	; 112
     75c:	50 e4       	ldi	r21, 0x40	; 64
     75e:	c7 01       	movw	r24, r14
     760:	b6 01       	movw	r22, r12
     762:	0e 94 63 14 	call	0x28c6	; 0x28c6 <__cmpsf2>
     766:	88 23       	and	r24, r24
     768:	5c f4       	brge	.+22     	; 0x780 <SoC_ADC+0xc2>
     76a:	2d ec       	ldi	r18, 0xCD	; 205
     76c:	3c ec       	ldi	r19, 0xCC	; 204
     76e:	4c e6       	ldi	r20, 0x6C	; 108
     770:	50 e4       	ldi	r21, 0x40	; 64
     772:	c7 01       	movw	r24, r14
     774:	b6 01       	movw	r22, r12
     776:	0e 94 b2 15 	call	0x2b64	; 0x2b64 <__gesf2>
     77a:	18 16       	cp	r1, r24
     77c:	0c f4       	brge	.+2      	; 0x780 <SoC_ADC+0xc2>
     77e:	7b c1       	rjmp	.+758    	; 0xa76 <SoC_ADC+0x3b8>
			soc = 50;
		} //end else if
		else if (volt < 3.70 && volt > 3.60) {
     780:	2d ec       	ldi	r18, 0xCD	; 205
     782:	3c ec       	ldi	r19, 0xCC	; 204
     784:	4c e6       	ldi	r20, 0x6C	; 108
     786:	50 e4       	ldi	r21, 0x40	; 64
     788:	c7 01       	movw	r24, r14
     78a:	b6 01       	movw	r22, r12
     78c:	0e 94 63 14 	call	0x28c6	; 0x28c6 <__cmpsf2>
     790:	88 23       	and	r24, r24
     792:	5c f4       	brge	.+22     	; 0x7aa <SoC_ADC+0xec>
     794:	26 e6       	ldi	r18, 0x66	; 102
     796:	36 e6       	ldi	r19, 0x66	; 102
     798:	46 e6       	ldi	r20, 0x66	; 102
     79a:	50 e4       	ldi	r21, 0x40	; 64
     79c:	c7 01       	movw	r24, r14
     79e:	b6 01       	movw	r22, r12
     7a0:	0e 94 b2 15 	call	0x2b64	; 0x2b64 <__gesf2>
     7a4:	18 16       	cp	r1, r24
     7a6:	0c f4       	brge	.+2      	; 0x7aa <SoC_ADC+0xec>
     7a8:	6b c1       	rjmp	.+726    	; 0xa80 <SoC_ADC+0x3c2>
			soc = 40;
		} //end else if
		else if (volt < 3.60 && volt > 3.5) {
     7aa:	26 e6       	ldi	r18, 0x66	; 102
     7ac:	36 e6       	ldi	r19, 0x66	; 102
     7ae:	46 e6       	ldi	r20, 0x66	; 102
     7b0:	50 e4       	ldi	r21, 0x40	; 64
     7b2:	c7 01       	movw	r24, r14
     7b4:	b6 01       	movw	r22, r12
     7b6:	0e 94 63 14 	call	0x28c6	; 0x28c6 <__cmpsf2>
     7ba:	88 23       	and	r24, r24
     7bc:	5c f4       	brge	.+22     	; 0x7d4 <SoC_ADC+0x116>
     7be:	20 e0       	ldi	r18, 0x00	; 0
     7c0:	30 e0       	ldi	r19, 0x00	; 0
     7c2:	40 e6       	ldi	r20, 0x60	; 96
     7c4:	50 e4       	ldi	r21, 0x40	; 64
     7c6:	c7 01       	movw	r24, r14
     7c8:	b6 01       	movw	r22, r12
     7ca:	0e 94 b2 15 	call	0x2b64	; 0x2b64 <__gesf2>
     7ce:	18 16       	cp	r1, r24
     7d0:	0c f4       	brge	.+2      	; 0x7d4 <SoC_ADC+0x116>
     7d2:	5b c1       	rjmp	.+694    	; 0xa8a <SoC_ADC+0x3cc>
			soc = 30;
		} //end else if
		else if (volt < 3.50) {
     7d4:	20 e0       	ldi	r18, 0x00	; 0
     7d6:	30 e0       	ldi	r19, 0x00	; 0
     7d8:	40 e6       	ldi	r20, 0x60	; 96
     7da:	50 e4       	ldi	r21, 0x40	; 64
     7dc:	c7 01       	movw	r24, r14
     7de:	b6 01       	movw	r22, r12
     7e0:	0e 94 63 14 	call	0x28c6	; 0x28c6 <__cmpsf2>
     7e4:	88 23       	and	r24, r24
     7e6:	0c f4       	brge	.+2      	; 0x7ea <SoC_ADC+0x12c>
     7e8:	55 c1       	rjmp	.+682    	; 0xa94 <SoC_ADC+0x3d6>
			soc = 20;
		} //end else if
		else {
			UART0_putstring("Error Reading State of Charge \n\n\r");
     7ea:	88 e6       	ldi	r24, 0x68	; 104
     7ec:	95 e0       	ldi	r25, 0x05	; 5
     7ee:	0e 94 62 11 	call	0x22c4	; 0x22c4 <UART0_putstring>
// Description: Temperature measurement via ADC.
/*========================================================================================*/

float SoC_ADC(float volt, float amp){
	// return value
	float soc = 0;
     7f2:	60 e0       	ldi	r22, 0x00	; 0
     7f4:	70 e0       	ldi	r23, 0x00	; 0
     7f6:	cb 01       	movw	r24, r22
     7f8:	9b c1       	rjmp	.+822    	; 0xb30 <SoC_ADC+0x472>
		} //end else if
		else {
			UART0_putstring("Error Reading State of Charge \n\n\r");
		} //end else
	}
	else if(amp > 0.6 && amp < 3){
     7fa:	2a e9       	ldi	r18, 0x9A	; 154
     7fc:	39 e9       	ldi	r19, 0x99	; 153
     7fe:	49 e1       	ldi	r20, 0x19	; 25
     800:	5f e3       	ldi	r21, 0x3F	; 63
     802:	c5 01       	movw	r24, r10
     804:	b4 01       	movw	r22, r8
     806:	0e 94 b2 15 	call	0x2b64	; 0x2b64 <__gesf2>
     80a:	18 16       	cp	r1, r24
     80c:	0c f0       	brlt	.+2      	; 0x810 <SoC_ADC+0x152>
     80e:	92 c0       	rjmp	.+292    	; 0x934 <SoC_ADC+0x276>
     810:	20 e0       	ldi	r18, 0x00	; 0
     812:	30 e0       	ldi	r19, 0x00	; 0
     814:	40 e4       	ldi	r20, 0x40	; 64
     816:	50 e4       	ldi	r21, 0x40	; 64
     818:	c5 01       	movw	r24, r10
     81a:	b4 01       	movw	r22, r8
     81c:	0e 94 63 14 	call	0x28c6	; 0x28c6 <__cmpsf2>
     820:	88 23       	and	r24, r24
     822:	0c f0       	brlt	.+2      	; 0x826 <SoC_ADC+0x168>
     824:	87 c0       	rjmp	.+270    	; 0x934 <SoC_ADC+0x276>
		if (volt > 3.75) {
     826:	20 e0       	ldi	r18, 0x00	; 0
     828:	30 e0       	ldi	r19, 0x00	; 0
     82a:	40 e7       	ldi	r20, 0x70	; 112
     82c:	50 e4       	ldi	r21, 0x40	; 64
     82e:	c7 01       	movw	r24, r14
     830:	b6 01       	movw	r22, r12
     832:	0e 94 b2 15 	call	0x2b64	; 0x2b64 <__gesf2>
     836:	18 16       	cp	r1, r24
     838:	0c f4       	brge	.+2      	; 0x83c <SoC_ADC+0x17e>
     83a:	31 c1       	rjmp	.+610    	; 0xa9e <SoC_ADC+0x3e0>
			soc = 80;
		} //end if
		else if (volt < 3.75 && volt > 3.65) {
     83c:	20 e0       	ldi	r18, 0x00	; 0
     83e:	30 e0       	ldi	r19, 0x00	; 0
     840:	40 e7       	ldi	r20, 0x70	; 112
     842:	50 e4       	ldi	r21, 0x40	; 64
     844:	c7 01       	movw	r24, r14
     846:	b6 01       	movw	r22, r12
     848:	0e 94 63 14 	call	0x28c6	; 0x28c6 <__cmpsf2>
     84c:	88 23       	and	r24, r24
     84e:	5c f4       	brge	.+22     	; 0x866 <SoC_ADC+0x1a8>
     850:	2a e9       	ldi	r18, 0x9A	; 154
     852:	39 e9       	ldi	r19, 0x99	; 153
     854:	49 e6       	ldi	r20, 0x69	; 105
     856:	50 e4       	ldi	r21, 0x40	; 64
     858:	c7 01       	movw	r24, r14
     85a:	b6 01       	movw	r22, r12
     85c:	0e 94 b2 15 	call	0x2b64	; 0x2b64 <__gesf2>
     860:	18 16       	cp	r1, r24
     862:	0c f4       	brge	.+2      	; 0x866 <SoC_ADC+0x1a8>
     864:	21 c1       	rjmp	.+578    	; 0xaa8 <SoC_ADC+0x3ea>
			soc = 70;
		} //end else if
		else if (volt < 3.65 && volt > 3.55) {
     866:	2a e9       	ldi	r18, 0x9A	; 154
     868:	39 e9       	ldi	r19, 0x99	; 153
     86a:	49 e6       	ldi	r20, 0x69	; 105
     86c:	50 e4       	ldi	r21, 0x40	; 64
     86e:	c7 01       	movw	r24, r14
     870:	b6 01       	movw	r22, r12
     872:	0e 94 63 14 	call	0x28c6	; 0x28c6 <__cmpsf2>
     876:	88 23       	and	r24, r24
     878:	5c f4       	brge	.+22     	; 0x890 <SoC_ADC+0x1d2>
     87a:	23 e3       	ldi	r18, 0x33	; 51
     87c:	33 e3       	ldi	r19, 0x33	; 51
     87e:	43 e6       	ldi	r20, 0x63	; 99
     880:	50 e4       	ldi	r21, 0x40	; 64
     882:	c7 01       	movw	r24, r14
     884:	b6 01       	movw	r22, r12
     886:	0e 94 b2 15 	call	0x2b64	; 0x2b64 <__gesf2>
     88a:	18 16       	cp	r1, r24
     88c:	0c f4       	brge	.+2      	; 0x890 <SoC_ADC+0x1d2>
     88e:	11 c1       	rjmp	.+546    	; 0xab2 <SoC_ADC+0x3f4>
			soc = 60;
		} //end else if
		else if (volt < 3.55 && volt > 3.45) {
     890:	23 e3       	ldi	r18, 0x33	; 51
     892:	33 e3       	ldi	r19, 0x33	; 51
     894:	43 e6       	ldi	r20, 0x63	; 99
     896:	50 e4       	ldi	r21, 0x40	; 64
     898:	c7 01       	movw	r24, r14
     89a:	b6 01       	movw	r22, r12
     89c:	0e 94 63 14 	call	0x28c6	; 0x28c6 <__cmpsf2>
     8a0:	88 23       	and	r24, r24
     8a2:	5c f4       	brge	.+22     	; 0x8ba <SoC_ADC+0x1fc>
     8a4:	2d ec       	ldi	r18, 0xCD	; 205
     8a6:	3c ec       	ldi	r19, 0xCC	; 204
     8a8:	4c e5       	ldi	r20, 0x5C	; 92
     8aa:	50 e4       	ldi	r21, 0x40	; 64
     8ac:	c7 01       	movw	r24, r14
     8ae:	b6 01       	movw	r22, r12
     8b0:	0e 94 b2 15 	call	0x2b64	; 0x2b64 <__gesf2>
     8b4:	18 16       	cp	r1, r24
     8b6:	0c f4       	brge	.+2      	; 0x8ba <SoC_ADC+0x1fc>
     8b8:	01 c1       	rjmp	.+514    	; 0xabc <SoC_ADC+0x3fe>
			soc = 50;
		} //end else if
 		else if (volt < 3.45 && volt > 3.35) {
     8ba:	2d ec       	ldi	r18, 0xCD	; 205
     8bc:	3c ec       	ldi	r19, 0xCC	; 204
     8be:	4c e5       	ldi	r20, 0x5C	; 92
     8c0:	50 e4       	ldi	r21, 0x40	; 64
     8c2:	c7 01       	movw	r24, r14
     8c4:	b6 01       	movw	r22, r12
     8c6:	0e 94 63 14 	call	0x28c6	; 0x28c6 <__cmpsf2>
     8ca:	88 23       	and	r24, r24
     8cc:	5c f4       	brge	.+22     	; 0x8e4 <SoC_ADC+0x226>
     8ce:	26 e6       	ldi	r18, 0x66	; 102
     8d0:	36 e6       	ldi	r19, 0x66	; 102
     8d2:	46 e5       	ldi	r20, 0x56	; 86
     8d4:	50 e4       	ldi	r21, 0x40	; 64
     8d6:	c7 01       	movw	r24, r14
     8d8:	b6 01       	movw	r22, r12
     8da:	0e 94 b2 15 	call	0x2b64	; 0x2b64 <__gesf2>
     8de:	18 16       	cp	r1, r24
     8e0:	0c f4       	brge	.+2      	; 0x8e4 <SoC_ADC+0x226>
     8e2:	f1 c0       	rjmp	.+482    	; 0xac6 <SoC_ADC+0x408>
			soc = 40;
		 } //end else if
		else if (volt < 3.35 && volt > 3.30) {
     8e4:	26 e6       	ldi	r18, 0x66	; 102
     8e6:	36 e6       	ldi	r19, 0x66	; 102
     8e8:	46 e5       	ldi	r20, 0x56	; 86
     8ea:	50 e4       	ldi	r21, 0x40	; 64
     8ec:	c7 01       	movw	r24, r14
     8ee:	b6 01       	movw	r22, r12
     8f0:	0e 94 63 14 	call	0x28c6	; 0x28c6 <__cmpsf2>
     8f4:	88 23       	and	r24, r24
     8f6:	5c f4       	brge	.+22     	; 0x90e <SoC_ADC+0x250>
     8f8:	23 e3       	ldi	r18, 0x33	; 51
     8fa:	33 e3       	ldi	r19, 0x33	; 51
     8fc:	43 e5       	ldi	r20, 0x53	; 83
     8fe:	50 e4       	ldi	r21, 0x40	; 64
     900:	c7 01       	movw	r24, r14
     902:	b6 01       	movw	r22, r12
     904:	0e 94 b2 15 	call	0x2b64	; 0x2b64 <__gesf2>
     908:	18 16       	cp	r1, r24
     90a:	0c f4       	brge	.+2      	; 0x90e <SoC_ADC+0x250>
     90c:	e1 c0       	rjmp	.+450    	; 0xad0 <SoC_ADC+0x412>
			soc = 30;
		 } //end else if
		else if (volt < 3.30) {
     90e:	23 e3       	ldi	r18, 0x33	; 51
     910:	33 e3       	ldi	r19, 0x33	; 51
     912:	43 e5       	ldi	r20, 0x53	; 83
     914:	50 e4       	ldi	r21, 0x40	; 64
     916:	c7 01       	movw	r24, r14
     918:	b6 01       	movw	r22, r12
     91a:	0e 94 63 14 	call	0x28c6	; 0x28c6 <__cmpsf2>
     91e:	88 23       	and	r24, r24
     920:	0c f4       	brge	.+2      	; 0x924 <SoC_ADC+0x266>
     922:	db c0       	rjmp	.+438    	; 0xada <SoC_ADC+0x41c>
			soc = 20;
		}
		else {
			UART0_putstring("Error Reading State of Charge \n\n\r");
     924:	88 e6       	ldi	r24, 0x68	; 104
     926:	95 e0       	ldi	r25, 0x05	; 5
     928:	0e 94 62 11 	call	0x22c4	; 0x22c4 <UART0_putstring>
// Description: Temperature measurement via ADC.
/*========================================================================================*/

float SoC_ADC(float volt, float amp){
	// return value
	float soc = 0;
     92c:	60 e0       	ldi	r22, 0x00	; 0
     92e:	70 e0       	ldi	r23, 0x00	; 0
     930:	cb 01       	movw	r24, r22
     932:	fe c0       	rjmp	.+508    	; 0xb30 <SoC_ADC+0x472>
		}
		else {
			UART0_putstring("Error Reading State of Charge \n\n\r");
		} //end else
	}
	else if(amp > 3){
     934:	20 e0       	ldi	r18, 0x00	; 0
     936:	30 e0       	ldi	r19, 0x00	; 0
     938:	40 e4       	ldi	r20, 0x40	; 64
     93a:	50 e4       	ldi	r21, 0x40	; 64
     93c:	c5 01       	movw	r24, r10
     93e:	b4 01       	movw	r22, r8
     940:	0e 94 b2 15 	call	0x2b64	; 0x2b64 <__gesf2>
     944:	18 16       	cp	r1, r24
     946:	0c f0       	brlt	.+2      	; 0x94a <SoC_ADC+0x28c>
     948:	cd c0       	rjmp	.+410    	; 0xae4 <SoC_ADC+0x426>
		if (volt > 3.80) {
     94a:	23 e3       	ldi	r18, 0x33	; 51
     94c:	33 e3       	ldi	r19, 0x33	; 51
     94e:	43 e7       	ldi	r20, 0x73	; 115
     950:	50 e4       	ldi	r21, 0x40	; 64
     952:	c7 01       	movw	r24, r14
     954:	b6 01       	movw	r22, r12
     956:	0e 94 b2 15 	call	0x2b64	; 0x2b64 <__gesf2>
     95a:	18 16       	cp	r1, r24
     95c:	0c f4       	brge	.+2      	; 0x960 <SoC_ADC+0x2a2>
     95e:	c6 c0       	rjmp	.+396    	; 0xaec <SoC_ADC+0x42e>
			soc = 80;
		} //end if
		else if (volt < 3.80 && volt > 3.75) {
     960:	23 e3       	ldi	r18, 0x33	; 51
     962:	33 e3       	ldi	r19, 0x33	; 51
     964:	43 e7       	ldi	r20, 0x73	; 115
     966:	50 e4       	ldi	r21, 0x40	; 64
     968:	c7 01       	movw	r24, r14
     96a:	b6 01       	movw	r22, r12
     96c:	0e 94 63 14 	call	0x28c6	; 0x28c6 <__cmpsf2>
     970:	88 23       	and	r24, r24
     972:	5c f4       	brge	.+22     	; 0x98a <SoC_ADC+0x2cc>
     974:	20 e0       	ldi	r18, 0x00	; 0
     976:	30 e0       	ldi	r19, 0x00	; 0
     978:	40 e7       	ldi	r20, 0x70	; 112
     97a:	50 e4       	ldi	r21, 0x40	; 64
     97c:	c7 01       	movw	r24, r14
     97e:	b6 01       	movw	r22, r12
     980:	0e 94 b2 15 	call	0x2b64	; 0x2b64 <__gesf2>
     984:	18 16       	cp	r1, r24
     986:	0c f4       	brge	.+2      	; 0x98a <SoC_ADC+0x2cc>
     988:	b6 c0       	rjmp	.+364    	; 0xaf6 <SoC_ADC+0x438>
			soc = 70;
		} //end else if
		else if (volt < 3.75 && volt > 3.65) {
     98a:	20 e0       	ldi	r18, 0x00	; 0
     98c:	30 e0       	ldi	r19, 0x00	; 0
     98e:	40 e7       	ldi	r20, 0x70	; 112
     990:	50 e4       	ldi	r21, 0x40	; 64
     992:	c7 01       	movw	r24, r14
     994:	b6 01       	movw	r22, r12
     996:	0e 94 63 14 	call	0x28c6	; 0x28c6 <__cmpsf2>
     99a:	88 23       	and	r24, r24
     99c:	5c f4       	brge	.+22     	; 0x9b4 <SoC_ADC+0x2f6>
     99e:	2a e9       	ldi	r18, 0x9A	; 154
     9a0:	39 e9       	ldi	r19, 0x99	; 153
     9a2:	49 e6       	ldi	r20, 0x69	; 105
     9a4:	50 e4       	ldi	r21, 0x40	; 64
     9a6:	c7 01       	movw	r24, r14
     9a8:	b6 01       	movw	r22, r12
     9aa:	0e 94 b2 15 	call	0x2b64	; 0x2b64 <__gesf2>
     9ae:	18 16       	cp	r1, r24
     9b0:	0c f4       	brge	.+2      	; 0x9b4 <SoC_ADC+0x2f6>
     9b2:	a6 c0       	rjmp	.+332    	; 0xb00 <SoC_ADC+0x442>
			soc = 60;
		} //end else if
		else if (volt < 3.65 && volt > 3.50) {
     9b4:	2a e9       	ldi	r18, 0x9A	; 154
     9b6:	39 e9       	ldi	r19, 0x99	; 153
     9b8:	49 e6       	ldi	r20, 0x69	; 105
     9ba:	50 e4       	ldi	r21, 0x40	; 64
     9bc:	c7 01       	movw	r24, r14
     9be:	b6 01       	movw	r22, r12
     9c0:	0e 94 63 14 	call	0x28c6	; 0x28c6 <__cmpsf2>
     9c4:	88 23       	and	r24, r24
     9c6:	5c f4       	brge	.+22     	; 0x9de <SoC_ADC+0x320>
     9c8:	20 e0       	ldi	r18, 0x00	; 0
     9ca:	30 e0       	ldi	r19, 0x00	; 0
     9cc:	40 e6       	ldi	r20, 0x60	; 96
     9ce:	50 e4       	ldi	r21, 0x40	; 64
     9d0:	c7 01       	movw	r24, r14
     9d2:	b6 01       	movw	r22, r12
     9d4:	0e 94 b2 15 	call	0x2b64	; 0x2b64 <__gesf2>
     9d8:	18 16       	cp	r1, r24
     9da:	0c f4       	brge	.+2      	; 0x9de <SoC_ADC+0x320>
     9dc:	96 c0       	rjmp	.+300    	; 0xb0a <SoC_ADC+0x44c>
			soc = 50;
		} //end else if
		else if (volt < 3.50 && volt > 3.40) {
     9de:	20 e0       	ldi	r18, 0x00	; 0
     9e0:	30 e0       	ldi	r19, 0x00	; 0
     9e2:	40 e6       	ldi	r20, 0x60	; 96
     9e4:	50 e4       	ldi	r21, 0x40	; 64
     9e6:	c7 01       	movw	r24, r14
     9e8:	b6 01       	movw	r22, r12
     9ea:	0e 94 63 14 	call	0x28c6	; 0x28c6 <__cmpsf2>
     9ee:	88 23       	and	r24, r24
     9f0:	5c f4       	brge	.+22     	; 0xa08 <SoC_ADC+0x34a>
     9f2:	2a e9       	ldi	r18, 0x9A	; 154
     9f4:	39 e9       	ldi	r19, 0x99	; 153
     9f6:	49 e5       	ldi	r20, 0x59	; 89
     9f8:	50 e4       	ldi	r21, 0x40	; 64
     9fa:	c7 01       	movw	r24, r14
     9fc:	b6 01       	movw	r22, r12
     9fe:	0e 94 b2 15 	call	0x2b64	; 0x2b64 <__gesf2>
     a02:	18 16       	cp	r1, r24
     a04:	0c f4       	brge	.+2      	; 0xa08 <SoC_ADC+0x34a>
     a06:	86 c0       	rjmp	.+268    	; 0xb14 <SoC_ADC+0x456>
			soc = 40;
		} //end else if
		else if (volt < 3.40 && volt > 3.25) {
     a08:	2a e9       	ldi	r18, 0x9A	; 154
     a0a:	39 e9       	ldi	r19, 0x99	; 153
     a0c:	49 e5       	ldi	r20, 0x59	; 89
     a0e:	50 e4       	ldi	r21, 0x40	; 64
     a10:	c7 01       	movw	r24, r14
     a12:	b6 01       	movw	r22, r12
     a14:	0e 94 63 14 	call	0x28c6	; 0x28c6 <__cmpsf2>
     a18:	88 23       	and	r24, r24
     a1a:	5c f4       	brge	.+22     	; 0xa32 <SoC_ADC+0x374>
     a1c:	20 e0       	ldi	r18, 0x00	; 0
     a1e:	30 e0       	ldi	r19, 0x00	; 0
     a20:	40 e5       	ldi	r20, 0x50	; 80
     a22:	50 e4       	ldi	r21, 0x40	; 64
     a24:	c7 01       	movw	r24, r14
     a26:	b6 01       	movw	r22, r12
     a28:	0e 94 b2 15 	call	0x2b64	; 0x2b64 <__gesf2>
     a2c:	18 16       	cp	r1, r24
     a2e:	0c f4       	brge	.+2      	; 0xa32 <SoC_ADC+0x374>
     a30:	76 c0       	rjmp	.+236    	; 0xb1e <SoC_ADC+0x460>
			soc = 30;
		} //end else if
		else if (volt < 3.25) {
     a32:	20 e0       	ldi	r18, 0x00	; 0
     a34:	30 e0       	ldi	r19, 0x00	; 0
     a36:	40 e5       	ldi	r20, 0x50	; 80
     a38:	50 e4       	ldi	r21, 0x40	; 64
     a3a:	c7 01       	movw	r24, r14
     a3c:	b6 01       	movw	r22, r12
     a3e:	0e 94 63 14 	call	0x28c6	; 0x28c6 <__cmpsf2>
     a42:	88 23       	and	r24, r24
     a44:	0c f4       	brge	.+2      	; 0xa48 <SoC_ADC+0x38a>
     a46:	70 c0       	rjmp	.+224    	; 0xb28 <SoC_ADC+0x46a>
			soc = 20;
		} //end else if
		else {
			UART0_putstring("Error Reading State of Charge \n\n\r");
     a48:	88 e6       	ldi	r24, 0x68	; 104
     a4a:	95 e0       	ldi	r25, 0x05	; 5
     a4c:	0e 94 62 11 	call	0x22c4	; 0x22c4 <UART0_putstring>
// Description: Temperature measurement via ADC.
/*========================================================================================*/

float SoC_ADC(float volt, float amp){
	// return value
	float soc = 0;
     a50:	60 e0       	ldi	r22, 0x00	; 0
     a52:	70 e0       	ldi	r23, 0x00	; 0
     a54:	cb 01       	movw	r24, r22
     a56:	6c c0       	rjmp	.+216    	; 0xb30 <SoC_ADC+0x472>
	
	
	// Lookup table
	if (amp < 0.6){
		if (volt > 4.00) {
			soc = 80;
     a58:	60 e0       	ldi	r22, 0x00	; 0
     a5a:	70 e0       	ldi	r23, 0x00	; 0
     a5c:	80 ea       	ldi	r24, 0xA0	; 160
     a5e:	92 e4       	ldi	r25, 0x42	; 66
     a60:	67 c0       	rjmp	.+206    	; 0xb30 <SoC_ADC+0x472>
		} //end if
		else if (volt < 4.00 && volt > 3.80) {
			soc = 70;
     a62:	60 e0       	ldi	r22, 0x00	; 0
     a64:	70 e0       	ldi	r23, 0x00	; 0
     a66:	8c e8       	ldi	r24, 0x8C	; 140
     a68:	92 e4       	ldi	r25, 0x42	; 66
     a6a:	62 c0       	rjmp	.+196    	; 0xb30 <SoC_ADC+0x472>
		} //end else if
		else if (volt < 3.80 && volt > 3.75) {
			soc = 60;
     a6c:	60 e0       	ldi	r22, 0x00	; 0
     a6e:	70 e0       	ldi	r23, 0x00	; 0
     a70:	80 e7       	ldi	r24, 0x70	; 112
     a72:	92 e4       	ldi	r25, 0x42	; 66
     a74:	5d c0       	rjmp	.+186    	; 0xb30 <SoC_ADC+0x472>
		} //end else if
		else if (volt < 3.75 && volt > 3.70) {
			soc = 50;
     a76:	60 e0       	ldi	r22, 0x00	; 0
     a78:	70 e0       	ldi	r23, 0x00	; 0
     a7a:	88 e4       	ldi	r24, 0x48	; 72
     a7c:	92 e4       	ldi	r25, 0x42	; 66
     a7e:	58 c0       	rjmp	.+176    	; 0xb30 <SoC_ADC+0x472>
		} //end else if
		else if (volt < 3.70 && volt > 3.60) {
			soc = 40;
     a80:	60 e0       	ldi	r22, 0x00	; 0
     a82:	70 e0       	ldi	r23, 0x00	; 0
     a84:	80 e2       	ldi	r24, 0x20	; 32
     a86:	92 e4       	ldi	r25, 0x42	; 66
     a88:	53 c0       	rjmp	.+166    	; 0xb30 <SoC_ADC+0x472>
		} //end else if
		else if (volt < 3.60 && volt > 3.5) {
			soc = 30;
     a8a:	60 e0       	ldi	r22, 0x00	; 0
     a8c:	70 e0       	ldi	r23, 0x00	; 0
     a8e:	80 ef       	ldi	r24, 0xF0	; 240
     a90:	91 e4       	ldi	r25, 0x41	; 65
     a92:	4e c0       	rjmp	.+156    	; 0xb30 <SoC_ADC+0x472>
		} //end else if
		else if (volt < 3.50) {
			soc = 20;
     a94:	60 e0       	ldi	r22, 0x00	; 0
     a96:	70 e0       	ldi	r23, 0x00	; 0
     a98:	80 ea       	ldi	r24, 0xA0	; 160
     a9a:	91 e4       	ldi	r25, 0x41	; 65
     a9c:	49 c0       	rjmp	.+146    	; 0xb30 <SoC_ADC+0x472>
			UART0_putstring("Error Reading State of Charge \n\n\r");
		} //end else
	}
	else if(amp > 0.6 && amp < 3){
		if (volt > 3.75) {
			soc = 80;
     a9e:	60 e0       	ldi	r22, 0x00	; 0
     aa0:	70 e0       	ldi	r23, 0x00	; 0
     aa2:	80 ea       	ldi	r24, 0xA0	; 160
     aa4:	92 e4       	ldi	r25, 0x42	; 66
     aa6:	44 c0       	rjmp	.+136    	; 0xb30 <SoC_ADC+0x472>
		} //end if
		else if (volt < 3.75 && volt > 3.65) {
			soc = 70;
     aa8:	60 e0       	ldi	r22, 0x00	; 0
     aaa:	70 e0       	ldi	r23, 0x00	; 0
     aac:	8c e8       	ldi	r24, 0x8C	; 140
     aae:	92 e4       	ldi	r25, 0x42	; 66
     ab0:	3f c0       	rjmp	.+126    	; 0xb30 <SoC_ADC+0x472>
		} //end else if
		else if (volt < 3.65 && volt > 3.55) {
			soc = 60;
     ab2:	60 e0       	ldi	r22, 0x00	; 0
     ab4:	70 e0       	ldi	r23, 0x00	; 0
     ab6:	80 e7       	ldi	r24, 0x70	; 112
     ab8:	92 e4       	ldi	r25, 0x42	; 66
     aba:	3a c0       	rjmp	.+116    	; 0xb30 <SoC_ADC+0x472>
		} //end else if
		else if (volt < 3.55 && volt > 3.45) {
			soc = 50;
     abc:	60 e0       	ldi	r22, 0x00	; 0
     abe:	70 e0       	ldi	r23, 0x00	; 0
     ac0:	88 e4       	ldi	r24, 0x48	; 72
     ac2:	92 e4       	ldi	r25, 0x42	; 66
     ac4:	35 c0       	rjmp	.+106    	; 0xb30 <SoC_ADC+0x472>
		} //end else if
 		else if (volt < 3.45 && volt > 3.35) {
			soc = 40;
     ac6:	60 e0       	ldi	r22, 0x00	; 0
     ac8:	70 e0       	ldi	r23, 0x00	; 0
     aca:	80 e2       	ldi	r24, 0x20	; 32
     acc:	92 e4       	ldi	r25, 0x42	; 66
     ace:	30 c0       	rjmp	.+96     	; 0xb30 <SoC_ADC+0x472>
		 } //end else if
		else if (volt < 3.35 && volt > 3.30) {
			soc = 30;
     ad0:	60 e0       	ldi	r22, 0x00	; 0
     ad2:	70 e0       	ldi	r23, 0x00	; 0
     ad4:	80 ef       	ldi	r24, 0xF0	; 240
     ad6:	91 e4       	ldi	r25, 0x41	; 65
     ad8:	2b c0       	rjmp	.+86     	; 0xb30 <SoC_ADC+0x472>
		 } //end else if
		else if (volt < 3.30) {
			soc = 20;
     ada:	60 e0       	ldi	r22, 0x00	; 0
     adc:	70 e0       	ldi	r23, 0x00	; 0
     ade:	80 ea       	ldi	r24, 0xA0	; 160
     ae0:	91 e4       	ldi	r25, 0x41	; 65
     ae2:	26 c0       	rjmp	.+76     	; 0xb30 <SoC_ADC+0x472>
// Description: Temperature measurement via ADC.
/*========================================================================================*/

float SoC_ADC(float volt, float amp){
	// return value
	float soc = 0;
     ae4:	60 e0       	ldi	r22, 0x00	; 0
     ae6:	70 e0       	ldi	r23, 0x00	; 0
     ae8:	cb 01       	movw	r24, r22
     aea:	22 c0       	rjmp	.+68     	; 0xb30 <SoC_ADC+0x472>
			UART0_putstring("Error Reading State of Charge \n\n\r");
		} //end else
	}
	else if(amp > 3){
		if (volt > 3.80) {
			soc = 80;
     aec:	60 e0       	ldi	r22, 0x00	; 0
     aee:	70 e0       	ldi	r23, 0x00	; 0
     af0:	80 ea       	ldi	r24, 0xA0	; 160
     af2:	92 e4       	ldi	r25, 0x42	; 66
     af4:	1d c0       	rjmp	.+58     	; 0xb30 <SoC_ADC+0x472>
		} //end if
		else if (volt < 3.80 && volt > 3.75) {
			soc = 70;
     af6:	60 e0       	ldi	r22, 0x00	; 0
     af8:	70 e0       	ldi	r23, 0x00	; 0
     afa:	8c e8       	ldi	r24, 0x8C	; 140
     afc:	92 e4       	ldi	r25, 0x42	; 66
     afe:	18 c0       	rjmp	.+48     	; 0xb30 <SoC_ADC+0x472>
		} //end else if
		else if (volt < 3.75 && volt > 3.65) {
			soc = 60;
     b00:	60 e0       	ldi	r22, 0x00	; 0
     b02:	70 e0       	ldi	r23, 0x00	; 0
     b04:	80 e7       	ldi	r24, 0x70	; 112
     b06:	92 e4       	ldi	r25, 0x42	; 66
     b08:	13 c0       	rjmp	.+38     	; 0xb30 <SoC_ADC+0x472>
		} //end else if
		else if (volt < 3.65 && volt > 3.50) {
			soc = 50;
     b0a:	60 e0       	ldi	r22, 0x00	; 0
     b0c:	70 e0       	ldi	r23, 0x00	; 0
     b0e:	88 e4       	ldi	r24, 0x48	; 72
     b10:	92 e4       	ldi	r25, 0x42	; 66
     b12:	0e c0       	rjmp	.+28     	; 0xb30 <SoC_ADC+0x472>
		} //end else if
		else if (volt < 3.50 && volt > 3.40) {
			soc = 40;
     b14:	60 e0       	ldi	r22, 0x00	; 0
     b16:	70 e0       	ldi	r23, 0x00	; 0
     b18:	80 e2       	ldi	r24, 0x20	; 32
     b1a:	92 e4       	ldi	r25, 0x42	; 66
     b1c:	09 c0       	rjmp	.+18     	; 0xb30 <SoC_ADC+0x472>
		} //end else if
		else if (volt < 3.40 && volt > 3.25) {
			soc = 30;
     b1e:	60 e0       	ldi	r22, 0x00	; 0
     b20:	70 e0       	ldi	r23, 0x00	; 0
     b22:	80 ef       	ldi	r24, 0xF0	; 240
     b24:	91 e4       	ldi	r25, 0x41	; 65
     b26:	04 c0       	rjmp	.+8      	; 0xb30 <SoC_ADC+0x472>
		} //end else if
		else if (volt < 3.25) {
			soc = 20;
     b28:	60 e0       	ldi	r22, 0x00	; 0
     b2a:	70 e0       	ldi	r23, 0x00	; 0
     b2c:	80 ea       	ldi	r24, 0xA0	; 160
     b2e:	91 e4       	ldi	r25, 0x41	; 65
	}
	else{
		//UART0_putstring("Battery Charging");
	}
	return soc;
}
     b30:	ff 90       	pop	r15
     b32:	ef 90       	pop	r14
     b34:	df 90       	pop	r13
     b36:	cf 90       	pop	r12
     b38:	bf 90       	pop	r11
     b3a:	af 90       	pop	r10
     b3c:	9f 90       	pop	r9
     b3e:	8f 90       	pop	r8
     b40:	08 95       	ret

00000b42 <fault_check>:
#include <stdint.h>

void fault_check(uint8_t watchdog){
	
	// Check the Watchdog reset bit
	if(watchdog && EEPROM_Read(0x0001)){
     b42:	88 23       	and	r24, r24
     b44:	d1 f1       	breq	.+116    	; 0xbba <fault_check+0x78>
     b46:	81 e0       	ldi	r24, 0x01	; 1
     b48:	90 e0       	ldi	r25, 0x00	; 0
     b4a:	f3 d4       	rcall	.+2534   	; 0x1532 <EEPROM_Read>
     b4c:	88 23       	and	r24, r24
     b4e:	09 f4       	brne	.+2      	; 0xb52 <fault_check+0x10>
     b50:	53 c0       	rjmp	.+166    	; 0xbf8 <fault_check+0xb6>
		EEPROM_Write(0x00, 0x0001); // Reset the bits to 0
     b52:	61 e0       	ldi	r22, 0x01	; 1
     b54:	70 e0       	ldi	r23, 0x00	; 0
     b56:	80 e0       	ldi	r24, 0x00	; 0
     b58:	e2 d4       	rcall	.+2500   	; 0x151e <EEPROM_Write>
		UART0_putstring("A manual reset has occurred.");
     b5a:	8a e8       	ldi	r24, 0x8A	; 138
     b5c:	95 e0       	ldi	r25, 0x05	; 5
     b5e:	0e 94 62 11 	call	0x22c4	; 0x22c4 <UART0_putstring>
		UART0_putchar('\r');
     b62:	8d e0       	ldi	r24, 0x0D	; 13
     b64:	0e 94 52 11 	call	0x22a4	; 0x22a4 <UART0_putchar>
		UART0_putchar('\n');
     b68:	8a e0       	ldi	r24, 0x0A	; 10
     b6a:	0e 94 52 11 	call	0x22a4	; 0x22a4 <UART0_putchar>
		UART0_putchar('\n');
     b6e:	8a e0       	ldi	r24, 0x0A	; 10
     b70:	0c 94 52 11 	jmp	0x22a4	; 0x22a4 <UART0_putchar>
     b74:	08 95       	ret
	}
	else if(watchdog && !EEPROM_Read(0x0000)){
		UART0_putstring("A launch reset occurred.");
     b76:	87 ea       	ldi	r24, 0xA7	; 167
     b78:	95 e0       	ldi	r25, 0x05	; 5
     b7a:	0e 94 62 11 	call	0x22c4	; 0x22c4 <UART0_putstring>
		UART0_putchar('\r');
     b7e:	8d e0       	ldi	r24, 0x0D	; 13
     b80:	0e 94 52 11 	call	0x22a4	; 0x22a4 <UART0_putchar>
		UART0_putchar('\n');
     b84:	8a e0       	ldi	r24, 0x0A	; 10
     b86:	0e 94 52 11 	call	0x22a4	; 0x22a4 <UART0_putchar>
		UART0_putchar('\n');
     b8a:	8a e0       	ldi	r24, 0x0A	; 10
     b8c:	0c 94 52 11 	jmp	0x22a4	; 0x22a4 <UART0_putchar>
     b90:	08 95       	ret
	}
	// check the jtag reset bit
	else if(watchdog){
		UART0_putchar('\n');
     b92:	8a e0       	ldi	r24, 0x0A	; 10
     b94:	0e 94 52 11 	call	0x22a4	; 0x22a4 <UART0_putchar>
		UART0_putchar('\r');
     b98:	8d e0       	ldi	r24, 0x0D	; 13
     b9a:	0e 94 52 11 	call	0x22a4	; 0x22a4 <UART0_putchar>
		UART0_putstring("A Fault occurred.");
     b9e:	80 ec       	ldi	r24, 0xC0	; 192
     ba0:	95 e0       	ldi	r25, 0x05	; 5
     ba2:	0e 94 62 11 	call	0x22c4	; 0x22c4 <UART0_putstring>
		UART0_putchar('\r');
     ba6:	8d e0       	ldi	r24, 0x0D	; 13
     ba8:	0e 94 52 11 	call	0x22a4	; 0x22a4 <UART0_putchar>
		UART0_putchar('\n');
     bac:	8a e0       	ldi	r24, 0x0A	; 10
     bae:	0e 94 52 11 	call	0x22a4	; 0x22a4 <UART0_putchar>
		UART0_putchar('\n');
     bb2:	8a e0       	ldi	r24, 0x0A	; 10
     bb4:	0c 94 52 11 	jmp	0x22a4	; 0x22a4 <UART0_putchar>
     bb8:	08 95       	ret
	}
	else if(MCUSR & 0x10){
     bba:	04 b6       	in	r0, 0x34	; 52
     bbc:	04 fe       	sbrs	r0, 4
     bbe:	0e c0       	rjmp	.+28     	; 0xbdc <fault_check+0x9a>
		UART0_putstring("I have been reprogrammed.");
     bc0:	82 ed       	ldi	r24, 0xD2	; 210
     bc2:	95 e0       	ldi	r25, 0x05	; 5
     bc4:	0e 94 62 11 	call	0x22c4	; 0x22c4 <UART0_putstring>
		UART0_putchar('\r');
     bc8:	8d e0       	ldi	r24, 0x0D	; 13
     bca:	0e 94 52 11 	call	0x22a4	; 0x22a4 <UART0_putchar>
		UART0_putchar('\n');
     bce:	8a e0       	ldi	r24, 0x0A	; 10
     bd0:	0e 94 52 11 	call	0x22a4	; 0x22a4 <UART0_putchar>
		UART0_putchar('\n');
     bd4:	8a e0       	ldi	r24, 0x0A	; 10
     bd6:	0c 94 52 11 	jmp	0x22a4	; 0x22a4 <UART0_putchar>
     bda:	08 95       	ret
	}
	// assume a power reset if none of the other flags are found
	else{
		UART0_putstring("A power reset has occurred.");
     bdc:	8c ee       	ldi	r24, 0xEC	; 236
     bde:	95 e0       	ldi	r25, 0x05	; 5
     be0:	0e 94 62 11 	call	0x22c4	; 0x22c4 <UART0_putstring>
		UART0_putchar('\r');
     be4:	8d e0       	ldi	r24, 0x0D	; 13
     be6:	0e 94 52 11 	call	0x22a4	; 0x22a4 <UART0_putchar>
		UART0_putchar('\n');
     bea:	8a e0       	ldi	r24, 0x0A	; 10
     bec:	0e 94 52 11 	call	0x22a4	; 0x22a4 <UART0_putchar>
		UART0_putchar('\n');
     bf0:	8a e0       	ldi	r24, 0x0A	; 10
     bf2:	0c 94 52 11 	jmp	0x22a4	; 0x22a4 <UART0_putchar>
	}
     bf6:	08 95       	ret
		UART0_putstring("A manual reset has occurred.");
		UART0_putchar('\r');
		UART0_putchar('\n');
		UART0_putchar('\n');
	}
	else if(watchdog && !EEPROM_Read(0x0000)){
     bf8:	80 e0       	ldi	r24, 0x00	; 0
     bfa:	90 e0       	ldi	r25, 0x00	; 0
     bfc:	9a d4       	rcall	.+2356   	; 0x1532 <EEPROM_Read>
     bfe:	81 11       	cpse	r24, r1
     c00:	c8 cf       	rjmp	.-112    	; 0xb92 <fault_check+0x50>
     c02:	b9 cf       	rjmp	.-142    	; 0xb76 <fault_check+0x34>

00000c04 <launch_pre>:
// Date: 2019-03-25
// Description: Initializes the launch bits to zero (8 bits).
/*========================================================================================*/

void launch_pre(){
	EEPROM_Write(0x00,0x0000);
     c04:	60 e0       	ldi	r22, 0x00	; 0
     c06:	70 e0       	ldi	r23, 0x00	; 0
     c08:	80 e0       	ldi	r24, 0x00	; 0
     c0a:	89 c4       	rjmp	.+2322   	; 0x151e <EEPROM_Write>
     c0c:	08 95       	ret

00000c0e <launch_post>:
// Date: 2019-03-25
// Description: Sets the launch bits to 1 (8 bits).
/*========================================================================================*/

void launch_post(){
	EEPROM_Write(0xff,0x0000);
     c0e:	60 e0       	ldi	r22, 0x00	; 0
     c10:	70 e0       	ldi	r23, 0x00	; 0
     c12:	8f ef       	ldi	r24, 0xFF	; 255
     c14:	84 c4       	rjmp	.+2312   	; 0x151e <EEPROM_Write>
     c16:	08 95       	ret

00000c18 <launch_check>:
/*========================================================================================*/

uint8_t launch_check(){
	
	// Read from permanent memory
	uint8_t launch = EEPROM_Read(0x0000);
     c18:	80 e0       	ldi	r24, 0x00	; 0
     c1a:	90 e0       	ldi	r25, 0x00	; 0
     c1c:	8a d4       	rcall	.+2324   	; 0x1532 <EEPROM_Read>
	// Check mask
	uint8_t mask_check = 0x01;
	uint8_t sum = 0;
	int i = 0; // increment
	
	while(launch){
     c1e:	88 23       	and	r24, r24
     c20:	39 f0       	breq	.+14     	; 0xc30 <launch_check+0x18>
		launch = launch >> 1;
     c22:	86 95       	lsr	r24
	// Check mask
	uint8_t mask_check = 0x01;
	uint8_t sum = 0;
	int i = 0; // increment
	
	while(launch){
     c24:	39 f0       	breq	.+14     	; 0xc34 <launch_check+0x1c>
		launch = launch >> 1;
     c26:	86 95       	lsr	r24
	// Check mask
	uint8_t mask_check = 0x01;
	uint8_t sum = 0;
	int i = 0; // increment
	
	while(launch){
     c28:	39 f0       	breq	.+14     	; 0xc38 <launch_check+0x20>
     c2a:	86 95       	lsr	r24
     c2c:	39 f4       	brne	.+14     	; 0xc3c <launch_check+0x24>
     c2e:	08 95       	ret
		sum += 1;
		if(sum > 3){
			return sum;
		}
	}
	return 0;
     c30:	80 e0       	ldi	r24, 0x00	; 0
     c32:	08 95       	ret
     c34:	80 e0       	ldi	r24, 0x00	; 0
     c36:	08 95       	ret
     c38:	80 e0       	ldi	r24, 0x00	; 0
     c3a:	08 95       	ret
	uint8_t sum = 0;
	int i = 0; // increment
	
	while(launch){
		launch = launch >> 1;
		sum += 1;
     c3c:	84 e0       	ldi	r24, 0x04	; 4
		if(sum > 3){
			return sum;
		}
	}
	return 0;
}
     c3e:	08 95       	ret

00000c40 <launch_reset>:
/*========================================================================================*/

void launch_reset(){
	
	// Reset the launch bits to 0x00
	launch_pre();
     c40:	e1 df       	rcall	.-62     	; 0xc04 <launch_pre>
	/* Watchdog must be reset to ensure the clock starts at 0.
	/ This is especially important as we are shortening the timeout period
	*/
	
	// Watchdog reset
	wdt_reset(); 
     c42:	a8 95       	wdr
	
	// Set the watchdog to System Reset Mode
	wdt_enable(SYSTEM_RESET_MODE);
     c44:	81 e0       	ldi	r24, 0x01	; 1
     c46:	0e 94 b5 11 	call	0x236a	; 0x236a <wdt_enable>
	
	// Change the tiemout period to 16ms			 
	wdt_set_timeout_period(WDT_TIMEOUT_PERIOD_2KCLK); // timeout set from 1024k to 128k
     c4a:	80 e0       	ldi	r24, 0x00	; 0
     c4c:	0c 94 91 11 	jmp	0x2322	; 0x2322 <wdt_set_timeout_period>
     c50:	08 95       	ret

00000c52 <launch_timer>:
// Date: 2019-03-26
// Description: Uses the util/delay.h library to create a delay simulating the delay
//				that will be needed once the nano satellite is in space.
/*========================================================================================*/

void launch_timer(){
     c52:	cf 93       	push	r28
	
	// Delay the start-up by 8 seconds
	int i = 9;
	UART0_putstring("Starting Launch Timer");
     c54:	88 e0       	ldi	r24, 0x08	; 8
     c56:	96 e0       	ldi	r25, 0x06	; 6
     c58:	0e 94 62 11 	call	0x22c4	; 0x22c4 <UART0_putstring>
	UART0_putchar('\n');
     c5c:	8a e0       	ldi	r24, 0x0A	; 10
     c5e:	0e 94 52 11 	call	0x22a4	; 0x22a4 <UART0_putchar>
	UART0_putchar('\r');
     c62:	8d e0       	ldi	r24, 0x0D	; 13
     c64:	0e 94 52 11 	call	0x22a4	; 0x22a4 <UART0_putchar>
     c68:	c9 e3       	ldi	r28, 0x39	; 57
	while(i > 0){
		UART0_putchar(i + 0x30); // prints the character value of
     c6a:	8c 2f       	mov	r24, r28
     c6c:	0e 94 52 11 	call	0x22a4	; 0x22a4 <UART0_putchar>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     c70:	2f e3       	ldi	r18, 0x3F	; 63
     c72:	8d e0       	ldi	r24, 0x0D	; 13
     c74:	93 e0       	ldi	r25, 0x03	; 3
     c76:	21 50       	subi	r18, 0x01	; 1
     c78:	80 40       	sbci	r24, 0x00	; 0
     c7a:	90 40       	sbci	r25, 0x00	; 0
     c7c:	e1 f7       	brne	.-8      	; 0xc76 <launch_timer+0x24>
     c7e:	00 c0       	rjmp	.+0      	; 0xc80 <launch_timer+0x2e>
     c80:	00 00       	nop
		_delay_ms(1000);
		UART0_putchar('\n');
     c82:	8a e0       	ldi	r24, 0x0A	; 10
     c84:	0e 94 52 11 	call	0x22a4	; 0x22a4 <UART0_putchar>
		UART0_putchar('\r');
     c88:	8d e0       	ldi	r24, 0x0D	; 13
     c8a:	0e 94 52 11 	call	0x22a4	; 0x22a4 <UART0_putchar>
     c8e:	c1 50       	subi	r28, 0x01	; 1
	// Delay the start-up by 8 seconds
	int i = 9;
	UART0_putstring("Starting Launch Timer");
	UART0_putchar('\n');
	UART0_putchar('\r');
	while(i > 0){
     c90:	c0 33       	cpi	r28, 0x30	; 48
     c92:	59 f7       	brne	.-42     	; 0xc6a <launch_timer+0x18>
		_delay_ms(1000);
		UART0_putchar('\n');
		UART0_putchar('\r');
		i--; 
	}
	UART0_putstring("Timer complete. Entering normal operation.");
     c94:	8e e1       	ldi	r24, 0x1E	; 30
     c96:	96 e0       	ldi	r25, 0x06	; 6
     c98:	0e 94 62 11 	call	0x22c4	; 0x22c4 <UART0_putstring>
	UART0_putchar('\n');
     c9c:	8a e0       	ldi	r24, 0x0A	; 10
     c9e:	0e 94 52 11 	call	0x22a4	; 0x22a4 <UART0_putchar>
	UART0_putchar('\n');
     ca2:	8a e0       	ldi	r24, 0x0A	; 10
     ca4:	0e 94 52 11 	call	0x22a4	; 0x22a4 <UART0_putchar>
	UART0_putchar('\r');
     ca8:	8d e0       	ldi	r24, 0x0D	; 13
     caa:	0e 94 52 11 	call	0x22a4	; 0x22a4 <UART0_putchar>
}
     cae:	cf 91       	pop	r28
     cb0:	08 95       	ret

00000cb2 <launch_state>:
/*========================================================================================*/

void launch_state(){
	
	// Check if the satellite has been launched
	if(launch_check()){
     cb2:	b2 df       	rcall	.-156    	; 0xc18 <launch_check>
     cb4:	88 23       	and	r24, r24
     cb6:	c1 f0       	breq	.+48     	; 0xce8 <launch_state+0x36>
		UART0_putstring("I have already been launched.");
     cb8:	89 e4       	ldi	r24, 0x49	; 73
     cba:	96 e0       	ldi	r25, 0x06	; 6
     cbc:	0e 94 62 11 	call	0x22c4	; 0x22c4 <UART0_putstring>
		UART0_putchar('\n');
     cc0:	8a e0       	ldi	r24, 0x0A	; 10
     cc2:	0e 94 52 11 	call	0x22a4	; 0x22a4 <UART0_putchar>
		UART0_putchar('\r');
     cc6:	8d e0       	ldi	r24, 0x0D	; 13
     cc8:	0e 94 52 11 	call	0x22a4	; 0x22a4 <UART0_putchar>
		UART0_putstring("Returning to normal operation...");
     ccc:	87 e6       	ldi	r24, 0x67	; 103
     cce:	96 e0       	ldi	r25, 0x06	; 6
     cd0:	0e 94 62 11 	call	0x22c4	; 0x22c4 <UART0_putstring>
		UART0_putchar('\n');
     cd4:	8a e0       	ldi	r24, 0x0A	; 10
     cd6:	0e 94 52 11 	call	0x22a4	; 0x22a4 <UART0_putchar>
		UART0_putchar('\n');
     cda:	8a e0       	ldi	r24, 0x0A	; 10
     cdc:	0e 94 52 11 	call	0x22a4	; 0x22a4 <UART0_putchar>
		UART0_putchar('\r');
     ce0:	8d e0       	ldi	r24, 0x0D	; 13
     ce2:	0c 94 52 11 	jmp	0x22a4	; 0x22a4 <UART0_putchar>
	}
	else{
		launch_timer();
     ce6:	08 95       	ret
		launch_post();
     ce8:	b4 df       	rcall	.-152    	; 0xc52 <launch_timer>
     cea:	91 cf       	rjmp	.-222    	; 0xc0e <launch_post>
     cec:	08 95       	ret

00000cee <Enable_3V3_1>:
// Description: Enables 3V3-1 rail power. Waits for transient to finish.
/*========================================================================================*/
void Enable_3V3_1(){

	// Set 5V rail for readings
	Set_GPIO(10);
     cee:	8a e0       	ldi	r24, 0x0A	; 10
     cf0:	90 e0       	ldi	r25, 0x00	; 0
     cf2:	27 d4       	rcall	.+2126   	; 0x1542 <Set_GPIO>

	while(Volt_ADC(0) < 3.1){
     cf4:	80 e0       	ldi	r24, 0x00	; 0
     cf6:	90 e0       	ldi	r25, 0x00	; 0
     cf8:	bb da       	rcall	.-2698   	; 0x270 <Volt_ADC>
     cfa:	26 e6       	ldi	r18, 0x66	; 102
     cfc:	36 e6       	ldi	r19, 0x66	; 102
     cfe:	46 e4       	ldi	r20, 0x46	; 70
     d00:	50 e4       	ldi	r21, 0x40	; 64
     d02:	0e 94 63 14 	call	0x28c6	; 0x28c6 <__cmpsf2>
     d06:	88 23       	and	r24, r24
     d08:	ac f3       	brlt	.-22     	; 0xcf4 <Enable_3V3_1+0x6>
		// Wait until 3V3-1 rail transient is finished
	}
}
     d0a:	08 95       	ret

00000d0c <Enable_5V>:
// Description: Enables 5V rail power. Waits for transient to finish.
/*========================================================================================*/
void Enable_5V(){

	// Set 5V rail for readings
	Set_GPIO(11);
     d0c:	8b e0       	ldi	r24, 0x0B	; 11
     d0e:	90 e0       	ldi	r25, 0x00	; 0
     d10:	18 d4       	rcall	.+2096   	; 0x1542 <Set_GPIO>

	while(Volt_ADC(2) < 4.8){
     d12:	82 e0       	ldi	r24, 0x02	; 2
     d14:	90 e0       	ldi	r25, 0x00	; 0
     d16:	ac da       	rcall	.-2728   	; 0x270 <Volt_ADC>
     d18:	2a e9       	ldi	r18, 0x9A	; 154
     d1a:	39 e9       	ldi	r19, 0x99	; 153
     d1c:	49 e9       	ldi	r20, 0x99	; 153
     d1e:	50 e4       	ldi	r21, 0x40	; 64
     d20:	0e 94 63 14 	call	0x28c6	; 0x28c6 <__cmpsf2>
     d24:	88 23       	and	r24, r24
     d26:	ac f3       	brlt	.-22     	; 0xd12 <Enable_5V+0x6>
		// Wait until 5V rail transient is finished
	}
}
     d28:	08 95       	ret

00000d2a <Enable_8V>:
// Description: Enables 8V rail power. Waits for transient to finish.
/*========================================================================================*/
void Enable_8V(){

	// Set 8V rail for readings
	Set_GPIO(16);
     d2a:	80 e1       	ldi	r24, 0x10	; 16
     d2c:	90 e0       	ldi	r25, 0x00	; 0
     d2e:	09 d4       	rcall	.+2066   	; 0x1542 <Set_GPIO>

	while(Volt_ADC(3) < 7.8){
     d30:	83 e0       	ldi	r24, 0x03	; 3
     d32:	90 e0       	ldi	r25, 0x00	; 0
     d34:	9d da       	rcall	.-2758   	; 0x270 <Volt_ADC>
     d36:	2a e9       	ldi	r18, 0x9A	; 154
     d38:	39 e9       	ldi	r19, 0x99	; 153
     d3a:	49 ef       	ldi	r20, 0xF9	; 249
     d3c:	50 e4       	ldi	r21, 0x40	; 64
     d3e:	0e 94 63 14 	call	0x28c6	; 0x28c6 <__cmpsf2>
     d42:	88 23       	and	r24, r24
     d44:	ac f3       	brlt	.-22     	; 0xd30 <Enable_8V+0x6>
		// Wait until 8V rail transient is finished
	}
}
     d46:	08 95       	ret

00000d48 <Enable_VBatt>:
/*========================================================================================*/

void Enable_VBatt(){

	// Enable VBatt to Rails
	Set_GPIO(21);
     d48:	85 e1       	ldi	r24, 0x15	; 21
     d4a:	90 e0       	ldi	r25, 0x00	; 0
     d4c:	fa d3       	rcall	.+2036   	; 0x1542 <Set_GPIO>

	while(Volt_ADC(4) < 2.5){
     d4e:	84 e0       	ldi	r24, 0x04	; 4
     d50:	90 e0       	ldi	r25, 0x00	; 0
     d52:	8e da       	rcall	.-2788   	; 0x270 <Volt_ADC>
     d54:	20 e0       	ldi	r18, 0x00	; 0
     d56:	30 e0       	ldi	r19, 0x00	; 0
     d58:	40 e2       	ldi	r20, 0x20	; 32
     d5a:	50 e4       	ldi	r21, 0x40	; 64
     d5c:	0e 94 63 14 	call	0x28c6	; 0x28c6 <__cmpsf2>
     d60:	88 23       	and	r24, r24
     d62:	ac f3       	brlt	.-22     	; 0xd4e <Enable_VBatt+0x6>
		// Wait until VBatt rail transient is finished
	}
}
     d64:	08 95       	ret

00000d66 <Disable_3V3_1>:
	
	// 3V3-1 rail subsystem mask
	uint8_t mask_3V3_1 = 0b00100000;

	// Check for subsystems using the 3V3-1 rail
	if(power_state & mask_3V3_1){
     d66:	85 fd       	sbrc	r24, 5
     d68:	03 c0       	rjmp	.+6      	; 0xd70 <Disable_3V3_1+0xa>
		// Do not turn off the rail
	}
	else{
		Clear_GPIO(10); // turn 3V3-1 rail off if nothing is using the rail.
     d6a:	8a e0       	ldi	r24, 0x0A	; 10
     d6c:	90 e0       	ldi	r25, 0x00	; 0
     d6e:	4f c4       	rjmp	.+2206   	; 0x160e <Clear_GPIO>
     d70:	08 95       	ret

00000d72 <Disable_5V>:
	
	// 5V rail subsystem mask
	uint8_t mask_5V = 0b00110010;
	
	// Check for subsystems using the 5V rail
	if(power_state & mask_5V){
     d72:	82 73       	andi	r24, 0x32	; 50
     d74:	19 f4       	brne	.+6      	; 0xd7c <Disable_5V+0xa>
		// do not turn the rail off
	}
	else{
		Clear_GPIO(11); // turn off the 5V rail if nothing is using the rail.
     d76:	8b e0       	ldi	r24, 0x0B	; 11
     d78:	90 e0       	ldi	r25, 0x00	; 0
     d7a:	49 c4       	rjmp	.+2194   	; 0x160e <Clear_GPIO>
     d7c:	08 95       	ret

00000d7e <Disable_8V>:
	
	// 5V rail subsystem mask
	uint8_t mask_8V = 0b11000100;
	
	// Check for subsystems using the 5V rail
	if(power_state & mask_8V){
     d7e:	84 7c       	andi	r24, 0xC4	; 196
     d80:	19 f4       	brne	.+6      	; 0xd88 <Disable_8V+0xa>
		// do not turn the rail off
	}
	else{
		Clear_GPIO(16); // turn off the 5V rail if nothing is using the rail.
     d82:	80 e1       	ldi	r24, 0x10	; 16
     d84:	90 e0       	ldi	r25, 0x00	; 0
     d86:	43 c4       	rjmp	.+2182   	; 0x160e <Clear_GPIO>
     d88:	08 95       	ret

00000d8a <Disable_VBatt>:
	
	// 5V rail subsystem mask
	uint8_t mask_VBatt = 0b00000001;
	
	// Check for subsystems using the 5V rail
	if(power_state & mask_VBatt){
     d8a:	80 fd       	sbrc	r24, 0
     d8c:	03 c0       	rjmp	.+6      	; 0xd94 <Disable_VBatt+0xa>
		// do not turn the rail off
	}
	else{
		Clear_GPIO(21); // turn off the 5V rail if nothing is using the rail.
     d8e:	85 e1       	ldi	r24, 0x15	; 21
     d90:	90 e0       	ldi	r25, 0x00	; 0
     d92:	3d c4       	rjmp	.+2170   	; 0x160e <Clear_GPIO>
     d94:	08 95       	ret

00000d96 <heater_SWITCH>:
// Description: Switches power to Heaters based on current power state. Only one heater
//				can be turned on at a time. If none or more than one heater is set to be
//				turned on, all heaters are turned off.
/*========================================================================================*/

void heater_SWITCH(uint8_t power_state, uint8_t* power_pointer){
     d96:	0f 93       	push	r16
     d98:	1f 93       	push	r17
     d9a:	cf 93       	push	r28
     d9c:	c8 2f       	mov	r28, r24
     d9e:	8b 01       	movw	r16, r22
	uint8_t mask_heater_8V = 0b00000100;
	
	// Check which of the heaters is turned on
	
	// Vbatt Heater
	if((power_state & mask_heater_VBatt) && !(power_state & (mask_heater_5V | mask_heater_8V))){
     da0:	80 ff       	sbrs	r24, 0
     da2:	11 c0       	rjmp	.+34     	; 0xdc6 <heater_SWITCH+0x30>
     da4:	86 70       	andi	r24, 0x06	; 6
     da6:	79 f4       	brne	.+30     	; 0xdc6 <heater_SWITCH+0x30>
		Disable_5V(power_state); // disable 5V rail if not needed
     da8:	8c 2f       	mov	r24, r28
     daa:	e3 df       	rcall	.-58     	; 0xd72 <Disable_5V>
		Disable_8V(power_state); // disable 8V rail if not needed
     dac:	8c 2f       	mov	r24, r28
     dae:	e7 df       	rcall	.-50     	; 0xd7e <Disable_8V>
		Clear_GPIO(3); // Turn off 5V heater
     db0:	83 e0       	ldi	r24, 0x03	; 3
     db2:	90 e0       	ldi	r25, 0x00	; 0
     db4:	2c d4       	rcall	.+2136   	; 0x160e <Clear_GPIO>
		Clear_GPIO(2); // Turn off 8V heater
     db6:	82 e0       	ldi	r24, 0x02	; 2
     db8:	90 e0       	ldi	r25, 0x00	; 0
     dba:	29 d4       	rcall	.+2130   	; 0x160e <Clear_GPIO>
		Enable_VBatt();
     dbc:	c5 df       	rcall	.-118    	; 0xd48 <Enable_VBatt>
     dbe:	80 e0       	ldi	r24, 0x00	; 0
		Set_GPIO(0);  // Enable VBatt heater
     dc0:	90 e0       	ldi	r25, 0x00	; 0
     dc2:	bf d3       	rcall	.+1918   	; 0x1542 <Set_GPIO>
     dc4:	3b c0       	rjmp	.+118    	; 0xe3c <heater_SWITCH+0xa6>
     dc6:	c1 ff       	sbrs	r28, 1
     dc8:	12 c0       	rjmp	.+36     	; 0xdee <heater_SWITCH+0x58>
	}
	
	// 5V Heater
	else if((power_state & mask_heater_5V) && !(power_state & (mask_heater_VBatt | mask_heater_8V))){
     dca:	8c 2f       	mov	r24, r28
     dcc:	85 70       	andi	r24, 0x05	; 5
     dce:	79 f4       	brne	.+30     	; 0xdee <heater_SWITCH+0x58>
		Disable_VBatt(power_state); // disable VBatt rail if not needed
     dd0:	8c 2f       	mov	r24, r28
     dd2:	db df       	rcall	.-74     	; 0xd8a <Disable_VBatt>
		Disable_8V(power_state); // disable 8V rail if not needed
     dd4:	8c 2f       	mov	r24, r28
		Clear_GPIO(0); // Turn off VBatt heater
     dd6:	d3 df       	rcall	.-90     	; 0xd7e <Disable_8V>
     dd8:	80 e0       	ldi	r24, 0x00	; 0
     dda:	90 e0       	ldi	r25, 0x00	; 0
		Clear_GPIO(2); // Turn off 8V heater
     ddc:	18 d4       	rcall	.+2096   	; 0x160e <Clear_GPIO>
     dde:	82 e0       	ldi	r24, 0x02	; 2
     de0:	90 e0       	ldi	r25, 0x00	; 0
     de2:	15 d4       	rcall	.+2090   	; 0x160e <Clear_GPIO>
		Enable_5V();
     de4:	93 df       	rcall	.-218    	; 0xd0c <Enable_5V>
		Set_GPIO(3); // Enable 5V heater
     de6:	83 e0       	ldi	r24, 0x03	; 3
     de8:	90 e0       	ldi	r25, 0x00	; 0
     dea:	ab d3       	rcall	.+1878   	; 0x1542 <Set_GPIO>
     dec:	27 c0       	rjmp	.+78     	; 0xe3c <heater_SWITCH+0xa6>
	}
	
	// 8V Heater
	else if((power_state & mask_heater_8V) && !(power_state & (mask_heater_VBatt | mask_heater_5V))){
     dee:	c2 ff       	sbrs	r28, 2
     df0:	12 c0       	rjmp	.+36     	; 0xe16 <heater_SWITCH+0x80>
     df2:	8c 2f       	mov	r24, r28
		Disable_VBatt(power_state); // disable VBatt rail if not needed
     df4:	83 70       	andi	r24, 0x03	; 3
     df6:	79 f4       	brne	.+30     	; 0xe16 <heater_SWITCH+0x80>
		Disable_5V(power_state); // disable 5V rail if not needed
     df8:	8c 2f       	mov	r24, r28
     dfa:	c7 df       	rcall	.-114    	; 0xd8a <Disable_VBatt>
		Clear_GPIO(0); // Turn off VBatt heater
     dfc:	8c 2f       	mov	r24, r28
     dfe:	b9 df       	rcall	.-142    	; 0xd72 <Disable_5V>
     e00:	80 e0       	ldi	r24, 0x00	; 0
		Clear_GPIO(3); // Turn off 5V heater
     e02:	90 e0       	ldi	r25, 0x00	; 0
     e04:	04 d4       	rcall	.+2056   	; 0x160e <Clear_GPIO>
     e06:	83 e0       	ldi	r24, 0x03	; 3
		Enable_8V();
     e08:	90 e0       	ldi	r25, 0x00	; 0
		Set_GPIO(2); // Enable 8V heater
     e0a:	01 d4       	rcall	.+2050   	; 0x160e <Clear_GPIO>
     e0c:	8e df       	rcall	.-228    	; 0xd2a <Enable_8V>
     e0e:	82 e0       	ldi	r24, 0x02	; 2
     e10:	90 e0       	ldi	r25, 0x00	; 0
	}
	else{
		// Turn off all heaters
		Clear_GPIO(0);
     e12:	97 d3       	rcall	.+1838   	; 0x1542 <Set_GPIO>
     e14:	13 c0       	rjmp	.+38     	; 0xe3c <heater_SWITCH+0xa6>
     e16:	80 e0       	ldi	r24, 0x00	; 0
     e18:	90 e0       	ldi	r25, 0x00	; 0
		Clear_GPIO(3);
     e1a:	f9 d3       	rcall	.+2034   	; 0x160e <Clear_GPIO>
     e1c:	83 e0       	ldi	r24, 0x03	; 3
     e1e:	90 e0       	ldi	r25, 0x00	; 0
     e20:	f6 d3       	rcall	.+2028   	; 0x160e <Clear_GPIO>
		Clear_GPIO(2);
     e22:	82 e0       	ldi	r24, 0x02	; 2
     e24:	90 e0       	ldi	r25, 0x00	; 0
     e26:	f3 d3       	rcall	.+2022   	; 0x160e <Clear_GPIO>
     e28:	8c 2f       	mov	r24, r28
		
		// Turn off associated rails (rail logic is taken care of in the function)
		Disable_VBatt(power_state);
     e2a:	af df       	rcall	.-162    	; 0xd8a <Disable_VBatt>
     e2c:	8c 2f       	mov	r24, r28
     e2e:	a1 df       	rcall	.-190    	; 0xd72 <Disable_5V>
		Disable_5V(power_state);
     e30:	8c 2f       	mov	r24, r28
     e32:	a5 df       	rcall	.-182    	; 0xd7e <Disable_8V>
     e34:	f8 01       	movw	r30, r16
		Disable_8V(power_state);
     e36:	80 81       	ld	r24, Z
     e38:	88 7f       	andi	r24, 0xF8	; 248
     e3a:	80 83       	st	Z, r24
		
		// Change power state as they are all turned off now
		power_pointer[0] &= 0b11111000;
     e3c:	cf 91       	pop	r28
     e3e:	1f 91       	pop	r17
     e40:	0f 91       	pop	r16
     e42:	08 95       	ret

00000e44 <obc_SWITCH>:
	}
}
     e44:	83 ff       	sbrs	r24, 3
     e46:	04 c0       	rjmp	.+8      	; 0xe50 <obc_SWITCH+0xc>
     e48:	88 e1       	ldi	r24, 0x18	; 24
     e4a:	90 e0       	ldi	r25, 0x00	; 0
	// OBC mask
	uint8_t mask_OBC = 0b00001000;
	
	// Turn on OBC if it is set to one
	if(power_state & mask_OBC){
		Set_GPIO(24); // turn on OBC
     e4c:	7a c3       	rjmp	.+1780   	; 0x1542 <Set_GPIO>
     e4e:	08 95       	ret
	}
	else{
		Clear_GPIO(24); // turn off OBC
     e50:	88 e1       	ldi	r24, 0x18	; 24
     e52:	90 e0       	ldi	r25, 0x00	; 0
     e54:	dc c3       	rjmp	.+1976   	; 0x160e <Clear_GPIO>
     e56:	08 95       	ret

00000e58 <imager_SWITCH>:
// Author: Chris Thomas
// Date: 2019-03-24
// Description: Switches power to Imager based on current power state.
/*========================================================================================*/

void imager_SWITCH(uint8_t power_state){
     e58:	cf 93       	push	r28
     e5a:	c8 2f       	mov	r28, r24
	
	// Imager Mask
	uint8_t mask_imager = 0b00010000;
	
	// Turn on Imager subcomponents if power state calls for it
	if(power_state & mask_imager){
     e5c:	84 ff       	sbrs	r24, 4
     e5e:	08 c0       	rjmp	.+16     	; 0xe70 <imager_SWITCH+0x18>
		Enable_5V();
     e60:	55 df       	rcall	.-342    	; 0xd0c <Enable_5V>
		Set_GPIO(23); // turn on imager beagle
     e62:	87 e1       	ldi	r24, 0x17	; 23
     e64:	90 e0       	ldi	r25, 0x00	; 0
     e66:	6d d3       	rcall	.+1754   	; 0x1542 <Set_GPIO>
		Set_GPIO(22); // turn on camera 
     e68:	86 e1       	ldi	r24, 0x16	; 22
     e6a:	90 e0       	ldi	r25, 0x00	; 0
     e6c:	6a d3       	rcall	.+1748   	; 0x1542 <Set_GPIO>
     e6e:	08 c0       	rjmp	.+16     	; 0xe80 <imager_SWITCH+0x28>
	}
	else{
		Clear_GPIO(22); // turn off camera
     e70:	86 e1       	ldi	r24, 0x16	; 22
     e72:	90 e0       	ldi	r25, 0x00	; 0
     e74:	cc d3       	rcall	.+1944   	; 0x160e <Clear_GPIO>
		Clear_GPIO(23); // turn off imager beagle
     e76:	87 e1       	ldi	r24, 0x17	; 23
     e78:	90 e0       	ldi	r25, 0x00	; 0
     e7a:	c9 d3       	rcall	.+1938   	; 0x160e <Clear_GPIO>
		Disable_5V(power_state); // turn off associated rail (5V)		
     e7c:	8c 2f       	mov	r24, r28
     e7e:	79 df       	rcall	.-270    	; 0xd72 <Disable_5V>
     e80:	cf 91       	pop	r28
	}
}
     e82:	08 95       	ret

00000e84 <grips_SWITCH>:
     e84:	cf 93       	push	r28
// Author: Chris Thomas
// Date: 2019-03-24
// Description: Switches power to GRIPS based on current power state.
/*========================================================================================*/

void grips_SWITCH(uint8_t power_state){
     e86:	c8 2f       	mov	r28, r24
	
	// GRIPS mask
	uint8_t grips_mask = 0b00100000;
	
	// Turn on Grips subcomponents if power state calls for it
	if(power_state & grips_mask){
     e88:	85 ff       	sbrs	r24, 5
     e8a:	09 c0       	rjmp	.+18     	; 0xe9e <grips_SWITCH+0x1a>
		Enable_5V();
     e8c:	3f df       	rcall	.-386    	; 0xd0c <Enable_5V>
		Enable_3V3_1();
     e8e:	2f df       	rcall	.-418    	; 0xcee <Enable_3V3_1>
     e90:	8b e1       	ldi	r24, 0x1B	; 27
		Set_GPIO(27); // turn on GNSS beagle
     e92:	90 e0       	ldi	r25, 0x00	; 0
     e94:	56 d3       	rcall	.+1708   	; 0x1542 <Set_GPIO>
     e96:	8c e1       	ldi	r24, 0x1C	; 28
		Set_GPIO(28); // turn on OEM719
     e98:	90 e0       	ldi	r25, 0x00	; 0
     e9a:	53 d3       	rcall	.+1702   	; 0x1542 <Set_GPIO>
     e9c:	0a c0       	rjmp	.+20     	; 0xeb2 <grips_SWITCH+0x2e>
     e9e:	8c e1       	ldi	r24, 0x1C	; 28
	}
	else{
		Clear_GPIO(28); // turn off OEM719
     ea0:	90 e0       	ldi	r25, 0x00	; 0
     ea2:	b5 d3       	rcall	.+1898   	; 0x160e <Clear_GPIO>
     ea4:	8b e1       	ldi	r24, 0x1B	; 27
		Clear_GPIO(27); // turn off GNSS beagle
     ea6:	90 e0       	ldi	r25, 0x00	; 0
     ea8:	b2 d3       	rcall	.+1892   	; 0x160e <Clear_GPIO>
     eaa:	8c 2f       	mov	r24, r28
		Disable_3V3_1(power_state); // turn off 5V rail
     eac:	5c df       	rcall	.-328    	; 0xd66 <Disable_3V3_1>
     eae:	8c 2f       	mov	r24, r28
     eb0:	60 df       	rcall	.-320    	; 0xd72 <Disable_5V>
		Disable_5V(power_state); // turn off 3V3-1 rail
     eb2:	cf 91       	pop	r28
     eb4:	08 95       	ret

00000eb6 <sband_SWITCH>:
     eb6:	cf 93       	push	r28
	}
}
     eb8:	c8 2f       	mov	r28, r24
     eba:	86 ff       	sbrs	r24, 6
	
	// SBand mask
	uint8_t mask_sband = 0b01000000;
	
	// Turn on SBand components if power stated calls for it
	if(power_state & mask_sband){
     ebc:	05 c0       	rjmp	.+10     	; 0xec8 <sband_SWITCH+0x12>
		Enable_8V();
     ebe:	35 df       	rcall	.-406    	; 0xd2a <Enable_8V>
		Set_GPIO(26); // turn on SBand
     ec0:	8a e1       	ldi	r24, 0x1A	; 26
     ec2:	90 e0       	ldi	r25, 0x00	; 0
     ec4:	3e d3       	rcall	.+1660   	; 0x1542 <Set_GPIO>
     ec6:	05 c0       	rjmp	.+10     	; 0xed2 <sband_SWITCH+0x1c>
	}
	else{
		Clear_GPIO(26); // turn off SBand
     ec8:	8a e1       	ldi	r24, 0x1A	; 26
     eca:	90 e0       	ldi	r25, 0x00	; 0
		Disable_8V(power_state); // turn off 8V rail
     ecc:	a0 d3       	rcall	.+1856   	; 0x160e <Clear_GPIO>
     ece:	8c 2f       	mov	r24, r28
     ed0:	56 df       	rcall	.-340    	; 0xd7e <Disable_8V>
	}
}
     ed2:	cf 91       	pop	r28
     ed4:	08 95       	ret

00000ed6 <uhf_SWITCH>:
// Author: Chris Thomas
// Date: 2019-03-24
// Description: Switches power to UHF based on current power state.
/*========================================================================================*/

uhf_SWITCH(uint8_t power_state){
     ed6:	cf 93       	push	r28
     ed8:	c8 2f       	mov	r28, r24
	
	// UHF mask
	uint8_t mask_uhf = 0b10000000;
	
	// Turn on UHF components if power state calls for it
	if(power_state & mask_uhf){
     eda:	88 23       	and	r24, r24
     edc:	2c f4       	brge	.+10     	; 0xee8 <uhf_SWITCH+0x12>
		Enable_8V();
     ede:	25 df       	rcall	.-438    	; 0xd2a <Enable_8V>
		Set_GPIO(25); // turn on UHF
     ee0:	89 e1       	ldi	r24, 0x19	; 25
     ee2:	90 e0       	ldi	r25, 0x00	; 0
     ee4:	2e d3       	rcall	.+1628   	; 0x1542 <Set_GPIO>
     ee6:	05 c0       	rjmp	.+10     	; 0xef2 <uhf_SWITCH+0x1c>
	}
	else{
		Clear_GPIO(25); // turn off UHF
     ee8:	89 e1       	ldi	r24, 0x19	; 25
     eea:	90 e0       	ldi	r25, 0x00	; 0
		Disable_8V(power_state); // turn off 8V rail
     eec:	90 d3       	rcall	.+1824   	; 0x160e <Clear_GPIO>
     eee:	8c 2f       	mov	r24, r28
     ef0:	46 df       	rcall	.-372    	; 0xd7e <Disable_8V>
	}
     ef2:	cf 91       	pop	r28
     ef4:	08 95       	ret

00000ef6 <Update_LOADS>:
// Description: Switches power to subsystems based on the current power state. The
//				power state is treated the same way whether the EPS is in autonomous or
//				manual mode.
/*========================================================================================*/

void Update_LOADS(uint8_t power_state, uint8_t* power_pointer){
     ef6:	cf 93       	push	r28
     ef8:	c8 2f       	mov	r28, r24
	
	// Heater switching
	heater_SWITCH(power_state, power_pointer);
     efa:	4d df       	rcall	.-358    	; 0xd96 <heater_SWITCH>
	
	// OBC switching
	obc_SWITCH(power_state);
     efc:	8c 2f       	mov	r24, r28
     efe:	a2 df       	rcall	.-188    	; 0xe44 <obc_SWITCH>
	
	// Imager switching
	imager_SWITCH(power_state);
     f00:	8c 2f       	mov	r24, r28
     f02:	aa df       	rcall	.-172    	; 0xe58 <imager_SWITCH>
	
	// GRIPS switching
	grips_SWITCH(power_state);
     f04:	8c 2f       	mov	r24, r28
     f06:	be df       	rcall	.-132    	; 0xe84 <grips_SWITCH>
	
	// SBand switching
	sband_SWITCH(power_state);
     f08:	8c 2f       	mov	r24, r28
     f0a:	d5 df       	rcall	.-86     	; 0xeb6 <sband_SWITCH>
     f0c:	8c 2f       	mov	r24, r28
	
	// UHF switching
	uhf_SWITCH(power_state);
     f0e:	e3 df       	rcall	.-58     	; 0xed6 <uhf_SWITCH>
     f10:	cf 91       	pop	r28
     f12:	08 95       	ret

00000f14 <pwrMatInit>:
	
}
     f14:	fc 01       	movw	r30, r24
     f16:	81 e0       	ldi	r24, 0x01	; 1
// The structure for the power state matrix is
//
/*========================================================================================*/

void pwrMatInit(uint8_t* pwrMat){
	pwrMat[0] = 0b00000001;
     f18:	80 83       	st	Z, r24
	pwrMat[1] = 0b00000001;
     f1a:	81 83       	std	Z+1, r24	; 0x01
	pwrMat[2] = 0b00000000;
     f1c:	12 82       	std	Z+2, r1	; 0x02
	pwrMat[3] = 0b00000000;
     f1e:	13 82       	std	Z+3, r1	; 0x03
	pwrMat[4] = 0b00000000;
     f20:	14 82       	std	Z+4, r1	; 0x04
	pwrMat[5] = 0b00000000;
     f22:	15 82       	std	Z+5, r1	; 0x05
	pwrMat[6] = 0b00000100;
     f24:	84 e0       	ldi	r24, 0x04	; 4
     f26:	86 83       	std	Z+6, r24	; 0x06
	pwrMat[7] = 0b00001000;
     f28:	88 e0       	ldi	r24, 0x08	; 8
     f2a:	87 83       	std	Z+7, r24	; 0x07
	pwrMat[8] = 0b00001000;
     f2c:	80 87       	std	Z+8, r24	; 0x08
	pwrMat[9] = 0b00001000;
     f2e:	81 87       	std	Z+9, r24	; 0x09
	pwrMat[10] = 0b00011100;
     f30:	8c e1       	ldi	r24, 0x1C	; 28
     f32:	82 87       	std	Z+10, r24	; 0x0a
	pwrMat[11] = 0b00011010;
     f34:	8a e1       	ldi	r24, 0x1A	; 26
     f36:	83 87       	std	Z+11, r24	; 0x0b
	pwrMat[12] = 0b00011000;
     f38:	88 e1       	ldi	r24, 0x18	; 24
     f3a:	84 87       	std	Z+12, r24	; 0x0c
	pwrMat[13] = 0b00011000;
     f3c:	85 87       	std	Z+13, r24	; 0x0d
	pwrMat[14] = 0b00000000;
     f3e:	16 86       	std	Z+14, r1	; 0x0e
	pwrMat[15] = 0b10111100;
     f40:	8c eb       	ldi	r24, 0xBC	; 188
     f42:	87 87       	std	Z+15, r24	; 0x0f
	pwrMat[16] = 0b00111010;
     f44:	8a e3       	ldi	r24, 0x3A	; 58
     f46:	80 8b       	std	Z+16, r24	; 0x10
	pwrMat[17] = 0b00111000;
     f48:	88 e3       	ldi	r24, 0x38	; 56
     f4a:	81 8b       	std	Z+17, r24	; 0x11
	pwrMat[18] = 0b00111000;
     f4c:	82 8b       	std	Z+18, r24	; 0x12
	pwrMat[19] = 0b00000000;
     f4e:	13 8a       	std	Z+19, r1	; 0x13
	pwrMat[20] = 0b11111100;
     f50:	8c ef       	ldi	r24, 0xFC	; 252
     f52:	84 8b       	std	Z+20, r24	; 0x14
	pwrMat[21] = 0b11111010;
     f54:	8a ef       	ldi	r24, 0xFA	; 250
     f56:	85 8b       	std	Z+21, r24	; 0x15
	pwrMat[22] = 0b11111000;
     f58:	88 ef       	ldi	r24, 0xF8	; 248
     f5a:	86 8b       	std	Z+22, r24	; 0x16
	pwrMat[23] = 0b11111000;
     f5c:	87 8b       	std	Z+23, r24	; 0x17
	pwrMat[24] = 0b00000000;
     f5e:	10 8e       	std	Z+24, r1	; 0x18
     f60:	08 95       	ret

00000f62 <PowerStateCheck>:
// Author: Kyle Andersen
// Date: 2019-03-20
// Description: 
/*========================================================================================*/

int PowerStateCheck(float SOC, float temp){
     f62:	8f 92       	push	r8
     f64:	9f 92       	push	r9
     f66:	af 92       	push	r10
     f68:	bf 92       	push	r11
     f6a:	cf 92       	push	r12
     f6c:	df 92       	push	r13
     f6e:	ef 92       	push	r14
     f70:	ff 92       	push	r15
     f72:	cf 93       	push	r28
     f74:	6b 01       	movw	r12, r22
     f76:	7c 01       	movw	r14, r24
     f78:	49 01       	movw	r8, r18
     f7a:	5a 01       	movw	r10, r20
	if(SOC < 20){
     f7c:	20 e0       	ldi	r18, 0x00	; 0
     f7e:	30 e0       	ldi	r19, 0x00	; 0
     f80:	40 ea       	ldi	r20, 0xA0	; 160
     f82:	51 e4       	ldi	r21, 0x41	; 65
     f84:	0e 94 63 14 	call	0x28c6	; 0x28c6 <__cmpsf2>
     f88:	88 23       	and	r24, r24
     f8a:	0c f0       	brlt	.+2      	; 0xf8e <PowerStateCheck+0x2c>
     f8c:	4f c0       	rjmp	.+158    	; 0x102c <PowerStateCheck+0xca>
		if(temp >= 40){
     f8e:	20 e0       	ldi	r18, 0x00	; 0
     f90:	30 e0       	ldi	r19, 0x00	; 0
     f92:	40 e2       	ldi	r20, 0x20	; 32
     f94:	52 e4       	ldi	r21, 0x42	; 66
     f96:	c5 01       	movw	r24, r10
     f98:	b4 01       	movw	r22, r8
     f9a:	0e 94 b2 15 	call	0x2b64	; 0x2b64 <__gesf2>
     f9e:	88 23       	and	r24, r24
     fa0:	0c f0       	brlt	.+2      	; 0xfa4 <PowerStateCheck+0x42>
     fa2:	c6 c1       	rjmp	.+908    	; 0x1330 <PowerStateCheck+0x3ce>
			return 4;
		}//end else if
		else if(temp >= 30 && temp < 40){
     fa4:	20 e0       	ldi	r18, 0x00	; 0
     fa6:	30 e0       	ldi	r19, 0x00	; 0
     fa8:	40 ef       	ldi	r20, 0xF0	; 240
     faa:	51 e4       	ldi	r21, 0x41	; 65
     fac:	c5 01       	movw	r24, r10
     fae:	b4 01       	movw	r22, r8
     fb0:	0e 94 b2 15 	call	0x2b64	; 0x2b64 <__gesf2>
     fb4:	88 23       	and	r24, r24
     fb6:	5c f0       	brlt	.+22     	; 0xfce <PowerStateCheck+0x6c>
     fb8:	20 e0       	ldi	r18, 0x00	; 0
     fba:	30 e0       	ldi	r19, 0x00	; 0
     fbc:	40 e2       	ldi	r20, 0x20	; 32
     fbe:	52 e4       	ldi	r21, 0x42	; 66
     fc0:	c5 01       	movw	r24, r10
     fc2:	b4 01       	movw	r22, r8
     fc4:	0e 94 63 14 	call	0x28c6	; 0x28c6 <__cmpsf2>
     fc8:	88 23       	and	r24, r24
     fca:	0c f4       	brge	.+2      	; 0xfce <PowerStateCheck+0x6c>
     fcc:	b4 c1       	rjmp	.+872    	; 0x1336 <PowerStateCheck+0x3d4>
			return 3;
		}//end else if
		else if(temp >= 15 && temp < 30){
     fce:	20 e0       	ldi	r18, 0x00	; 0
     fd0:	30 e0       	ldi	r19, 0x00	; 0
     fd2:	40 e7       	ldi	r20, 0x70	; 112
     fd4:	51 e4       	ldi	r21, 0x41	; 65
     fd6:	c5 01       	movw	r24, r10
     fd8:	b4 01       	movw	r22, r8
     fda:	0e 94 b2 15 	call	0x2b64	; 0x2b64 <__gesf2>
     fde:	88 23       	and	r24, r24
     fe0:	5c f0       	brlt	.+22     	; 0xff8 <PowerStateCheck+0x96>
     fe2:	20 e0       	ldi	r18, 0x00	; 0
     fe4:	30 e0       	ldi	r19, 0x00	; 0
     fe6:	40 ef       	ldi	r20, 0xF0	; 240
     fe8:	51 e4       	ldi	r21, 0x41	; 65
     fea:	c5 01       	movw	r24, r10
     fec:	b4 01       	movw	r22, r8
     fee:	0e 94 63 14 	call	0x28c6	; 0x28c6 <__cmpsf2>
     ff2:	88 23       	and	r24, r24
     ff4:	0c f4       	brge	.+2      	; 0xff8 <PowerStateCheck+0x96>
     ff6:	a2 c1       	rjmp	.+836    	; 0x133c <PowerStateCheck+0x3da>
			return 2;
		}//end else if
		else if(temp >= 0 && temp < 15){
     ff8:	20 e0       	ldi	r18, 0x00	; 0
     ffa:	30 e0       	ldi	r19, 0x00	; 0
     ffc:	a9 01       	movw	r20, r18
     ffe:	c5 01       	movw	r24, r10
    1000:	b4 01       	movw	r22, r8
    1002:	0e 94 b2 15 	call	0x2b64	; 0x2b64 <__gesf2>
    1006:	88 23       	and	r24, r24
    1008:	0c f4       	brge	.+2      	; 0x100c <PowerStateCheck+0xaa>
    100a:	9b c1       	rjmp	.+822    	; 0x1342 <PowerStateCheck+0x3e0>
/*========================================================================================*/

int PowerStateCheck(float SOC, float temp){
	if(SOC < 20){
		if(temp >= 40){
			return 4;
    100c:	c1 e0       	ldi	r28, 0x01	; 1
    100e:	f1 2c       	mov	r15, r1
    1010:	20 e0       	ldi	r18, 0x00	; 0
    1012:	30 e0       	ldi	r19, 0x00	; 0
    1014:	40 e7       	ldi	r20, 0x70	; 112
    1016:	51 e4       	ldi	r21, 0x41	; 65
    1018:	c5 01       	movw	r24, r10
    101a:	b4 01       	movw	r22, r8
    101c:	0e 94 63 14 	call	0x28c6	; 0x28c6 <__cmpsf2>
    1020:	88 23       	and	r24, r24
    1022:	0c f0       	brlt	.+2      	; 0x1026 <PowerStateCheck+0xc4>
    1024:	c0 e0       	ldi	r28, 0x00	; 0
    1026:	8c 2f       	mov	r24, r28
    1028:	9f 2d       	mov	r25, r15
    102a:	ca c1       	rjmp	.+916    	; 0x13c0 <PowerStateCheck+0x45e>
		}//end else if
		else{
			return 0;
		}//end else
	}//end if SOC < 20
	else if(SOC < 40 && SOC >= 20){
    102c:	20 e0       	ldi	r18, 0x00	; 0
    102e:	30 e0       	ldi	r19, 0x00	; 0
    1030:	40 e2       	ldi	r20, 0x20	; 32
    1032:	52 e4       	ldi	r21, 0x42	; 66
    1034:	c7 01       	movw	r24, r14
    1036:	b6 01       	movw	r22, r12
    1038:	0e 94 63 14 	call	0x28c6	; 0x28c6 <__cmpsf2>
    103c:	88 23       	and	r24, r24
    103e:	0c f0       	brlt	.+2      	; 0x1042 <PowerStateCheck+0xe0>
    1040:	5b c0       	rjmp	.+182    	; 0x10f8 <PowerStateCheck+0x196>
    1042:	20 e0       	ldi	r18, 0x00	; 0
    1044:	30 e0       	ldi	r19, 0x00	; 0
    1046:	40 ea       	ldi	r20, 0xA0	; 160
    1048:	51 e4       	ldi	r21, 0x41	; 65
    104a:	c7 01       	movw	r24, r14
    104c:	b6 01       	movw	r22, r12
    104e:	0e 94 b2 15 	call	0x2b64	; 0x2b64 <__gesf2>
    1052:	88 23       	and	r24, r24
    1054:	0c f4       	brge	.+2      	; 0x1058 <PowerStateCheck+0xf6>
    1056:	50 c0       	rjmp	.+160    	; 0x10f8 <PowerStateCheck+0x196>
		if(temp >= 40){
    1058:	20 e0       	ldi	r18, 0x00	; 0
    105a:	30 e0       	ldi	r19, 0x00	; 0
    105c:	40 e2       	ldi	r20, 0x20	; 32
    105e:	52 e4       	ldi	r21, 0x42	; 66
    1060:	c5 01       	movw	r24, r10
    1062:	b4 01       	movw	r22, r8
    1064:	0e 94 b2 15 	call	0x2b64	; 0x2b64 <__gesf2>
    1068:	88 23       	and	r24, r24
    106a:	0c f0       	brlt	.+2      	; 0x106e <PowerStateCheck+0x10c>
    106c:	6d c1       	rjmp	.+730    	; 0x1348 <PowerStateCheck+0x3e6>
			return 9;
		}//end else if
		else if(temp >= 30 && temp < 40){
    106e:	20 e0       	ldi	r18, 0x00	; 0
    1070:	30 e0       	ldi	r19, 0x00	; 0
    1072:	40 ef       	ldi	r20, 0xF0	; 240
    1074:	51 e4       	ldi	r21, 0x41	; 65
    1076:	c5 01       	movw	r24, r10
    1078:	b4 01       	movw	r22, r8
    107a:	0e 94 b2 15 	call	0x2b64	; 0x2b64 <__gesf2>
    107e:	88 23       	and	r24, r24
    1080:	5c f0       	brlt	.+22     	; 0x1098 <PowerStateCheck+0x136>
    1082:	20 e0       	ldi	r18, 0x00	; 0
    1084:	30 e0       	ldi	r19, 0x00	; 0
    1086:	40 e2       	ldi	r20, 0x20	; 32
    1088:	52 e4       	ldi	r21, 0x42	; 66
    108a:	c5 01       	movw	r24, r10
    108c:	b4 01       	movw	r22, r8
    108e:	0e 94 63 14 	call	0x28c6	; 0x28c6 <__cmpsf2>
    1092:	88 23       	and	r24, r24
    1094:	0c f4       	brge	.+2      	; 0x1098 <PowerStateCheck+0x136>
    1096:	5b c1       	rjmp	.+694    	; 0x134e <PowerStateCheck+0x3ec>
			return 8;
		}//end else if
		else if(temp >= 15 && temp < 30){
    1098:	20 e0       	ldi	r18, 0x00	; 0
    109a:	30 e0       	ldi	r19, 0x00	; 0
    109c:	40 e7       	ldi	r20, 0x70	; 112
    109e:	51 e4       	ldi	r21, 0x41	; 65
    10a0:	c5 01       	movw	r24, r10
    10a2:	b4 01       	movw	r22, r8
    10a4:	0e 94 b2 15 	call	0x2b64	; 0x2b64 <__gesf2>
    10a8:	88 23       	and	r24, r24
    10aa:	5c f0       	brlt	.+22     	; 0x10c2 <PowerStateCheck+0x160>
    10ac:	20 e0       	ldi	r18, 0x00	; 0
    10ae:	30 e0       	ldi	r19, 0x00	; 0
    10b0:	40 ef       	ldi	r20, 0xF0	; 240
    10b2:	51 e4       	ldi	r21, 0x41	; 65
    10b4:	c5 01       	movw	r24, r10
    10b6:	b4 01       	movw	r22, r8
    10b8:	0e 94 63 14 	call	0x28c6	; 0x28c6 <__cmpsf2>
    10bc:	88 23       	and	r24, r24
    10be:	0c f4       	brge	.+2      	; 0x10c2 <PowerStateCheck+0x160>
    10c0:	49 c1       	rjmp	.+658    	; 0x1354 <PowerStateCheck+0x3f2>
			return 7;
		}//end else if
		else if(temp >= 0 && temp < 15){
    10c2:	20 e0       	ldi	r18, 0x00	; 0
    10c4:	30 e0       	ldi	r19, 0x00	; 0
    10c6:	a9 01       	movw	r20, r18
    10c8:	c5 01       	movw	r24, r10
    10ca:	b4 01       	movw	r22, r8
    10cc:	0e 94 b2 15 	call	0x2b64	; 0x2b64 <__gesf2>
    10d0:	88 23       	and	r24, r24
    10d2:	0c f4       	brge	.+2      	; 0x10d6 <PowerStateCheck+0x174>
    10d4:	42 c1       	rjmp	.+644    	; 0x135a <PowerStateCheck+0x3f8>
    10d6:	20 e0       	ldi	r18, 0x00	; 0
    10d8:	30 e0       	ldi	r19, 0x00	; 0
    10da:	40 e7       	ldi	r20, 0x70	; 112
    10dc:	51 e4       	ldi	r21, 0x41	; 65
    10de:	c5 01       	movw	r24, r10
    10e0:	b4 01       	movw	r22, r8
    10e2:	0e 94 63 14 	call	0x28c6	; 0x28c6 <__cmpsf2>
			return 6;
		}//end else if
		else{
			return 5;
    10e6:	08 2e       	mov	r0, r24
    10e8:	00 0c       	add	r0, r0
    10ea:	99 0b       	sbc	r25, r25
    10ec:	88 27       	eor	r24, r24
    10ee:	99 0f       	add	r25, r25
    10f0:	88 1f       	adc	r24, r24
    10f2:	99 27       	eor	r25, r25
    10f4:	05 96       	adiw	r24, 0x05	; 5
    10f6:	64 c1       	rjmp	.+712    	; 0x13c0 <PowerStateCheck+0x45e>
		}//end else
	}//end else if SOC < 40
	else if(SOC < 60 && SOC >= 40){
    10f8:	20 e0       	ldi	r18, 0x00	; 0
    10fa:	30 e0       	ldi	r19, 0x00	; 0
    10fc:	40 e7       	ldi	r20, 0x70	; 112
    10fe:	52 e4       	ldi	r21, 0x42	; 66
    1100:	c7 01       	movw	r24, r14
    1102:	b6 01       	movw	r22, r12
    1104:	0e 94 63 14 	call	0x28c6	; 0x28c6 <__cmpsf2>
    1108:	88 23       	and	r24, r24
    110a:	0c f0       	brlt	.+2      	; 0x110e <PowerStateCheck+0x1ac>
    110c:	5b c0       	rjmp	.+182    	; 0x11c4 <PowerStateCheck+0x262>
    110e:	20 e0       	ldi	r18, 0x00	; 0
    1110:	30 e0       	ldi	r19, 0x00	; 0
    1112:	40 e2       	ldi	r20, 0x20	; 32
    1114:	52 e4       	ldi	r21, 0x42	; 66
    1116:	c7 01       	movw	r24, r14
    1118:	b6 01       	movw	r22, r12
    111a:	0e 94 b2 15 	call	0x2b64	; 0x2b64 <__gesf2>
    111e:	88 23       	and	r24, r24
    1120:	0c f4       	brge	.+2      	; 0x1124 <PowerStateCheck+0x1c2>
    1122:	42 c1       	rjmp	.+644    	; 0x13a8 <PowerStateCheck+0x446>
		if(temp >= 40){
    1124:	20 e0       	ldi	r18, 0x00	; 0
    1126:	30 e0       	ldi	r19, 0x00	; 0
    1128:	40 e2       	ldi	r20, 0x20	; 32
    112a:	52 e4       	ldi	r21, 0x42	; 66
    112c:	c5 01       	movw	r24, r10
    112e:	b4 01       	movw	r22, r8
    1130:	0e 94 b2 15 	call	0x2b64	; 0x2b64 <__gesf2>
    1134:	88 23       	and	r24, r24
    1136:	0c f0       	brlt	.+2      	; 0x113a <PowerStateCheck+0x1d8>
    1138:	13 c1       	rjmp	.+550    	; 0x1360 <PowerStateCheck+0x3fe>
			return 14;
		}//end else if
		else if(temp >= 30 && temp < 40){
    113a:	20 e0       	ldi	r18, 0x00	; 0
    113c:	30 e0       	ldi	r19, 0x00	; 0
    113e:	40 ef       	ldi	r20, 0xF0	; 240
    1140:	51 e4       	ldi	r21, 0x41	; 65
    1142:	c5 01       	movw	r24, r10
    1144:	b4 01       	movw	r22, r8
    1146:	0e 94 b2 15 	call	0x2b64	; 0x2b64 <__gesf2>
    114a:	88 23       	and	r24, r24
    114c:	5c f0       	brlt	.+22     	; 0x1164 <PowerStateCheck+0x202>
    114e:	20 e0       	ldi	r18, 0x00	; 0
    1150:	30 e0       	ldi	r19, 0x00	; 0
    1152:	40 e2       	ldi	r20, 0x20	; 32
    1154:	52 e4       	ldi	r21, 0x42	; 66
    1156:	c5 01       	movw	r24, r10
    1158:	b4 01       	movw	r22, r8
    115a:	0e 94 63 14 	call	0x28c6	; 0x28c6 <__cmpsf2>
    115e:	88 23       	and	r24, r24
    1160:	0c f4       	brge	.+2      	; 0x1164 <PowerStateCheck+0x202>
    1162:	01 c1       	rjmp	.+514    	; 0x1366 <PowerStateCheck+0x404>
			return 13;
		}//end else if
		else if(temp >= 15 && temp < 30){
    1164:	20 e0       	ldi	r18, 0x00	; 0
    1166:	30 e0       	ldi	r19, 0x00	; 0
    1168:	40 e7       	ldi	r20, 0x70	; 112
    116a:	51 e4       	ldi	r21, 0x41	; 65
    116c:	c5 01       	movw	r24, r10
    116e:	b4 01       	movw	r22, r8
    1170:	0e 94 b2 15 	call	0x2b64	; 0x2b64 <__gesf2>
    1174:	88 23       	and	r24, r24
    1176:	5c f0       	brlt	.+22     	; 0x118e <PowerStateCheck+0x22c>
    1178:	20 e0       	ldi	r18, 0x00	; 0
    117a:	30 e0       	ldi	r19, 0x00	; 0
    117c:	40 ef       	ldi	r20, 0xF0	; 240
    117e:	51 e4       	ldi	r21, 0x41	; 65
    1180:	c5 01       	movw	r24, r10
    1182:	b4 01       	movw	r22, r8
    1184:	0e 94 63 14 	call	0x28c6	; 0x28c6 <__cmpsf2>
    1188:	88 23       	and	r24, r24
    118a:	0c f4       	brge	.+2      	; 0x118e <PowerStateCheck+0x22c>
    118c:	ef c0       	rjmp	.+478    	; 0x136c <PowerStateCheck+0x40a>
			return 12;
		}//end else if
		else if(temp >= 0 && temp < 15){
    118e:	20 e0       	ldi	r18, 0x00	; 0
    1190:	30 e0       	ldi	r19, 0x00	; 0
    1192:	a9 01       	movw	r20, r18
    1194:	c5 01       	movw	r24, r10
    1196:	b4 01       	movw	r22, r8
    1198:	0e 94 b2 15 	call	0x2b64	; 0x2b64 <__gesf2>
    119c:	88 23       	and	r24, r24
    119e:	0c f4       	brge	.+2      	; 0x11a2 <PowerStateCheck+0x240>
    11a0:	e8 c0       	rjmp	.+464    	; 0x1372 <PowerStateCheck+0x410>
    11a2:	20 e0       	ldi	r18, 0x00	; 0
    11a4:	30 e0       	ldi	r19, 0x00	; 0
    11a6:	40 e7       	ldi	r20, 0x70	; 112
    11a8:	51 e4       	ldi	r21, 0x41	; 65
    11aa:	c5 01       	movw	r24, r10
    11ac:	b4 01       	movw	r22, r8
    11ae:	0e 94 63 14 	call	0x28c6	; 0x28c6 <__cmpsf2>
			return 11;
		}//end else if
		else{
			return 10;
    11b2:	08 2e       	mov	r0, r24
    11b4:	00 0c       	add	r0, r0
    11b6:	99 0b       	sbc	r25, r25
    11b8:	88 27       	eor	r24, r24
    11ba:	99 0f       	add	r25, r25
    11bc:	88 1f       	adc	r24, r24
    11be:	99 27       	eor	r25, r25
    11c0:	0a 96       	adiw	r24, 0x0a	; 10
    11c2:	fe c0       	rjmp	.+508    	; 0x13c0 <PowerStateCheck+0x45e>
		}//end else
	}//end if SOC < 60
	else if(SOC < 80 && SOC <= 60){
    11c4:	20 e0       	ldi	r18, 0x00	; 0
    11c6:	30 e0       	ldi	r19, 0x00	; 0
    11c8:	40 ea       	ldi	r20, 0xA0	; 160
    11ca:	52 e4       	ldi	r21, 0x42	; 66
    11cc:	c7 01       	movw	r24, r14
    11ce:	b6 01       	movw	r22, r12
    11d0:	0e 94 63 14 	call	0x28c6	; 0x28c6 <__cmpsf2>
    11d4:	88 23       	and	r24, r24
    11d6:	0c f0       	brlt	.+2      	; 0x11da <PowerStateCheck+0x278>
    11d8:	5b c0       	rjmp	.+182    	; 0x1290 <PowerStateCheck+0x32e>
    11da:	20 e0       	ldi	r18, 0x00	; 0
    11dc:	30 e0       	ldi	r19, 0x00	; 0
    11de:	40 e7       	ldi	r20, 0x70	; 112
    11e0:	52 e4       	ldi	r21, 0x42	; 66
    11e2:	c7 01       	movw	r24, r14
    11e4:	b6 01       	movw	r22, r12
    11e6:	0e 94 63 14 	call	0x28c6	; 0x28c6 <__cmpsf2>
    11ea:	18 16       	cp	r1, r24
    11ec:	0c f4       	brge	.+2      	; 0x11f0 <PowerStateCheck+0x28e>
    11ee:	50 c0       	rjmp	.+160    	; 0x1290 <PowerStateCheck+0x32e>
		if(temp >= 40){
    11f0:	20 e0       	ldi	r18, 0x00	; 0
    11f2:	30 e0       	ldi	r19, 0x00	; 0
    11f4:	40 e2       	ldi	r20, 0x20	; 32
    11f6:	52 e4       	ldi	r21, 0x42	; 66
    11f8:	c5 01       	movw	r24, r10
    11fa:	b4 01       	movw	r22, r8
    11fc:	0e 94 b2 15 	call	0x2b64	; 0x2b64 <__gesf2>
    1200:	88 23       	and	r24, r24
    1202:	0c f0       	brlt	.+2      	; 0x1206 <PowerStateCheck+0x2a4>
    1204:	b9 c0       	rjmp	.+370    	; 0x1378 <PowerStateCheck+0x416>
			return 19;
		}//end else if
		else if(temp >= 30 && temp < 40){
    1206:	20 e0       	ldi	r18, 0x00	; 0
    1208:	30 e0       	ldi	r19, 0x00	; 0
    120a:	40 ef       	ldi	r20, 0xF0	; 240
    120c:	51 e4       	ldi	r21, 0x41	; 65
    120e:	c5 01       	movw	r24, r10
    1210:	b4 01       	movw	r22, r8
    1212:	0e 94 b2 15 	call	0x2b64	; 0x2b64 <__gesf2>
    1216:	88 23       	and	r24, r24
    1218:	5c f0       	brlt	.+22     	; 0x1230 <PowerStateCheck+0x2ce>
    121a:	20 e0       	ldi	r18, 0x00	; 0
    121c:	30 e0       	ldi	r19, 0x00	; 0
    121e:	40 e2       	ldi	r20, 0x20	; 32
    1220:	52 e4       	ldi	r21, 0x42	; 66
    1222:	c5 01       	movw	r24, r10
    1224:	b4 01       	movw	r22, r8
    1226:	0e 94 63 14 	call	0x28c6	; 0x28c6 <__cmpsf2>
    122a:	88 23       	and	r24, r24
    122c:	0c f4       	brge	.+2      	; 0x1230 <PowerStateCheck+0x2ce>
    122e:	a7 c0       	rjmp	.+334    	; 0x137e <PowerStateCheck+0x41c>
			return 18;
		}//end else if
		else if(temp >= 15 && temp < 30){
    1230:	20 e0       	ldi	r18, 0x00	; 0
    1232:	30 e0       	ldi	r19, 0x00	; 0
    1234:	40 e7       	ldi	r20, 0x70	; 112
    1236:	51 e4       	ldi	r21, 0x41	; 65
    1238:	c5 01       	movw	r24, r10
    123a:	b4 01       	movw	r22, r8
    123c:	0e 94 b2 15 	call	0x2b64	; 0x2b64 <__gesf2>
    1240:	88 23       	and	r24, r24
    1242:	5c f0       	brlt	.+22     	; 0x125a <PowerStateCheck+0x2f8>
    1244:	20 e0       	ldi	r18, 0x00	; 0
    1246:	30 e0       	ldi	r19, 0x00	; 0
    1248:	40 ef       	ldi	r20, 0xF0	; 240
    124a:	51 e4       	ldi	r21, 0x41	; 65
    124c:	c5 01       	movw	r24, r10
    124e:	b4 01       	movw	r22, r8
    1250:	0e 94 63 14 	call	0x28c6	; 0x28c6 <__cmpsf2>
    1254:	88 23       	and	r24, r24
    1256:	0c f4       	brge	.+2      	; 0x125a <PowerStateCheck+0x2f8>
    1258:	95 c0       	rjmp	.+298    	; 0x1384 <PowerStateCheck+0x422>
			return 17;
		}//end else if
		else if(temp >= 0 && temp < 15){
    125a:	20 e0       	ldi	r18, 0x00	; 0
    125c:	30 e0       	ldi	r19, 0x00	; 0
    125e:	a9 01       	movw	r20, r18
    1260:	c5 01       	movw	r24, r10
    1262:	b4 01       	movw	r22, r8
    1264:	0e 94 b2 15 	call	0x2b64	; 0x2b64 <__gesf2>
    1268:	88 23       	and	r24, r24
    126a:	0c f4       	brge	.+2      	; 0x126e <PowerStateCheck+0x30c>
    126c:	8e c0       	rjmp	.+284    	; 0x138a <PowerStateCheck+0x428>
    126e:	20 e0       	ldi	r18, 0x00	; 0
    1270:	30 e0       	ldi	r19, 0x00	; 0
    1272:	40 e7       	ldi	r20, 0x70	; 112
    1274:	51 e4       	ldi	r21, 0x41	; 65
    1276:	c5 01       	movw	r24, r10
    1278:	b4 01       	movw	r22, r8
    127a:	0e 94 63 14 	call	0x28c6	; 0x28c6 <__cmpsf2>
			return 16;
		}//end else if
		else{
			return 15;
    127e:	08 2e       	mov	r0, r24
    1280:	00 0c       	add	r0, r0
    1282:	99 0b       	sbc	r25, r25
    1284:	88 27       	eor	r24, r24
    1286:	99 0f       	add	r25, r25
    1288:	88 1f       	adc	r24, r24
    128a:	99 27       	eor	r25, r25
    128c:	0f 96       	adiw	r24, 0x0f	; 15
    128e:	98 c0       	rjmp	.+304    	; 0x13c0 <PowerStateCheck+0x45e>
		}//end else
	}//end if SOC < 80
	else {
		if(temp >= 40){
    1290:	20 e0       	ldi	r18, 0x00	; 0
    1292:	30 e0       	ldi	r19, 0x00	; 0
    1294:	40 e2       	ldi	r20, 0x20	; 32
    1296:	52 e4       	ldi	r21, 0x42	; 66
    1298:	c5 01       	movw	r24, r10
    129a:	b4 01       	movw	r22, r8
    129c:	0e 94 b2 15 	call	0x2b64	; 0x2b64 <__gesf2>
    12a0:	88 23       	and	r24, r24
    12a2:	0c f0       	brlt	.+2      	; 0x12a6 <PowerStateCheck+0x344>
    12a4:	75 c0       	rjmp	.+234    	; 0x1390 <PowerStateCheck+0x42e>
			return 24;
		}//end else if
		else if(temp >= 30 && temp < 40){
    12a6:	20 e0       	ldi	r18, 0x00	; 0
    12a8:	30 e0       	ldi	r19, 0x00	; 0
    12aa:	40 ef       	ldi	r20, 0xF0	; 240
    12ac:	51 e4       	ldi	r21, 0x41	; 65
    12ae:	c5 01       	movw	r24, r10
    12b0:	b4 01       	movw	r22, r8
    12b2:	0e 94 b2 15 	call	0x2b64	; 0x2b64 <__gesf2>
    12b6:	88 23       	and	r24, r24
    12b8:	5c f0       	brlt	.+22     	; 0x12d0 <PowerStateCheck+0x36e>
    12ba:	20 e0       	ldi	r18, 0x00	; 0
    12bc:	30 e0       	ldi	r19, 0x00	; 0
    12be:	40 e2       	ldi	r20, 0x20	; 32
    12c0:	52 e4       	ldi	r21, 0x42	; 66
    12c2:	c5 01       	movw	r24, r10
    12c4:	b4 01       	movw	r22, r8
    12c6:	0e 94 63 14 	call	0x28c6	; 0x28c6 <__cmpsf2>
    12ca:	88 23       	and	r24, r24
    12cc:	0c f4       	brge	.+2      	; 0x12d0 <PowerStateCheck+0x36e>
    12ce:	63 c0       	rjmp	.+198    	; 0x1396 <PowerStateCheck+0x434>
			return 23;
		}//end else if
		else if(temp >= 15 && temp < 30){
    12d0:	20 e0       	ldi	r18, 0x00	; 0
    12d2:	30 e0       	ldi	r19, 0x00	; 0
    12d4:	40 e7       	ldi	r20, 0x70	; 112
    12d6:	51 e4       	ldi	r21, 0x41	; 65
    12d8:	c5 01       	movw	r24, r10
    12da:	b4 01       	movw	r22, r8
    12dc:	0e 94 b2 15 	call	0x2b64	; 0x2b64 <__gesf2>
    12e0:	88 23       	and	r24, r24
    12e2:	5c f0       	brlt	.+22     	; 0x12fa <PowerStateCheck+0x398>
    12e4:	20 e0       	ldi	r18, 0x00	; 0
    12e6:	30 e0       	ldi	r19, 0x00	; 0
    12e8:	40 ef       	ldi	r20, 0xF0	; 240
    12ea:	51 e4       	ldi	r21, 0x41	; 65
    12ec:	c5 01       	movw	r24, r10
    12ee:	b4 01       	movw	r22, r8
    12f0:	0e 94 63 14 	call	0x28c6	; 0x28c6 <__cmpsf2>
    12f4:	88 23       	and	r24, r24
    12f6:	0c f4       	brge	.+2      	; 0x12fa <PowerStateCheck+0x398>
    12f8:	51 c0       	rjmp	.+162    	; 0x139c <PowerStateCheck+0x43a>
			return 22;
		}//end else if
		else if(temp >= 0 && temp < 15){
    12fa:	20 e0       	ldi	r18, 0x00	; 0
    12fc:	30 e0       	ldi	r19, 0x00	; 0
    12fe:	a9 01       	movw	r20, r18
    1300:	c5 01       	movw	r24, r10
    1302:	b4 01       	movw	r22, r8
    1304:	0e 94 b2 15 	call	0x2b64	; 0x2b64 <__gesf2>
    1308:	88 23       	and	r24, r24
    130a:	0c f4       	brge	.+2      	; 0x130e <PowerStateCheck+0x3ac>
    130c:	4a c0       	rjmp	.+148    	; 0x13a2 <PowerStateCheck+0x440>
    130e:	20 e0       	ldi	r18, 0x00	; 0
    1310:	30 e0       	ldi	r19, 0x00	; 0
    1312:	40 e7       	ldi	r20, 0x70	; 112
    1314:	51 e4       	ldi	r21, 0x41	; 65
    1316:	c5 01       	movw	r24, r10
    1318:	b4 01       	movw	r22, r8
    131a:	0e 94 63 14 	call	0x28c6	; 0x28c6 <__cmpsf2>
			return 21;
		}//end else if
		else{
			return 20;
    131e:	08 2e       	mov	r0, r24
    1320:	00 0c       	add	r0, r0
    1322:	99 0b       	sbc	r25, r25
    1324:	88 27       	eor	r24, r24
    1326:	99 0f       	add	r25, r25
    1328:	88 1f       	adc	r24, r24
    132a:	99 27       	eor	r25, r25
    132c:	44 96       	adiw	r24, 0x14	; 20
    132e:	48 c0       	rjmp	.+144    	; 0x13c0 <PowerStateCheck+0x45e>
/*========================================================================================*/

int PowerStateCheck(float SOC, float temp){
	if(SOC < 20){
		if(temp >= 40){
			return 4;
    1330:	84 e0       	ldi	r24, 0x04	; 4
    1332:	90 e0       	ldi	r25, 0x00	; 0
    1334:	45 c0       	rjmp	.+138    	; 0x13c0 <PowerStateCheck+0x45e>
		}//end else if
		else if(temp >= 30 && temp < 40){
			return 3;
    1336:	83 e0       	ldi	r24, 0x03	; 3
    1338:	90 e0       	ldi	r25, 0x00	; 0
    133a:	42 c0       	rjmp	.+132    	; 0x13c0 <PowerStateCheck+0x45e>
		}//end else if
		else if(temp >= 15 && temp < 30){
			return 2;
    133c:	82 e0       	ldi	r24, 0x02	; 2
    133e:	90 e0       	ldi	r25, 0x00	; 0
    1340:	3f c0       	rjmp	.+126    	; 0x13c0 <PowerStateCheck+0x45e>
		}//end else if
		else if(temp >= 0 && temp < 15){
			return 1;
		}//end else if
		else{
			return 0;
    1342:	80 e0       	ldi	r24, 0x00	; 0
    1344:	90 e0       	ldi	r25, 0x00	; 0
    1346:	3c c0       	rjmp	.+120    	; 0x13c0 <PowerStateCheck+0x45e>
		}//end else
	}//end if SOC < 20
	else if(SOC < 40 && SOC >= 20){
		if(temp >= 40){
			return 9;
    1348:	89 e0       	ldi	r24, 0x09	; 9
    134a:	90 e0       	ldi	r25, 0x00	; 0
    134c:	39 c0       	rjmp	.+114    	; 0x13c0 <PowerStateCheck+0x45e>
		}//end else if
		else if(temp >= 30 && temp < 40){
			return 8;
    134e:	88 e0       	ldi	r24, 0x08	; 8
    1350:	90 e0       	ldi	r25, 0x00	; 0
    1352:	36 c0       	rjmp	.+108    	; 0x13c0 <PowerStateCheck+0x45e>
		}//end else if
		else if(temp >= 15 && temp < 30){
			return 7;
    1354:	87 e0       	ldi	r24, 0x07	; 7
    1356:	90 e0       	ldi	r25, 0x00	; 0
    1358:	33 c0       	rjmp	.+102    	; 0x13c0 <PowerStateCheck+0x45e>
		}//end else if
		else if(temp >= 0 && temp < 15){
			return 6;
		}//end else if
		else{
			return 5;
    135a:	85 e0       	ldi	r24, 0x05	; 5
    135c:	90 e0       	ldi	r25, 0x00	; 0
    135e:	30 c0       	rjmp	.+96     	; 0x13c0 <PowerStateCheck+0x45e>
		}//end else
	}//end else if SOC < 40
	else if(SOC < 60 && SOC >= 40){
		if(temp >= 40){
			return 14;
    1360:	8e e0       	ldi	r24, 0x0E	; 14
    1362:	90 e0       	ldi	r25, 0x00	; 0
    1364:	2d c0       	rjmp	.+90     	; 0x13c0 <PowerStateCheck+0x45e>
		}//end else if
		else if(temp >= 30 && temp < 40){
			return 13;
    1366:	8d e0       	ldi	r24, 0x0D	; 13
    1368:	90 e0       	ldi	r25, 0x00	; 0
    136a:	2a c0       	rjmp	.+84     	; 0x13c0 <PowerStateCheck+0x45e>
		}//end else if
		else if(temp >= 15 && temp < 30){
			return 12;
    136c:	8c e0       	ldi	r24, 0x0C	; 12
    136e:	90 e0       	ldi	r25, 0x00	; 0
    1370:	27 c0       	rjmp	.+78     	; 0x13c0 <PowerStateCheck+0x45e>
		}//end else if
		else if(temp >= 0 && temp < 15){
			return 11;
		}//end else if
		else{
			return 10;
    1372:	8a e0       	ldi	r24, 0x0A	; 10
    1374:	90 e0       	ldi	r25, 0x00	; 0
    1376:	24 c0       	rjmp	.+72     	; 0x13c0 <PowerStateCheck+0x45e>
		}//end else
	}//end if SOC < 60
	else if(SOC < 80 && SOC <= 60){
		if(temp >= 40){
			return 19;
    1378:	83 e1       	ldi	r24, 0x13	; 19
    137a:	90 e0       	ldi	r25, 0x00	; 0
    137c:	21 c0       	rjmp	.+66     	; 0x13c0 <PowerStateCheck+0x45e>
		}//end else if
		else if(temp >= 30 && temp < 40){
			return 18;
    137e:	82 e1       	ldi	r24, 0x12	; 18
    1380:	90 e0       	ldi	r25, 0x00	; 0
    1382:	1e c0       	rjmp	.+60     	; 0x13c0 <PowerStateCheck+0x45e>
		}//end else if
		else if(temp >= 15 && temp < 30){
			return 17;
    1384:	81 e1       	ldi	r24, 0x11	; 17
    1386:	90 e0       	ldi	r25, 0x00	; 0
    1388:	1b c0       	rjmp	.+54     	; 0x13c0 <PowerStateCheck+0x45e>
		}//end else if
		else if(temp >= 0 && temp < 15){
			return 16;
		}//end else if
		else{
			return 15;
    138a:	8f e0       	ldi	r24, 0x0F	; 15
    138c:	90 e0       	ldi	r25, 0x00	; 0
    138e:	18 c0       	rjmp	.+48     	; 0x13c0 <PowerStateCheck+0x45e>
		}//end else
	}//end if SOC < 80
	else {
		if(temp >= 40){
			return 24;
    1390:	88 e1       	ldi	r24, 0x18	; 24
    1392:	90 e0       	ldi	r25, 0x00	; 0
    1394:	15 c0       	rjmp	.+42     	; 0x13c0 <PowerStateCheck+0x45e>
		}//end else if
		else if(temp >= 30 && temp < 40){
			return 23;
    1396:	87 e1       	ldi	r24, 0x17	; 23
    1398:	90 e0       	ldi	r25, 0x00	; 0
    139a:	12 c0       	rjmp	.+36     	; 0x13c0 <PowerStateCheck+0x45e>
		}//end else if
		else if(temp >= 15 && temp < 30){
			return 22;
    139c:	86 e1       	ldi	r24, 0x16	; 22
    139e:	90 e0       	ldi	r25, 0x00	; 0
    13a0:	0f c0       	rjmp	.+30     	; 0x13c0 <PowerStateCheck+0x45e>
		}//end else if
		else if(temp >= 0 && temp < 15){
			return 21;
		}//end else if
		else{
			return 20;
    13a2:	84 e1       	ldi	r24, 0x14	; 20
    13a4:	90 e0       	ldi	r25, 0x00	; 0
    13a6:	0c c0       	rjmp	.+24     	; 0x13c0 <PowerStateCheck+0x45e>
		}//end else if
		else{
			return 10;
		}//end else
	}//end if SOC < 60
	else if(SOC < 80 && SOC <= 60){
    13a8:	20 e0       	ldi	r18, 0x00	; 0
    13aa:	30 e0       	ldi	r19, 0x00	; 0
    13ac:	40 ea       	ldi	r20, 0xA0	; 160
    13ae:	52 e4       	ldi	r21, 0x42	; 66
    13b0:	c7 01       	movw	r24, r14
    13b2:	b6 01       	movw	r22, r12
    13b4:	0e 94 63 14 	call	0x28c6	; 0x28c6 <__cmpsf2>
    13b8:	88 23       	and	r24, r24
    13ba:	0c f4       	brge	.+2      	; 0x13be <PowerStateCheck+0x45c>
    13bc:	19 cf       	rjmp	.-462    	; 0x11f0 <PowerStateCheck+0x28e>
    13be:	68 cf       	rjmp	.-304    	; 0x1290 <PowerStateCheck+0x32e>
		}//end else if
		else{
			return 20;
		}//end else
	}//end else SOC > 80
}//end PowerStateCheck
    13c0:	cf 91       	pop	r28
    13c2:	ff 90       	pop	r15
    13c4:	ef 90       	pop	r14
    13c6:	df 90       	pop	r13
    13c8:	cf 90       	pop	r12
    13ca:	bf 90       	pop	r11
    13cc:	af 90       	pop	r10
    13ce:	9f 90       	pop	r9
    13d0:	8f 90       	pop	r8
    13d2:	08 95       	ret

000013d4 <Update_STATE>:
// Date: 2019-03-25
// Description: Updates to the state to character array form for ease of use as it is
//				impossbile to read individual bits in a unsigned integer.
/*========================================================================================*/

void Update_STATE(char* power, uint8_t state){
    13d4:	fc 01       	movw	r30, r24
    13d6:	ac 01       	movw	r20, r24
    13d8:	48 5f       	subi	r20, 0xF8	; 248
    13da:	5f 4f       	sbci	r21, 0xFF	; 255
	power[6] => SBand   Power
	power[7] => UHF     Power	
	*/
	
	// 8 bit mask to check the state of each position
	uint8_t mask = 0x01;
    13dc:	91 e0       	ldi	r25, 0x01	; 1
		if (mask & state){
			power[i] = 'y';
			mask = mask << 1; // shift left once
		}
		else{
			power[i] = 'n';
    13de:	3e e6       	ldi	r19, 0x6E	; 110
	uint8_t mask = 0x01;
	// keep track of the first index
	
	while(i < 8){
		if (mask & state){
			power[i] = 'y';
    13e0:	89 e7       	ldi	r24, 0x79	; 121
	// 8 bit mask to check the state of each position
	uint8_t mask = 0x01;
	// keep track of the first index
	
	while(i < 8){
		if (mask & state){
    13e2:	26 2f       	mov	r18, r22
    13e4:	29 23       	and	r18, r25
    13e6:	19 f0       	breq	.+6      	; 0x13ee <Update_STATE+0x1a>
			power[i] = 'y';
    13e8:	80 83       	st	Z, r24
			mask = mask << 1; // shift left once
    13ea:	99 0f       	add	r25, r25
    13ec:	02 c0       	rjmp	.+4      	; 0x13f2 <Update_STATE+0x1e>
		}
		else{
			power[i] = 'n';
    13ee:	30 83       	st	Z, r19
			mask = mask << 1; // shift left once
    13f0:	99 0f       	add	r25, r25
    13f2:	31 96       	adiw	r30, 0x01	; 1
	
	// 8 bit mask to check the state of each position
	uint8_t mask = 0x01;
	// keep track of the first index
	
	while(i < 8){
    13f4:	e4 17       	cp	r30, r20
    13f6:	f5 07       	cpc	r31, r21
    13f8:	a1 f7       	brne	.-24     	; 0x13e2 <Update_STATE+0xe>
			power[i] = 'n';
			mask = mask << 1; // shift left once
		}
		i++;
	}
}
    13fa:	08 95       	ret

000013fc <Manual_STATE>:
// Date: 2019-03-27
// Description: Converts the power state from array of characters to an unsigned integer.
//				Unsigned integers are used instead of character arrays for speed.
/*========================================================================================*/

void Manual_STATE(char* power, uint8_t* power_state){
    13fc:	db 01       	movw	r26, r22
    13fe:	fc 01       	movw	r30, r24
    1400:	ac 01       	movw	r20, r24
    1402:	48 5f       	subi	r20, 0xF8	; 248
    1404:	5f 4f       	sbci	r21, 0xFF	; 255
	// String Index
	int i = 0;
	
	// 8 bit mask to check the state of each position
	uint8_t mask = 0x01;
	uint8_t new_mask = 0xff;
    1406:	3f ef       	ldi	r19, 0xFF	; 255
	
	// String Index
	int i = 0;
	
	// 8 bit mask to check the state of each position
	uint8_t mask = 0x01;
    1408:	91 e0       	ldi	r25, 0x01	; 1
	uint8_t new_mask = 0xff;
	// keep track of the first index
	
	while(i < 8){
		if (power[i] == 'y'){
    140a:	21 91       	ld	r18, Z+
    140c:	29 37       	cpi	r18, 0x79	; 121
    140e:	29 f4       	brne	.+10     	; 0x141a <Manual_STATE+0x1e>
			power_state[0] |= mask;
    1410:	8c 91       	ld	r24, X
    1412:	89 2b       	or	r24, r25
    1414:	8c 93       	st	X, r24
			mask = mask << 1; // shift left once
    1416:	99 0f       	add	r25, r25
    1418:	05 c0       	rjmp	.+10     	; 0x1424 <Manual_STATE+0x28>
		}
		else{
			new_mask ^= mask;
    141a:	39 27       	eor	r19, r25
			power_state[0] &= new_mask;
    141c:	2c 91       	ld	r18, X
    141e:	23 23       	and	r18, r19
    1420:	2c 93       	st	X, r18
			mask = mask << 1; // shift left once
    1422:	99 0f       	add	r25, r25
	// 8 bit mask to check the state of each position
	uint8_t mask = 0x01;
	uint8_t new_mask = 0xff;
	// keep track of the first index
	
	while(i < 8){
    1424:	e4 17       	cp	r30, r20
    1426:	f5 07       	cpc	r31, r21
    1428:	81 f7       	brne	.-32     	; 0x140a <Manual_STATE+0xe>
			power_state[0] &= new_mask;
			mask = mask << 1; // shift left once
		}
		i++;
	}
}
    142a:	08 95       	ret

0000142c <pwrMatChange>:
// Author: Chris Thomas
// Date: 2019-03-27
// Description: Converts the power state from array of characters to an unsigned integer.
/*========================================================================================*/

void pwrMatChange(uint8_t* edit_num, char* power, uint8_t* pwrMat){
    142c:	cf 93       	push	r28
    142e:	df 93       	push	r29
    1430:	ec 01       	movw	r28, r24
    1432:	fb 01       	movw	r30, r22
    1434:	68 5f       	subi	r22, 0xF8	; 248
    1436:	7f 4f       	sbci	r23, 0xFF	; 255
	// String Index
	int i = 0;
	
	// 8 bit mask to check the state of each position
	uint8_t mask = 0x01;
	uint8_t new_mask = 0xff;
    1438:	3f ef       	ldi	r19, 0xFF	; 255
	
	// String Index
	int i = 0;
	
	// 8 bit mask to check the state of each position
	uint8_t mask = 0x01;
    143a:	91 e0       	ldi	r25, 0x01	; 1
	uint8_t new_mask = 0xff;
	// keep track of the first index
	
	while(i < 8){
		if (power[i] == 'y'){
    143c:	21 91       	ld	r18, Z+
    143e:	29 37       	cpi	r18, 0x79	; 121
    1440:	49 f4       	brne	.+18     	; 0x1454 <pwrMatChange+0x28>
			pwrMat[edit_num[0]] |= mask;
    1442:	88 81       	ld	r24, Y
    1444:	da 01       	movw	r26, r20
    1446:	a8 0f       	add	r26, r24
    1448:	b1 1d       	adc	r27, r1
    144a:	8c 91       	ld	r24, X
    144c:	89 2b       	or	r24, r25
    144e:	8c 93       	st	X, r24
			mask = mask << 1; // shift left once
    1450:	99 0f       	add	r25, r25
    1452:	09 c0       	rjmp	.+18     	; 0x1466 <pwrMatChange+0x3a>
		}
		else{
			new_mask ^= mask;
    1454:	39 27       	eor	r19, r25
			pwrMat[edit_num[0]] &= new_mask;
    1456:	28 81       	ld	r18, Y
    1458:	da 01       	movw	r26, r20
    145a:	a2 0f       	add	r26, r18
    145c:	b1 1d       	adc	r27, r1
    145e:	2c 91       	ld	r18, X
    1460:	23 23       	and	r18, r19
    1462:	2c 93       	st	X, r18
			mask = mask << 1; // shift left once
    1464:	99 0f       	add	r25, r25
	// 8 bit mask to check the state of each position
	uint8_t mask = 0x01;
	uint8_t new_mask = 0xff;
	// keep track of the first index
	
	while(i < 8){
    1466:	e6 17       	cp	r30, r22
    1468:	f7 07       	cpc	r31, r23
    146a:	41 f7       	brne	.-48     	; 0x143c <pwrMatChange+0x10>
			mask = mask << 1; // shift left once
		}
		i++;
	}
	
}
    146c:	df 91       	pop	r29
    146e:	cf 91       	pop	r28
    1470:	08 95       	ret

00001472 <pwrMatEdit>:
// Date: 2019-03-27
// Description: Changes the power state in the power state matrix and prints the 
//				associated input prompts.
/*========================================================================================*/

void pwrMatEdit(uint8_t* edit_num , char* power, uint8_t* pwrMat){
    1472:	ef 92       	push	r14
    1474:	ff 92       	push	r15
    1476:	0f 93       	push	r16
    1478:	1f 93       	push	r17
    147a:	cf 93       	push	r28
    147c:	df 93       	push	r29
    147e:	ec 01       	movw	r28, r24
    1480:	8b 01       	movw	r16, r22
    1482:	7a 01       	movw	r14, r20
	
	// Get user input
	edit_num[0] = 0;
    1484:	18 82       	st	Y, r1
	UART0_putstring("Enter the power state number to be changed");
    1486:	88 e8       	ldi	r24, 0x88	; 136
    1488:	96 e0       	ldi	r25, 0x06	; 6
    148a:	1c d7       	rcall	.+3640   	; 0x22c4 <UART0_putstring>
	UART0_putchar('\n');
    148c:	8a e0       	ldi	r24, 0x0A	; 10
    148e:	0a d7       	rcall	.+3604   	; 0x22a4 <UART0_putchar>
	UART0_putchar('\n');
    1490:	8a e0       	ldi	r24, 0x0A	; 10
    1492:	08 d7       	rcall	.+3600   	; 0x22a4 <UART0_putchar>
	UART0_putchar('\r');
    1494:	8d e0       	ldi	r24, 0x0D	; 13
    1496:	06 d7       	rcall	.+3596   	; 0x22a4 <UART0_putchar>
	UART0_putstring("> ");
    1498:	87 e4       	ldi	r24, 0x47	; 71
    149a:	97 e0       	ldi	r25, 0x07	; 7
    149c:	13 d7       	rcall	.+3622   	; 0x22c4 <UART0_putstring>
    149e:	0a d7       	rcall	.+3604   	; 0x22b4 <UART0_getchar>
	edit_num[0] += (UART0_getchar() - 0x30) * 10; // multiply first digit
    14a0:	08 2e       	mov	r0, r24
    14a2:	00 0c       	add	r0, r0
    14a4:	99 0b       	sbc	r25, r25
    14a6:	c0 97       	sbiw	r24, 0x30	; 48
    14a8:	9c 01       	movw	r18, r24
    14aa:	22 0f       	add	r18, r18
    14ac:	33 1f       	adc	r19, r19
    14ae:	88 0f       	add	r24, r24
    14b0:	99 1f       	adc	r25, r25
    14b2:	88 0f       	add	r24, r24
    14b4:	99 1f       	adc	r25, r25
    14b6:	88 0f       	add	r24, r24
    14b8:	99 1f       	adc	r25, r25
    14ba:	82 0f       	add	r24, r18
    14bc:	93 1f       	adc	r25, r19
    14be:	98 81       	ld	r25, Y
    14c0:	89 0f       	add	r24, r25
    14c2:	88 83       	st	Y, r24
    14c4:	f7 d6       	rcall	.+3566   	; 0x22b4 <UART0_getchar>
	edit_num[0] += UART0_getchar() - 0x30; // do nothing to last digit
    14c6:	08 2e       	mov	r0, r24
    14c8:	00 0c       	add	r0, r0
    14ca:	99 0b       	sbc	r25, r25
    14cc:	c0 97       	sbiw	r24, 0x30	; 48
    14ce:	98 81       	ld	r25, Y
    14d0:	89 0f       	add	r24, r25
    14d2:	88 83       	st	Y, r24
	UART0_putchar('\n');
    14d4:	8a e0       	ldi	r24, 0x0A	; 10
    14d6:	e6 d6       	rcall	.+3532   	; 0x22a4 <UART0_putchar>
	UART0_putchar('\n');
    14d8:	8a e0       	ldi	r24, 0x0A	; 10
    14da:	e4 d6       	rcall	.+3528   	; 0x22a4 <UART0_putchar>
	UART0_putchar('\r');
    14dc:	8d e0       	ldi	r24, 0x0D	; 13
    14de:	e2 d6       	rcall	.+3524   	; 0x22a4 <UART0_putchar>
	UART0_putstring("Enter the new state in character form (y/n): ");
    14e0:	83 eb       	ldi	r24, 0xB3	; 179
    14e2:	96 e0       	ldi	r25, 0x06	; 6
    14e4:	ef d6       	rcall	.+3550   	; 0x22c4 <UART0_putstring>
	UART0_putchar('\n');
    14e6:	8a e0       	ldi	r24, 0x0A	; 10
    14e8:	dd d6       	rcall	.+3514   	; 0x22a4 <UART0_putchar>
    14ea:	8a e0       	ldi	r24, 0x0A	; 10
	UART0_putchar('\n');
    14ec:	db d6       	rcall	.+3510   	; 0x22a4 <UART0_putchar>
    14ee:	8d e0       	ldi	r24, 0x0D	; 13
	UART0_putchar('\r');
    14f0:	d9 d6       	rcall	.+3506   	; 0x22a4 <UART0_putchar>
    14f2:	87 e4       	ldi	r24, 0x47	; 71
	UART0_putstring("> ");
    14f4:	97 e0       	ldi	r25, 0x07	; 7
    14f6:	e6 d6       	rcall	.+3532   	; 0x22c4 <UART0_putstring>
    14f8:	c8 01       	movw	r24, r16
	UART0_getstring(power); // get the new state in string form
    14fa:	f2 d6       	rcall	.+3556   	; 0x22e0 <UART0_getstring>
    14fc:	a7 01       	movw	r20, r14
    14fe:	b8 01       	movw	r22, r16
	pwrMatChange(edit_num, power, pwrMat);
    1500:	ce 01       	movw	r24, r28
    1502:	94 df       	rcall	.-216    	; 0x142c <pwrMatChange>
    1504:	8a e0       	ldi	r24, 0x0A	; 10
    1506:	ce d6       	rcall	.+3484   	; 0x22a4 <UART0_putchar>
    1508:	8a e0       	ldi	r24, 0x0A	; 10
	UART0_putchar('\n');
    150a:	cc d6       	rcall	.+3480   	; 0x22a4 <UART0_putchar>
    150c:	8d e0       	ldi	r24, 0x0D	; 13
    150e:	ca d6       	rcall	.+3476   	; 0x22a4 <UART0_putchar>
	UART0_putchar('\n');
    1510:	df 91       	pop	r29
    1512:	cf 91       	pop	r28
    1514:	1f 91       	pop	r17
	UART0_putchar('\r');
    1516:	0f 91       	pop	r16
    1518:	ff 90       	pop	r15
    151a:	ef 90       	pop	r14
    151c:	08 95       	ret

0000151e <EEPROM_Write>:
/*========================================================================================*/

void EEPROM_Write(uint8_t launch_bits, uint16_t address){
	
	// Wait for previous read/write cycle to be finished
	while(EECR & 0x02);
    151e:	f9 99       	sbic	0x1f, 1	; 31
    1520:	fe cf       	rjmp	.-4      	; 0x151e <EEPROM_Write>
	
	// Select EEPROM Address (first address)
	EEAR = address; // first address
    1522:	72 bd       	out	0x22, r23	; 34
    1524:	61 bd       	out	0x21, r22	; 33
	
	// Write to data Register
	EEDR = launch_bits;
    1526:	80 bd       	out	0x20, r24	; 32
	
	// Master Write Enable
	EECR = 0x04;
    1528:	84 e0       	ldi	r24, 0x04	; 4
    152a:	8f bb       	out	0x1f, r24	; 31
	
	// Write Enable
	EECR = 0x02;
    152c:	82 e0       	ldi	r24, 0x02	; 2
    152e:	8f bb       	out	0x1f, r24	; 31
    1530:	08 95       	ret

00001532 <EEPROM_Read>:
/*========================================================================================*/

uint8_t EEPROM_Read(uint16_t address){
	
	// Wait for previous read/write cycle to be finished
	while(EECR & 0x02);
    1532:	f9 99       	sbic	0x1f, 1	; 31
    1534:	fe cf       	rjmp	.-4      	; 0x1532 <EEPROM_Read>
	
	// Select EEPROM Address (first address)
	EEAR = address;
    1536:	92 bd       	out	0x22, r25	; 34
    1538:	81 bd       	out	0x21, r24	; 33
	
	// Read Enable
	EECR = 0x01;
    153a:	81 e0       	ldi	r24, 0x01	; 1
    153c:	8f bb       	out	0x1f, r24	; 31
	
	return EEDR;
    153e:	80 b5       	in	r24, 0x20	; 32
	
}
    1540:	08 95       	ret

00001542 <Set_GPIO>:
void Set_GPIO(int gpio_num){
	
	int gpio = 0x01; // initialize gpio selection to bit 0
	
	// PORT H
	if (gpio_num < 7){
    1542:	87 30       	cpi	r24, 0x07	; 7
    1544:	91 05       	cpc	r25, r1
    1546:	7c f4       	brge	.+30     	; 0x1566 <Set_GPIO+0x24>
		gpio = gpio << gpio_num; // shift to correct bit
		PORTH |= gpio; // set selected pin high
    1548:	e2 e0       	ldi	r30, 0x02	; 2
    154a:	f1 e0       	ldi	r31, 0x01	; 1
    154c:	40 81       	ld	r20, Z
    154e:	21 e0       	ldi	r18, 0x01	; 1
    1550:	30 e0       	ldi	r19, 0x00	; 0
    1552:	b9 01       	movw	r22, r18
    1554:	02 c0       	rjmp	.+4      	; 0x155a <Set_GPIO+0x18>
    1556:	66 0f       	add	r22, r22
    1558:	77 1f       	adc	r23, r23
    155a:	8a 95       	dec	r24
    155c:	e2 f7       	brpl	.-8      	; 0x1556 <Set_GPIO+0x14>
    155e:	cb 01       	movw	r24, r22
    1560:	84 2b       	or	r24, r20
    1562:	80 83       	st	Z, r24
    1564:	08 95       	ret
	}
	// PORT L
	else if (gpio_num >= 7 && gpio_num < 10){
    1566:	9c 01       	movw	r18, r24
    1568:	27 50       	subi	r18, 0x07	; 7
    156a:	31 09       	sbc	r19, r1
    156c:	23 30       	cpi	r18, 0x03	; 3
    156e:	31 05       	cpc	r19, r1
    1570:	80 f4       	brcc	.+32     	; 0x1592 <Set_GPIO+0x50>
		gpio = gpio << (gpio_num - 6); // shift to correct bit
		PORTL |= gpio; // set selected pin high
    1572:	eb e0       	ldi	r30, 0x0B	; 11
    1574:	f1 e0       	ldi	r31, 0x01	; 1
    1576:	40 81       	ld	r20, Z
    1578:	06 97       	sbiw	r24, 0x06	; 6
    157a:	21 e0       	ldi	r18, 0x01	; 1
    157c:	30 e0       	ldi	r19, 0x00	; 0
    157e:	b9 01       	movw	r22, r18
    1580:	02 c0       	rjmp	.+4      	; 0x1586 <Set_GPIO+0x44>
    1582:	66 0f       	add	r22, r22
    1584:	77 1f       	adc	r23, r23
    1586:	8a 95       	dec	r24
    1588:	e2 f7       	brpl	.-8      	; 0x1582 <Set_GPIO+0x40>
    158a:	cb 01       	movw	r24, r22
    158c:	84 2b       	or	r24, r20
    158e:	80 83       	st	Z, r24
    1590:	08 95       	ret
	}
	// PORT A
	else if(gpio_num >= 10 && gpio_num < 14){
    1592:	9c 01       	movw	r18, r24
    1594:	2a 50       	subi	r18, 0x0A	; 10
    1596:	31 09       	sbc	r19, r1
    1598:	24 30       	cpi	r18, 0x04	; 4
    159a:	31 05       	cpc	r19, r1
    159c:	70 f4       	brcc	.+28     	; 0x15ba <Set_GPIO+0x78>
		gpio = gpio << (gpio_num - 6); // shift to correct bit
		PORTA |= gpio; // set selected pin high
    159e:	42 b1       	in	r20, 0x02	; 2
    15a0:	06 97       	sbiw	r24, 0x06	; 6
    15a2:	21 e0       	ldi	r18, 0x01	; 1
    15a4:	30 e0       	ldi	r19, 0x00	; 0
    15a6:	b9 01       	movw	r22, r18
    15a8:	02 c0       	rjmp	.+4      	; 0x15ae <Set_GPIO+0x6c>
    15aa:	66 0f       	add	r22, r22
    15ac:	77 1f       	adc	r23, r23
    15ae:	8a 95       	dec	r24
    15b0:	e2 f7       	brpl	.-8      	; 0x15aa <Set_GPIO+0x68>
    15b2:	cb 01       	movw	r24, r22
    15b4:	84 2b       	or	r24, r20
    15b6:	82 b9       	out	0x02, r24	; 2
    15b8:	08 95       	ret
	}
	// PORT J
	else if(gpio_num >= 14 && gpio_num < 21){
    15ba:	9c 01       	movw	r18, r24
    15bc:	2e 50       	subi	r18, 0x0E	; 14
    15be:	31 09       	sbc	r19, r1
    15c0:	27 30       	cpi	r18, 0x07	; 7
    15c2:	31 05       	cpc	r19, r1
    15c4:	80 f4       	brcc	.+32     	; 0x15e6 <Set_GPIO+0xa4>
		gpio = gpio << (gpio_num - 14); // shift to correct bit
		PORTJ |= gpio; // set selected pin high
    15c6:	e5 e0       	ldi	r30, 0x05	; 5
    15c8:	f1 e0       	ldi	r31, 0x01	; 1
    15ca:	40 81       	ld	r20, Z
    15cc:	c9 01       	movw	r24, r18
    15ce:	21 e0       	ldi	r18, 0x01	; 1
    15d0:	30 e0       	ldi	r19, 0x00	; 0
    15d2:	b9 01       	movw	r22, r18
    15d4:	02 c0       	rjmp	.+4      	; 0x15da <Set_GPIO+0x98>
    15d6:	66 0f       	add	r22, r22
    15d8:	77 1f       	adc	r23, r23
    15da:	8a 95       	dec	r24
    15dc:	e2 f7       	brpl	.-8      	; 0x15d6 <Set_GPIO+0x94>
    15de:	cb 01       	movw	r24, r22
    15e0:	84 2b       	or	r24, r20
    15e2:	80 83       	st	Z, r24
    15e4:	08 95       	ret
	}
	// PORT C
	else if (gpio_num >= 21 && gpio_num < 29){
    15e6:	9c 01       	movw	r18, r24
    15e8:	25 51       	subi	r18, 0x15	; 21
    15ea:	31 09       	sbc	r19, r1
    15ec:	28 30       	cpi	r18, 0x08	; 8
    15ee:	31 05       	cpc	r19, r1
    15f0:	68 f4       	brcc	.+26     	; 0x160c <Set_GPIO+0xca>
		gpio = gpio << (gpio_num - 21); // shift to correct bit
		PORTC |= gpio; // set selected pin high
    15f2:	48 b1       	in	r20, 0x08	; 8
    15f4:	c9 01       	movw	r24, r18
    15f6:	21 e0       	ldi	r18, 0x01	; 1
    15f8:	30 e0       	ldi	r19, 0x00	; 0
    15fa:	b9 01       	movw	r22, r18
    15fc:	02 c0       	rjmp	.+4      	; 0x1602 <Set_GPIO+0xc0>
    15fe:	66 0f       	add	r22, r22
    1600:	77 1f       	adc	r23, r23
    1602:	8a 95       	dec	r24
    1604:	e2 f7       	brpl	.-8      	; 0x15fe <Set_GPIO+0xbc>
    1606:	cb 01       	movw	r24, r22
    1608:	84 2b       	or	r24, r20
    160a:	88 b9       	out	0x08, r24	; 8
    160c:	08 95       	ret

0000160e <Clear_GPIO>:
	
	int gpio = 0x01; // initialize gpio selection to bit 0
	int gpio_mask = 0xFE; //gpio mask
	
	// PORT H
	if (gpio_num < 7){
    160e:	87 30       	cpi	r24, 0x07	; 7
    1610:	91 05       	cpc	r25, r1
    1612:	84 f4       	brge	.+32     	; 0x1634 <Clear_GPIO+0x26>
		gpio = gpio << gpio_num; // shift to correct bit
		PORTH &= (gpio^gpio_mask); // use mask to clear bit
    1614:	e2 e0       	ldi	r30, 0x02	; 2
    1616:	f1 e0       	ldi	r31, 0x01	; 1
    1618:	90 81       	ld	r25, Z
    161a:	41 e0       	ldi	r20, 0x01	; 1
    161c:	50 e0       	ldi	r21, 0x00	; 0
    161e:	02 c0       	rjmp	.+4      	; 0x1624 <Clear_GPIO+0x16>
    1620:	44 0f       	add	r20, r20
    1622:	55 1f       	adc	r21, r21
    1624:	8a 95       	dec	r24
    1626:	e2 f7       	brpl	.-8      	; 0x1620 <Clear_GPIO+0x12>
    1628:	2e ef       	ldi	r18, 0xFE	; 254
    162a:	84 2f       	mov	r24, r20
    162c:	82 27       	eor	r24, r18
    162e:	89 23       	and	r24, r25
    1630:	80 83       	st	Z, r24
    1632:	08 95       	ret
	}
	// PORT L
	else if (gpio_num >= 7 && gpio_num < 10){
    1634:	9c 01       	movw	r18, r24
    1636:	27 50       	subi	r18, 0x07	; 7
    1638:	31 09       	sbc	r19, r1
    163a:	23 30       	cpi	r18, 0x03	; 3
    163c:	31 05       	cpc	r19, r1
    163e:	90 f4       	brcc	.+36     	; 0x1664 <Clear_GPIO+0x56>
		gpio = gpio << (gpio_num - 6); // shift to correct bit
		PORTL &= (gpio^gpio_mask); // use mask to clear bit
    1640:	eb e0       	ldi	r30, 0x0B	; 11
    1642:	f1 e0       	ldi	r31, 0x01	; 1
    1644:	20 81       	ld	r18, Z
    1646:	ac 01       	movw	r20, r24
    1648:	46 50       	subi	r20, 0x06	; 6
    164a:	51 09       	sbc	r21, r1
    164c:	81 e0       	ldi	r24, 0x01	; 1
    164e:	90 e0       	ldi	r25, 0x00	; 0
    1650:	02 c0       	rjmp	.+4      	; 0x1656 <Clear_GPIO+0x48>
    1652:	88 0f       	add	r24, r24
    1654:	99 1f       	adc	r25, r25
    1656:	4a 95       	dec	r20
    1658:	e2 f7       	brpl	.-8      	; 0x1652 <Clear_GPIO+0x44>
    165a:	9e ef       	ldi	r25, 0xFE	; 254
    165c:	89 27       	eor	r24, r25
    165e:	82 23       	and	r24, r18
    1660:	80 83       	st	Z, r24
    1662:	08 95       	ret
	}
	// PORT A
	else if(gpio_num >= 10 && gpio_num < 14){
    1664:	9c 01       	movw	r18, r24
    1666:	2a 50       	subi	r18, 0x0A	; 10
    1668:	31 09       	sbc	r19, r1
    166a:	24 30       	cpi	r18, 0x04	; 4
    166c:	31 05       	cpc	r19, r1
    166e:	80 f4       	brcc	.+32     	; 0x1690 <Clear_GPIO+0x82>
		gpio = gpio << (gpio_num - 6); // shift to correct bit
		PORTA &= (gpio^gpio_mask); // use mask to clear bit
    1670:	22 b1       	in	r18, 0x02	; 2
    1672:	ac 01       	movw	r20, r24
    1674:	46 50       	subi	r20, 0x06	; 6
    1676:	51 09       	sbc	r21, r1
    1678:	81 e0       	ldi	r24, 0x01	; 1
    167a:	90 e0       	ldi	r25, 0x00	; 0
    167c:	02 c0       	rjmp	.+4      	; 0x1682 <Clear_GPIO+0x74>
    167e:	88 0f       	add	r24, r24
    1680:	99 1f       	adc	r25, r25
    1682:	4a 95       	dec	r20
    1684:	e2 f7       	brpl	.-8      	; 0x167e <Clear_GPIO+0x70>
    1686:	9e ef       	ldi	r25, 0xFE	; 254
    1688:	89 27       	eor	r24, r25
    168a:	82 23       	and	r24, r18
    168c:	82 b9       	out	0x02, r24	; 2
    168e:	08 95       	ret
	}
	// PORT J
	else if(gpio_num >= 14 && gpio_num < 21){
    1690:	9c 01       	movw	r18, r24
    1692:	2e 50       	subi	r18, 0x0E	; 14
    1694:	31 09       	sbc	r19, r1
    1696:	27 30       	cpi	r18, 0x07	; 7
    1698:	31 05       	cpc	r19, r1
    169a:	90 f4       	brcc	.+36     	; 0x16c0 <Clear_GPIO+0xb2>
		gpio = gpio << (gpio_num - 14); // shift to correct bit
		PORTJ &= (gpio^gpio_mask); // use mask to clear bit
    169c:	e5 e0       	ldi	r30, 0x05	; 5
    169e:	f1 e0       	ldi	r31, 0x01	; 1
    16a0:	20 81       	ld	r18, Z
    16a2:	ac 01       	movw	r20, r24
    16a4:	4e 50       	subi	r20, 0x0E	; 14
    16a6:	51 09       	sbc	r21, r1
    16a8:	81 e0       	ldi	r24, 0x01	; 1
    16aa:	90 e0       	ldi	r25, 0x00	; 0
    16ac:	02 c0       	rjmp	.+4      	; 0x16b2 <Clear_GPIO+0xa4>
    16ae:	88 0f       	add	r24, r24
    16b0:	99 1f       	adc	r25, r25
    16b2:	4a 95       	dec	r20
    16b4:	e2 f7       	brpl	.-8      	; 0x16ae <Clear_GPIO+0xa0>
    16b6:	9e ef       	ldi	r25, 0xFE	; 254
    16b8:	89 27       	eor	r24, r25
    16ba:	82 23       	and	r24, r18
    16bc:	80 83       	st	Z, r24
    16be:	08 95       	ret
	}
	// PORT C
	else if (gpio_num >= 21 && gpio_num < 29){
    16c0:	9c 01       	movw	r18, r24
    16c2:	25 51       	subi	r18, 0x15	; 21
    16c4:	31 09       	sbc	r19, r1
    16c6:	28 30       	cpi	r18, 0x08	; 8
    16c8:	31 05       	cpc	r19, r1
    16ca:	78 f4       	brcc	.+30     	; 0x16ea <Clear_GPIO+0xdc>
		gpio = gpio << (gpio_num - 21); // shift to correct bit
		PORTC &= (gpio^gpio_mask); // use mask to clear bit
    16cc:	28 b1       	in	r18, 0x08	; 8
    16ce:	45 97       	sbiw	r24, 0x15	; 21
    16d0:	41 e0       	ldi	r20, 0x01	; 1
    16d2:	50 e0       	ldi	r21, 0x00	; 0
    16d4:	ba 01       	movw	r22, r20
    16d6:	02 c0       	rjmp	.+4      	; 0x16dc <Clear_GPIO+0xce>
    16d8:	66 0f       	add	r22, r22
    16da:	77 1f       	adc	r23, r23
    16dc:	8a 95       	dec	r24
    16de:	e2 f7       	brpl	.-8      	; 0x16d8 <Clear_GPIO+0xca>
    16e0:	cb 01       	movw	r24, r22
    16e2:	9e ef       	ldi	r25, 0xFE	; 254
    16e4:	89 27       	eor	r24, r25
    16e6:	82 23       	and	r24, r18
    16e8:	88 b9       	out	0x08, r24	; 8
    16ea:	08 95       	ret

000016ec <Update_TELEM>:
// Author: Chris Thomas
// Date: 2019-02-03
// Description: Updates telemetry information for OBC. Voltage, current and temperature.
/*========================================================================================*/

void Update_TELEM(double* telem, uint8_t power_state){
    16ec:	1f 93       	push	r17
    16ee:	cf 93       	push	r28
    16f0:	df 93       	push	r29
    16f2:	ec 01       	movw	r28, r24
    16f4:	16 2f       	mov	r17, r22
	
	// Set 5V rail for readings (needed for current sensors)
	
	// RE-ENABLE FOR DEMOOOOOOOOOOO//////
	Enable_5V();
    16f6:	0a db       	rcall	.-2540   	; 0xd0c <Enable_5V>
	
	//Enable_5V();
	// ^^^^^^^^^^^
	
	// Ammeter measurements
	telem[0] = Amp_ADC(2); // 3V3-1 rail current
    16f8:	82 e0       	ldi	r24, 0x02	; 2
    16fa:	90 e0       	ldi	r25, 0x00	; 0
    16fc:	0e 94 a1 01 	call	0x342	; 0x342 <Amp_ADC>
    1700:	68 83       	st	Y, r22
    1702:	79 83       	std	Y+1, r23	; 0x01
    1704:	8a 83       	std	Y+2, r24	; 0x02
    1706:	9b 83       	std	Y+3, r25	; 0x03
	telem[1] = Amp_ADC(3); // 3V3-2 rail current
    1708:	83 e0       	ldi	r24, 0x03	; 3
    170a:	90 e0       	ldi	r25, 0x00	; 0
    170c:	0e 94 a1 01 	call	0x342	; 0x342 <Amp_ADC>
    1710:	6c 83       	std	Y+4, r22	; 0x04
    1712:	7d 83       	std	Y+5, r23	; 0x05
    1714:	8e 83       	std	Y+6, r24	; 0x06
    1716:	9f 83       	std	Y+7, r25	; 0x07
	telem[2] = Amp_ADC(1); // 5V rail current
    1718:	81 e0       	ldi	r24, 0x01	; 1
    171a:	90 e0       	ldi	r25, 0x00	; 0
    171c:	0e 94 a1 01 	call	0x342	; 0x342 <Amp_ADC>
    1720:	68 87       	std	Y+8, r22	; 0x08
    1722:	79 87       	std	Y+9, r23	; 0x09
    1724:	8a 87       	std	Y+10, r24	; 0x0a
    1726:	9b 87       	std	Y+11, r25	; 0x0b
	telem[3] = Amp_ADC(0); // 8V rail current
    1728:	80 e0       	ldi	r24, 0x00	; 0
    172a:	90 e0       	ldi	r25, 0x00	; 0
    172c:	0e 94 a1 01 	call	0x342	; 0x342 <Amp_ADC>
    1730:	6c 87       	std	Y+12, r22	; 0x0c
    1732:	7d 87       	std	Y+13, r23	; 0x0d
    1734:	8e 87       	std	Y+14, r24	; 0x0e
    1736:	9f 87       	std	Y+15, r25	; 0x0f
	telem[4] = Amp_ADC(5); // VBatt rail current
    1738:	85 e0       	ldi	r24, 0x05	; 5
    173a:	90 e0       	ldi	r25, 0x00	; 0
    173c:	0e 94 a1 01 	call	0x342	; 0x342 <Amp_ADC>
    1740:	68 8b       	std	Y+16, r22	; 0x10
    1742:	79 8b       	std	Y+17, r23	; 0x11
    1744:	8a 8b       	std	Y+18, r24	; 0x12
    1746:	9b 8b       	std	Y+19, r25	; 0x13
	telem[5] = Amp_ADC(4); // Solar panel current
    1748:	84 e0       	ldi	r24, 0x04	; 4
    174a:	90 e0       	ldi	r25, 0x00	; 0
    174c:	0e 94 a1 01 	call	0x342	; 0x342 <Amp_ADC>
    1750:	6c 8b       	std	Y+20, r22	; 0x14
    1752:	7d 8b       	std	Y+21, r23	; 0x15
    1754:	8e 8b       	std	Y+22, r24	; 0x16
    1756:	9f 8b       	std	Y+23, r25	; 0x17
	
	// Voltmeter measurements
	telem[6] = Volt_ADC(0); // 3V3-1 rail voltage
    1758:	80 e0       	ldi	r24, 0x00	; 0
    175a:	90 e0       	ldi	r25, 0x00	; 0
    175c:	0e 94 38 01 	call	0x270	; 0x270 <Volt_ADC>
    1760:	68 8f       	std	Y+24, r22	; 0x18
    1762:	79 8f       	std	Y+25, r23	; 0x19
    1764:	8a 8f       	std	Y+26, r24	; 0x1a
    1766:	9b 8f       	std	Y+27, r25	; 0x1b
	telem[7] = Volt_ADC(1); // 3V3-2 rail voltage
    1768:	81 e0       	ldi	r24, 0x01	; 1
    176a:	90 e0       	ldi	r25, 0x00	; 0
    176c:	0e 94 38 01 	call	0x270	; 0x270 <Volt_ADC>
    1770:	6c 8f       	std	Y+28, r22	; 0x1c
    1772:	7d 8f       	std	Y+29, r23	; 0x1d
    1774:	8e 8f       	std	Y+30, r24	; 0x1e
    1776:	9f 8f       	std	Y+31, r25	; 0x1f
	telem[8] = Volt_ADC(2); // 5V rail voltage
    1778:	82 e0       	ldi	r24, 0x02	; 2
    177a:	90 e0       	ldi	r25, 0x00	; 0
    177c:	0e 94 38 01 	call	0x270	; 0x270 <Volt_ADC>
    1780:	68 a3       	std	Y+32, r22	; 0x20
    1782:	79 a3       	std	Y+33, r23	; 0x21
    1784:	8a a3       	std	Y+34, r24	; 0x22
    1786:	9b a3       	std	Y+35, r25	; 0x23
	telem[9] = Volt_ADC(3); // 8V-1 rail voltage
    1788:	83 e0       	ldi	r24, 0x03	; 3
    178a:	90 e0       	ldi	r25, 0x00	; 0
    178c:	0e 94 38 01 	call	0x270	; 0x270 <Volt_ADC>
    1790:	6c a3       	std	Y+36, r22	; 0x24
    1792:	7d a3       	std	Y+37, r23	; 0x25
    1794:	8e a3       	std	Y+38, r24	; 0x26
    1796:	9f a3       	std	Y+39, r25	; 0x27
	telem[10] = Volt_ADC(4); // VBatt rail voltage
    1798:	84 e0       	ldi	r24, 0x04	; 4
    179a:	90 e0       	ldi	r25, 0x00	; 0
    179c:	0e 94 38 01 	call	0x270	; 0x270 <Volt_ADC>
    17a0:	68 a7       	std	Y+40, r22	; 0x28
    17a2:	79 a7       	std	Y+41, r23	; 0x29
    17a4:	8a a7       	std	Y+42, r24	; 0x2a
    17a6:	9b a7       	std	Y+43, r25	; 0x2b
	telem[11] = Temp_ADC(); // Battery temperature
    17a8:	0e 94 64 02 	call	0x4c8	; 0x4c8 <Temp_ADC>
    17ac:	6c a7       	std	Y+44, r22	; 0x2c
    17ae:	7d a7       	std	Y+45, r23	; 0x2d
    17b0:	8e a7       	std	Y+46, r24	; 0x2e
    17b2:	9f a7       	std	Y+47, r25	; 0x2f
	
	// Disable 5V rail
	Disable_5V(power_state);	
    17b4:	81 2f       	mov	r24, r17
    17b6:	dd da       	rcall	.-2630   	; 0xd72 <Disable_5V>
}
    17b8:	df 91       	pop	r29
    17ba:	cf 91       	pop	r28
    17bc:	1f 91       	pop	r17
    17be:	08 95       	ret

000017c0 <Update_OBC>:
// Author: Chris Thomas
// Date: 2019-02-03
// Description: Updates the telemetry information to the OBC.
/*========================================================================================*/

void Update_OBC(double* telem, char* power, uint8_t state_num, uint8_t mode, int soc){
    17c0:	2f 92       	push	r2
    17c2:	3f 92       	push	r3
    17c4:	4f 92       	push	r4
    17c6:	5f 92       	push	r5
    17c8:	6f 92       	push	r6
    17ca:	7f 92       	push	r7
    17cc:	8f 92       	push	r8
    17ce:	9f 92       	push	r9
    17d0:	af 92       	push	r10
    17d2:	bf 92       	push	r11
    17d4:	cf 92       	push	r12
    17d6:	df 92       	push	r13
    17d8:	ef 92       	push	r14
    17da:	ff 92       	push	r15
    17dc:	0f 93       	push	r16
    17de:	1f 93       	push	r17
    17e0:	cf 93       	push	r28
    17e2:	df 93       	push	r29
    17e4:	cd b7       	in	r28, 0x3d	; 61
    17e6:	de b7       	in	r29, 0x3e	; 62
    17e8:	c5 5b       	subi	r28, 0xB5	; 181
    17ea:	d2 40       	sbci	r29, 0x02	; 2
    17ec:	0f b6       	in	r0, 0x3f	; 63
    17ee:	f8 94       	cli
    17f0:	de bf       	out	0x3e, r29	; 62
    17f2:	0f be       	out	0x3f, r0	; 63
    17f4:	cd bf       	out	0x3d, r28	; 61
    17f6:	ce 54       	subi	r28, 0x4E	; 78
    17f8:	dd 4f       	sbci	r29, 0xFD	; 253
    17fa:	99 83       	std	Y+1, r25	; 0x01
    17fc:	88 83       	st	Y, r24
    17fe:	c2 5b       	subi	r28, 0xB2	; 178
    1800:	d2 40       	sbci	r29, 0x02	; 2
    1802:	c6 55       	subi	r28, 0x56	; 86
    1804:	dd 4f       	sbci	r29, 0xFD	; 253
    1806:	79 83       	std	Y+1, r23	; 0x01
    1808:	68 83       	st	Y, r22
    180a:	ca 5a       	subi	r28, 0xAA	; 170
    180c:	d2 40       	sbci	r29, 0x02	; 2
    180e:	c4 55       	subi	r28, 0x54	; 84
    1810:	dd 4f       	sbci	r29, 0xFD	; 253
    1812:	48 83       	st	Y, r20
    1814:	cc 5a       	subi	r28, 0xAC	; 172
    1816:	d2 40       	sbci	r29, 0x02	; 2
    1818:	c3 55       	subi	r28, 0x53	; 83
    181a:	dd 4f       	sbci	r29, 0xFD	; 253
    181c:	28 83       	st	Y, r18
    181e:	cd 5a       	subi	r28, 0xAD	; 173
    1820:	d2 40       	sbci	r29, 0x02	; 2
    1822:	c2 55       	subi	r28, 0x52	; 82
    1824:	dd 4f       	sbci	r29, 0xFD	; 253
    1826:	08 83       	st	Y, r16
    1828:	ce 5a       	subi	r28, 0xAE	; 174
    182a:	d2 40       	sbci	r29, 0x02	; 2
    182c:	c1 55       	subi	r28, 0x51	; 81
    182e:	dd 4f       	sbci	r29, 0xFD	; 253
    1830:	18 83       	st	Y, r17
    1832:	cf 5a       	subi	r28, 0xAF	; 175
    1834:	d2 40       	sbci	r29, 0x02	; 2
	// Prints a border to the Putty
	char stars[100] = "/********************************************************************CubeSat EPS"; // left side of border
    1836:	81 e5       	ldi	r24, 0x51	; 81
    1838:	ea e1       	ldi	r30, 0x1A	; 26
    183a:	f2 e0       	ldi	r31, 0x02	; 2
    183c:	de 01       	movw	r26, r28
    183e:	11 96       	adiw	r26, 0x01	; 1
    1840:	01 90       	ld	r0, Z+
    1842:	0d 92       	st	X+, r0
    1844:	8a 95       	dec	r24
    1846:	e1 f7       	brne	.-8      	; 0x1840 <Update_OBC+0x80>
    1848:	fe 01       	movw	r30, r28
    184a:	ee 5a       	subi	r30, 0xAE	; 174
    184c:	ff 4f       	sbci	r31, 0xFF	; 255
    184e:	83 e1       	ldi	r24, 0x13	; 19
    1850:	df 01       	movw	r26, r30
    1852:	1d 92       	st	X+, r1
    1854:	8a 95       	dec	r24
    1856:	e9 f7       	brne	.-6      	; 0x1852 <Update_OBC+0x92>
	char stars2[100] = "********************************************************************/"; // right side of border
    1858:	86 e4       	ldi	r24, 0x46	; 70
    185a:	ee e7       	ldi	r30, 0x7E	; 126
    185c:	f2 e0       	ldi	r31, 0x02	; 2
    185e:	de 01       	movw	r26, r28
    1860:	ab 59       	subi	r26, 0x9B	; 155
    1862:	bf 4f       	sbci	r27, 0xFF	; 255
    1864:	01 90       	ld	r0, Z+
    1866:	0d 92       	st	X+, r0
    1868:	8a 95       	dec	r24
    186a:	e1 f7       	brne	.-8      	; 0x1864 <Update_OBC+0xa4>
    186c:	fe 01       	movw	r30, r28
    186e:	e5 55       	subi	r30, 0x55	; 85
    1870:	ff 4f       	sbci	r31, 0xFF	; 255
    1872:	8e e1       	ldi	r24, 0x1E	; 30
    1874:	df 01       	movw	r26, r30
    1876:	1d 92       	st	X+, r1
    1878:	8a 95       	dec	r24
    187a:	e9 f7       	brne	.-6      	; 0x1876 <Update_OBC+0xb6>
	char* border; // complete border top and bottom
	border = strcat(stars,stars2);
    187c:	be 01       	movw	r22, r28
    187e:	6b 59       	subi	r22, 0x9B	; 155
    1880:	7f 4f       	sbci	r23, 0xFF	; 255
    1882:	ce 01       	movw	r24, r28
    1884:	01 96       	adiw	r24, 0x01	; 1
    1886:	0e 94 91 1a 	call	0x3522	; 0x3522 <strcat>
	
	// Print border
	UART0_putstring(border);
    188a:	1c d5       	rcall	.+2616   	; 0x22c4 <UART0_putstring>
	
	// Spacing
	UART0_putchar('\n');
    188c:	8a e0       	ldi	r24, 0x0A	; 10
    188e:	0a d5       	rcall	.+2580   	; 0x22a4 <UART0_putchar>
	UART0_putchar('\n');
    1890:	8a e0       	ldi	r24, 0x0A	; 10
    1892:	08 d5       	rcall	.+2576   	; 0x22a4 <UART0_putchar>
	UART0_putchar('\r');
    1894:	8d e0       	ldi	r24, 0x0D	; 13
    1896:	06 d5       	rcall	.+2572   	; 0x22a4 <UART0_putchar>
    1898:	80 ea       	ldi	r24, 0xA0	; 160
	
	// String Initializations
	char loads[8][20] = {"Heater 1 (VBatt)", "Heater 2 (5V)", "Heater 3 (8V)", 
    189a:	e2 ee       	ldi	r30, 0xE2	; 226
    189c:	f2 e0       	ldi	r31, 0x02	; 2
    189e:	de 01       	movw	r26, r28
    18a0:	a7 53       	subi	r26, 0x37	; 55
    18a2:	bf 4f       	sbci	r27, 0xFF	; 255
    18a4:	01 90       	ld	r0, Z+
    18a6:	0d 92       	st	X+, r0
    18a8:	8a 95       	dec	r24
    18aa:	e1 f7       	brne	.-8      	; 0x18a4 <Update_OBC+0xe4>
    18ac:	80 ef       	ldi	r24, 0xF0	; 240
						 "OBC", "Imager", "GRIPS", "S-Band", "UHF"};
						 
	char sensors[12][20] = {"3V3-1 Rail [A]", "3V3-2 Rail [A]", "5V Rail [A]", 
    18ae:	e2 e8       	ldi	r30, 0x82	; 130
    18b0:	f3 e0       	ldi	r31, 0x03	; 3
    18b2:	de 01       	movw	r26, r28
    18b4:	a7 59       	subi	r26, 0x97	; 151
    18b6:	be 4f       	sbci	r27, 0xFE	; 254
    18b8:	01 90       	ld	r0, Z+
    18ba:	0d 92       	st	X+, r0
    18bc:	8a 95       	dec	r24
    18be:	e1 f7       	brne	.-8      	; 0x18b8 <Update_OBC+0xf8>
    18c0:	82 e4       	ldi	r24, 0x42	; 66
							"8V Rail [A]", "Battery Rail [A]", "Solar Input [A]",
							"3V3-1 Rail [V]", "3V3-2 Rail [V]", "5V Rail [V]", "8V Rail [V]",
							"Battery Rail [V]", "Temperature [C]"};
							
	char sections[3][22] = {"CURRENT", "VOLTAGE", "LOADS"};
    18c2:	e2 e7       	ldi	r30, 0x72	; 114
    18c4:	f4 e0       	ldi	r31, 0x04	; 4
    18c6:	de 01       	movw	r26, r28
    18c8:	a7 5a       	subi	r26, 0xA7	; 167
    18ca:	bd 4f       	sbci	r27, 0xFD	; 253
    18cc:	01 90       	ld	r0, Z+
    18ce:	0d 92       	st	X+, r0
    18d0:	8a 95       	dec	r24
    18d2:	e1 f7       	brne	.-8      	; 0x18cc <Update_OBC+0x10c>
    18d4:	fe 01       	movw	r30, r28
    18d6:	e7 59       	subi	r30, 0x97	; 151
    18d8:	fe 4f       	sbci	r31, 0xFE	; 254
    18da:	7f 01       	movw	r14, r30
    18dc:	aa 24       	eor	r10, r10
    18de:	a3 94       	inc	r10
    18e0:	b1 2c       	mov	r11, r1
    18e2:	c1 2c       	mov	r12, r1
    18e4:	d1 2c       	mov	r13, r1
    18e6:	41 2c       	mov	r4, r1
	int spaces2 = 0; // for inner loops
	int l_incr = 0; // load increment (8)
	int s_incr = 0; // sensor increment (12)
	int i = 0; // increment for telemetry (0 to 6, then 6 to 12)
	char measure[10]; // used for sprintf
	int section_incr = 0; // used for the section titles
    18e8:	51 2c       	mov	r5, r1
    18ea:	61 2c       	mov	r6, r1
	int spacing = 20;
	int spaces = 0;
	int spaces2 = 0; // for inner loops
	int l_incr = 0; // load increment (8)
	int s_incr = 0; // sensor increment (12)
	int i = 0; // increment for telemetry (0 to 6, then 6 to 12)
    18ec:	71 2c       	mov	r7, r1
    18ee:	c0 55       	subi	r28, 0x50	; 80
	char sections[3][22] = {"CURRENT", "VOLTAGE", "LOADS"};
							
	// Doing to the spacing correctly						
	int spacing = 20;
	int spaces = 0;
	int spaces2 = 0; // for inner loops
    18f0:	dd 4f       	sbci	r29, 0xFD	; 253
    18f2:	19 82       	std	Y+1, r1	; 0x01
    18f4:	18 82       	st	Y, r1
    18f6:	c0 5b       	subi	r28, 0xB0	; 176
    18f8:	d2 40       	sbci	r29, 0x02	; 2
    18fa:	00 e0       	ldi	r16, 0x00	; 0
							
	char sections[3][22] = {"CURRENT", "VOLTAGE", "LOADS"};
							
	// Doing to the spacing correctly						
	int spacing = 20;
	int spaces = 0;
    18fc:	10 e0       	ldi	r17, 0x00	; 0
    18fe:	0f 2e       	mov	r0, r31
			UART0_putchar(' ');
			spaces--;
		}
		UART0_putstring(sensors[s_incr]);
		s_incr++;
		spaces = spacing - strlen(sensors[s_incr - 1]);
    1900:	f4 e1       	ldi	r31, 0x14	; 20
    1902:	8f 2e       	mov	r8, r31
    1904:	91 2c       	mov	r9, r1
    1906:	f0 2d       	mov	r31, r0
    1908:	1e 01       	movw	r2, r28
			while(i < s_incr){
				while(spaces2){
					UART0_putchar(' ');
					spaces2--;
				}
				sprintf(measure,"%.3f",telem[i]);
    190a:	f5 e6       	ldi	r31, 0x65	; 101
    190c:	2f 1a       	sub	r2, r31
    190e:	fd ef       	ldi	r31, 0xFD	; 253
    1910:	3f 0a       	sbc	r3, r31
    1912:	cc 54       	subi	r28, 0x4C	; 76
    1914:	dd 4f       	sbci	r29, 0xFD	; 253
    1916:	28 82       	st	Y, r2
    1918:	c4 5b       	subi	r28, 0xB4	; 180
    191a:	d2 40       	sbci	r29, 0x02	; 2
    191c:	cb 54       	subi	r28, 0x4B	; 75
    191e:	dd 4f       	sbci	r29, 0xFD	; 253
    1920:	38 82       	st	Y, r3
    1922:	c5 5b       	subi	r28, 0xB5	; 181
    1924:	d2 40       	sbci	r29, 0x02	; 2
    1926:	c6 01       	movw	r24, r12
    1928:	26 e0       	ldi	r18, 0x06	; 6
	// Print the telemetry information
	while (s_incr < 12){
		
		// Switch lines after 6 titles are written and write
		// data on the next line
		if (s_incr == 6){
    192a:	c2 16       	cp	r12, r18
    192c:	d1 04       	cpc	r13, r1
    192e:	09 f0       	breq	.+2      	; 0x1932 <Update_OBC+0x172>
    1930:	18 c2       	rjmp	.+1072   	; 0x1d62 <Update_OBC+0x5a2>
			UART0_putchar('\n');
    1932:	8a e0       	ldi	r24, 0x0A	; 10
    1934:	b7 d4       	rcall	.+2414   	; 0x22a4 <UART0_putchar>
    1936:	8d e0       	ldi	r24, 0x0D	; 13
			UART0_putchar('\r');
    1938:	b5 d4       	rcall	.+2410   	; 0x22a4 <UART0_putchar>
    193a:	36 e0       	ldi	r19, 0x06	; 6
    193c:	63 16       	cp	r6, r19
			// print values
			while(i < s_incr){
    193e:	71 04       	cpc	r7, r1
    1940:	0c f0       	brlt	.+2      	; 0x1944 <Update_OBC+0x184>
    1942:	63 c0       	rjmp	.+198    	; 0x1a0a <Update_OBC+0x24a>
    1944:	83 01       	movw	r16, r6
    1946:	00 0f       	add	r16, r16
    1948:	11 1f       	adc	r17, r17
    194a:	00 0f       	add	r16, r16
    194c:	11 1f       	adc	r17, r17
    194e:	ce 54       	subi	r28, 0x4E	; 78
    1950:	dd 4f       	sbci	r29, 0xFD	; 253
    1952:	88 81       	ld	r24, Y
    1954:	99 81       	ldd	r25, Y+1	; 0x01
    1956:	c2 5b       	subi	r28, 0xB2	; 178
    1958:	d2 40       	sbci	r29, 0x02	; 2
    195a:	08 0f       	add	r16, r24
    195c:	19 1f       	adc	r17, r25
    195e:	4b c0       	rjmp	.+150    	; 0x19f6 <Update_OBC+0x236>
    1960:	80 e2       	ldi	r24, 0x20	; 32
				while(spaces2){
					UART0_putchar(' ');
    1962:	a0 d4       	rcall	.+2368   	; 0x22a4 <UART0_putchar>
    1964:	c0 55       	subi	r28, 0x50	; 80
    1966:	dd 4f       	sbci	r29, 0xFD	; 253
					spaces2--;
    1968:	a8 81       	ld	r26, Y
    196a:	b9 81       	ldd	r27, Y+1	; 0x01
    196c:	c0 5b       	subi	r28, 0xB0	; 176
    196e:	d2 40       	sbci	r29, 0x02	; 2
    1970:	11 97       	sbiw	r26, 0x01	; 1
    1972:	c0 55       	subi	r28, 0x50	; 80
    1974:	dd 4f       	sbci	r29, 0xFD	; 253
    1976:	b9 83       	std	Y+1, r27	; 0x01
    1978:	a8 83       	st	Y, r26
    197a:	c0 5b       	subi	r28, 0xB0	; 176
    197c:	d2 40       	sbci	r29, 0x02	; 2
    197e:	ab 2b       	or	r26, r27
    1980:	79 f7       	brne	.-34     	; 0x1960 <Update_OBC+0x1a0>
		if (s_incr == 6){
			UART0_putchar('\n');
			UART0_putchar('\r');
			// print values
			while(i < s_incr){
				while(spaces2){
    1982:	f8 01       	movw	r30, r16
    1984:	80 81       	ld	r24, Z
					UART0_putchar(' ');
					spaces2--;
				}
				sprintf(measure,"%.3f",telem[i]);
    1986:	91 81       	ldd	r25, Z+1	; 0x01
    1988:	22 81       	ldd	r18, Z+2	; 0x02
    198a:	33 81       	ldd	r19, Z+3	; 0x03
    198c:	0c 5f       	subi	r16, 0xFC	; 252
    198e:	1f 4f       	sbci	r17, 0xFF	; 255
    1990:	3f 93       	push	r19
    1992:	2f 93       	push	r18
    1994:	9f 93       	push	r25
    1996:	8f 93       	push	r24
    1998:	21 ee       	ldi	r18, 0xE1	; 225
    199a:	36 e0       	ldi	r19, 0x06	; 6
    199c:	3f 93       	push	r19
    199e:	2f 93       	push	r18
    19a0:	3f 92       	push	r3
    19a2:	2f 92       	push	r2
    19a4:	0e 94 ec 1a 	call	0x35d8	; 0x35d8 <sprintf>
    19a8:	cc 54       	subi	r28, 0x4C	; 76
    19aa:	dd 4f       	sbci	r29, 0xFD	; 253
				UART0_putstring(measure);
    19ac:	88 81       	ld	r24, Y
    19ae:	c4 5b       	subi	r28, 0xB4	; 180
    19b0:	d2 40       	sbci	r29, 0x02	; 2
    19b2:	cb 54       	subi	r28, 0x4B	; 75
    19b4:	dd 4f       	sbci	r29, 0xFD	; 253
    19b6:	98 81       	ld	r25, Y
    19b8:	c5 5b       	subi	r28, 0xB5	; 181
    19ba:	d2 40       	sbci	r29, 0x02	; 2
    19bc:	83 d4       	rcall	.+2310   	; 0x22c4 <UART0_putstring>
    19be:	9f ef       	ldi	r25, 0xFF	; 255
    19c0:	69 1a       	sub	r6, r25
				i++;
    19c2:	79 0a       	sbc	r7, r25
    19c4:	f1 01       	movw	r30, r2
    19c6:	01 90       	ld	r0, Z+
				spaces2 = spacing - strlen(measure);
    19c8:	00 20       	and	r0, r0
    19ca:	e9 f7       	brne	.-6      	; 0x19c6 <Update_OBC+0x206>
    19cc:	31 97       	sbiw	r30, 0x01	; 1
    19ce:	e2 19       	sub	r30, r2
    19d0:	f3 09       	sbc	r31, r3
    19d2:	d4 01       	movw	r26, r8
    19d4:	ae 1b       	sub	r26, r30
    19d6:	bf 0b       	sbc	r27, r31
    19d8:	c0 55       	subi	r28, 0x50	; 80
    19da:	dd 4f       	sbci	r29, 0xFD	; 253
    19dc:	b9 83       	std	Y+1, r27	; 0x01
    19de:	a8 83       	st	Y, r26
    19e0:	c0 5b       	subi	r28, 0xB0	; 176
    19e2:	d2 40       	sbci	r29, 0x02	; 2
    19e4:	0f b6       	in	r0, 0x3f	; 63
    19e6:	f8 94       	cli
		// data on the next line
		if (s_incr == 6){
			UART0_putchar('\n');
			UART0_putchar('\r');
			// print values
			while(i < s_incr){
    19e8:	de bf       	out	0x3e, r29	; 62
    19ea:	0f be       	out	0x3f, r0	; 63
    19ec:	cd bf       	out	0x3d, r28	; 61
    19ee:	f6 e0       	ldi	r31, 0x06	; 6
    19f0:	6f 16       	cp	r6, r31
    19f2:	71 04       	cpc	r7, r1
    19f4:	51 f0       	breq	.+20     	; 0x1a0a <Update_OBC+0x24a>
    19f6:	c0 55       	subi	r28, 0x50	; 80
    19f8:	dd 4f       	sbci	r29, 0xFD	; 253
				while(spaces2){
    19fa:	28 81       	ld	r18, Y
    19fc:	39 81       	ldd	r19, Y+1	; 0x01
    19fe:	c0 5b       	subi	r28, 0xB0	; 176
    1a00:	d2 40       	sbci	r29, 0x02	; 2
    1a02:	23 2b       	or	r18, r19
    1a04:	09 f0       	breq	.+2      	; 0x1a08 <Update_OBC+0x248>
    1a06:	ac cf       	rjmp	.-168    	; 0x1960 <Update_OBC+0x1a0>
				sprintf(measure,"%.3f",telem[i]);
				UART0_putstring(measure);
				i++;
				spaces2 = spacing - strlen(measure);
			}
			UART0_putchar('\n');
    1a08:	bc cf       	rjmp	.-136    	; 0x1982 <Update_OBC+0x1c2>
    1a0a:	8a e0       	ldi	r24, 0x0A	; 10
    1a0c:	4b d4       	rcall	.+2198   	; 0x22a4 <UART0_putchar>
			UART0_putchar('\n');
    1a0e:	8a e0       	ldi	r24, 0x0A	; 10
    1a10:	49 d4       	rcall	.+2194   	; 0x22a4 <UART0_putchar>
    1a12:	8d e0       	ldi	r24, 0x0D	; 13
			UART0_putchar('\r');
    1a14:	47 d4       	rcall	.+2190   	; 0x22a4 <UART0_putchar>
    1a16:	36 e1       	ldi	r19, 0x16	; 22
    1a18:	34 9d       	mul	r19, r4
			UART0_putchar('\n');
			UART0_putchar('\r');
			section_incr++;
		}
		else if(s_incr == 6){
			UART0_putstring(sections[section_incr]);
    1a1a:	c0 01       	movw	r24, r0
    1a1c:	35 9d       	mul	r19, r5
    1a1e:	90 0d       	add	r25, r0
    1a20:	11 24       	eor	r1, r1
    1a22:	a9 e5       	ldi	r26, 0x59	; 89
    1a24:	b2 e0       	ldi	r27, 0x02	; 2
    1a26:	ac 0f       	add	r26, r28
    1a28:	bd 1f       	adc	r27, r29
    1a2a:	8a 0f       	add	r24, r26
    1a2c:	9b 1f       	adc	r25, r27
			UART0_putchar('\n');
    1a2e:	4a d4       	rcall	.+2196   	; 0x22c4 <UART0_putstring>
    1a30:	8a e0       	ldi	r24, 0x0A	; 10
    1a32:	38 d4       	rcall	.+2160   	; 0x22a4 <UART0_putchar>
			UART0_putchar('\n');
    1a34:	8a e0       	ldi	r24, 0x0A	; 10
    1a36:	36 d4       	rcall	.+2156   	; 0x22a4 <UART0_putchar>
    1a38:	8d e0       	ldi	r24, 0x0D	; 13
			UART0_putchar('\r');
    1a3a:	34 d4       	rcall	.+2152   	; 0x22a4 <UART0_putchar>
    1a3c:	bf ef       	ldi	r27, 0xFF	; 255
    1a3e:	4b 1a       	sub	r4, r27
			section_incr++;
    1a40:	5b 0a       	sbc	r5, r27
    1a42:	93 c1       	rjmp	.+806    	; 0x1d6a <Update_OBC+0x5aa>
    1a44:	e6 e1       	ldi	r30, 0x16	; 22
		}
		
		// Put the titles in normally
		// re-initialize the spaces
		if(s_incr == 0){
			UART0_putstring(sections[section_incr]);
    1a46:	e4 9d       	mul	r30, r4
    1a48:	c0 01       	movw	r24, r0
    1a4a:	e5 9d       	mul	r30, r5
    1a4c:	90 0d       	add	r25, r0
    1a4e:	11 24       	eor	r1, r1
    1a50:	29 e5       	ldi	r18, 0x59	; 89
    1a52:	32 e0       	ldi	r19, 0x02	; 2
    1a54:	2c 0f       	add	r18, r28
    1a56:	3d 1f       	adc	r19, r29
    1a58:	82 0f       	add	r24, r18
    1a5a:	93 1f       	adc	r25, r19
    1a5c:	33 d4       	rcall	.+2150   	; 0x22c4 <UART0_putstring>
			UART0_putchar('\n');
    1a5e:	8a e0       	ldi	r24, 0x0A	; 10
    1a60:	21 d4       	rcall	.+2114   	; 0x22a4 <UART0_putchar>
			UART0_putchar('\n');
    1a62:	8a e0       	ldi	r24, 0x0A	; 10
    1a64:	1f d4       	rcall	.+2110   	; 0x22a4 <UART0_putchar>
    1a66:	8d e0       	ldi	r24, 0x0D	; 13
			UART0_putchar('\r');
    1a68:	1d d4       	rcall	.+2106   	; 0x22a4 <UART0_putchar>
    1a6a:	3f ef       	ldi	r19, 0xFF	; 255
			section_incr++;
    1a6c:	43 1a       	sub	r4, r19
    1a6e:	53 0a       	sbc	r5, r19
    1a70:	01 15       	cp	r16, r1
			UART0_putchar('\n');
			UART0_putchar('\n');
			UART0_putchar('\r');
			section_incr++;
		}
		while(spaces){
    1a72:	11 05       	cpc	r17, r1
    1a74:	21 f4       	brne	.+8      	; 0x1a7e <Update_OBC+0x2be>
    1a76:	79 c1       	rjmp	.+754    	; 0x1d6a <Update_OBC+0x5aa>
    1a78:	01 15       	cp	r16, r1
    1a7a:	11 05       	cpc	r17, r1
    1a7c:	29 f0       	breq	.+10     	; 0x1a88 <Update_OBC+0x2c8>
    1a7e:	80 e2       	ldi	r24, 0x20	; 32
			UART0_putchar(' ');
    1a80:	11 d4       	rcall	.+2082   	; 0x22a4 <UART0_putchar>
    1a82:	01 50       	subi	r16, 0x01	; 1
    1a84:	11 09       	sbc	r17, r1
			spaces--;
    1a86:	d9 f7       	brne	.-10     	; 0x1a7e <Update_OBC+0x2be>
			UART0_putchar('\n');
			UART0_putchar('\n');
			UART0_putchar('\r');
			section_incr++;
		}
		while(spaces){
    1a88:	c7 01       	movw	r24, r14
			UART0_putchar(' ');
			spaces--;
		}
		UART0_putstring(sensors[s_incr]);
    1a8a:	1c d4       	rcall	.+2104   	; 0x22c4 <UART0_putstring>
    1a8c:	f7 01       	movw	r30, r14
		s_incr++;
		spaces = spacing - strlen(sensors[s_incr - 1]);
    1a8e:	01 90       	ld	r0, Z+
    1a90:	00 20       	and	r0, r0
    1a92:	e9 f7       	brne	.-6      	; 0x1a8e <Update_OBC+0x2ce>
    1a94:	31 97       	sbiw	r30, 0x01	; 1
    1a96:	ee 19       	sub	r30, r14
    1a98:	ff 09       	sbc	r31, r15
    1a9a:	84 01       	movw	r16, r8
    1a9c:	0e 1b       	sub	r16, r30
    1a9e:	1f 0b       	sbc	r17, r31
    1aa0:	8c e0       	ldi	r24, 0x0C	; 12
		
		// Print the second round of telemetry data
		if (s_incr == 12){
    1aa2:	a8 16       	cp	r10, r24
    1aa4:	b1 04       	cpc	r11, r1
    1aa6:	09 f0       	breq	.+2      	; 0x1aaa <Update_OBC+0x2ea>
    1aa8:	5f c0       	rjmp	.+190    	; 0x1b68 <Update_OBC+0x3a8>
    1aaa:	8a e0       	ldi	r24, 0x0A	; 10
			spaces2 = 0; // re-initialize spaces to 0
			UART0_putchar('\n');
    1aac:	fb d3       	rcall	.+2038   	; 0x22a4 <UART0_putchar>
    1aae:	8d e0       	ldi	r24, 0x0D	; 13
    1ab0:	f9 d3       	rcall	.+2034   	; 0x22a4 <UART0_putchar>
			UART0_putchar('\r');
    1ab2:	9c e0       	ldi	r25, 0x0C	; 12
    1ab4:	69 16       	cp	r6, r25
    1ab6:	71 04       	cpc	r7, r1
			// print values
			while(i < s_incr){
    1ab8:	0c f0       	brlt	.+2      	; 0x1abc <Update_OBC+0x2fc>
    1aba:	64 c0       	rjmp	.+200    	; 0x1b84 <Update_OBC+0x3c4>
    1abc:	83 01       	movw	r16, r6
    1abe:	00 0f       	add	r16, r16
    1ac0:	11 1f       	adc	r17, r17
    1ac2:	00 0f       	add	r16, r16
    1ac4:	11 1f       	adc	r17, r17
    1ac6:	ce 54       	subi	r28, 0x4E	; 78
    1ac8:	dd 4f       	sbci	r29, 0xFD	; 253
    1aca:	a8 81       	ld	r26, Y
    1acc:	b9 81       	ldd	r27, Y+1	; 0x01
    1ace:	c2 5b       	subi	r28, 0xB2	; 178
    1ad0:	d2 40       	sbci	r29, 0x02	; 2
    1ad2:	0a 0f       	add	r16, r26
    1ad4:	1b 1f       	adc	r17, r27
    1ad6:	0f 2e       	mov	r0, r31
    1ad8:	f6 ee       	ldi	r31, 0xE6	; 230
				while(spaces2){
					UART0_putchar(' ');
					spaces2--;
				}
				sprintf(measure,"%.2f",telem[i]);
    1ada:	af 2e       	mov	r10, r31
    1adc:	f6 e0       	ldi	r31, 0x06	; 6
    1ade:	bf 2e       	mov	r11, r31
    1ae0:	f0 2d       	mov	r31, r0
    1ae2:	7e 01       	movw	r14, r28
    1ae4:	b5 e6       	ldi	r27, 0x65	; 101
    1ae6:	eb 1a       	sub	r14, r27
    1ae8:	bd ef       	ldi	r27, 0xFD	; 253
    1aea:	fb 0a       	sbc	r15, r27
    1aec:	0f 2e       	mov	r0, r31
    1aee:	f4 e1       	ldi	r31, 0x14	; 20
				UART0_putstring(measure);
				i++;
				spaces2 = spacing - strlen(measure);
    1af0:	8f 2e       	mov	r8, r31
    1af2:	91 2c       	mov	r9, r1
    1af4:	f0 2d       	mov	r31, r0
    1af6:	06 c0       	rjmp	.+12     	; 0x1b04 <Update_OBC+0x344>
    1af8:	80 e2       	ldi	r24, 0x20	; 32
    1afa:	d4 d3       	rcall	.+1960   	; 0x22a4 <UART0_putchar>
			UART0_putchar('\n');
			UART0_putchar('\r');
			// print values
			while(i < s_incr){
				while(spaces2){
					UART0_putchar(' ');
    1afc:	e1 e0       	ldi	r30, 0x01	; 1
    1afe:	ce 1a       	sub	r12, r30
    1b00:	d1 08       	sbc	r13, r1
					spaces2--;
    1b02:	d1 f7       	brne	.-12     	; 0x1af8 <Update_OBC+0x338>
    1b04:	d8 01       	movw	r26, r16
    1b06:	8c 91       	ld	r24, X
				}
				sprintf(measure,"%.2f",telem[i]);
    1b08:	11 96       	adiw	r26, 0x01	; 1
    1b0a:	9c 91       	ld	r25, X
    1b0c:	11 97       	sbiw	r26, 0x01	; 1
    1b0e:	12 96       	adiw	r26, 0x02	; 2
    1b10:	2c 91       	ld	r18, X
    1b12:	12 97       	sbiw	r26, 0x02	; 2
    1b14:	13 96       	adiw	r26, 0x03	; 3
    1b16:	3c 91       	ld	r19, X
    1b18:	0c 5f       	subi	r16, 0xFC	; 252
    1b1a:	1f 4f       	sbci	r17, 0xFF	; 255
    1b1c:	3f 93       	push	r19
    1b1e:	2f 93       	push	r18
    1b20:	9f 93       	push	r25
    1b22:	8f 93       	push	r24
    1b24:	bf 92       	push	r11
    1b26:	af 92       	push	r10
    1b28:	ff 92       	push	r15
    1b2a:	ef 92       	push	r14
    1b2c:	0e 94 ec 1a 	call	0x35d8	; 0x35d8 <sprintf>
    1b30:	c7 01       	movw	r24, r14
    1b32:	c8 d3       	rcall	.+1936   	; 0x22c4 <UART0_putstring>
				UART0_putstring(measure);
    1b34:	bf ef       	ldi	r27, 0xFF	; 255
    1b36:	6b 1a       	sub	r6, r27
    1b38:	7b 0a       	sbc	r7, r27
				i++;
    1b3a:	f7 01       	movw	r30, r14
    1b3c:	01 90       	ld	r0, Z+
    1b3e:	00 20       	and	r0, r0
				spaces2 = spacing - strlen(measure);
    1b40:	e9 f7       	brne	.-6      	; 0x1b3c <Update_OBC+0x37c>
    1b42:	31 97       	sbiw	r30, 0x01	; 1
    1b44:	ee 19       	sub	r30, r14
    1b46:	ff 09       	sbc	r31, r15
    1b48:	64 01       	movw	r12, r8
    1b4a:	ce 1a       	sub	r12, r30
    1b4c:	df 0a       	sbc	r13, r31
    1b4e:	0f b6       	in	r0, 0x3f	; 63
    1b50:	f8 94       	cli
    1b52:	de bf       	out	0x3e, r29	; 62
		if (s_incr == 12){
			spaces2 = 0; // re-initialize spaces to 0
			UART0_putchar('\n');
			UART0_putchar('\r');
			// print values
			while(i < s_incr){
    1b54:	0f be       	out	0x3f, r0	; 63
    1b56:	cd bf       	out	0x3d, r28	; 61
    1b58:	fc e0       	ldi	r31, 0x0C	; 12
    1b5a:	6f 16       	cp	r6, r31
    1b5c:	71 04       	cpc	r7, r1
    1b5e:	91 f0       	breq	.+36     	; 0x1b84 <Update_OBC+0x3c4>
    1b60:	c1 14       	cp	r12, r1
				while(spaces2){
    1b62:	d1 04       	cpc	r13, r1
    1b64:	49 f6       	brne	.-110    	; 0x1af8 <Update_OBC+0x338>
    1b66:	ce cf       	rjmp	.-100    	; 0x1b04 <Update_OBC+0x344>
    1b68:	2f ef       	ldi	r18, 0xFF	; 255
    1b6a:	c2 1a       	sub	r12, r18
    1b6c:	d2 0a       	sbc	r13, r18
    1b6e:	3f ef       	ldi	r19, 0xFF	; 255
    1b70:	a3 1a       	sub	r10, r19
    1b72:	b3 0a       	sbc	r11, r19
    1b74:	84 e1       	ldi	r24, 0x14	; 20
    1b76:	e8 0e       	add	r14, r24
    1b78:	f1 1c       	adc	r15, r1
	int i = 0; // increment for telemetry (0 to 6, then 6 to 12)
	char measure[10]; // used for sprintf
	int section_incr = 0; // used for the section titles
	
	// Print the telemetry information
	while (s_incr < 12){
    1b7a:	9c e0       	ldi	r25, 0x0C	; 12
    1b7c:	c9 16       	cp	r12, r25
    1b7e:	d1 04       	cpc	r13, r1
	}
	
	
	// Print the Load Titles
	spaces = 0; // re initialize spaces
	UART0_putchar('\n');
    1b80:	09 f0       	breq	.+2      	; 0x1b84 <Update_OBC+0x3c4>
    1b82:	d1 ce       	rjmp	.-606    	; 0x1926 <Update_OBC+0x166>
    1b84:	8a e0       	ldi	r24, 0x0A	; 10
	UART0_putchar('\n');
    1b86:	8e d3       	rcall	.+1820   	; 0x22a4 <UART0_putchar>
    1b88:	8a e0       	ldi	r24, 0x0A	; 10
    1b8a:	8c d3       	rcall	.+1816   	; 0x22a4 <UART0_putchar>
	UART0_putchar('\r');
    1b8c:	8d e0       	ldi	r24, 0x0D	; 13
    1b8e:	8a d3       	rcall	.+1812   	; 0x22a4 <UART0_putchar>
    1b90:	26 e1       	ldi	r18, 0x16	; 22
	UART0_putstring(sections[section_incr]);
    1b92:	24 9d       	mul	r18, r4
    1b94:	c0 01       	movw	r24, r0
    1b96:	25 9d       	mul	r18, r5
    1b98:	90 0d       	add	r25, r0
    1b9a:	11 24       	eor	r1, r1
    1b9c:	a9 e5       	ldi	r26, 0x59	; 89
    1b9e:	b2 e0       	ldi	r27, 0x02	; 2
    1ba0:	ac 0f       	add	r26, r28
    1ba2:	bd 1f       	adc	r27, r29
    1ba4:	8a 0f       	add	r24, r26
    1ba6:	9b 1f       	adc	r25, r27
    1ba8:	8d d3       	rcall	.+1818   	; 0x22c4 <UART0_putstring>
    1baa:	8a e0       	ldi	r24, 0x0A	; 10
	UART0_putchar('\n');
    1bac:	7b d3       	rcall	.+1782   	; 0x22a4 <UART0_putchar>
    1bae:	8a e0       	ldi	r24, 0x0A	; 10
	UART0_putchar('\n');
    1bb0:	79 d3       	rcall	.+1778   	; 0x22a4 <UART0_putchar>
    1bb2:	8d e0       	ldi	r24, 0x0D	; 13
    1bb4:	77 d3       	rcall	.+1774   	; 0x22a4 <UART0_putchar>
	UART0_putchar('\r');
    1bb6:	8e 01       	movw	r16, r28
    1bb8:	07 53       	subi	r16, 0x37	; 55
    1bba:	1f 4f       	sbci	r17, 0xFF	; 255
    1bbc:	6e 01       	movw	r12, r28
    1bbe:	bb ea       	ldi	r27, 0xAB	; 171
    1bc0:	cb 1a       	sub	r12, r27
    1bc2:	be ef       	ldi	r27, 0xFE	; 254
    1bc4:	db 0a       	sbc	r13, r27
    1bc6:	0f 2e       	mov	r0, r31
    1bc8:	f4 e1       	ldi	r31, 0x14	; 20
    1bca:	ef 2e       	mov	r14, r31
			UART0_putchar(' ');
			spaces--;
		}
		UART0_putstring(loads[l_incr]);
		l_incr++;
		spaces = spacing - strlen(loads[l_incr - 1]);
    1bcc:	f1 2c       	mov	r15, r1
    1bce:	f0 2d       	mov	r31, r0
    1bd0:	08 c0       	rjmp	.+16     	; 0x1be2 <Update_OBC+0x422>
    1bd2:	80 e2       	ldi	r24, 0x20	; 32
	UART0_putchar('\n');
	UART0_putchar('\n');
	UART0_putchar('\r');
	while(l_incr < 8){
		while(spaces){
			UART0_putchar(' ');
    1bd4:	67 d3       	rcall	.+1742   	; 0x22a4 <UART0_putchar>
    1bd6:	e1 e0       	ldi	r30, 0x01	; 1
    1bd8:	ae 1a       	sub	r10, r30
			spaces--;
    1bda:	b1 08       	sbc	r11, r1
    1bdc:	d1 f7       	brne	.-12     	; 0x1bd2 <Update_OBC+0x412>
    1bde:	0c 5e       	subi	r16, 0xEC	; 236
	UART0_putstring(sections[section_incr]);
	UART0_putchar('\n');
	UART0_putchar('\n');
	UART0_putchar('\r');
	while(l_incr < 8){
		while(spaces){
    1be0:	1f 4f       	sbci	r17, 0xFF	; 255
    1be2:	c8 01       	movw	r24, r16
    1be4:	6f d3       	rcall	.+1758   	; 0x22c4 <UART0_putstring>
			UART0_putchar(' ');
			spaces--;
		}
		UART0_putstring(loads[l_incr]);
    1be6:	f8 01       	movw	r30, r16
    1be8:	01 90       	ld	r0, Z+
		l_incr++;
		spaces = spacing - strlen(loads[l_incr - 1]);
    1bea:	00 20       	and	r0, r0
    1bec:	e9 f7       	brne	.-6      	; 0x1be8 <Update_OBC+0x428>
    1bee:	31 97       	sbiw	r30, 0x01	; 1
    1bf0:	e0 1b       	sub	r30, r16
    1bf2:	f1 0b       	sbc	r31, r17
    1bf4:	57 01       	movw	r10, r14
    1bf6:	ae 1a       	sub	r10, r30
    1bf8:	bf 0a       	sbc	r11, r31
    1bfa:	c0 16       	cp	r12, r16
    1bfc:	d1 06       	cpc	r13, r17
	UART0_putchar('\r');
	UART0_putstring(sections[section_incr]);
	UART0_putchar('\n');
	UART0_putchar('\n');
	UART0_putchar('\r');
	while(l_incr < 8){
    1bfe:	21 f0       	breq	.+8      	; 0x1c08 <Update_OBC+0x448>
    1c00:	a1 14       	cp	r10, r1
		while(spaces){
    1c02:	b1 04       	cpc	r11, r1
    1c04:	31 f7       	brne	.-52     	; 0x1bd2 <Update_OBC+0x412>
    1c06:	eb cf       	rjmp	.-42     	; 0x1bde <Update_OBC+0x41e>
    1c08:	8a e0       	ldi	r24, 0x0A	; 10
	
	// Print the load states
	// Print the Load Titles
	l_incr = 0; // reset load increment to 0
	spaces = 0; // re initialize spaces
	UART0_putchar('\n');
    1c0a:	4c d3       	rcall	.+1688   	; 0x22a4 <UART0_putchar>
    1c0c:	8d e0       	ldi	r24, 0x0D	; 13
    1c0e:	4a d3       	rcall	.+1684   	; 0x22a4 <UART0_putchar>
	UART0_putchar('\r');
    1c10:	c6 55       	subi	r28, 0x56	; 86
    1c12:	dd 4f       	sbci	r29, 0xFD	; 253
    1c14:	08 81       	ld	r16, Y
    1c16:	19 81       	ldd	r17, Y+1	; 0x01
    1c18:	ca 5a       	subi	r28, 0xAA	; 170
    1c1a:	d2 40       	sbci	r29, 0x02	; 2
    1c1c:	38 01       	movw	r6, r16
    1c1e:	f8 e0       	ldi	r31, 0x08	; 8
    1c20:	6f 0e       	add	r6, r31
    1c22:	71 1c       	adc	r7, r1
    1c24:	06 c0       	rjmp	.+12     	; 0x1c32 <Update_OBC+0x472>
    1c26:	80 e2       	ldi	r24, 0x20	; 32
	while(l_incr < 8){
		while(spaces){
			UART0_putchar(' ');
    1c28:	3d d3       	rcall	.+1658   	; 0x22a4 <UART0_putchar>
    1c2a:	21 e0       	ldi	r18, 0x01	; 1
			spaces--;
    1c2c:	e2 1a       	sub	r14, r18
    1c2e:	f1 08       	sbc	r15, r1
	l_incr = 0; // reset load increment to 0
	spaces = 0; // re initialize spaces
	UART0_putchar('\n');
	UART0_putchar('\r');
	while(l_incr < 8){
		while(spaces){
    1c30:	d1 f7       	brne	.-12     	; 0x1c26 <Update_OBC+0x466>
			UART0_putchar(' ');
			spaces--;
		}
		if(power[l_incr] == 'y'){
    1c32:	d8 01       	movw	r26, r16
    1c34:	8d 91       	ld	r24, X+
    1c36:	8d 01       	movw	r16, r26
    1c38:	89 37       	cpi	r24, 0x79	; 121
			UART0_putstring("ON");
    1c3a:	49 f4       	brne	.+18     	; 0x1c4e <Update_OBC+0x48e>
    1c3c:	8b ee       	ldi	r24, 0xEB	; 235
    1c3e:	96 e0       	ldi	r25, 0x06	; 6
    1c40:	41 d3       	rcall	.+1666   	; 0x22c4 <UART0_putstring>
			spaces = spacing - 2;			
    1c42:	0f 2e       	mov	r0, r31
    1c44:	f2 e1       	ldi	r31, 0x12	; 18
    1c46:	ef 2e       	mov	r14, r31
    1c48:	f1 2c       	mov	r15, r1
    1c4a:	f0 2d       	mov	r31, r0
		}
		else{
			UART0_putstring("OFF");
    1c4c:	08 c0       	rjmp	.+16     	; 0x1c5e <Update_OBC+0x49e>
    1c4e:	8e ee       	ldi	r24, 0xEE	; 238
    1c50:	96 e0       	ldi	r25, 0x06	; 6
    1c52:	38 d3       	rcall	.+1648   	; 0x22c4 <UART0_putstring>
			spaces = spacing - 3;
    1c54:	0f 2e       	mov	r0, r31
    1c56:	f1 e1       	ldi	r31, 0x11	; 17
    1c58:	ef 2e       	mov	r14, r31
    1c5a:	f1 2c       	mov	r15, r1
    1c5c:	f0 2d       	mov	r31, r0
	// Print the Load Titles
	l_incr = 0; // reset load increment to 0
	spaces = 0; // re initialize spaces
	UART0_putchar('\n');
	UART0_putchar('\r');
	while(l_incr < 8){
    1c5e:	60 16       	cp	r6, r16
    1c60:	71 06       	cpc	r7, r17
    1c62:	09 f7       	brne	.-62     	; 0x1c26 <Update_OBC+0x466>
			UART0_putstring("OFF");
			spaces = spacing - 3;
		}
		l_incr++;
	}
	UART0_putchar('\n');
    1c64:	8a e0       	ldi	r24, 0x0A	; 10
    1c66:	1e d3       	rcall	.+1596   	; 0x22a4 <UART0_putchar>
    1c68:	8a e0       	ldi	r24, 0x0A	; 10
	UART0_putchar('\n');
    1c6a:	1c d3       	rcall	.+1592   	; 0x22a4 <UART0_putchar>
    1c6c:	8d e0       	ldi	r24, 0x0D	; 13
	UART0_putchar('\r');
    1c6e:	1a d3       	rcall	.+1588   	; 0x22a4 <UART0_putchar>
    1c70:	82 ef       	ldi	r24, 0xF2	; 242
    1c72:	96 e0       	ldi	r25, 0x06	; 6
	
	// Print the State Number
	char state[5]; // character array for sprintf()
	UART0_putstring("STATE #");
    1c74:	27 d3       	rcall	.+1614   	; 0x22c4 <UART0_putstring>
    1c76:	8a e0       	ldi	r24, 0x0A	; 10
    1c78:	15 d3       	rcall	.+1578   	; 0x22a4 <UART0_putchar>
	UART0_putchar('\n');
    1c7a:	8d e0       	ldi	r24, 0x0D	; 13
    1c7c:	13 d3       	rcall	.+1574   	; 0x22a4 <UART0_putchar>
	UART0_putchar('\r');
    1c7e:	c4 55       	subi	r28, 0x54	; 84
    1c80:	dd 4f       	sbci	r29, 0xFD	; 253
	if(state_num == 'M'){
    1c82:	b8 81       	ld	r27, Y
    1c84:	cc 5a       	subi	r28, 0xAC	; 172
    1c86:	d2 40       	sbci	r29, 0x02	; 2
    1c88:	bd 34       	cpi	r27, 0x4D	; 77
    1c8a:	19 f4       	brne	.+6      	; 0x1c92 <Update_OBC+0x4d2>
		UART0_putchar('M');
    1c8c:	8d e4       	ldi	r24, 0x4D	; 77
    1c8e:	0a d3       	rcall	.+1556   	; 0x22a4 <UART0_putchar>
    1c90:	1a c0       	rjmp	.+52     	; 0x1cc6 <Update_OBC+0x506>
    1c92:	1f 92       	push	r1
	}
	else{
		sprintf(state,"%d",state_num);
    1c94:	c4 55       	subi	r28, 0x54	; 84
    1c96:	dd 4f       	sbci	r29, 0xFD	; 253
    1c98:	e8 81       	ld	r30, Y
    1c9a:	cc 5a       	subi	r28, 0xAC	; 172
    1c9c:	d2 40       	sbci	r29, 0x02	; 2
    1c9e:	ef 93       	push	r30
    1ca0:	8a ef       	ldi	r24, 0xFA	; 250
    1ca2:	96 e0       	ldi	r25, 0x06	; 6
    1ca4:	9f 93       	push	r25
    1ca6:	8f 93       	push	r24
    1ca8:	8e 01       	movw	r16, r28
    1caa:	0b 55       	subi	r16, 0x5B	; 91
    1cac:	1d 4f       	sbci	r17, 0xFD	; 253
    1cae:	1f 93       	push	r17
    1cb0:	0f 93       	push	r16
    1cb2:	0e 94 ec 1a 	call	0x35d8	; 0x35d8 <sprintf>
		UART0_putstring(state);
    1cb6:	c8 01       	movw	r24, r16
    1cb8:	05 d3       	rcall	.+1546   	; 0x22c4 <UART0_putstring>
    1cba:	0f 90       	pop	r0
    1cbc:	0f 90       	pop	r0
    1cbe:	0f 90       	pop	r0
    1cc0:	0f 90       	pop	r0
	}
	UART0_putchar('\n');
    1cc2:	0f 90       	pop	r0
    1cc4:	0f 90       	pop	r0
	UART0_putchar('\n');
    1cc6:	8a e0       	ldi	r24, 0x0A	; 10
    1cc8:	ed d2       	rcall	.+1498   	; 0x22a4 <UART0_putchar>
	UART0_putchar('\r');
    1cca:	8a e0       	ldi	r24, 0x0A	; 10
    1ccc:	eb d2       	rcall	.+1494   	; 0x22a4 <UART0_putchar>
    1cce:	8d e0       	ldi	r24, 0x0D	; 13
	
	// Print the State of Charge
	// re-use state from above
	UART0_putstring("STATE OF CHARGE");
    1cd0:	e9 d2       	rcall	.+1490   	; 0x22a4 <UART0_putchar>
    1cd2:	8d ef       	ldi	r24, 0xFD	; 253
    1cd4:	96 e0       	ldi	r25, 0x06	; 6
    1cd6:	f6 d2       	rcall	.+1516   	; 0x22c4 <UART0_putstring>
	UART0_putchar('\n');
    1cd8:	8a e0       	ldi	r24, 0x0A	; 10
    1cda:	e4 d2       	rcall	.+1480   	; 0x22a4 <UART0_putchar>
    1cdc:	8d e0       	ldi	r24, 0x0D	; 13
	UART0_putchar('\r');
    1cde:	e2 d2       	rcall	.+1476   	; 0x22a4 <UART0_putchar>
    1ce0:	c1 55       	subi	r28, 0x51	; 81
    1ce2:	dd 4f       	sbci	r29, 0xFD	; 253
	sprintf(state,"%d",soc);
    1ce4:	f8 81       	ld	r31, Y
    1ce6:	cf 5a       	subi	r28, 0xAF	; 175
    1ce8:	d2 40       	sbci	r29, 0x02	; 2
    1cea:	ff 93       	push	r31
    1cec:	c2 55       	subi	r28, 0x52	; 82
    1cee:	dd 4f       	sbci	r29, 0xFD	; 253
    1cf0:	28 81       	ld	r18, Y
    1cf2:	ce 5a       	subi	r28, 0xAE	; 174
    1cf4:	d2 40       	sbci	r29, 0x02	; 2
    1cf6:	2f 93       	push	r18
    1cf8:	8a ef       	ldi	r24, 0xFA	; 250
    1cfa:	96 e0       	ldi	r25, 0x06	; 6
    1cfc:	9f 93       	push	r25
    1cfe:	8f 93       	push	r24
    1d00:	8e 01       	movw	r16, r28
    1d02:	0b 55       	subi	r16, 0x5B	; 91
    1d04:	1d 4f       	sbci	r17, 0xFD	; 253
	UART0_putstring(state);
    1d06:	1f 93       	push	r17
    1d08:	0f 93       	push	r16
    1d0a:	0e 94 ec 1a 	call	0x35d8	; 0x35d8 <sprintf>
	UART0_putchar('\n');
    1d0e:	c8 01       	movw	r24, r16
    1d10:	d9 d2       	rcall	.+1458   	; 0x22c4 <UART0_putstring>
	UART0_putchar('\n');
    1d12:	8a e0       	ldi	r24, 0x0A	; 10
    1d14:	c7 d2       	rcall	.+1422   	; 0x22a4 <UART0_putchar>
    1d16:	8a e0       	ldi	r24, 0x0A	; 10
	UART0_putchar('\r');
    1d18:	c5 d2       	rcall	.+1418   	; 0x22a4 <UART0_putchar>
    1d1a:	8d e0       	ldi	r24, 0x0D	; 13
    1d1c:	c3 d2       	rcall	.+1414   	; 0x22a4 <UART0_putchar>
	
	
	// Print the mode of operation (auto/manual)
	UART0_putstring("MODE");
    1d1e:	8d e0       	ldi	r24, 0x0D	; 13
    1d20:	97 e0       	ldi	r25, 0x07	; 7
    1d22:	d0 d2       	rcall	.+1440   	; 0x22c4 <UART0_putstring>
    1d24:	8a e0       	ldi	r24, 0x0A	; 10
	UART0_putchar('\n');
    1d26:	be d2       	rcall	.+1404   	; 0x22a4 <UART0_putchar>
    1d28:	8d e0       	ldi	r24, 0x0D	; 13
    1d2a:	bc d2       	rcall	.+1400   	; 0x22a4 <UART0_putchar>
	UART0_putchar('\r');
    1d2c:	0f 90       	pop	r0
    1d2e:	0f 90       	pop	r0
    1d30:	0f 90       	pop	r0
	if(mode){
    1d32:	0f 90       	pop	r0
    1d34:	0f 90       	pop	r0
    1d36:	0f 90       	pop	r0
    1d38:	c3 55       	subi	r28, 0x53	; 83
    1d3a:	dd 4f       	sbci	r29, 0xFD	; 253
    1d3c:	38 81       	ld	r19, Y
    1d3e:	cd 5a       	subi	r28, 0xAD	; 173
    1d40:	d2 40       	sbci	r29, 0x02	; 2
    1d42:	33 23       	and	r19, r19
    1d44:	21 f0       	breq	.+8      	; 0x1d4e <Update_OBC+0x58e>
    1d46:	82 e1       	ldi	r24, 0x12	; 18
    1d48:	97 e0       	ldi	r25, 0x07	; 7
    1d4a:	bc d2       	rcall	.+1400   	; 0x22c4 <UART0_putstring>
		UART0_putstring("Autonomous");
    1d4c:	03 c0       	rjmp	.+6      	; 0x1d54 <Update_OBC+0x594>
    1d4e:	8d e1       	ldi	r24, 0x1D	; 29
    1d50:	97 e0       	ldi	r25, 0x07	; 7
    1d52:	b8 d2       	rcall	.+1392   	; 0x22c4 <UART0_putstring>
    1d54:	8a e0       	ldi	r24, 0x0A	; 10
	}
	else{
		UART0_putstring("Manual");
    1d56:	a6 d2       	rcall	.+1356   	; 0x22a4 <UART0_putchar>
    1d58:	8a e0       	ldi	r24, 0x0A	; 10
    1d5a:	a4 d2       	rcall	.+1352   	; 0x22a4 <UART0_putchar>
    1d5c:	8d e0       	ldi	r24, 0x0D	; 13
	}
	UART0_putchar('\n');
    1d5e:	a2 d2       	rcall	.+1348   	; 0x22a4 <UART0_putchar>
    1d60:	11 c0       	rjmp	.+34     	; 0x1d84 <Update_OBC+0x5c4>
    1d62:	89 2b       	or	r24, r25
	UART0_putchar('\n');
    1d64:	09 f0       	breq	.+2      	; 0x1d68 <Update_OBC+0x5a8>
    1d66:	88 ce       	rjmp	.-752    	; 0x1a78 <Update_OBC+0x2b8>
    1d68:	6d ce       	rjmp	.-806    	; 0x1a44 <Update_OBC+0x284>
	UART0_putchar('\r');
    1d6a:	c7 01       	movw	r24, r14
    1d6c:	ab d2       	rcall	.+1366   	; 0x22c4 <UART0_putstring>
    1d6e:	f7 01       	movw	r30, r14
}
    1d70:	01 90       	ld	r0, Z+
			spaces = 0; // reset for next line of titles
		}
		
		// Put the titles in normally
		// re-initialize the spaces
		if(s_incr == 0){
    1d72:	00 20       	and	r0, r0
    1d74:	e9 f7       	brne	.-6      	; 0x1d70 <Update_OBC+0x5b0>
    1d76:	31 97       	sbiw	r30, 0x01	; 1
    1d78:	ee 19       	sub	r30, r14
		}
		while(spaces){
			UART0_putchar(' ');
			spaces--;
		}
		UART0_putstring(sensors[s_incr]);
    1d7a:	ff 09       	sbc	r31, r15
    1d7c:	84 01       	movw	r16, r8
    1d7e:	0e 1b       	sub	r16, r30
		s_incr++;
		spaces = spacing - strlen(sensors[s_incr - 1]);
    1d80:	1f 0b       	sbc	r17, r31
    1d82:	f2 ce       	rjmp	.-540    	; 0x1b68 <Update_OBC+0x3a8>
    1d84:	cb 54       	subi	r28, 0x4B	; 75
    1d86:	dd 4f       	sbci	r29, 0xFD	; 253
    1d88:	0f b6       	in	r0, 0x3f	; 63
    1d8a:	f8 94       	cli
    1d8c:	de bf       	out	0x3e, r29	; 62
    1d8e:	0f be       	out	0x3f, r0	; 63
    1d90:	cd bf       	out	0x3d, r28	; 61
    1d92:	df 91       	pop	r29
    1d94:	cf 91       	pop	r28
		UART0_putstring("Manual");
	}
	UART0_putchar('\n');
	UART0_putchar('\n');
	UART0_putchar('\r');
}
    1d96:	1f 91       	pop	r17
    1d98:	0f 91       	pop	r16
    1d9a:	ff 90       	pop	r15
    1d9c:	ef 90       	pop	r14
    1d9e:	df 90       	pop	r13
    1da0:	cf 90       	pop	r12
    1da2:	bf 90       	pop	r11
    1da4:	af 90       	pop	r10
    1da6:	9f 90       	pop	r9
    1da8:	8f 90       	pop	r8
    1daa:	7f 90       	pop	r7
    1dac:	6f 90       	pop	r6
    1dae:	5f 90       	pop	r5
    1db0:	4f 90       	pop	r4
    1db2:	3f 90       	pop	r3
    1db4:	2f 90       	pop	r2
    1db6:	08 95       	ret

00001db8 <Manual_RESET>:
    1db8:	61 e0       	ldi	r22, 0x01	; 1
    1dba:	70 e0       	ldi	r23, 0x00	; 0
    1dbc:	8f ef       	ldi	r24, 0xFF	; 255
    1dbe:	af db       	rcall	.-2210   	; 0x151e <EEPROM_Write>
    1dc0:	a8 95       	wdr
    1dc2:	81 e0       	ldi	r24, 0x01	; 1
    1dc4:	d2 d2       	rcall	.+1444   	; 0x236a <wdt_enable>
    1dc6:	80 e0       	ldi	r24, 0x00	; 0
    1dc8:	ac c2       	rjmp	.+1368   	; 0x2322 <wdt_set_timeout_period>
	
	// Set the watchdog to System Reset Mode
	wdt_enable(SYSTEM_RESET_MODE);
	
	// Change the tiemout period to 1.0s			 
	wdt_set_timeout_period(WDT_TIMEOUT_PERIOD_2KCLK); // timeout set from 1024k to 128k
    1dca:	08 95       	ret

00001dcc <commandDecode>:
    1dcc:	2f 92       	push	r2
// Date: 2019-03-17
// Description: Decodes commands from the OBC and calls their corresponding function.		
/*========================================================================================*/
void commandDecode (double* telem, uint8_t* mode, uint8_t* power_state,
					char* power, uint8_t* pwrMat, uint8_t state_num, 
					uint8_t* edit_num, uint8_t* demo, int soc){
    1dce:	3f 92       	push	r3
    1dd0:	4f 92       	push	r4
    1dd2:	5f 92       	push	r5
    1dd4:	6f 92       	push	r6
    1dd6:	7f 92       	push	r7
    1dd8:	8f 92       	push	r8
    1dda:	9f 92       	push	r9
    1ddc:	af 92       	push	r10
    1dde:	bf 92       	push	r11
    1de0:	cf 92       	push	r12
    1de2:	df 92       	push	r13
    1de4:	ef 92       	push	r14
    1de6:	ff 92       	push	r15
    1de8:	0f 93       	push	r16
    1dea:	1f 93       	push	r17
    1dec:	cf 93       	push	r28
    1dee:	df 93       	push	r29
    1df0:	cd b7       	in	r28, 0x3d	; 61
    1df2:	de b7       	in	r29, 0x3e	; 62
    1df4:	ce 5c       	subi	r28, 0xCE	; 206
    1df6:	d1 09       	sbc	r29, r1
    1df8:	0f b6       	in	r0, 0x3f	; 63
    1dfa:	f8 94       	cli
    1dfc:	de bf       	out	0x3e, r29	; 62
    1dfe:	0f be       	out	0x3f, r0	; 63
    1e00:	cd bf       	out	0x3d, r28	; 61
    1e02:	c7 53       	subi	r28, 0x37	; 55
    1e04:	df 4f       	sbci	r29, 0xFF	; 255
    1e06:	99 83       	std	Y+1, r25	; 0x01
    1e08:	88 83       	st	Y, r24
    1e0a:	c9 5c       	subi	r28, 0xC9	; 201
    1e0c:	d0 40       	sbci	r29, 0x00	; 0
    1e0e:	2b 01       	movw	r4, r22
    1e10:	1a 01       	movw	r2, r20
    1e12:	39 01       	movw	r6, r18
    1e14:	c5 53       	subi	r28, 0x35	; 53
    1e16:	df 4f       	sbci	r29, 0xFF	; 255
    1e18:	19 83       	std	Y+1, r17	; 0x01
    1e1a:	08 83       	st	Y, r16
    1e1c:	cb 5c       	subi	r28, 0xCB	; 203
    1e1e:	d0 40       	sbci	r29, 0x00	; 0
    1e20:	c3 53       	subi	r28, 0x33	; 51
    1e22:	df 4f       	sbci	r29, 0xFF	; 255
    1e24:	d9 82       	std	Y+1, r13	; 0x01
    1e26:	c8 82       	st	Y, r12
    1e28:	cd 5c       	subi	r28, 0xCD	; 205
    1e2a:	d0 40       	sbci	r29, 0x00	; 0
	
	// Erase the first echoed letter
	UART0_putchar('\b'); // ascii code for backspace
    1e2c:	88 e0       	ldi	r24, 0x08	; 8
    1e2e:	3a d2       	rcall	.+1140   	; 0x22a4 <UART0_putchar>
	
	// List of OBC Commands
	// OBC Commands
	char obc_command[10][20] = {"TelemRqt", "SubSysRqt",
    1e30:	8e 01       	movw	r16, r28
    1e32:	0f 5f       	subi	r16, 0xFF	; 255
    1e34:	1f 4f       	sbci	r17, 0xFF	; 255
    1e36:	88 ec       	ldi	r24, 0xC8	; 200
    1e38:	d8 01       	movw	r26, r16
    1e3a:	1d 92       	st	X+, r1
    1e3c:	8a 95       	dec	r24
    1e3e:	e9 f7       	brne	.-6      	; 0x1e3a <commandDecode+0x6e>
    1e40:	89 e0       	ldi	r24, 0x09	; 9
    1e42:	e4 eb       	ldi	r30, 0xB4	; 180
    1e44:	f4 e0       	ldi	r31, 0x04	; 4
    1e46:	d8 01       	movw	r26, r16
    1e48:	01 90       	ld	r0, Z+
    1e4a:	0d 92       	st	X+, r0
    1e4c:	8a 95       	dec	r24
    1e4e:	e1 f7       	brne	.-8      	; 0x1e48 <commandDecode+0x7c>
    1e50:	fe 01       	movw	r30, r28
    1e52:	3a 96       	adiw	r30, 0x0a	; 10
    1e54:	8b e0       	ldi	r24, 0x0B	; 11
    1e56:	df 01       	movw	r26, r30
    1e58:	1d 92       	st	X+, r1
    1e5a:	8a 95       	dec	r24
    1e5c:	e9 f7       	brne	.-6      	; 0x1e58 <commandDecode+0x8c>
    1e5e:	8a e0       	ldi	r24, 0x0A	; 10
    1e60:	e8 ec       	ldi	r30, 0xC8	; 200
    1e62:	f4 e0       	ldi	r31, 0x04	; 4
    1e64:	de 01       	movw	r26, r28
    1e66:	55 96       	adiw	r26, 0x15	; 21
    1e68:	01 90       	ld	r0, Z+
    1e6a:	0d 92       	st	X+, r0
    1e6c:	8a 95       	dec	r24
    1e6e:	e1 f7       	brne	.-8      	; 0x1e68 <commandDecode+0x9c>
    1e70:	fe 01       	movw	r30, r28
    1e72:	7f 96       	adiw	r30, 0x1f	; 31
    1e74:	8a e0       	ldi	r24, 0x0A	; 10
    1e76:	df 01       	movw	r26, r30
    1e78:	1d 92       	st	X+, r1
    1e7a:	8a 95       	dec	r24
    1e7c:	e9 f7       	brne	.-6      	; 0x1e78 <commandDecode+0xac>
    1e7e:	8b e0       	ldi	r24, 0x0B	; 11
    1e80:	ec ed       	ldi	r30, 0xDC	; 220
    1e82:	f4 e0       	ldi	r31, 0x04	; 4
    1e84:	de 01       	movw	r26, r28
    1e86:	99 96       	adiw	r26, 0x29	; 41
    1e88:	01 90       	ld	r0, Z+
    1e8a:	0d 92       	st	X+, r0
    1e8c:	8a 95       	dec	r24
    1e8e:	e1 f7       	brne	.-8      	; 0x1e88 <commandDecode+0xbc>
    1e90:	89 e0       	ldi	r24, 0x09	; 9
    1e92:	fe 01       	movw	r30, r28
    1e94:	f4 96       	adiw	r30, 0x34	; 52
    1e96:	df 01       	movw	r26, r30
    1e98:	28 2f       	mov	r18, r24
    1e9a:	1d 92       	st	X+, r1
    1e9c:	2a 95       	dec	r18
    1e9e:	e9 f7       	brne	.-6      	; 0x1e9a <commandDecode+0xce>
    1ea0:	9c e0       	ldi	r25, 0x0C	; 12
    1ea2:	e0 ef       	ldi	r30, 0xF0	; 240
    1ea4:	f4 e0       	ldi	r31, 0x04	; 4
    1ea6:	de 01       	movw	r26, r28
    1ea8:	dd 96       	adiw	r26, 0x3d	; 61
    1eaa:	01 90       	ld	r0, Z+
    1eac:	0d 92       	st	X+, r0
    1eae:	9a 95       	dec	r25
    1eb0:	e1 f7       	brne	.-8      	; 0x1eaa <commandDecode+0xde>
    1eb2:	fe 01       	movw	r30, r28
    1eb4:	e7 5b       	subi	r30, 0xB7	; 183
    1eb6:	ff 4f       	sbci	r31, 0xFF	; 255
    1eb8:	98 e0       	ldi	r25, 0x08	; 8
    1eba:	df 01       	movw	r26, r30
    1ebc:	29 2f       	mov	r18, r25
    1ebe:	1d 92       	st	X+, r1
    1ec0:	2a 95       	dec	r18
    1ec2:	e9 f7       	brne	.-6      	; 0x1ebe <commandDecode+0xf2>
    1ec4:	2b e0       	ldi	r18, 0x0B	; 11
    1ec6:	e4 e0       	ldi	r30, 0x04	; 4
    1ec8:	f5 e0       	ldi	r31, 0x05	; 5
    1eca:	de 01       	movw	r26, r28
    1ecc:	af 5a       	subi	r26, 0xAF	; 175
    1ece:	bf 4f       	sbci	r27, 0xFF	; 255
    1ed0:	01 90       	ld	r0, Z+
    1ed2:	0d 92       	st	X+, r0
    1ed4:	2a 95       	dec	r18
    1ed6:	e1 f7       	brne	.-8      	; 0x1ed0 <commandDecode+0x104>
    1ed8:	e1 e5       	ldi	r30, 0x51	; 81
    1eda:	f0 e0       	ldi	r31, 0x00	; 0
    1edc:	ec 0f       	add	r30, r28
    1ede:	fd 1f       	adc	r31, r29
    1ee0:	3b 96       	adiw	r30, 0x0b	; 11
    1ee2:	df 01       	movw	r26, r30
    1ee4:	28 2f       	mov	r18, r24
    1ee6:	1d 92       	st	X+, r1
    1ee8:	2a 95       	dec	r18
    1eea:	e9 f7       	brne	.-6      	; 0x1ee6 <commandDecode+0x11a>
    1eec:	2c e0       	ldi	r18, 0x0C	; 12
    1eee:	e8 e1       	ldi	r30, 0x18	; 24
    1ef0:	f5 e0       	ldi	r31, 0x05	; 5
    1ef2:	de 01       	movw	r26, r28
    1ef4:	ab 59       	subi	r26, 0x9B	; 155
    1ef6:	bf 4f       	sbci	r27, 0xFF	; 255
    1ef8:	01 90       	ld	r0, Z+
    1efa:	0d 92       	st	X+, r0
    1efc:	2a 95       	dec	r18
    1efe:	e1 f7       	brne	.-8      	; 0x1ef8 <commandDecode+0x12c>
    1f00:	e5 e6       	ldi	r30, 0x65	; 101
    1f02:	f0 e0       	ldi	r31, 0x00	; 0
    1f04:	ec 0f       	add	r30, r28
    1f06:	fd 1f       	adc	r31, r29
    1f08:	3c 96       	adiw	r30, 0x0c	; 12
    1f0a:	df 01       	movw	r26, r30
    1f0c:	1d 92       	st	X+, r1
    1f0e:	9a 95       	dec	r25
    1f10:	e9 f7       	brne	.-6      	; 0x1f0c <commandDecode+0x140>
    1f12:	9b e0       	ldi	r25, 0x0B	; 11
    1f14:	ec e2       	ldi	r30, 0x2C	; 44
    1f16:	f5 e0       	ldi	r31, 0x05	; 5
    1f18:	de 01       	movw	r26, r28
    1f1a:	a7 58       	subi	r26, 0x87	; 135
    1f1c:	bf 4f       	sbci	r27, 0xFF	; 255
    1f1e:	01 90       	ld	r0, Z+
    1f20:	0d 92       	st	X+, r0
    1f22:	9a 95       	dec	r25
    1f24:	e1 f7       	brne	.-8      	; 0x1f1e <commandDecode+0x152>
    1f26:	e9 e7       	ldi	r30, 0x79	; 121
    1f28:	f0 e0       	ldi	r31, 0x00	; 0
    1f2a:	ec 0f       	add	r30, r28
    1f2c:	fd 1f       	adc	r31, r29
    1f2e:	3b 96       	adiw	r30, 0x0b	; 11
    1f30:	df 01       	movw	r26, r30
    1f32:	1d 92       	st	X+, r1
    1f34:	8a 95       	dec	r24
    1f36:	e9 f7       	brne	.-6      	; 0x1f32 <commandDecode+0x166>
    1f38:	86 e0       	ldi	r24, 0x06	; 6
    1f3a:	e0 e4       	ldi	r30, 0x40	; 64
    1f3c:	f5 e0       	ldi	r31, 0x05	; 5
    1f3e:	de 01       	movw	r26, r28
    1f40:	a3 57       	subi	r26, 0x73	; 115
    1f42:	bf 4f       	sbci	r27, 0xFF	; 255
    1f44:	01 90       	ld	r0, Z+
    1f46:	0d 92       	st	X+, r0
    1f48:	8a 95       	dec	r24
    1f4a:	e1 f7       	brne	.-8      	; 0x1f44 <commandDecode+0x178>
    1f4c:	ed e8       	ldi	r30, 0x8D	; 141
    1f4e:	f0 e0       	ldi	r31, 0x00	; 0
    1f50:	ec 0f       	add	r30, r28
    1f52:	fd 1f       	adc	r31, r29
    1f54:	36 96       	adiw	r30, 0x06	; 6
    1f56:	8e e0       	ldi	r24, 0x0E	; 14
    1f58:	df 01       	movw	r26, r30
    1f5a:	1d 92       	st	X+, r1
    1f5c:	8a 95       	dec	r24
    1f5e:	e9 f7       	brne	.-6      	; 0x1f5a <commandDecode+0x18e>
    1f60:	85 e0       	ldi	r24, 0x05	; 5
    1f62:	e4 e5       	ldi	r30, 0x54	; 84
    1f64:	f5 e0       	ldi	r31, 0x05	; 5
    1f66:	de 01       	movw	r26, r28
    1f68:	af 55       	subi	r26, 0x5F	; 95
    1f6a:	bf 4f       	sbci	r27, 0xFF	; 255
    1f6c:	01 90       	ld	r0, Z+
    1f6e:	0d 92       	st	X+, r0
    1f70:	8a 95       	dec	r24
    1f72:	e1 f7       	brne	.-8      	; 0x1f6c <commandDecode+0x1a0>
    1f74:	e1 ea       	ldi	r30, 0xA1	; 161
    1f76:	f0 e0       	ldi	r31, 0x00	; 0
    1f78:	ec 0f       	add	r30, r28
    1f7a:	fd 1f       	adc	r31, r29
    1f7c:	35 96       	adiw	r30, 0x05	; 5
    1f7e:	8f e0       	ldi	r24, 0x0F	; 15
    1f80:	df 01       	movw	r26, r30
    1f82:	1d 92       	st	X+, r1
    1f84:	8a 95       	dec	r24
    1f86:	e9 f7       	brne	.-6      	; 0x1f82 <commandDecode+0x1b6>
							   
	// Print list of commands for the user
	int i = 0; // increment
	
	// Printing the list cleanly
	UART0_putstring("List of available OBC Commands: ");
    1f88:	84 e2       	ldi	r24, 0x24	; 36
    1f8a:	97 e0       	ldi	r25, 0x07	; 7
    1f8c:	9b d1       	rcall	.+822    	; 0x22c4 <UART0_putstring>
	UART0_putchar('\n');
    1f8e:	8a e0       	ldi	r24, 0x0A	; 10
    1f90:	89 d1       	rcall	.+786    	; 0x22a4 <UART0_putchar>
	UART0_putchar('\n');
    1f92:	8a e0       	ldi	r24, 0x0A	; 10
    1f94:	87 d1       	rcall	.+782    	; 0x22a4 <UART0_putchar>
	UART0_putchar('\r');
    1f96:	8d e0       	ldi	r24, 0x0D	; 13
    1f98:	85 d1       	rcall	.+778    	; 0x22a4 <UART0_putchar>
    1f9a:	68 01       	movw	r12, r16
    1f9c:	11 e3       	ldi	r17, 0x31	; 49
	// print all seven commands
	while(i < 9){
		UART0_putchar(0x31 + i); // the '1' plus the command index
    1f9e:	81 2f       	mov	r24, r17
    1fa0:	81 d1       	rcall	.+770    	; 0x22a4 <UART0_putchar>
		UART0_putstring(" -> ");
    1fa2:	85 e4       	ldi	r24, 0x45	; 69
    1fa4:	97 e0       	ldi	r25, 0x07	; 7
		UART0_putstring(obc_command[i]);
    1fa6:	8e d1       	rcall	.+796    	; 0x22c4 <UART0_putstring>
    1fa8:	c6 01       	movw	r24, r12
    1faa:	8c d1       	rcall	.+792    	; 0x22c4 <UART0_putstring>
		UART0_putchar('\n');
    1fac:	8a e0       	ldi	r24, 0x0A	; 10
    1fae:	7a d1       	rcall	.+756    	; 0x22a4 <UART0_putchar>
    1fb0:	8d e0       	ldi	r24, 0x0D	; 13
		UART0_putchar('\r');
    1fb2:	78 d1       	rcall	.+752    	; 0x22a4 <UART0_putchar>
    1fb4:	1f 5f       	subi	r17, 0xFF	; 255
    1fb6:	b4 e1       	ldi	r27, 0x14	; 20
    1fb8:	cb 0e       	add	r12, r27
    1fba:	d1 1c       	adc	r13, r1
	UART0_putstring("List of available OBC Commands: ");
	UART0_putchar('\n');
	UART0_putchar('\n');
	UART0_putchar('\r');
	// print all seven commands
	while(i < 9){
    1fbc:	1a 33       	cpi	r17, 0x3A	; 58
		UART0_putchar('\r');
		i++;
	}
	
	// Prompt the User
	UART0_putchar('\n');
    1fbe:	79 f7       	brne	.-34     	; 0x1f9e <commandDecode+0x1d2>
    1fc0:	8a e0       	ldi	r24, 0x0A	; 10
	UART0_putstring("Enter the desired command:");
    1fc2:	70 d1       	rcall	.+736    	; 0x22a4 <UART0_putchar>
    1fc4:	8a e4       	ldi	r24, 0x4A	; 74
    1fc6:	97 e0       	ldi	r25, 0x07	; 7
	UART0_putchar('\n');
    1fc8:	7d d1       	rcall	.+762    	; 0x22c4 <UART0_putstring>
    1fca:	8a e0       	ldi	r24, 0x0A	; 10
	UART0_putchar('\n');
    1fcc:	6b d1       	rcall	.+726    	; 0x22a4 <UART0_putchar>
    1fce:	8a e0       	ldi	r24, 0x0A	; 10
	UART0_putchar('\r');
    1fd0:	69 d1       	rcall	.+722    	; 0x22a4 <UART0_putchar>
    1fd2:	8d e0       	ldi	r24, 0x0D	; 13
	UART0_putstring("> ");		
    1fd4:	67 d1       	rcall	.+718    	; 0x22a4 <UART0_putchar>
    1fd6:	87 e4       	ldi	r24, 0x47	; 71
    1fd8:	97 e0       	ldi	r25, 0x07	; 7
		UART0_putchar('\n');
		UART0_putchar('\r');
		
		// Print the selected Command
		UART0_putstring("You have Selected: ");
		UART0_putstring(obc_command[com_ind]);
    1fda:	74 d1       	rcall	.+744    	; 0x22c4 <UART0_putstring>
    1fdc:	0f 2e       	mov	r0, r31
    1fde:	f4 e1       	ldi	r31, 0x14	; 20
    1fe0:	ff 2e       	mov	r15, r31
	
	// Check for command in list, if not in list, prompt user again
	
	while(incorrect){
		// Receive command index from OBC
		int com_ind = UART0_getchar() - 0x31; // negate the '0' char value to get the index
    1fe2:	f0 2d       	mov	r31, r0
    1fe4:	67 d1       	rcall	.+718    	; 0x22b4 <UART0_getchar>
    1fe6:	d8 2e       	mov	r13, r24
		UART0_putchar('\n');
    1fe8:	8a e0       	ldi	r24, 0x0A	; 10
    1fea:	5c d1       	rcall	.+696    	; 0x22a4 <UART0_putchar>
    1fec:	8a e0       	ldi	r24, 0x0A	; 10
		UART0_putchar('\n');
    1fee:	5a d1       	rcall	.+692    	; 0x22a4 <UART0_putchar>
    1ff0:	8d e0       	ldi	r24, 0x0D	; 13
    1ff2:	58 d1       	rcall	.+688    	; 0x22a4 <UART0_putchar>
		UART0_putchar('\r');
    1ff4:	85 e6       	ldi	r24, 0x65	; 101
    1ff6:	97 e0       	ldi	r25, 0x07	; 7
		
		// Print the selected Command
		UART0_putstring("You have Selected: ");
    1ff8:	65 d1       	rcall	.+714    	; 0x22c4 <UART0_putstring>
    1ffa:	8d 2d       	mov	r24, r13
    1ffc:	dd 0c       	add	r13, r13
		UART0_putstring(obc_command[com_ind]);
    1ffe:	99 0b       	sbc	r25, r25
    2000:	c1 97       	sbiw	r24, 0x31	; 49
    2002:	f8 9e       	mul	r15, r24
    2004:	60 01       	movw	r12, r0
    2006:	f9 9e       	mul	r15, r25
    2008:	d0 0c       	add	r13, r0
    200a:	11 24       	eor	r1, r1
    200c:	e1 e0       	ldi	r30, 0x01	; 1
    200e:	f0 e0       	ldi	r31, 0x00	; 0
    2010:	ec 0f       	add	r30, r28
    2012:	fd 1f       	adc	r31, r29
    2014:	ce 0e       	add	r12, r30
    2016:	df 1e       	adc	r13, r31
    2018:	c6 01       	movw	r24, r12
    201a:	54 d1       	rcall	.+680    	; 0x22c4 <UART0_putstring>
		UART0_putchar('\n');
    201c:	8a e0       	ldi	r24, 0x0A	; 10
    201e:	42 d1       	rcall	.+644    	; 0x22a4 <UART0_putchar>
    2020:	8a e0       	ldi	r24, 0x0A	; 10
		UART0_putchar('\n');
    2022:	40 d1       	rcall	.+640    	; 0x22a4 <UART0_putchar>
    2024:	8d e0       	ldi	r24, 0x0D	; 13
    2026:	3e d1       	rcall	.+636    	; 0x22a4 <UART0_putchar>
		UART0_putchar('\r');
    2028:	64 eb       	ldi	r22, 0xB4	; 180
    202a:	74 e0       	ldi	r23, 0x04	; 4
			
		incorrect = 0; // assume the user inputs the correct command until it isn't found
			
		if (strcmp(obc_command[com_ind], "TelemRqt") == 0) {
    202c:	c6 01       	movw	r24, r12
    202e:	0e 94 9c 1a 	call	0x3538	; 0x3538 <strcmp>
    2032:	89 2b       	or	r24, r25
    2034:	f1 f4       	brne	.+60     	; 0x2072 <commandDecode+0x2a6>
    2036:	89 e7       	ldi	r24, 0x79	; 121
    2038:	97 e0       	ldi	r25, 0x07	; 7
			UART0_putstring("Updating Telemetry Information");
    203a:	44 d1       	rcall	.+648    	; 0x22c4 <UART0_putstring>
    203c:	8a e0       	ldi	r24, 0x0A	; 10
    203e:	32 d1       	rcall	.+612    	; 0x22a4 <UART0_putchar>
			UART0_putchar('\n');
    2040:	8a e0       	ldi	r24, 0x0A	; 10
    2042:	30 d1       	rcall	.+608    	; 0x22a4 <UART0_putchar>
    2044:	8d e0       	ldi	r24, 0x0D	; 13
			UART0_putchar('\n');
    2046:	2e d1       	rcall	.+604    	; 0x22a4 <UART0_putchar>
    2048:	62 2d       	mov	r22, r2
    204a:	c7 53       	subi	r28, 0x37	; 55
			UART0_putchar('\r');
    204c:	df 4f       	sbci	r29, 0xFF	; 255
    204e:	88 81       	ld	r24, Y
    2050:	99 81       	ldd	r25, Y+1	; 0x01
			Update_TELEM(telem, power_state);
    2052:	c9 5c       	subi	r28, 0xC9	; 201
    2054:	d0 40       	sbci	r29, 0x00	; 0
    2056:	4a db       	rcall	.-2412   	; 0x16ec <Update_TELEM>
    2058:	84 01       	movw	r16, r8
    205a:	d2 01       	movw	r26, r4
    205c:	2c 91       	ld	r18, X
    205e:	4e 2d       	mov	r20, r14
    2060:	b3 01       	movw	r22, r6
			Update_OBC(telem, power, state_num, mode[0], soc);
    2062:	c7 53       	subi	r28, 0x37	; 55
    2064:	df 4f       	sbci	r29, 0xFF	; 255
    2066:	88 81       	ld	r24, Y
    2068:	99 81       	ldd	r25, Y+1	; 0x01
    206a:	c9 5c       	subi	r28, 0xC9	; 201
    206c:	d0 40       	sbci	r29, 0x00	; 0
    206e:	a8 db       	rcall	.-2224   	; 0x17c0 <Update_OBC>
    2070:	b7 c0       	rjmp	.+366    	; 0x21e0 <commandDecode+0x414>
    2072:	68 ec       	ldi	r22, 0xC8	; 200
    2074:	74 e0       	ldi	r23, 0x04	; 4
			//send telem
		} //end if
		else if (strcmp(obc_command[com_ind], "SubSysRqt") == 0) {	
    2076:	c6 01       	movw	r24, r12
    2078:	0e 94 9c 1a 	call	0x3538	; 0x3538 <strcmp>
    207c:	89 2b       	or	r24, r25
    207e:	09 f0       	breq	.+2      	; 0x2082 <commandDecode+0x2b6>
    2080:	34 c0       	rjmp	.+104    	; 0x20ea <commandDecode+0x31e>
			if(!mode[0]){
    2082:	f2 01       	movw	r30, r4
    2084:	80 81       	ld	r24, Z
    2086:	81 11       	cpse	r24, r1
				// power_state = some new value (input yet to be determined, handle in GUI)
				UART0_putstring("Enter the desired state: ");
    2088:	1d c0       	rjmp	.+58     	; 0x20c4 <commandDecode+0x2f8>
    208a:	88 e9       	ldi	r24, 0x98	; 152
				UART0_putchar('\n');
    208c:	97 e0       	ldi	r25, 0x07	; 7
    208e:	1a d1       	rcall	.+564    	; 0x22c4 <UART0_putstring>
				UART0_putchar('\n');
    2090:	8a e0       	ldi	r24, 0x0A	; 10
    2092:	08 d1       	rcall	.+528    	; 0x22a4 <UART0_putchar>
				UART0_putchar('\r');
    2094:	8a e0       	ldi	r24, 0x0A	; 10
    2096:	06 d1       	rcall	.+524    	; 0x22a4 <UART0_putchar>
				UART0_putstring("> ");	
    2098:	8d e0       	ldi	r24, 0x0D	; 13
    209a:	04 d1       	rcall	.+520    	; 0x22a4 <UART0_putchar>
				UART0_getstring(power);
    209c:	87 e4       	ldi	r24, 0x47	; 71
    209e:	97 e0       	ldi	r25, 0x07	; 7
    20a0:	11 d1       	rcall	.+546    	; 0x22c4 <UART0_putstring>
				Manual_STATE(power, power_state);
    20a2:	c3 01       	movw	r24, r6
    20a4:	1d d1       	rcall	.+570    	; 0x22e0 <UART0_getstring>
    20a6:	b1 01       	movw	r22, r2
    20a8:	c3 01       	movw	r24, r6
				//UART0_putstring(power);  *****---->>> Putty echo now enabled not need
				Update_LOADS(power_state[0], power_state);
    20aa:	a8 d9       	rcall	.-3248   	; 0x13fc <Manual_STATE>
    20ac:	b1 01       	movw	r22, r2
    20ae:	d1 01       	movw	r26, r2
    20b0:	8c 91       	ld	r24, X
    20b2:	0e 94 7b 07 	call	0xef6	; 0xef6 <Update_LOADS>
				UART0_putchar('\n');
    20b6:	8a e0       	ldi	r24, 0x0A	; 10
    20b8:	f5 d0       	rcall	.+490    	; 0x22a4 <UART0_putchar>
				UART0_putchar('\n');
    20ba:	8a e0       	ldi	r24, 0x0A	; 10
    20bc:	f3 d0       	rcall	.+486    	; 0x22a4 <UART0_putchar>
    20be:	8d e0       	ldi	r24, 0x0D	; 13
				UART0_putchar('\r');
    20c0:	f1 d0       	rcall	.+482    	; 0x22a4 <UART0_putchar>
    20c2:	8e c0       	rjmp	.+284    	; 0x21e0 <commandDecode+0x414>
    20c4:	82 eb       	ldi	r24, 0xB2	; 178
			}
			else{
				UART0_putstring("I am currently in Autonomous mode.");
    20c6:	97 e0       	ldi	r25, 0x07	; 7
    20c8:	fd d0       	rcall	.+506    	; 0x22c4 <UART0_putstring>
    20ca:	8a e0       	ldi	r24, 0x0A	; 10
    20cc:	eb d0       	rcall	.+470    	; 0x22a4 <UART0_putchar>
				UART0_putchar('\n');
    20ce:	8a e0       	ldi	r24, 0x0A	; 10
    20d0:	e9 d0       	rcall	.+466    	; 0x22a4 <UART0_putchar>
    20d2:	8d e0       	ldi	r24, 0x0D	; 13
				UART0_putchar('\n');
    20d4:	e7 d0       	rcall	.+462    	; 0x22a4 <UART0_putchar>
    20d6:	85 ed       	ldi	r24, 0xD5	; 213
    20d8:	97 e0       	ldi	r25, 0x07	; 7
				UART0_putchar('\r');
    20da:	f4 d0       	rcall	.+488    	; 0x22c4 <UART0_putstring>
    20dc:	8a e0       	ldi	r24, 0x0A	; 10
    20de:	e2 d0       	rcall	.+452    	; 0x22a4 <UART0_putchar>
				UART0_putstring("Select ModeChange [5] before attempting to change the power state.");
    20e0:	8a e0       	ldi	r24, 0x0A	; 10
    20e2:	e0 d0       	rcall	.+448    	; 0x22a4 <UART0_putchar>
    20e4:	8d e0       	ldi	r24, 0x0D	; 13
    20e6:	de d0       	rcall	.+444    	; 0x22a4 <UART0_putchar>
				UART0_putchar('\n');
    20e8:	7b c0       	rjmp	.+246    	; 0x21e0 <commandDecode+0x414>
    20ea:	6c ed       	ldi	r22, 0xDC	; 220
    20ec:	74 e0       	ldi	r23, 0x04	; 4
				UART0_putchar('\n');
    20ee:	c6 01       	movw	r24, r12
    20f0:	0e 94 9c 1a 	call	0x3538	; 0x3538 <strcmp>
				UART0_putchar('\r');
    20f4:	89 2b       	or	r24, r25
    20f6:	79 f4       	brne	.+30     	; 0x2116 <commandDecode+0x34a>
    20f8:	c5 53       	subi	r28, 0x35	; 53
				// Tell the user the EPS is still in autonomous mode and it must be changed
			}
		} //else if
		else if (strcmp(obc_command[com_ind], "PwrMatEdit") == 0) {
    20fa:	df 4f       	sbci	r29, 0xFF	; 255
    20fc:	48 81       	ld	r20, Y
    20fe:	59 81       	ldd	r21, Y+1	; 0x01
    2100:	cb 5c       	subi	r28, 0xCB	; 203
    2102:	d0 40       	sbci	r29, 0x00	; 0
			pwrMatEdit(edit_num, power, pwrMat);
    2104:	b3 01       	movw	r22, r6
    2106:	c3 53       	subi	r28, 0x33	; 51
    2108:	df 4f       	sbci	r29, 0xFF	; 255
    210a:	88 81       	ld	r24, Y
    210c:	99 81       	ldd	r25, Y+1	; 0x01
    210e:	cd 5c       	subi	r28, 0xCD	; 205
    2110:	d0 40       	sbci	r29, 0x00	; 0
    2112:	af d9       	rcall	.-3234   	; 0x1472 <pwrMatEdit>
    2114:	65 c0       	rjmp	.+202    	; 0x21e0 <commandDecode+0x414>
    2116:	60 ef       	ldi	r22, 0xF0	; 240
    2118:	74 e0       	ldi	r23, 0x04	; 4
    211a:	c6 01       	movw	r24, r12
    211c:	0e 94 9c 1a 	call	0x3538	; 0x3538 <strcmp>
		} //end else if
		else if (strcmp(obc_command[com_ind], "PwrStateRqt") == 0) {
    2120:	89 2b       	or	r24, r25
    2122:	09 f4       	brne	.+2      	; 0x2126 <commandDecode+0x35a>
    2124:	5d c0       	rjmp	.+186    	; 0x21e0 <commandDecode+0x414>
    2126:	64 e0       	ldi	r22, 0x04	; 4
    2128:	75 e0       	ldi	r23, 0x05	; 5
    212a:	c6 01       	movw	r24, r12
    212c:	0e 94 9c 1a 	call	0x3538	; 0x3538 <strcmp>
			//send the power state matrix cell to the obc
		} //end else if
		else if (strcmp(obc_command[com_ind], "ModeChange") == 0) {
    2130:	89 2b       	or	r24, r25
    2132:	b9 f4       	brne	.+46     	; 0x2162 <commandDecode+0x396>
    2134:	f2 01       	movw	r30, r4
    2136:	80 81       	ld	r24, Z
			// The character 0 must be sent to go into manual mode
			mode[0] = !mode[0]; // toggle the current mode
    2138:	91 e0       	ldi	r25, 0x01	; 1
    213a:	81 11       	cpse	r24, r1
    213c:	90 e0       	ldi	r25, 0x00	; 0
    213e:	d2 01       	movw	r26, r4
    2140:	9c 93       	st	X, r25
    2142:	88 23       	and	r24, r24
    2144:	21 f0       	breq	.+8      	; 0x214e <commandDecode+0x382>
			if(!mode[0]){
    2146:	88 e1       	ldi	r24, 0x18	; 24
				UART0_putstring("I am now in Manual mode.");
    2148:	98 e0       	ldi	r25, 0x08	; 8
    214a:	bc d0       	rcall	.+376    	; 0x22c4 <UART0_putstring>
    214c:	03 c0       	rjmp	.+6      	; 0x2154 <commandDecode+0x388>
    214e:	81 e3       	ldi	r24, 0x31	; 49
    2150:	98 e0       	ldi	r25, 0x08	; 8
			}
			else{
				UART0_putstring("I am now in Autonomous mode.");
    2152:	b8 d0       	rcall	.+368    	; 0x22c4 <UART0_putstring>
    2154:	8a e0       	ldi	r24, 0x0A	; 10
    2156:	a6 d0       	rcall	.+332    	; 0x22a4 <UART0_putchar>
    2158:	8a e0       	ldi	r24, 0x0A	; 10
			}
			UART0_putchar('\n');
    215a:	a4 d0       	rcall	.+328    	; 0x22a4 <UART0_putchar>
    215c:	8d e0       	ldi	r24, 0x0D	; 13
    215e:	a2 d0       	rcall	.+324    	; 0x22a4 <UART0_putchar>
			UART0_putchar('\n');
    2160:	3f c0       	rjmp	.+126    	; 0x21e0 <commandDecode+0x414>
    2162:	68 e1       	ldi	r22, 0x18	; 24
    2164:	75 e0       	ldi	r23, 0x05	; 5
			UART0_putchar('\r');
    2166:	c6 01       	movw	r24, r12
    2168:	0e 94 9c 1a 	call	0x3538	; 0x3538 <strcmp>
			//change or update the mode of the micro
			// In this state do not update the power state, simply remain in the one specified
			// Have an SOC thing here
		} //end else if
		else if (strcmp(obc_command[com_ind], "LaunchReset") == 0) {
    216c:	89 2b       	or	r24, r25
    216e:	19 f4       	brne	.+6      	; 0x2176 <commandDecode+0x3aa>
    2170:	0e 94 20 06 	call	0xc40	; 0xc40 <launch_reset>
			launch_reset();
    2174:	35 c0       	rjmp	.+106    	; 0x21e0 <commandDecode+0x414>
    2176:	6c e2       	ldi	r22, 0x2C	; 44
    2178:	75 e0       	ldi	r23, 0x05	; 5
			//reset the system to a pre-launch config
			// Use the watchdog to reset the system
		} //end else if
		else if (strcmp(obc_command[com_ind], "HelloCheck") == 0) {
    217a:	c6 01       	movw	r24, r12
    217c:	0e 94 9c 1a 	call	0x3538	; 0x3538 <strcmp>
    2180:	89 2b       	or	r24, r25
    2182:	51 f4       	brne	.+20     	; 0x2198 <commandDecode+0x3cc>
    2184:	8e e4       	ldi	r24, 0x4E	; 78
    2186:	98 e0       	ldi	r25, 0x08	; 8
			UART0_putstring("Oh Hello, I am CubeSat EPS. What's your Zodiac sign?");
    2188:	9d d0       	rcall	.+314    	; 0x22c4 <UART0_putstring>
    218a:	8a e0       	ldi	r24, 0x0A	; 10
    218c:	8b d0       	rcall	.+278    	; 0x22a4 <UART0_putchar>
    218e:	8a e0       	ldi	r24, 0x0A	; 10
			UART0_putchar('\n');
    2190:	89 d0       	rcall	.+274    	; 0x22a4 <UART0_putchar>
    2192:	8d e0       	ldi	r24, 0x0D	; 13
    2194:	87 d0       	rcall	.+270    	; 0x22a4 <UART0_putchar>
			UART0_putchar('\n');
    2196:	24 c0       	rjmp	.+72     	; 0x21e0 <commandDecode+0x414>
    2198:	60 e4       	ldi	r22, 0x40	; 64
    219a:	75 e0       	ldi	r23, 0x05	; 5
			UART0_putchar('\r');
    219c:	c6 01       	movw	r24, r12
    219e:	0e 94 9c 1a 	call	0x3538	; 0x3538 <strcmp>
    21a2:	89 2b       	or	r24, r25
		} //end else if
		else if(strcmp(obc_command[com_ind], "Reset") == 0){
    21a4:	11 f4       	brne	.+4      	; 0x21aa <commandDecode+0x3de>
    21a6:	08 de       	rcall	.-1008   	; 0x1db8 <Manual_RESET>
    21a8:	1b c0       	rjmp	.+54     	; 0x21e0 <commandDecode+0x414>
    21aa:	64 e5       	ldi	r22, 0x54	; 84
    21ac:	75 e0       	ldi	r23, 0x05	; 5
    21ae:	c6 01       	movw	r24, r12
    21b0:	0e 94 9c 1a 	call	0x3538	; 0x3538 <strcmp>
			Manual_RESET(); // Reset the EPS without changing launch state
    21b4:	89 2b       	or	r24, r25
    21b6:	41 f4       	brne	.+16     	; 0x21c8 <commandDecode+0x3fc>
		}
		else if(strcmp(obc_command[com_ind], "Demo") == 0){
    21b8:	81 e0       	ldi	r24, 0x01	; 1
    21ba:	f5 01       	movw	r30, r10
    21bc:	90 81       	ld	r25, Z
    21be:	91 11       	cpse	r25, r1
    21c0:	80 e0       	ldi	r24, 0x00	; 0
    21c2:	d5 01       	movw	r26, r10
    21c4:	8c 93       	st	X, r24
			demo[0] = !demo[0]; // toggle demo mode
    21c6:	0c c0       	rjmp	.+24     	; 0x21e0 <commandDecode+0x414>
    21c8:	83 e8       	ldi	r24, 0x83	; 131
    21ca:	98 e0       	ldi	r25, 0x08	; 8
    21cc:	7b d0       	rcall	.+246    	; 0x22c4 <UART0_putstring>
    21ce:	8a e0       	ldi	r24, 0x0A	; 10
    21d0:	69 d0       	rcall	.+210    	; 0x22a4 <UART0_putchar>
    21d2:	8a e0       	ldi	r24, 0x0A	; 10
    21d4:	67 d0       	rcall	.+206    	; 0x22a4 <UART0_putchar>
		}
		else {
			incorrect = 1;
			UART0_putstring("Command Unrecognized. Please Try again.");
    21d6:	8d e0       	ldi	r24, 0x0D	; 13
    21d8:	65 d0       	rcall	.+202    	; 0x22a4 <UART0_putchar>
    21da:	8e e3       	ldi	r24, 0x3E	; 62
    21dc:	63 d0       	rcall	.+198    	; 0x22a4 <UART0_putchar>
			UART0_putchar('\n');
    21de:	02 cf       	rjmp	.-508    	; 0x1fe4 <commandDecode+0x218>
    21e0:	c2 53       	subi	r28, 0x32	; 50
    21e2:	df 4f       	sbci	r29, 0xFF	; 255
			UART0_putchar('\n');
    21e4:	0f b6       	in	r0, 0x3f	; 63
    21e6:	f8 94       	cli
    21e8:	de bf       	out	0x3e, r29	; 62
			UART0_putchar('\r');
    21ea:	0f be       	out	0x3f, r0	; 63
    21ec:	cd bf       	out	0x3d, r28	; 61
    21ee:	df 91       	pop	r29
			UART0_putchar('>');
    21f0:	cf 91       	pop	r28
    21f2:	1f 91       	pop	r17
    21f4:	0f 91       	pop	r16
    21f6:	ff 90       	pop	r15
			//UART0_putstring(strcat("Error! The following command isn't recognized: ", obc_command));
		} //end else
	} //end while
} //end commandDecode
    21f8:	ef 90       	pop	r14
    21fa:	df 90       	pop	r13
    21fc:	cf 90       	pop	r12
    21fe:	bf 90       	pop	r11
    2200:	af 90       	pop	r10
    2202:	9f 90       	pop	r9
    2204:	8f 90       	pop	r8
    2206:	7f 90       	pop	r7
    2208:	6f 90       	pop	r6
    220a:	5f 90       	pop	r5
    220c:	4f 90       	pop	r4
    220e:	3f 90       	pop	r3
    2210:	2f 90       	pop	r2
    2212:	08 95       	ret

00002214 <GPIO_init>:

void GPIO_init(){
	
	// Initializing the PORTs
	
	DDRH = 0x7F; // PORTH pins 0-6 set as outputs
    2214:	8f e7       	ldi	r24, 0x7F	; 127
    2216:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <__TEXT_REGION_LENGTH__+0x7e0101>
	DDRL = 0x0E; // PORTL pins 1-3 set as outputs
    221a:	9e e0       	ldi	r25, 0x0E	; 14
    221c:	90 93 0a 01 	sts	0x010A, r25	; 0x80010a <__TEXT_REGION_LENGTH__+0x7e010a>
	DDRA = 0xF0; // PORTA pins 4-7 set as outputs
    2220:	90 ef       	ldi	r25, 0xF0	; 240
    2222:	91 b9       	out	0x01, r25	; 1
	DDRJ = 0x7F; // PORTJ pins 0-6 set as outputs
    2224:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <__TEXT_REGION_LENGTH__+0x7e0104>
	DDRC = 0xFF; // PORTC pins 0-7 set as outputs
    2228:	8f ef       	ldi	r24, 0xFF	; 255
    222a:	87 b9       	out	0x07, r24	; 7
	
	// Set Output as Low
	PORTH = 0x02; // pin 1 set high to inhibit temperature measurement
    222c:	82 e0       	ldi	r24, 0x02	; 2
    222e:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <__TEXT_REGION_LENGTH__+0x7e0102>
	PORTL = 0x00;
    2232:	10 92 0b 01 	sts	0x010B, r1	; 0x80010b <__TEXT_REGION_LENGTH__+0x7e010b>
	PORTA = 0x00;
    2236:	12 b8       	out	0x02, r1	; 2
	PORTJ = 0x00; 
    2238:	10 92 05 01 	sts	0x0105, r1	; 0x800105 <__TEXT_REGION_LENGTH__+0x7e0105>
	PORTC = 0x00;
    223c:	18 b8       	out	0x08, r1	; 8
    223e:	08 95       	ret

00002240 <ADC_init>:
/*========================================================================================*/

void ADC_init(){
	
	// Enable as Input
	DDRF = 0x00;
    2240:	10 ba       	out	0x10, r1	; 16
	
	// Enable the 1.1V internal reference
	//ADMUX |= ((REFS1 << 0) | (REFS0 << 0)); // set the first bit to 1
	ADMUX = 0x00;
    2242:	10 92 7c 00 	sts	0x007C, r1	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>
	
	// Enable the ADC via the status control register & enable interrupt
	//ADCSRA |= (ADEN << 1) | (ADPS2 << 1) | (ADPS0 << 1) | (ADIE << 1);
	ADCSRA = 0x85;
    2246:	85 e8       	ldi	r24, 0x85	; 133
    2248:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
    224c:	08 95       	ret

0000224e <CLK_init>:
/*========================================================================================*/

CLK_init(){
	
	// Enable Timer 1
	TCCR1B = 0x04;
    224e:	84 e0       	ldi	r24, 0x04	; 4
    2250:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
	
	// Enable Output Compare Interrupt
	TIMSK1 = 0x02;
    2254:	82 e0       	ldi	r24, 0x02	; 2
    2256:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__TEXT_REGION_LENGTH__+0x7e006f>
	
	// Set Counter to 65,536 clock cycles (MAX)
	OCR1A = 0xff;
    225a:	8f ef       	ldi	r24, 0xFF	; 255
    225c:	90 e0       	ldi	r25, 0x00	; 0
    225e:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
    2262:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
	
	// Set clock to 0
	TCNT1 = 0x0000;
    2266:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
    226a:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
    226e:	08 95       	ret

00002270 <UART0_init>:
/*========================================================================================*/

void UART0_init(){
	
	// Using the values from set baud tool
	UBRR0H = UBRRH_VALUE;
    2270:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
	UBRR0L = UBRRL_VALUE;
    2274:	8c e0       	ldi	r24, 0x0C	; 12
    2276:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
	
	// Enable TX & RX and Enable RX complete interrupt
	UCSR0B = 0x98; // enabling bits 4 & 3 (RX & TX) ****** RE-ENABLE INTERRUPT!!!!!!!
    227a:	88 e9       	ldi	r24, 0x98	; 152
    227c:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
	
	
	// Set up the format 8bit no parity
	UCSR0C = 0x06; // enable 8 bit chars
    2280:	86 e0       	ldi	r24, 0x06	; 6
    2282:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7e00c2>
    2286:	08 95       	ret

00002288 <WD_init>:
/*========================================================================================*/

void WD_init(){
	
	// Reset the MCU reset flag
	MCUSR &= 0xf7; // changes bit 3 to 0
    2288:	84 b7       	in	r24, 0x34	; 52
    228a:	87 7f       	andi	r24, 0xF7	; 247
    228c:	84 bf       	out	0x34, r24	; 52
	
	// Enable the interrupt/system reset mode
	wdt_enable(INTERRUPT_SYSTEM_RESET_MODE);
    228e:	82 e0       	ldi	r24, 0x02	; 2
    2290:	6c d0       	rcall	.+216    	; 0x236a <wdt_enable>
	
	// Set pre-scaler to 8s
	wdt_set_timeout_period(WDT_TIMEOUT_PERIOD_1024KCLK);
    2292:	89 e0       	ldi	r24, 0x09	; 9
    2294:	46 c0       	rjmp	.+140    	; 0x2322 <wdt_set_timeout_period>
    2296:	08 95       	ret

00002298 <ALL_init>:
/*========================================================================================*/

void ALL_init(){
	
	// Initialize GPIO
	GPIO_init();
    2298:	bd df       	rcall	.-134    	; 0x2214 <GPIO_init>
	
	// Initialize the ADC
	ADC_init();
    229a:	d2 df       	rcall	.-92     	; 0x2240 <ADC_init>
	
	// Initialize UART
	UART0_init();
    229c:	e9 df       	rcall	.-46     	; 0x2270 <UART0_init>
	
	// Initialize Timer (CLK) *** NOT during testing ***
	CLK_init();
    229e:	d7 df       	rcall	.-82     	; 0x224e <CLK_init>
    22a0:	f3 cf       	rjmp	.-26     	; 0x2288 <WD_init>
	
	// Initialize Watchdog Timer
	WD_init();
    22a2:	08 95       	ret

000022a4 <UART0_putchar>:
    22a4:	e0 ec       	ldi	r30, 0xC0	; 192
    22a6:	f0 e0       	ldi	r31, 0x00	; 0
/*========================================================================================*/

void UART0_putchar(char h){
	
	// wait for transmit buffer to be empty
	while(! (UCSR0A & (1 << UDRE0)));
    22a8:	90 81       	ld	r25, Z
    22aa:	95 ff       	sbrs	r25, 5
    22ac:	fd cf       	rjmp	.-6      	; 0x22a8 <UART0_putchar+0x4>
	
	// Put data to be transmitted into buffer
	UDR0 = h; // write to the data register
    22ae:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
    22b2:	08 95       	ret

000022b4 <UART0_getchar>:
/*========================================================================================*/

char UART0_getchar(){
	
	// wait for data to be received
	while (!( UCSR0A & (1 << RXC0)));
    22b4:	e0 ec       	ldi	r30, 0xC0	; 192
    22b6:	f0 e0       	ldi	r31, 0x00	; 0
    22b8:	80 81       	ld	r24, Z
    22ba:	88 23       	and	r24, r24
    22bc:	ec f7       	brge	.-6      	; 0x22b8 <UART0_getchar+0x4>
	
	// return the received character
	return UDR0;
    22be:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
	
}
    22c2:	08 95       	ret

000022c4 <UART0_putstring>:
// Author: Chris Thomas
// Date: 2019-03-13
// Description: Writes strings via UART0 using putchar.
/*========================================================================================*/

void UART0_putstring(char *string){
    22c4:	cf 93       	push	r28
    22c6:	df 93       	push	r29
    22c8:	ec 01       	movw	r28, r24
	while(*string){
    22ca:	88 81       	ld	r24, Y
    22cc:	88 23       	and	r24, r24
    22ce:	29 f0       	breq	.+10     	; 0x22da <UART0_putstring+0x16>
    22d0:	21 96       	adiw	r28, 0x01	; 1
		UART0_putchar(*string++);
    22d2:	e8 df       	rcall	.-48     	; 0x22a4 <UART0_putchar>
// Date: 2019-03-13
// Description: Writes strings via UART0 using putchar.
/*========================================================================================*/

void UART0_putstring(char *string){
	while(*string){
    22d4:	89 91       	ld	r24, Y+
    22d6:	81 11       	cpse	r24, r1
    22d8:	fc cf       	rjmp	.-8      	; 0x22d2 <UART0_putstring+0xe>
		UART0_putchar(*string++);
	}
}
    22da:	df 91       	pop	r29
    22dc:	cf 91       	pop	r28
    22de:	08 95       	ret

000022e0 <UART0_getstring>:
// Date: 2019-03-13
// Description: Reads strings via UART0 using getchar.
/*========================================================================================*/


void UART0_getstring(char* message){
    22e0:	ef 92       	push	r14
    22e2:	ff 92       	push	r15
    22e4:	0f 93       	push	r16
    22e6:	1f 93       	push	r17
    22e8:	cf 93       	push	r28
    22ea:	df 93       	push	r29
    22ec:	7c 01       	movw	r14, r24
	char prev;
	int i = 0;
	
	// Check the first value for the terminator ' ' (SPACE)
	prev = UART0_getchar();
    22ee:	e2 df       	rcall	.-60     	; 0x22b4 <UART0_getchar>
	
	// Check previous value for terminator (SPACE)
	while(prev != 0x0D){
    22f0:	8d 30       	cpi	r24, 0x0D	; 13
    22f2:	59 f0       	breq	.+22     	; 0x230a <UART0_getstring+0x2a>
    22f4:	87 01       	movw	r16, r14
    22f6:	c0 e0       	ldi	r28, 0x00	; 0
    22f8:	d0 e0       	ldi	r29, 0x00	; 0
		message[i] = prev; // save the char if it isn't the terminator
    22fa:	f8 01       	movw	r30, r16
    22fc:	81 93       	st	Z+, r24
    22fe:	8f 01       	movw	r16, r30
		i++;
		prev = UART0_getchar();
    2300:	21 96       	adiw	r28, 0x01	; 1
    2302:	d8 df       	rcall	.-80     	; 0x22b4 <UART0_getchar>
	
	// Check the first value for the terminator ' ' (SPACE)
	prev = UART0_getchar();
	
	// Check previous value for terminator (SPACE)
	while(prev != 0x0D){
    2304:	8d 30       	cpi	r24, 0x0D	; 13
    2306:	c9 f7       	brne	.-14     	; 0x22fa <UART0_getstring+0x1a>
    2308:	02 c0       	rjmp	.+4      	; 0x230e <UART0_getstring+0x2e>
/*========================================================================================*/


void UART0_getstring(char* message){
	char prev;
	int i = 0;
    230a:	c0 e0       	ldi	r28, 0x00	; 0
    230c:	d0 e0       	ldi	r29, 0x00	; 0
	while(prev != 0x0D){
		message[i] = prev; // save the char if it isn't the terminator
		i++;
		prev = UART0_getchar();
	}
	message[i] = '\0';
    230e:	ce 0d       	add	r28, r14
    2310:	df 1d       	adc	r29, r15
    2312:	18 82       	st	Y, r1
    2314:	df 91       	pop	r29
    2316:	cf 91       	pop	r28
    2318:	1f 91       	pop	r17
    231a:	0f 91       	pop	r16
    231c:	ff 90       	pop	r15
    231e:	ef 90       	pop	r14
    2320:	08 95       	ret

00002322 <wdt_set_timeout_period>:
 *  This function is written in asm where ever the time is critical
 *
 *  \param  to_period  WDT timeout period
 */
void wdt_set_timeout_period(enum wdt_timeout_period to_period)
{
    2322:	cf 93       	push	r28
    2324:	df 93       	push	r29
    2326:	1f 92       	push	r1
    2328:	cd b7       	in	r28, 0x3d	; 61
    232a:	de b7       	in	r29, 0x3e	; 62
	/* Store the prescale value to temp register */
#if defined (__GNUC__)
	asm ("MOV R19,R24");
    232c:	38 2f       	mov	r19, r24
#else
#error Unsupported compiler.
#endif

	/* Mask for WDP3 */
	if (to_period & MASK_PRESCALE_WPD3) {
    232e:	83 ff       	sbrs	r24, 3
    2330:	02 c0       	rjmp	.+4      	; 0x2336 <wdt_set_timeout_period+0x14>
		asm ("LDI R21,0x20");
    2332:	50 e2       	ldi	r21, 0x20	; 32
    2334:	01 c0       	rjmp	.+2      	; 0x2338 <wdt_set_timeout_period+0x16>
	} else {
		asm ("LDI R21,0x00");
    2336:	50 e0       	ldi	r21, 0x00	; 0

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    2338:	8f b7       	in	r24, 0x3f	; 63
    233a:	89 83       	std	Y+1, r24	; 0x01
	cpu_irq_disable();
    233c:	f8 94       	cli
	return flags;
    233e:	89 81       	ldd	r24, Y+1	; 0x01

	/* Disable Global interrupt */
	uint8_t sreg = cpu_irq_save();

	/* Reset Watchdog timer */
	wdt_reset();
    2340:	a8 95       	wdr

	asm ("LDI R17,0xD8");
    2342:	18 ed       	ldi	r17, 0xD8	; 216
	asm ("LDS R18,0x60");   /* WDTCSR Address = 0x60 */
    2344:	20 91 60 00 	lds	r18, 0x0060	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
	asm ("AND R17,R18");
    2348:	12 23       	and	r17, r18
	asm ("STS 0x60,R17");   /* WDTCSR Address = 0x60 */
    234a:	10 93 60 00 	sts	0x0060, r17	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
	/* Load the new prescale value */
	asm ("LDI R20,0x18");
    234e:	48 e1       	ldi	r20, 0x18	; 24
	asm ("LDI R18,0x07");
    2350:	27 e0       	ldi	r18, 0x07	; 7
	asm ("AND R19,R18");
    2352:	32 23       	and	r19, r18
	asm ("OR R19,R21");
    2354:	35 2b       	or	r19, r21
	asm ("OR R19,R17");
    2356:	31 2b       	or	r19, r17
	/* Write logical one to WDCE and WDE */
	asm ("STS 0x60,R20");   /* WDTCSR Address = 0x60 */
    2358:	40 93 60 00 	sts	0x0060, r20	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
	/* Write new prescale setting */
	asm ("STS 0x60,R19");   /* WDTCSR Address = 0x60 */
    235c:	30 93 60 00 	sts	0x0060, r19	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    2360:	8f bf       	out	0x3f, r24	; 63

	/* Restore Global interrupt */
	cpu_irq_restore(sreg);
}
    2362:	0f 90       	pop	r0
    2364:	df 91       	pop	r29
    2366:	cf 91       	pop	r28
    2368:	08 95       	ret

0000236a <wdt_enable>:
 * This function is written in asm where ever the time is critical
 *
 * \param mode WDT timer mode selection
 */
void wdt_enable(enum wdt_mode_select mode)
{
    236a:	cf 93       	push	r28
    236c:	df 93       	push	r29
    236e:	1f 92       	push	r1
    2370:	cd b7       	in	r28, 0x3d	; 61
    2372:	de b7       	in	r29, 0x3e	; 62

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    2374:	9f b7       	in	r25, 0x3f	; 63
    2376:	99 83       	std	Y+1, r25	; 0x01
	cpu_irq_disable();
    2378:	f8 94       	cli
	return flags;
    237a:	29 81       	ldd	r18, Y+1	; 0x01
	/* Disable Global interrupt */
	uint8_t sreg = cpu_irq_save();

	/* Reset Watchdog timer */
	wdt_reset();
    237c:	a8 95       	wdr
 ***\param  none
 */
static inline void wdt_reset_flag_clear(void)
{
	/* Clear WDRF flag in MCUSR */
	MCUSR &= ~WDRF_bm;
    237e:	94 b7       	in	r25, 0x34	; 52
    2380:	97 7f       	andi	r25, 0xF7	; 247
    2382:	94 bf       	out	0x34, r25	; 52

	/* Clear WDRF flag in MCUSR */
	wdt_reset_flag_clear();

	/*System reset mode */
	if (mode == SYSTEM_RESET_MODE) {
    2384:	81 30       	cpi	r24, 0x01	; 1
    2386:	59 f4       	brne	.+22     	; 0x239e <wdt_enable+0x34>
		/* Write logical zero to WDIE */
		asm ("LDI R17,0xBF");
    2388:	1f eb       	ldi	r17, 0xBF	; 191
		asm ("LDS R18,0x60"); /* WDTCSR Address = 0x60 */
    238a:	20 91 60 00 	lds	r18, 0x0060	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
		asm ("AND R17,R18");
    238e:	12 23       	and	r17, r18
		asm ("STS 0x60,R17"); /* WDTCSR Address = 0x60 */
    2390:	10 93 60 00 	sts	0x0060, r17	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
		/* Write WDIF,WDE and WDCE to logical one */
		asm ("LDI R18,0x98");
    2394:	28 e9       	ldi	r18, 0x98	; 152
		asm ("OR R18,R17");
    2396:	21 2b       	or	r18, r17
		asm ("STS 0x60,R18"); /* WDTCSR Address = 0x60 */
    2398:	20 93 60 00 	sts	0x0060, r18	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
    239c:	1c c0       	rjmp	.+56     	; 0x23d6 <wdt_enable+0x6c>
	}
	/* Interrupt mode */
	else if (mode == INTERRUPT_MODE) {
    239e:	81 11       	cpse	r24, r1
    23a0:	0e c0       	rjmp	.+28     	; 0x23be <wdt_enable+0x54>
		/* Write logical zero to WDE */
		asm ("LDI R17,0xF7");
    23a2:	17 ef       	ldi	r17, 0xF7	; 247
		asm ("LDS R18,0x60"); /* WDTCSR Address = 0x60 */
    23a4:	20 91 60 00 	lds	r18, 0x0060	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
		asm ("AND R17,R18");
    23a8:	12 23       	and	r17, r18
		asm ("STS 0x60,R17"); /* WDTCSR Address = 0x60 */
    23aa:	10 93 60 00 	sts	0x0060, r17	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
		asm ("LDI R20,0x18");
    23ae:	48 e1       	ldi	r20, 0x18	; 24
		asm ("LDI R19,0xD0");
    23b0:	30 ed       	ldi	r19, 0xD0	; 208
		asm ("OR R19,R17");
    23b2:	31 2b       	or	r19, r17
		/* Write logical one to WDCE and WDE */
		asm ("STS 0x60,R20"); /* WDTCSR Address = 0x60 */
    23b4:	40 93 60 00 	sts	0x0060, r20	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
		/* Write WDIF,WDIE and WDCE to logical one */
		asm ("STS 0x60,R19"); /* WDTCSR Address = 0x60 */
    23b8:	30 93 60 00 	sts	0x0060, r19	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
    23bc:	0c c0       	rjmp	.+24     	; 0x23d6 <wdt_enable+0x6c>
	}
	/* Interrupt and System reset mode */
	else if (mode == INTERRUPT_SYSTEM_RESET_MODE) {
    23be:	82 30       	cpi	r24, 0x02	; 2
    23c0:	51 f4       	brne	.+20     	; 0x23d6 <wdt_enable+0x6c>
		/* Write logical zero to WDE */
		asm ("LDI R17,0xF7");
    23c2:	17 ef       	ldi	r17, 0xF7	; 247
		asm ("LDS R18,0x60"); /* WDTCSR Address = 0x60 */
    23c4:	20 91 60 00 	lds	r18, 0x0060	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
		asm ("AND R17,R18");
    23c8:	12 23       	and	r17, r18
		asm ("STS 0x60,R17"); /* WDTCSR Address = 0x60 */
    23ca:	10 93 60 00 	sts	0x0060, r17	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
		/* Write logical one to WDCE, WDIE,WDIF and WDE */
		asm ("LDI R18,0xD8");
    23ce:	28 ed       	ldi	r18, 0xD8	; 216
		asm ("OR R18,R17");
    23d0:	21 2b       	or	r18, r17
		asm ("STS 0x60,R18"); /* WDTCSR Address = 0x60 */
    23d2:	20 93 60 00 	sts	0x0060, r18	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    23d6:	2f bf       	out	0x3f, r18	; 63
	}

	/* Restore Global interrupt */
	cpu_irq_restore(sreg);
}
    23d8:	0f 90       	pop	r0
    23da:	df 91       	pop	r29
    23dc:	cf 91       	pop	r28
    23de:	08 95       	ret

000023e0 <__vector_17>:
// Date: 2019-03-18
// Description: Interrupt occurs when timer register overflow flag is set, and
//				calls for telemetry data to be updated.
/*========================================================================================*/

ISR(TIMER1_COMPA_vect){
    23e0:	1f 92       	push	r1
    23e2:	0f 92       	push	r0
    23e4:	0f b6       	in	r0, 0x3f	; 63
    23e6:	0f 92       	push	r0
    23e8:	11 24       	eor	r1, r1
    23ea:	0f 93       	push	r16
    23ec:	1f 93       	push	r17
    23ee:	2f 93       	push	r18
    23f0:	3f 93       	push	r19
    23f2:	4f 93       	push	r20
    23f4:	5f 93       	push	r21
    23f6:	6f 93       	push	r22
    23f8:	7f 93       	push	r23
    23fa:	8f 93       	push	r24
    23fc:	9f 93       	push	r25
    23fe:	af 93       	push	r26
    2400:	bf 93       	push	r27
    2402:	ef 93       	push	r30
    2404:	ff 93       	push	r31
	
	// Disable Interrupts
	cli();
    2406:	f8 94       	cli
	
	// Update Telemetry information
	Update_TELEM(telem, power_state[0]);
    2408:	60 91 db 08 	lds	r22, 0x08DB	; 0x8008db <power_state>
    240c:	81 e1       	ldi	r24, 0x11	; 17
    240e:	99 e0       	ldi	r25, 0x09	; 9
    2410:	6d d9       	rcall	.-3366   	; 0x16ec <Update_TELEM>
	
	// Check Power State
	temp = telem[11];
    2412:	80 91 3d 09 	lds	r24, 0x093D	; 0x80093d <telem+0x2c>
    2416:	90 91 3e 09 	lds	r25, 0x093E	; 0x80093e <telem+0x2d>
    241a:	a0 91 3f 09 	lds	r26, 0x093F	; 0x80093f <telem+0x2e>
    241e:	b0 91 40 09 	lds	r27, 0x0940	; 0x800940 <telem+0x2f>
    2422:	80 93 e3 08 	sts	0x08E3, r24	; 0x8008e3 <temp>
    2426:	90 93 e4 08 	sts	0x08E4, r25	; 0x8008e4 <temp+0x1>
    242a:	a0 93 e5 08 	sts	0x08E5, r26	; 0x8008e5 <temp+0x2>
    242e:	b0 93 e6 08 	sts	0x08E6, r27	; 0x8008e6 <temp+0x3>
	
	if(mode[0] && !demo[0]){
    2432:	80 91 01 02 	lds	r24, 0x0201	; 0x800201 <mode>
    2436:	88 23       	and	r24, r24
    2438:	09 f4       	brne	.+2      	; 0x243c <__vector_17+0x5c>
    243a:	00 c1       	rjmp	.+512    	; 0x263c <__vector_17+0x25c>
    243c:	80 91 d8 08 	lds	r24, 0x08D8	; 0x8008d8 <__data_end>
    2440:	81 11       	cpse	r24, r1
    2442:	f6 c0       	rjmp	.+492    	; 0x2630 <__vector_17+0x250>
		// Check state of charge
		soc = SoC_ADC(telem[10],telem[4]);
    2444:	e1 e1       	ldi	r30, 0x11	; 17
    2446:	f9 e0       	ldi	r31, 0x09	; 9
    2448:	20 89       	ldd	r18, Z+16	; 0x10
    244a:	31 89       	ldd	r19, Z+17	; 0x11
    244c:	42 89       	ldd	r20, Z+18	; 0x12
    244e:	53 89       	ldd	r21, Z+19	; 0x13
    2450:	60 a5       	ldd	r22, Z+40	; 0x28
    2452:	71 a5       	ldd	r23, Z+41	; 0x29
    2454:	82 a5       	ldd	r24, Z+42	; 0x2a
    2456:	93 a5       	ldd	r25, Z+43	; 0x2b
    2458:	0e 94 5f 03 	call	0x6be	; 0x6be <SoC_ADC>
    245c:	60 93 eb 08 	sts	0x08EB, r22	; 0x8008eb <soc>
    2460:	70 93 ec 08 	sts	0x08EC, r23	; 0x8008ec <soc+0x1>
    2464:	80 93 ed 08 	sts	0x08ED, r24	; 0x8008ed <soc+0x2>
    2468:	90 93 ee 08 	sts	0x08EE, r25	; 0x8008ee <soc+0x3>
		// Update power state
		state_num = PowerStateCheck(soc, temp);
    246c:	20 91 e3 08 	lds	r18, 0x08E3	; 0x8008e3 <temp>
    2470:	30 91 e4 08 	lds	r19, 0x08E4	; 0x8008e4 <temp+0x1>
    2474:	40 91 e5 08 	lds	r20, 0x08E5	; 0x8008e5 <temp+0x2>
    2478:	50 91 e6 08 	lds	r21, 0x08E6	; 0x8008e6 <temp+0x3>
    247c:	0e 94 b1 07 	call	0xf62	; 0xf62 <PowerStateCheck>
    2480:	90 93 de 08 	sts	0x08DE, r25	; 0x8008de <state_num+0x1>
    2484:	80 93 dd 08 	sts	0x08DD, r24	; 0x8008dd <state_num>
		power_state[0] = pwrMat[state_num];
    2488:	fc 01       	movw	r30, r24
    248a:	e1 51       	subi	r30, 0x11	; 17
    248c:	f7 4f       	sbci	r31, 0xF7	; 247
    248e:	80 81       	ld	r24, Z
    2490:	80 93 db 08 	sts	0x08DB, r24	; 0x8008db <power_state>
		// Update the state of the loads
		Update_LOADS(power_state[0], power_state);
    2494:	6b ed       	ldi	r22, 0xDB	; 219
    2496:	78 e0       	ldi	r23, 0x08	; 8
    2498:	0e 94 7b 07 	call	0xef6	; 0xef6 <Update_LOADS>
		Update_STATE(power, power_state[0]);
    249c:	60 91 db 08 	lds	r22, 0x08DB	; 0x8008db <power_state>
    24a0:	88 e0       	ldi	r24, 0x08	; 8
    24a2:	99 e0       	ldi	r25, 0x09	; 9
    24a4:	0e 94 ea 09 	call	0x13d4	; 0x13d4 <Update_STATE>
		Update_OBC(telem, power, state_num, mode[0], soc);
    24a8:	60 91 eb 08 	lds	r22, 0x08EB	; 0x8008eb <soc>
    24ac:	70 91 ec 08 	lds	r23, 0x08EC	; 0x8008ec <soc+0x1>
    24b0:	80 91 ed 08 	lds	r24, 0x08ED	; 0x8008ed <soc+0x2>
    24b4:	90 91 ee 08 	lds	r25, 0x08EE	; 0x8008ee <soc+0x3>
    24b8:	72 d2       	rcall	.+1252   	; 0x299e <__fixsfsi>
    24ba:	8b 01       	movw	r16, r22
    24bc:	20 91 01 02 	lds	r18, 0x0201	; 0x800201 <mode>
    24c0:	40 91 dd 08 	lds	r20, 0x08DD	; 0x8008dd <state_num>
    24c4:	68 e0       	ldi	r22, 0x08	; 8
    24c6:	79 e0       	ldi	r23, 0x09	; 9
    24c8:	81 e1       	ldi	r24, 0x11	; 17
    24ca:	99 e0       	ldi	r25, 0x09	; 9
    24cc:	79 d9       	rcall	.-3342   	; 0x17c0 <Update_OBC>
    24ce:	8a c0       	rjmp	.+276    	; 0x25e4 <__vector_17+0x204>
	}
	else if(demo[0] && mode[0]){
		if(demo_start){
			UART0_putstring("The demo has started.");
    24d0:	8b ea       	ldi	r24, 0xAB	; 171
    24d2:	98 e0       	ldi	r25, 0x08	; 8
    24d4:	f7 de       	rcall	.-530    	; 0x22c4 <UART0_putstring>
			UART0_putchar('\n');
    24d6:	8a e0       	ldi	r24, 0x0A	; 10
    24d8:	e5 de       	rcall	.-566    	; 0x22a4 <UART0_putchar>
			UART0_putchar('\n');
    24da:	8a e0       	ldi	r24, 0x0A	; 10
    24dc:	e3 de       	rcall	.-570    	; 0x22a4 <UART0_putchar>
    24de:	8d e0       	ldi	r24, 0x0D	; 13
			UART0_putchar('\r');
    24e0:	e1 de       	rcall	.-574    	; 0x22a4 <UART0_putchar>
    24e2:	8f e3       	ldi	r24, 0x3F	; 63
    24e4:	90 e0       	ldi	r25, 0x00	; 0
			// Speed up the interrupt for the demo
			OCR1A = 0x3f;
    24e6:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
    24ea:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
    24ee:	86 e1       	ldi	r24, 0x16	; 22
    24f0:	90 e0       	ldi	r25, 0x00	; 0
			state_num = 22;
    24f2:	90 93 de 08 	sts	0x08DE, r25	; 0x8008de <state_num+0x1>
    24f6:	80 93 dd 08 	sts	0x08DD, r24	; 0x8008dd <state_num>
    24fa:	80 e0       	ldi	r24, 0x00	; 0
    24fc:	90 e0       	ldi	r25, 0x00	; 0
			soc = 90;
    24fe:	a4 eb       	ldi	r26, 0xB4	; 180
    2500:	b2 e4       	ldi	r27, 0x42	; 66
    2502:	80 93 eb 08 	sts	0x08EB, r24	; 0x8008eb <soc>
    2506:	90 93 ec 08 	sts	0x08EC, r25	; 0x8008ec <soc+0x1>
    250a:	a0 93 ed 08 	sts	0x08ED, r26	; 0x8008ed <soc+0x2>
    250e:	b0 93 ee 08 	sts	0x08EE, r27	; 0x8008ee <soc+0x3>
    2512:	10 92 00 02 	sts	0x0200, r1	; 0x800200 <__data_start>
		}
		demo_start = 0; // demo initialization is done
    2516:	e0 91 dd 08 	lds	r30, 0x08DD	; 0x8008dd <state_num>
		power_state[0] = pwrMat[state_num]; // update power state
    251a:	f0 91 de 08 	lds	r31, 0x08DE	; 0x8008de <state_num+0x1>
    251e:	e1 51       	subi	r30, 0x11	; 17
    2520:	f7 4f       	sbci	r31, 0xF7	; 247
    2522:	80 81       	ld	r24, Z
    2524:	80 93 db 08 	sts	0x08DB, r24	; 0x8008db <power_state>
    2528:	6b ed       	ldi	r22, 0xDB	; 219
    252a:	78 e0       	ldi	r23, 0x08	; 8
		// Update the rest of the system to simulate the changes
		Update_LOADS(power_state[0], power_state);
    252c:	0e 94 7b 07 	call	0xef6	; 0xef6 <Update_LOADS>
    2530:	60 91 db 08 	lds	r22, 0x08DB	; 0x8008db <power_state>
		Update_STATE(power, power_state[0]);
    2534:	88 e0       	ldi	r24, 0x08	; 8
    2536:	99 e0       	ldi	r25, 0x09	; 9
    2538:	0e 94 ea 09 	call	0x13d4	; 0x13d4 <Update_STATE>
    253c:	60 91 eb 08 	lds	r22, 0x08EB	; 0x8008eb <soc>
		Update_OBC(telem, power, state_num, mode[0], soc);
    2540:	70 91 ec 08 	lds	r23, 0x08EC	; 0x8008ec <soc+0x1>
    2544:	80 91 ed 08 	lds	r24, 0x08ED	; 0x8008ed <soc+0x2>
    2548:	90 91 ee 08 	lds	r25, 0x08EE	; 0x8008ee <soc+0x3>
    254c:	28 d2       	rcall	.+1104   	; 0x299e <__fixsfsi>
    254e:	8b 01       	movw	r16, r22
    2550:	20 91 01 02 	lds	r18, 0x0201	; 0x800201 <mode>
    2554:	40 91 dd 08 	lds	r20, 0x08DD	; 0x8008dd <state_num>
    2558:	68 e0       	ldi	r22, 0x08	; 8
    255a:	79 e0       	ldi	r23, 0x09	; 9
    255c:	81 e1       	ldi	r24, 0x11	; 17
    255e:	99 e0       	ldi	r25, 0x09	; 9
    2560:	2f d9       	rcall	.-3490   	; 0x17c0 <Update_OBC>
    2562:	20 e0       	ldi	r18, 0x00	; 0
    2564:	30 e0       	ldi	r19, 0x00	; 0
		// Reset the demo variables
		if(soc < 20){
    2566:	40 ea       	ldi	r20, 0xA0	; 160
    2568:	51 e4       	ldi	r21, 0x41	; 65
    256a:	60 91 eb 08 	lds	r22, 0x08EB	; 0x8008eb <soc>
    256e:	70 91 ec 08 	lds	r23, 0x08EC	; 0x8008ec <soc+0x1>
    2572:	80 91 ed 08 	lds	r24, 0x08ED	; 0x8008ed <soc+0x2>
    2576:	90 91 ee 08 	lds	r25, 0x08EE	; 0x8008ee <soc+0x3>
    257a:	a5 d1       	rcall	.+842    	; 0x28c6 <__cmpsf2>
    257c:	88 23       	and	r24, r24
    257e:	a4 f4       	brge	.+40     	; 0x25a8 <__vector_17+0x1c8>
    2580:	8f ef       	ldi	r24, 0xFF	; 255
    2582:	90 e0       	ldi	r25, 0x00	; 0
			// Return to regular interrupt speed
			OCR1A = 0xff;
    2584:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
    2588:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
    258c:	81 e0       	ldi	r24, 0x01	; 1
			// Reset the demo variable
			demo_start = 1;
    258e:	80 93 00 02 	sts	0x0200, r24	; 0x800200 <__data_start>
			// Return to regular operation
			demo[0] = 0;
    2592:	10 92 d8 08 	sts	0x08D8, r1	; 0x8008d8 <__data_end>
			// Update the OBC that the demo is over
			UART0_putstring("The demo is complete.");
    2596:	81 ec       	ldi	r24, 0xC1	; 193
    2598:	98 e0       	ldi	r25, 0x08	; 8
    259a:	94 de       	rcall	.-728    	; 0x22c4 <UART0_putstring>
			UART0_putchar('\n');
    259c:	8a e0       	ldi	r24, 0x0A	; 10
    259e:	82 de       	rcall	.-764    	; 0x22a4 <UART0_putchar>
    25a0:	8a e0       	ldi	r24, 0x0A	; 10
			UART0_putchar('\n');
    25a2:	80 de       	rcall	.-768    	; 0x22a4 <UART0_putchar>
    25a4:	8d e0       	ldi	r24, 0x0D	; 13
    25a6:	7e de       	rcall	.-772    	; 0x22a4 <UART0_putchar>
			UART0_putchar('\r');
    25a8:	20 e0       	ldi	r18, 0x00	; 0
    25aa:	30 e0       	ldi	r19, 0x00	; 0
		}
		// Force the state of charge to change
		soc -= 20; // decrement the state of charge
    25ac:	40 ea       	ldi	r20, 0xA0	; 160
    25ae:	51 e4       	ldi	r21, 0x41	; 65
    25b0:	60 91 eb 08 	lds	r22, 0x08EB	; 0x8008eb <soc>
    25b4:	70 91 ec 08 	lds	r23, 0x08EC	; 0x8008ec <soc+0x1>
    25b8:	80 91 ed 08 	lds	r24, 0x08ED	; 0x8008ed <soc+0x2>
    25bc:	90 91 ee 08 	lds	r25, 0x08EE	; 0x8008ee <soc+0x3>
    25c0:	1d d1       	rcall	.+570    	; 0x27fc <__subsf3>
    25c2:	60 93 eb 08 	sts	0x08EB, r22	; 0x8008eb <soc>
    25c6:	70 93 ec 08 	sts	0x08EC, r23	; 0x8008ec <soc+0x1>
    25ca:	80 93 ed 08 	sts	0x08ED, r24	; 0x8008ed <soc+0x2>
    25ce:	90 93 ee 08 	sts	0x08EE, r25	; 0x8008ee <soc+0x3>
    25d2:	80 91 dd 08 	lds	r24, 0x08DD	; 0x8008dd <state_num>
    25d6:	90 91 de 08 	lds	r25, 0x08DE	; 0x8008de <state_num+0x1>
		state_num -= 5; // decrement state number by 5 to switch loads
    25da:	05 97       	sbiw	r24, 0x05	; 5
    25dc:	90 93 de 08 	sts	0x08DE, r25	; 0x8008de <state_num+0x1>
    25e0:	80 93 dd 08 	sts	0x08DD, r24	; 0x8008dd <state_num>
    25e4:	80 91 db 08 	lds	r24, 0x08DB	; 0x8008db <power_state>
    25e8:	80 93 da 08 	sts	0x08DA, r24	; 0x8008da <prev_state>
	
	// Print the state of charge and power matrix index
	
	
	// Save previous states for less computation
	prev_state[0] = power_state[0];
    25ec:	80 91 e3 08 	lds	r24, 0x08E3	; 0x8008e3 <temp>
    25f0:	90 91 e4 08 	lds	r25, 0x08E4	; 0x8008e4 <temp+0x1>
	prev_temp  = temp;
    25f4:	a0 91 e5 08 	lds	r26, 0x08E5	; 0x8008e5 <temp+0x2>
    25f8:	b0 91 e6 08 	lds	r27, 0x08E6	; 0x8008e6 <temp+0x3>
    25fc:	80 93 df 08 	sts	0x08DF, r24	; 0x8008df <prev_temp>
    2600:	90 93 e0 08 	sts	0x08E0, r25	; 0x8008e0 <prev_temp+0x1>
    2604:	a0 93 e1 08 	sts	0x08E1, r26	; 0x8008e1 <prev_temp+0x2>
    2608:	b0 93 e2 08 	sts	0x08E2, r27	; 0x8008e2 <prev_temp+0x3>
    260c:	80 91 eb 08 	lds	r24, 0x08EB	; 0x8008eb <soc>
    2610:	90 91 ec 08 	lds	r25, 0x08EC	; 0x8008ec <soc+0x1>
	prev_soc = soc;
    2614:	a0 91 ed 08 	lds	r26, 0x08ED	; 0x8008ed <soc+0x2>
    2618:	b0 91 ee 08 	lds	r27, 0x08EE	; 0x8008ee <soc+0x3>
    261c:	80 93 e7 08 	sts	0x08E7, r24	; 0x8008e7 <prev_soc>
    2620:	90 93 e8 08 	sts	0x08E8, r25	; 0x8008e8 <prev_soc+0x1>
    2624:	a0 93 e9 08 	sts	0x08E9, r26	; 0x8008e9 <prev_soc+0x2>
    2628:	b0 93 ea 08 	sts	0x08EA, r27	; 0x8008ea <prev_soc+0x3>
    262c:	78 94       	sei
    262e:	40 c0       	rjmp	.+128    	; 0x26b0 <__vector_17+0x2d0>
    2630:	80 91 00 02 	lds	r24, 0x0200	; 0x800200 <__data_start>
	
	// Re-enable interrupts
	sei();
		
}
    2634:	88 23       	and	r24, r24
		Update_LOADS(power_state[0], power_state);
		Update_STATE(power, power_state[0]);
		Update_OBC(telem, power, state_num, mode[0], soc);
	}
	else if(demo[0] && mode[0]){
		if(demo_start){
    2636:	09 f4       	brne	.+2      	; 0x263a <__vector_17+0x25a>
    2638:	6c cf       	rjmp	.-296    	; 0x2512 <__vector_17+0x132>
    263a:	4a cf       	rjmp	.-364    	; 0x24d0 <__vector_17+0xf0>
    263c:	e1 e1       	ldi	r30, 0x11	; 17
    263e:	f9 e0       	ldi	r31, 0x09	; 9
    2640:	20 89       	ldd	r18, Z+16	; 0x10
		soc -= 20; // decrement the state of charge
		state_num -= 5; // decrement state number by 5 to switch loads
	}
	else{
		// Check state of charge
		soc = SoC_ADC(telem[10],telem[4]);
    2642:	31 89       	ldd	r19, Z+17	; 0x11
    2644:	42 89       	ldd	r20, Z+18	; 0x12
    2646:	53 89       	ldd	r21, Z+19	; 0x13
    2648:	60 a5       	ldd	r22, Z+40	; 0x28
    264a:	71 a5       	ldd	r23, Z+41	; 0x29
    264c:	82 a5       	ldd	r24, Z+42	; 0x2a
    264e:	93 a5       	ldd	r25, Z+43	; 0x2b
    2650:	0e 94 5f 03 	call	0x6be	; 0x6be <SoC_ADC>
    2654:	60 93 eb 08 	sts	0x08EB, r22	; 0x8008eb <soc>
    2658:	70 93 ec 08 	sts	0x08EC, r23	; 0x8008ec <soc+0x1>
    265c:	80 93 ed 08 	sts	0x08ED, r24	; 0x8008ed <soc+0x2>
    2660:	90 93 ee 08 	sts	0x08EE, r25	; 0x8008ee <soc+0x3>
    2664:	8d e4       	ldi	r24, 0x4D	; 77
    2666:	90 e0       	ldi	r25, 0x00	; 0
    2668:	90 93 de 08 	sts	0x08DE, r25	; 0x8008de <state_num+0x1>
		state_num = 'M'; // stands for manual mode
    266c:	80 93 dd 08 	sts	0x08DD, r24	; 0x8008dd <state_num>
    2670:	6b ed       	ldi	r22, 0xDB	; 219
    2672:	78 e0       	ldi	r23, 0x08	; 8
    2674:	80 91 db 08 	lds	r24, 0x08DB	; 0x8008db <power_state>
		Update_LOADS(power_state[0], power_state);
    2678:	0e 94 7b 07 	call	0xef6	; 0xef6 <Update_LOADS>
    267c:	60 91 db 08 	lds	r22, 0x08DB	; 0x8008db <power_state>
		Update_STATE(power, power_state[0]);
    2680:	88 e0       	ldi	r24, 0x08	; 8
    2682:	99 e0       	ldi	r25, 0x09	; 9
    2684:	0e 94 ea 09 	call	0x13d4	; 0x13d4 <Update_STATE>
    2688:	60 91 eb 08 	lds	r22, 0x08EB	; 0x8008eb <soc>
		Update_OBC(telem, power, state_num, mode[0], soc);
    268c:	70 91 ec 08 	lds	r23, 0x08EC	; 0x8008ec <soc+0x1>
    2690:	80 91 ed 08 	lds	r24, 0x08ED	; 0x8008ed <soc+0x2>
    2694:	90 91 ee 08 	lds	r25, 0x08EE	; 0x8008ee <soc+0x3>
    2698:	82 d1       	rcall	.+772    	; 0x299e <__fixsfsi>
    269a:	8b 01       	movw	r16, r22
    269c:	20 91 01 02 	lds	r18, 0x0201	; 0x800201 <mode>
    26a0:	40 91 dd 08 	lds	r20, 0x08DD	; 0x8008dd <state_num>
    26a4:	68 e0       	ldi	r22, 0x08	; 8
    26a6:	79 e0       	ldi	r23, 0x09	; 9
    26a8:	81 e1       	ldi	r24, 0x11	; 17
    26aa:	99 e0       	ldi	r25, 0x09	; 9
    26ac:	89 d8       	rcall	.-3822   	; 0x17c0 <Update_OBC>
    26ae:	9a cf       	rjmp	.-204    	; 0x25e4 <__vector_17+0x204>
    26b0:	ff 91       	pop	r31
    26b2:	ef 91       	pop	r30
    26b4:	bf 91       	pop	r27
	prev_soc = soc;
	
	// Re-enable interrupts
	sei();
		
}
    26b6:	af 91       	pop	r26
    26b8:	9f 91       	pop	r25
    26ba:	8f 91       	pop	r24
    26bc:	7f 91       	pop	r23
    26be:	6f 91       	pop	r22
    26c0:	5f 91       	pop	r21
    26c2:	4f 91       	pop	r20
    26c4:	3f 91       	pop	r19
    26c6:	2f 91       	pop	r18
    26c8:	1f 91       	pop	r17
    26ca:	0f 91       	pop	r16
    26cc:	0f 90       	pop	r0
    26ce:	0f be       	out	0x3f, r0	; 63
    26d0:	0f 90       	pop	r0
    26d2:	1f 90       	pop	r1
    26d4:	18 95       	reti

000026d6 <__vector_25>:
    26d6:	1f 92       	push	r1
    26d8:	0f 92       	push	r0
    26da:	0f b6       	in	r0, 0x3f	; 63

ISR(USART0_RX_vect){
    26dc:	0f 92       	push	r0
    26de:	11 24       	eor	r1, r1
    26e0:	8f 92       	push	r8
    26e2:	9f 92       	push	r9
    26e4:	af 92       	push	r10
    26e6:	bf 92       	push	r11
    26e8:	cf 92       	push	r12
    26ea:	df 92       	push	r13
    26ec:	ef 92       	push	r14
    26ee:	0f 93       	push	r16
    26f0:	1f 93       	push	r17
    26f2:	2f 93       	push	r18
    26f4:	3f 93       	push	r19
    26f6:	4f 93       	push	r20
    26f8:	5f 93       	push	r21
    26fa:	6f 93       	push	r22
    26fc:	7f 93       	push	r23
    26fe:	8f 93       	push	r24
    2700:	9f 93       	push	r25
    2702:	af 93       	push	r26
    2704:	bf 93       	push	r27
    2706:	ef 93       	push	r30
    2708:	ff 93       	push	r31
	
	cli();
    270a:	f8 94       	cli
	
	//wdt_disable();
	
	fake = UART0_getchar();
    270c:	d3 dd       	rcall	.-1114   	; 0x22b4 <UART0_getchar>
    270e:	80 93 41 09 	sts	0x0941, r24	; 0x800941 <fake>
	commandDecode(telem, mode, power_state, power, pwrMat, state_num, edit_num, demo, soc);
    2712:	60 91 eb 08 	lds	r22, 0x08EB	; 0x8008eb <soc>
    2716:	70 91 ec 08 	lds	r23, 0x08EC	; 0x8008ec <soc+0x1>
    271a:	80 91 ed 08 	lds	r24, 0x08ED	; 0x8008ed <soc+0x2>
    271e:	90 91 ee 08 	lds	r25, 0x08EE	; 0x8008ee <soc+0x3>
    2722:	3d d1       	rcall	.+634    	; 0x299e <__fixsfsi>
    2724:	4b 01       	movw	r8, r22
    2726:	0f 2e       	mov	r0, r31
    2728:	f8 ed       	ldi	r31, 0xD8	; 216
    272a:	af 2e       	mov	r10, r31
    272c:	f8 e0       	ldi	r31, 0x08	; 8
    272e:	bf 2e       	mov	r11, r31
    2730:	f0 2d       	mov	r31, r0
    2732:	0f 2e       	mov	r0, r31
    2734:	fc ed       	ldi	r31, 0xDC	; 220
    2736:	cf 2e       	mov	r12, r31
    2738:	f8 e0       	ldi	r31, 0x08	; 8
    273a:	df 2e       	mov	r13, r31
    273c:	f0 2d       	mov	r31, r0
    273e:	e0 90 dd 08 	lds	r14, 0x08DD	; 0x8008dd <state_num>
    2742:	0f ee       	ldi	r16, 0xEF	; 239
    2744:	18 e0       	ldi	r17, 0x08	; 8
    2746:	28 e0       	ldi	r18, 0x08	; 8
    2748:	39 e0       	ldi	r19, 0x09	; 9
    274a:	4b ed       	ldi	r20, 0xDB	; 219
    274c:	58 e0       	ldi	r21, 0x08	; 8
    274e:	61 e0       	ldi	r22, 0x01	; 1
    2750:	72 e0       	ldi	r23, 0x02	; 2
    2752:	81 e1       	ldi	r24, 0x11	; 17
    2754:	99 e0       	ldi	r25, 0x09	; 9
    2756:	3a db       	rcall	.-2444   	; 0x1dcc <commandDecode>
	
	//wdt_enable(INTERRUPT_SYSTEM_RESET_MODE);
	
	sei();
    2758:	78 94       	sei
}
    275a:	ff 91       	pop	r31
    275c:	ef 91       	pop	r30
    275e:	bf 91       	pop	r27
    2760:	af 91       	pop	r26
    2762:	9f 91       	pop	r25
    2764:	8f 91       	pop	r24
    2766:	7f 91       	pop	r23
    2768:	6f 91       	pop	r22
    276a:	5f 91       	pop	r21
    276c:	4f 91       	pop	r20
    276e:	3f 91       	pop	r19
    2770:	2f 91       	pop	r18
    2772:	1f 91       	pop	r17
    2774:	0f 91       	pop	r16
    2776:	ef 90       	pop	r14
    2778:	df 90       	pop	r13
    277a:	cf 90       	pop	r12
    277c:	bf 90       	pop	r11
    277e:	af 90       	pop	r10
    2780:	9f 90       	pop	r9
    2782:	8f 90       	pop	r8
    2784:	0f 90       	pop	r0
    2786:	0f be       	out	0x3f, r0	; 63
    2788:	0f 90       	pop	r0
    278a:	1f 90       	pop	r1
    278c:	18 95       	reti

0000278e <__vector_12>:

ISR(WDT_vect){
    278e:	1f 92       	push	r1
    2790:	0f 92       	push	r0
    2792:	0f b6       	in	r0, 0x3f	; 63
    2794:	0f 92       	push	r0
    2796:	11 24       	eor	r1, r1
    2798:	2f 93       	push	r18
    279a:	3f 93       	push	r19
    279c:	4f 93       	push	r20
    279e:	5f 93       	push	r21
    27a0:	6f 93       	push	r22
    27a2:	7f 93       	push	r23
    27a4:	8f 93       	push	r24
    27a6:	9f 93       	push	r25
    27a8:	af 93       	push	r26
    27aa:	bf 93       	push	r27
    27ac:	ef 93       	push	r30
    27ae:	ff 93       	push	r31
	cli();
    27b0:	f8 94       	cli
	WD_init();
    27b2:	6a dd       	rcall	.-1324   	; 0x2288 <WD_init>
	sei();
    27b4:	78 94       	sei
}
    27b6:	ff 91       	pop	r31
    27b8:	ef 91       	pop	r30
    27ba:	bf 91       	pop	r27
    27bc:	af 91       	pop	r26
    27be:	9f 91       	pop	r25
    27c0:	8f 91       	pop	r24
    27c2:	7f 91       	pop	r23
    27c4:	6f 91       	pop	r22
    27c6:	5f 91       	pop	r21
    27c8:	4f 91       	pop	r20
    27ca:	3f 91       	pop	r19
    27cc:	2f 91       	pop	r18
    27ce:	0f 90       	pop	r0
    27d0:	0f be       	out	0x3f, r0	; 63
    27d2:	0f 90       	pop	r0
    27d4:	1f 90       	pop	r1
    27d6:	18 95       	reti

000027d8 <main>:

int main(void){
	
	// Check the Watchdog right away
	watchdog = MCUSR & 0x08;
    27d8:	84 b7       	in	r24, 0x34	; 52
    27da:	88 70       	andi	r24, 0x08	; 8
    27dc:	80 93 d9 08 	sts	0x08D9, r24	; 0x8008d9 <watchdog>

	// Now initialize all peripherals
	ALL_init();
    27e0:	5b dd       	rcall	.-1354   	; 0x2298 <ALL_init>
	
	// Disable Interrupts upon start
	cli();
    27e2:	f8 94       	cli
	
	// Check the reason for reset
	fault_check(watchdog);
    27e4:	80 91 d9 08 	lds	r24, 0x08D9	; 0x8008d9 <watchdog>
    27e8:	0e 94 a1 05 	call	0xb42	; 0xb42 <fault_check>
	
	// Check State of Launch
	launch_state();	
    27ec:	0e 94 59 06 	call	0xcb2	; 0xcb2 <launch_state>
	
	// Update power state matrix
	pwrMatInit(pwrMat);
    27f0:	8f ee       	ldi	r24, 0xEF	; 239
    27f2:	98 e0       	ldi	r25, 0x08	; 8
    27f4:	0e 94 8a 07 	call	0xf14	; 0xf14 <pwrMatInit>
	
	//****** RE-Enable ******//
	sei();
    27f8:	78 94       	sei
    27fa:	ff cf       	rjmp	.-2      	; 0x27fa <main+0x22>

000027fc <__subsf3>:
    27fc:	50 58       	subi	r21, 0x80	; 128

000027fe <__addsf3>:
    27fe:	bb 27       	eor	r27, r27
    2800:	aa 27       	eor	r26, r26
    2802:	0e d0       	rcall	.+28     	; 0x2820 <__addsf3x>
    2804:	75 c1       	rjmp	.+746    	; 0x2af0 <__fp_round>
    2806:	66 d1       	rcall	.+716    	; 0x2ad4 <__fp_pscA>
    2808:	30 f0       	brcs	.+12     	; 0x2816 <__addsf3+0x18>
    280a:	6b d1       	rcall	.+726    	; 0x2ae2 <__fp_pscB>
    280c:	20 f0       	brcs	.+8      	; 0x2816 <__addsf3+0x18>
    280e:	31 f4       	brne	.+12     	; 0x281c <__addsf3+0x1e>
    2810:	9f 3f       	cpi	r25, 0xFF	; 255
    2812:	11 f4       	brne	.+4      	; 0x2818 <__addsf3+0x1a>
    2814:	1e f4       	brtc	.+6      	; 0x281c <__addsf3+0x1e>
    2816:	5b c1       	rjmp	.+694    	; 0x2ace <__fp_nan>
    2818:	0e f4       	brtc	.+2      	; 0x281c <__addsf3+0x1e>
    281a:	e0 95       	com	r30
    281c:	e7 fb       	bst	r30, 7
    281e:	51 c1       	rjmp	.+674    	; 0x2ac2 <__fp_inf>

00002820 <__addsf3x>:
    2820:	e9 2f       	mov	r30, r25
    2822:	77 d1       	rcall	.+750    	; 0x2b12 <__fp_split3>
    2824:	80 f3       	brcs	.-32     	; 0x2806 <__addsf3+0x8>
    2826:	ba 17       	cp	r27, r26
    2828:	62 07       	cpc	r22, r18
    282a:	73 07       	cpc	r23, r19
    282c:	84 07       	cpc	r24, r20
    282e:	95 07       	cpc	r25, r21
    2830:	18 f0       	brcs	.+6      	; 0x2838 <__addsf3x+0x18>
    2832:	71 f4       	brne	.+28     	; 0x2850 <__addsf3x+0x30>
    2834:	9e f5       	brtc	.+102    	; 0x289c <__addsf3x+0x7c>
    2836:	8f c1       	rjmp	.+798    	; 0x2b56 <__fp_zero>
    2838:	0e f4       	brtc	.+2      	; 0x283c <__addsf3x+0x1c>
    283a:	e0 95       	com	r30
    283c:	0b 2e       	mov	r0, r27
    283e:	ba 2f       	mov	r27, r26
    2840:	a0 2d       	mov	r26, r0
    2842:	0b 01       	movw	r0, r22
    2844:	b9 01       	movw	r22, r18
    2846:	90 01       	movw	r18, r0
    2848:	0c 01       	movw	r0, r24
    284a:	ca 01       	movw	r24, r20
    284c:	a0 01       	movw	r20, r0
    284e:	11 24       	eor	r1, r1
    2850:	ff 27       	eor	r31, r31
    2852:	59 1b       	sub	r21, r25
    2854:	99 f0       	breq	.+38     	; 0x287c <__addsf3x+0x5c>
    2856:	59 3f       	cpi	r21, 0xF9	; 249
    2858:	50 f4       	brcc	.+20     	; 0x286e <__addsf3x+0x4e>
    285a:	50 3e       	cpi	r21, 0xE0	; 224
    285c:	68 f1       	brcs	.+90     	; 0x28b8 <__addsf3x+0x98>
    285e:	1a 16       	cp	r1, r26
    2860:	f0 40       	sbci	r31, 0x00	; 0
    2862:	a2 2f       	mov	r26, r18
    2864:	23 2f       	mov	r18, r19
    2866:	34 2f       	mov	r19, r20
    2868:	44 27       	eor	r20, r20
    286a:	58 5f       	subi	r21, 0xF8	; 248
    286c:	f3 cf       	rjmp	.-26     	; 0x2854 <__addsf3x+0x34>
    286e:	46 95       	lsr	r20
    2870:	37 95       	ror	r19
    2872:	27 95       	ror	r18
    2874:	a7 95       	ror	r26
    2876:	f0 40       	sbci	r31, 0x00	; 0
    2878:	53 95       	inc	r21
    287a:	c9 f7       	brne	.-14     	; 0x286e <__addsf3x+0x4e>
    287c:	7e f4       	brtc	.+30     	; 0x289c <__addsf3x+0x7c>
    287e:	1f 16       	cp	r1, r31
    2880:	ba 0b       	sbc	r27, r26
    2882:	62 0b       	sbc	r22, r18
    2884:	73 0b       	sbc	r23, r19
    2886:	84 0b       	sbc	r24, r20
    2888:	ba f0       	brmi	.+46     	; 0x28b8 <__addsf3x+0x98>
    288a:	91 50       	subi	r25, 0x01	; 1
    288c:	a1 f0       	breq	.+40     	; 0x28b6 <__addsf3x+0x96>
    288e:	ff 0f       	add	r31, r31
    2890:	bb 1f       	adc	r27, r27
    2892:	66 1f       	adc	r22, r22
    2894:	77 1f       	adc	r23, r23
    2896:	88 1f       	adc	r24, r24
    2898:	c2 f7       	brpl	.-16     	; 0x288a <__addsf3x+0x6a>
    289a:	0e c0       	rjmp	.+28     	; 0x28b8 <__addsf3x+0x98>
    289c:	ba 0f       	add	r27, r26
    289e:	62 1f       	adc	r22, r18
    28a0:	73 1f       	adc	r23, r19
    28a2:	84 1f       	adc	r24, r20
    28a4:	48 f4       	brcc	.+18     	; 0x28b8 <__addsf3x+0x98>
    28a6:	87 95       	ror	r24
    28a8:	77 95       	ror	r23
    28aa:	67 95       	ror	r22
    28ac:	b7 95       	ror	r27
    28ae:	f7 95       	ror	r31
    28b0:	9e 3f       	cpi	r25, 0xFE	; 254
    28b2:	08 f0       	brcs	.+2      	; 0x28b6 <__addsf3x+0x96>
    28b4:	b3 cf       	rjmp	.-154    	; 0x281c <__addsf3+0x1e>
    28b6:	93 95       	inc	r25
    28b8:	88 0f       	add	r24, r24
    28ba:	08 f0       	brcs	.+2      	; 0x28be <__addsf3x+0x9e>
    28bc:	99 27       	eor	r25, r25
    28be:	ee 0f       	add	r30, r30
    28c0:	97 95       	ror	r25
    28c2:	87 95       	ror	r24
    28c4:	08 95       	ret

000028c6 <__cmpsf2>:
    28c6:	d9 d0       	rcall	.+434    	; 0x2a7a <__fp_cmp>
    28c8:	08 f4       	brcc	.+2      	; 0x28cc <__cmpsf2+0x6>
    28ca:	81 e0       	ldi	r24, 0x01	; 1
    28cc:	08 95       	ret

000028ce <__divsf3>:
    28ce:	0c d0       	rcall	.+24     	; 0x28e8 <__divsf3x>
    28d0:	0f c1       	rjmp	.+542    	; 0x2af0 <__fp_round>
    28d2:	07 d1       	rcall	.+526    	; 0x2ae2 <__fp_pscB>
    28d4:	40 f0       	brcs	.+16     	; 0x28e6 <__divsf3+0x18>
    28d6:	fe d0       	rcall	.+508    	; 0x2ad4 <__fp_pscA>
    28d8:	30 f0       	brcs	.+12     	; 0x28e6 <__divsf3+0x18>
    28da:	21 f4       	brne	.+8      	; 0x28e4 <__divsf3+0x16>
    28dc:	5f 3f       	cpi	r21, 0xFF	; 255
    28de:	19 f0       	breq	.+6      	; 0x28e6 <__divsf3+0x18>
    28e0:	f0 c0       	rjmp	.+480    	; 0x2ac2 <__fp_inf>
    28e2:	51 11       	cpse	r21, r1
    28e4:	39 c1       	rjmp	.+626    	; 0x2b58 <__fp_szero>
    28e6:	f3 c0       	rjmp	.+486    	; 0x2ace <__fp_nan>

000028e8 <__divsf3x>:
    28e8:	14 d1       	rcall	.+552    	; 0x2b12 <__fp_split3>
    28ea:	98 f3       	brcs	.-26     	; 0x28d2 <__divsf3+0x4>

000028ec <__divsf3_pse>:
    28ec:	99 23       	and	r25, r25
    28ee:	c9 f3       	breq	.-14     	; 0x28e2 <__divsf3+0x14>
    28f0:	55 23       	and	r21, r21
    28f2:	b1 f3       	breq	.-20     	; 0x28e0 <__divsf3+0x12>
    28f4:	95 1b       	sub	r25, r21
    28f6:	55 0b       	sbc	r21, r21
    28f8:	bb 27       	eor	r27, r27
    28fa:	aa 27       	eor	r26, r26
    28fc:	62 17       	cp	r22, r18
    28fe:	73 07       	cpc	r23, r19
    2900:	84 07       	cpc	r24, r20
    2902:	38 f0       	brcs	.+14     	; 0x2912 <__divsf3_pse+0x26>
    2904:	9f 5f       	subi	r25, 0xFF	; 255
    2906:	5f 4f       	sbci	r21, 0xFF	; 255
    2908:	22 0f       	add	r18, r18
    290a:	33 1f       	adc	r19, r19
    290c:	44 1f       	adc	r20, r20
    290e:	aa 1f       	adc	r26, r26
    2910:	a9 f3       	breq	.-22     	; 0x28fc <__divsf3_pse+0x10>
    2912:	33 d0       	rcall	.+102    	; 0x297a <__divsf3_pse+0x8e>
    2914:	0e 2e       	mov	r0, r30
    2916:	3a f0       	brmi	.+14     	; 0x2926 <__divsf3_pse+0x3a>
    2918:	e0 e8       	ldi	r30, 0x80	; 128
    291a:	30 d0       	rcall	.+96     	; 0x297c <__divsf3_pse+0x90>
    291c:	91 50       	subi	r25, 0x01	; 1
    291e:	50 40       	sbci	r21, 0x00	; 0
    2920:	e6 95       	lsr	r30
    2922:	00 1c       	adc	r0, r0
    2924:	ca f7       	brpl	.-14     	; 0x2918 <__divsf3_pse+0x2c>
    2926:	29 d0       	rcall	.+82     	; 0x297a <__divsf3_pse+0x8e>
    2928:	fe 2f       	mov	r31, r30
    292a:	27 d0       	rcall	.+78     	; 0x297a <__divsf3_pse+0x8e>
    292c:	66 0f       	add	r22, r22
    292e:	77 1f       	adc	r23, r23
    2930:	88 1f       	adc	r24, r24
    2932:	bb 1f       	adc	r27, r27
    2934:	26 17       	cp	r18, r22
    2936:	37 07       	cpc	r19, r23
    2938:	48 07       	cpc	r20, r24
    293a:	ab 07       	cpc	r26, r27
    293c:	b0 e8       	ldi	r27, 0x80	; 128
    293e:	09 f0       	breq	.+2      	; 0x2942 <__divsf3_pse+0x56>
    2940:	bb 0b       	sbc	r27, r27
    2942:	80 2d       	mov	r24, r0
    2944:	bf 01       	movw	r22, r30
    2946:	ff 27       	eor	r31, r31
    2948:	93 58       	subi	r25, 0x83	; 131
    294a:	5f 4f       	sbci	r21, 0xFF	; 255
    294c:	2a f0       	brmi	.+10     	; 0x2958 <__divsf3_pse+0x6c>
    294e:	9e 3f       	cpi	r25, 0xFE	; 254
    2950:	51 05       	cpc	r21, r1
    2952:	68 f0       	brcs	.+26     	; 0x296e <__divsf3_pse+0x82>
    2954:	b6 c0       	rjmp	.+364    	; 0x2ac2 <__fp_inf>
    2956:	00 c1       	rjmp	.+512    	; 0x2b58 <__fp_szero>
    2958:	5f 3f       	cpi	r21, 0xFF	; 255
    295a:	ec f3       	brlt	.-6      	; 0x2956 <__divsf3_pse+0x6a>
    295c:	98 3e       	cpi	r25, 0xE8	; 232
    295e:	dc f3       	brlt	.-10     	; 0x2956 <__divsf3_pse+0x6a>
    2960:	86 95       	lsr	r24
    2962:	77 95       	ror	r23
    2964:	67 95       	ror	r22
    2966:	b7 95       	ror	r27
    2968:	f7 95       	ror	r31
    296a:	9f 5f       	subi	r25, 0xFF	; 255
    296c:	c9 f7       	brne	.-14     	; 0x2960 <__divsf3_pse+0x74>
    296e:	88 0f       	add	r24, r24
    2970:	91 1d       	adc	r25, r1
    2972:	96 95       	lsr	r25
    2974:	87 95       	ror	r24
    2976:	97 f9       	bld	r25, 7
    2978:	08 95       	ret
    297a:	e1 e0       	ldi	r30, 0x01	; 1
    297c:	66 0f       	add	r22, r22
    297e:	77 1f       	adc	r23, r23
    2980:	88 1f       	adc	r24, r24
    2982:	bb 1f       	adc	r27, r27
    2984:	62 17       	cp	r22, r18
    2986:	73 07       	cpc	r23, r19
    2988:	84 07       	cpc	r24, r20
    298a:	ba 07       	cpc	r27, r26
    298c:	20 f0       	brcs	.+8      	; 0x2996 <__divsf3_pse+0xaa>
    298e:	62 1b       	sub	r22, r18
    2990:	73 0b       	sbc	r23, r19
    2992:	84 0b       	sbc	r24, r20
    2994:	ba 0b       	sbc	r27, r26
    2996:	ee 1f       	adc	r30, r30
    2998:	88 f7       	brcc	.-30     	; 0x297c <__divsf3_pse+0x90>
    299a:	e0 95       	com	r30
    299c:	08 95       	ret

0000299e <__fixsfsi>:
    299e:	04 d0       	rcall	.+8      	; 0x29a8 <__fixunssfsi>
    29a0:	68 94       	set
    29a2:	b1 11       	cpse	r27, r1
    29a4:	d9 c0       	rjmp	.+434    	; 0x2b58 <__fp_szero>
    29a6:	08 95       	ret

000029a8 <__fixunssfsi>:
    29a8:	bc d0       	rcall	.+376    	; 0x2b22 <__fp_splitA>
    29aa:	88 f0       	brcs	.+34     	; 0x29ce <__fixunssfsi+0x26>
    29ac:	9f 57       	subi	r25, 0x7F	; 127
    29ae:	90 f0       	brcs	.+36     	; 0x29d4 <__fixunssfsi+0x2c>
    29b0:	b9 2f       	mov	r27, r25
    29b2:	99 27       	eor	r25, r25
    29b4:	b7 51       	subi	r27, 0x17	; 23
    29b6:	a0 f0       	brcs	.+40     	; 0x29e0 <__fixunssfsi+0x38>
    29b8:	d1 f0       	breq	.+52     	; 0x29ee <__fixunssfsi+0x46>
    29ba:	66 0f       	add	r22, r22
    29bc:	77 1f       	adc	r23, r23
    29be:	88 1f       	adc	r24, r24
    29c0:	99 1f       	adc	r25, r25
    29c2:	1a f0       	brmi	.+6      	; 0x29ca <__fixunssfsi+0x22>
    29c4:	ba 95       	dec	r27
    29c6:	c9 f7       	brne	.-14     	; 0x29ba <__fixunssfsi+0x12>
    29c8:	12 c0       	rjmp	.+36     	; 0x29ee <__fixunssfsi+0x46>
    29ca:	b1 30       	cpi	r27, 0x01	; 1
    29cc:	81 f0       	breq	.+32     	; 0x29ee <__fixunssfsi+0x46>
    29ce:	c3 d0       	rcall	.+390    	; 0x2b56 <__fp_zero>
    29d0:	b1 e0       	ldi	r27, 0x01	; 1
    29d2:	08 95       	ret
    29d4:	c0 c0       	rjmp	.+384    	; 0x2b56 <__fp_zero>
    29d6:	67 2f       	mov	r22, r23
    29d8:	78 2f       	mov	r23, r24
    29da:	88 27       	eor	r24, r24
    29dc:	b8 5f       	subi	r27, 0xF8	; 248
    29de:	39 f0       	breq	.+14     	; 0x29ee <__fixunssfsi+0x46>
    29e0:	b9 3f       	cpi	r27, 0xF9	; 249
    29e2:	cc f3       	brlt	.-14     	; 0x29d6 <__fixunssfsi+0x2e>
    29e4:	86 95       	lsr	r24
    29e6:	77 95       	ror	r23
    29e8:	67 95       	ror	r22
    29ea:	b3 95       	inc	r27
    29ec:	d9 f7       	brne	.-10     	; 0x29e4 <__fixunssfsi+0x3c>
    29ee:	3e f4       	brtc	.+14     	; 0x29fe <__fixunssfsi+0x56>
    29f0:	90 95       	com	r25
    29f2:	80 95       	com	r24
    29f4:	70 95       	com	r23
    29f6:	61 95       	neg	r22
    29f8:	7f 4f       	sbci	r23, 0xFF	; 255
    29fa:	8f 4f       	sbci	r24, 0xFF	; 255
    29fc:	9f 4f       	sbci	r25, 0xFF	; 255
    29fe:	08 95       	ret

00002a00 <__floatunsisf>:
    2a00:	e8 94       	clt
    2a02:	09 c0       	rjmp	.+18     	; 0x2a16 <__floatsisf+0x12>

00002a04 <__floatsisf>:
    2a04:	97 fb       	bst	r25, 7
    2a06:	3e f4       	brtc	.+14     	; 0x2a16 <__floatsisf+0x12>
    2a08:	90 95       	com	r25
    2a0a:	80 95       	com	r24
    2a0c:	70 95       	com	r23
    2a0e:	61 95       	neg	r22
    2a10:	7f 4f       	sbci	r23, 0xFF	; 255
    2a12:	8f 4f       	sbci	r24, 0xFF	; 255
    2a14:	9f 4f       	sbci	r25, 0xFF	; 255
    2a16:	99 23       	and	r25, r25
    2a18:	a9 f0       	breq	.+42     	; 0x2a44 <__floatsisf+0x40>
    2a1a:	f9 2f       	mov	r31, r25
    2a1c:	96 e9       	ldi	r25, 0x96	; 150
    2a1e:	bb 27       	eor	r27, r27
    2a20:	93 95       	inc	r25
    2a22:	f6 95       	lsr	r31
    2a24:	87 95       	ror	r24
    2a26:	77 95       	ror	r23
    2a28:	67 95       	ror	r22
    2a2a:	b7 95       	ror	r27
    2a2c:	f1 11       	cpse	r31, r1
    2a2e:	f8 cf       	rjmp	.-16     	; 0x2a20 <__floatsisf+0x1c>
    2a30:	fa f4       	brpl	.+62     	; 0x2a70 <__floatsisf+0x6c>
    2a32:	bb 0f       	add	r27, r27
    2a34:	11 f4       	brne	.+4      	; 0x2a3a <__floatsisf+0x36>
    2a36:	60 ff       	sbrs	r22, 0
    2a38:	1b c0       	rjmp	.+54     	; 0x2a70 <__floatsisf+0x6c>
    2a3a:	6f 5f       	subi	r22, 0xFF	; 255
    2a3c:	7f 4f       	sbci	r23, 0xFF	; 255
    2a3e:	8f 4f       	sbci	r24, 0xFF	; 255
    2a40:	9f 4f       	sbci	r25, 0xFF	; 255
    2a42:	16 c0       	rjmp	.+44     	; 0x2a70 <__floatsisf+0x6c>
    2a44:	88 23       	and	r24, r24
    2a46:	11 f0       	breq	.+4      	; 0x2a4c <__floatsisf+0x48>
    2a48:	96 e9       	ldi	r25, 0x96	; 150
    2a4a:	11 c0       	rjmp	.+34     	; 0x2a6e <__floatsisf+0x6a>
    2a4c:	77 23       	and	r23, r23
    2a4e:	21 f0       	breq	.+8      	; 0x2a58 <__floatsisf+0x54>
    2a50:	9e e8       	ldi	r25, 0x8E	; 142
    2a52:	87 2f       	mov	r24, r23
    2a54:	76 2f       	mov	r23, r22
    2a56:	05 c0       	rjmp	.+10     	; 0x2a62 <__floatsisf+0x5e>
    2a58:	66 23       	and	r22, r22
    2a5a:	71 f0       	breq	.+28     	; 0x2a78 <__floatsisf+0x74>
    2a5c:	96 e8       	ldi	r25, 0x86	; 134
    2a5e:	86 2f       	mov	r24, r22
    2a60:	70 e0       	ldi	r23, 0x00	; 0
    2a62:	60 e0       	ldi	r22, 0x00	; 0
    2a64:	2a f0       	brmi	.+10     	; 0x2a70 <__floatsisf+0x6c>
    2a66:	9a 95       	dec	r25
    2a68:	66 0f       	add	r22, r22
    2a6a:	77 1f       	adc	r23, r23
    2a6c:	88 1f       	adc	r24, r24
    2a6e:	da f7       	brpl	.-10     	; 0x2a66 <__floatsisf+0x62>
    2a70:	88 0f       	add	r24, r24
    2a72:	96 95       	lsr	r25
    2a74:	87 95       	ror	r24
    2a76:	97 f9       	bld	r25, 7
    2a78:	08 95       	ret

00002a7a <__fp_cmp>:
    2a7a:	99 0f       	add	r25, r25
    2a7c:	00 08       	sbc	r0, r0
    2a7e:	55 0f       	add	r21, r21
    2a80:	aa 0b       	sbc	r26, r26
    2a82:	e0 e8       	ldi	r30, 0x80	; 128
    2a84:	fe ef       	ldi	r31, 0xFE	; 254
    2a86:	16 16       	cp	r1, r22
    2a88:	17 06       	cpc	r1, r23
    2a8a:	e8 07       	cpc	r30, r24
    2a8c:	f9 07       	cpc	r31, r25
    2a8e:	c0 f0       	brcs	.+48     	; 0x2ac0 <__fp_cmp+0x46>
    2a90:	12 16       	cp	r1, r18
    2a92:	13 06       	cpc	r1, r19
    2a94:	e4 07       	cpc	r30, r20
    2a96:	f5 07       	cpc	r31, r21
    2a98:	98 f0       	brcs	.+38     	; 0x2ac0 <__fp_cmp+0x46>
    2a9a:	62 1b       	sub	r22, r18
    2a9c:	73 0b       	sbc	r23, r19
    2a9e:	84 0b       	sbc	r24, r20
    2aa0:	95 0b       	sbc	r25, r21
    2aa2:	39 f4       	brne	.+14     	; 0x2ab2 <__fp_cmp+0x38>
    2aa4:	0a 26       	eor	r0, r26
    2aa6:	61 f0       	breq	.+24     	; 0x2ac0 <__fp_cmp+0x46>
    2aa8:	23 2b       	or	r18, r19
    2aaa:	24 2b       	or	r18, r20
    2aac:	25 2b       	or	r18, r21
    2aae:	21 f4       	brne	.+8      	; 0x2ab8 <__fp_cmp+0x3e>
    2ab0:	08 95       	ret
    2ab2:	0a 26       	eor	r0, r26
    2ab4:	09 f4       	brne	.+2      	; 0x2ab8 <__fp_cmp+0x3e>
    2ab6:	a1 40       	sbci	r26, 0x01	; 1
    2ab8:	a6 95       	lsr	r26
    2aba:	8f ef       	ldi	r24, 0xFF	; 255
    2abc:	81 1d       	adc	r24, r1
    2abe:	81 1d       	adc	r24, r1
    2ac0:	08 95       	ret

00002ac2 <__fp_inf>:
    2ac2:	97 f9       	bld	r25, 7
    2ac4:	9f 67       	ori	r25, 0x7F	; 127
    2ac6:	80 e8       	ldi	r24, 0x80	; 128
    2ac8:	70 e0       	ldi	r23, 0x00	; 0
    2aca:	60 e0       	ldi	r22, 0x00	; 0
    2acc:	08 95       	ret

00002ace <__fp_nan>:
    2ace:	9f ef       	ldi	r25, 0xFF	; 255
    2ad0:	80 ec       	ldi	r24, 0xC0	; 192
    2ad2:	08 95       	ret

00002ad4 <__fp_pscA>:
    2ad4:	00 24       	eor	r0, r0
    2ad6:	0a 94       	dec	r0
    2ad8:	16 16       	cp	r1, r22
    2ada:	17 06       	cpc	r1, r23
    2adc:	18 06       	cpc	r1, r24
    2ade:	09 06       	cpc	r0, r25
    2ae0:	08 95       	ret

00002ae2 <__fp_pscB>:
    2ae2:	00 24       	eor	r0, r0
    2ae4:	0a 94       	dec	r0
    2ae6:	12 16       	cp	r1, r18
    2ae8:	13 06       	cpc	r1, r19
    2aea:	14 06       	cpc	r1, r20
    2aec:	05 06       	cpc	r0, r21
    2aee:	08 95       	ret

00002af0 <__fp_round>:
    2af0:	09 2e       	mov	r0, r25
    2af2:	03 94       	inc	r0
    2af4:	00 0c       	add	r0, r0
    2af6:	11 f4       	brne	.+4      	; 0x2afc <__fp_round+0xc>
    2af8:	88 23       	and	r24, r24
    2afa:	52 f0       	brmi	.+20     	; 0x2b10 <__fp_round+0x20>
    2afc:	bb 0f       	add	r27, r27
    2afe:	40 f4       	brcc	.+16     	; 0x2b10 <__fp_round+0x20>
    2b00:	bf 2b       	or	r27, r31
    2b02:	11 f4       	brne	.+4      	; 0x2b08 <__fp_round+0x18>
    2b04:	60 ff       	sbrs	r22, 0
    2b06:	04 c0       	rjmp	.+8      	; 0x2b10 <__fp_round+0x20>
    2b08:	6f 5f       	subi	r22, 0xFF	; 255
    2b0a:	7f 4f       	sbci	r23, 0xFF	; 255
    2b0c:	8f 4f       	sbci	r24, 0xFF	; 255
    2b0e:	9f 4f       	sbci	r25, 0xFF	; 255
    2b10:	08 95       	ret

00002b12 <__fp_split3>:
    2b12:	57 fd       	sbrc	r21, 7
    2b14:	90 58       	subi	r25, 0x80	; 128
    2b16:	44 0f       	add	r20, r20
    2b18:	55 1f       	adc	r21, r21
    2b1a:	59 f0       	breq	.+22     	; 0x2b32 <__fp_splitA+0x10>
    2b1c:	5f 3f       	cpi	r21, 0xFF	; 255
    2b1e:	71 f0       	breq	.+28     	; 0x2b3c <__fp_splitA+0x1a>
    2b20:	47 95       	ror	r20

00002b22 <__fp_splitA>:
    2b22:	88 0f       	add	r24, r24
    2b24:	97 fb       	bst	r25, 7
    2b26:	99 1f       	adc	r25, r25
    2b28:	61 f0       	breq	.+24     	; 0x2b42 <__fp_splitA+0x20>
    2b2a:	9f 3f       	cpi	r25, 0xFF	; 255
    2b2c:	79 f0       	breq	.+30     	; 0x2b4c <__fp_splitA+0x2a>
    2b2e:	87 95       	ror	r24
    2b30:	08 95       	ret
    2b32:	12 16       	cp	r1, r18
    2b34:	13 06       	cpc	r1, r19
    2b36:	14 06       	cpc	r1, r20
    2b38:	55 1f       	adc	r21, r21
    2b3a:	f2 cf       	rjmp	.-28     	; 0x2b20 <__fp_split3+0xe>
    2b3c:	46 95       	lsr	r20
    2b3e:	f1 df       	rcall	.-30     	; 0x2b22 <__fp_splitA>
    2b40:	08 c0       	rjmp	.+16     	; 0x2b52 <__fp_splitA+0x30>
    2b42:	16 16       	cp	r1, r22
    2b44:	17 06       	cpc	r1, r23
    2b46:	18 06       	cpc	r1, r24
    2b48:	99 1f       	adc	r25, r25
    2b4a:	f1 cf       	rjmp	.-30     	; 0x2b2e <__fp_splitA+0xc>
    2b4c:	86 95       	lsr	r24
    2b4e:	71 05       	cpc	r23, r1
    2b50:	61 05       	cpc	r22, r1
    2b52:	08 94       	sec
    2b54:	08 95       	ret

00002b56 <__fp_zero>:
    2b56:	e8 94       	clt

00002b58 <__fp_szero>:
    2b58:	bb 27       	eor	r27, r27
    2b5a:	66 27       	eor	r22, r22
    2b5c:	77 27       	eor	r23, r23
    2b5e:	cb 01       	movw	r24, r22
    2b60:	97 f9       	bld	r25, 7
    2b62:	08 95       	ret

00002b64 <__gesf2>:
    2b64:	8a df       	rcall	.-236    	; 0x2a7a <__fp_cmp>
    2b66:	08 f4       	brcc	.+2      	; 0x2b6a <__gesf2+0x6>
    2b68:	8f ef       	ldi	r24, 0xFF	; 255
    2b6a:	08 95       	ret

00002b6c <__mulsf3>:
    2b6c:	0b d0       	rcall	.+22     	; 0x2b84 <__mulsf3x>
    2b6e:	c0 cf       	rjmp	.-128    	; 0x2af0 <__fp_round>
    2b70:	b1 df       	rcall	.-158    	; 0x2ad4 <__fp_pscA>
    2b72:	28 f0       	brcs	.+10     	; 0x2b7e <__mulsf3+0x12>
    2b74:	b6 df       	rcall	.-148    	; 0x2ae2 <__fp_pscB>
    2b76:	18 f0       	brcs	.+6      	; 0x2b7e <__mulsf3+0x12>
    2b78:	95 23       	and	r25, r21
    2b7a:	09 f0       	breq	.+2      	; 0x2b7e <__mulsf3+0x12>
    2b7c:	a2 cf       	rjmp	.-188    	; 0x2ac2 <__fp_inf>
    2b7e:	a7 cf       	rjmp	.-178    	; 0x2ace <__fp_nan>
    2b80:	11 24       	eor	r1, r1
    2b82:	ea cf       	rjmp	.-44     	; 0x2b58 <__fp_szero>

00002b84 <__mulsf3x>:
    2b84:	c6 df       	rcall	.-116    	; 0x2b12 <__fp_split3>
    2b86:	a0 f3       	brcs	.-24     	; 0x2b70 <__mulsf3+0x4>

00002b88 <__mulsf3_pse>:
    2b88:	95 9f       	mul	r25, r21
    2b8a:	d1 f3       	breq	.-12     	; 0x2b80 <__mulsf3+0x14>
    2b8c:	95 0f       	add	r25, r21
    2b8e:	50 e0       	ldi	r21, 0x00	; 0
    2b90:	55 1f       	adc	r21, r21
    2b92:	62 9f       	mul	r22, r18
    2b94:	f0 01       	movw	r30, r0
    2b96:	72 9f       	mul	r23, r18
    2b98:	bb 27       	eor	r27, r27
    2b9a:	f0 0d       	add	r31, r0
    2b9c:	b1 1d       	adc	r27, r1
    2b9e:	63 9f       	mul	r22, r19
    2ba0:	aa 27       	eor	r26, r26
    2ba2:	f0 0d       	add	r31, r0
    2ba4:	b1 1d       	adc	r27, r1
    2ba6:	aa 1f       	adc	r26, r26
    2ba8:	64 9f       	mul	r22, r20
    2baa:	66 27       	eor	r22, r22
    2bac:	b0 0d       	add	r27, r0
    2bae:	a1 1d       	adc	r26, r1
    2bb0:	66 1f       	adc	r22, r22
    2bb2:	82 9f       	mul	r24, r18
    2bb4:	22 27       	eor	r18, r18
    2bb6:	b0 0d       	add	r27, r0
    2bb8:	a1 1d       	adc	r26, r1
    2bba:	62 1f       	adc	r22, r18
    2bbc:	73 9f       	mul	r23, r19
    2bbe:	b0 0d       	add	r27, r0
    2bc0:	a1 1d       	adc	r26, r1
    2bc2:	62 1f       	adc	r22, r18
    2bc4:	83 9f       	mul	r24, r19
    2bc6:	a0 0d       	add	r26, r0
    2bc8:	61 1d       	adc	r22, r1
    2bca:	22 1f       	adc	r18, r18
    2bcc:	74 9f       	mul	r23, r20
    2bce:	33 27       	eor	r19, r19
    2bd0:	a0 0d       	add	r26, r0
    2bd2:	61 1d       	adc	r22, r1
    2bd4:	23 1f       	adc	r18, r19
    2bd6:	84 9f       	mul	r24, r20
    2bd8:	60 0d       	add	r22, r0
    2bda:	21 1d       	adc	r18, r1
    2bdc:	82 2f       	mov	r24, r18
    2bde:	76 2f       	mov	r23, r22
    2be0:	6a 2f       	mov	r22, r26
    2be2:	11 24       	eor	r1, r1
    2be4:	9f 57       	subi	r25, 0x7F	; 127
    2be6:	50 40       	sbci	r21, 0x00	; 0
    2be8:	8a f0       	brmi	.+34     	; 0x2c0c <__mulsf3_pse+0x84>
    2bea:	e1 f0       	breq	.+56     	; 0x2c24 <__mulsf3_pse+0x9c>
    2bec:	88 23       	and	r24, r24
    2bee:	4a f0       	brmi	.+18     	; 0x2c02 <__mulsf3_pse+0x7a>
    2bf0:	ee 0f       	add	r30, r30
    2bf2:	ff 1f       	adc	r31, r31
    2bf4:	bb 1f       	adc	r27, r27
    2bf6:	66 1f       	adc	r22, r22
    2bf8:	77 1f       	adc	r23, r23
    2bfa:	88 1f       	adc	r24, r24
    2bfc:	91 50       	subi	r25, 0x01	; 1
    2bfe:	50 40       	sbci	r21, 0x00	; 0
    2c00:	a9 f7       	brne	.-22     	; 0x2bec <__mulsf3_pse+0x64>
    2c02:	9e 3f       	cpi	r25, 0xFE	; 254
    2c04:	51 05       	cpc	r21, r1
    2c06:	70 f0       	brcs	.+28     	; 0x2c24 <__mulsf3_pse+0x9c>
    2c08:	5c cf       	rjmp	.-328    	; 0x2ac2 <__fp_inf>
    2c0a:	a6 cf       	rjmp	.-180    	; 0x2b58 <__fp_szero>
    2c0c:	5f 3f       	cpi	r21, 0xFF	; 255
    2c0e:	ec f3       	brlt	.-6      	; 0x2c0a <__mulsf3_pse+0x82>
    2c10:	98 3e       	cpi	r25, 0xE8	; 232
    2c12:	dc f3       	brlt	.-10     	; 0x2c0a <__mulsf3_pse+0x82>
    2c14:	86 95       	lsr	r24
    2c16:	77 95       	ror	r23
    2c18:	67 95       	ror	r22
    2c1a:	b7 95       	ror	r27
    2c1c:	f7 95       	ror	r31
    2c1e:	e7 95       	ror	r30
    2c20:	9f 5f       	subi	r25, 0xFF	; 255
    2c22:	c1 f7       	brne	.-16     	; 0x2c14 <__mulsf3_pse+0x8c>
    2c24:	fe 2b       	or	r31, r30
    2c26:	88 0f       	add	r24, r24
    2c28:	91 1d       	adc	r25, r1
    2c2a:	96 95       	lsr	r25
    2c2c:	87 95       	ror	r24
    2c2e:	97 f9       	bld	r25, 7
    2c30:	08 95       	ret

00002c32 <vfprintf>:
    2c32:	a0 e1       	ldi	r26, 0x10	; 16
    2c34:	b0 e0       	ldi	r27, 0x00	; 0
    2c36:	ee e1       	ldi	r30, 0x1E	; 30
    2c38:	f6 e1       	ldi	r31, 0x16	; 22
    2c3a:	59 c3       	rjmp	.+1714   	; 0x32ee <__prologue_saves__>
    2c3c:	7c 01       	movw	r14, r24
    2c3e:	1b 01       	movw	r2, r22
    2c40:	6a 01       	movw	r12, r20
    2c42:	fc 01       	movw	r30, r24
    2c44:	17 82       	std	Z+7, r1	; 0x07
    2c46:	16 82       	std	Z+6, r1	; 0x06
    2c48:	83 81       	ldd	r24, Z+3	; 0x03
    2c4a:	81 ff       	sbrs	r24, 1
    2c4c:	2a c3       	rjmp	.+1620   	; 0x32a2 <vfprintf+0x670>
    2c4e:	9e 01       	movw	r18, r28
    2c50:	2f 5f       	subi	r18, 0xFF	; 255
    2c52:	3f 4f       	sbci	r19, 0xFF	; 255
    2c54:	39 01       	movw	r6, r18
    2c56:	f7 01       	movw	r30, r14
    2c58:	93 81       	ldd	r25, Z+3	; 0x03
    2c5a:	f1 01       	movw	r30, r2
    2c5c:	93 fd       	sbrc	r25, 3
    2c5e:	85 91       	lpm	r24, Z+
    2c60:	93 ff       	sbrs	r25, 3
    2c62:	81 91       	ld	r24, Z+
    2c64:	1f 01       	movw	r2, r30
    2c66:	88 23       	and	r24, r24
    2c68:	09 f4       	brne	.+2      	; 0x2c6c <vfprintf+0x3a>
    2c6a:	17 c3       	rjmp	.+1582   	; 0x329a <vfprintf+0x668>
    2c6c:	85 32       	cpi	r24, 0x25	; 37
    2c6e:	39 f4       	brne	.+14     	; 0x2c7e <vfprintf+0x4c>
    2c70:	93 fd       	sbrc	r25, 3
    2c72:	85 91       	lpm	r24, Z+
    2c74:	93 ff       	sbrs	r25, 3
    2c76:	81 91       	ld	r24, Z+
    2c78:	1f 01       	movw	r2, r30
    2c7a:	85 32       	cpi	r24, 0x25	; 37
    2c7c:	31 f4       	brne	.+12     	; 0x2c8a <vfprintf+0x58>
    2c7e:	b7 01       	movw	r22, r14
    2c80:	90 e0       	ldi	r25, 0x00	; 0
    2c82:	6e d4       	rcall	.+2268   	; 0x3560 <fputc>
    2c84:	56 01       	movw	r10, r12
    2c86:	65 01       	movw	r12, r10
    2c88:	e6 cf       	rjmp	.-52     	; 0x2c56 <vfprintf+0x24>
    2c8a:	10 e0       	ldi	r17, 0x00	; 0
    2c8c:	51 2c       	mov	r5, r1
    2c8e:	91 2c       	mov	r9, r1
    2c90:	ff e1       	ldi	r31, 0x1F	; 31
    2c92:	f9 15       	cp	r31, r9
    2c94:	d8 f0       	brcs	.+54     	; 0x2ccc <vfprintf+0x9a>
    2c96:	8b 32       	cpi	r24, 0x2B	; 43
    2c98:	79 f0       	breq	.+30     	; 0x2cb8 <vfprintf+0x86>
    2c9a:	38 f4       	brcc	.+14     	; 0x2caa <vfprintf+0x78>
    2c9c:	80 32       	cpi	r24, 0x20	; 32
    2c9e:	79 f0       	breq	.+30     	; 0x2cbe <vfprintf+0x8c>
    2ca0:	83 32       	cpi	r24, 0x23	; 35
    2ca2:	a1 f4       	brne	.+40     	; 0x2ccc <vfprintf+0x9a>
    2ca4:	f9 2d       	mov	r31, r9
    2ca6:	f0 61       	ori	r31, 0x10	; 16
    2ca8:	2e c0       	rjmp	.+92     	; 0x2d06 <vfprintf+0xd4>
    2caa:	8d 32       	cpi	r24, 0x2D	; 45
    2cac:	61 f0       	breq	.+24     	; 0x2cc6 <vfprintf+0x94>
    2cae:	80 33       	cpi	r24, 0x30	; 48
    2cb0:	69 f4       	brne	.+26     	; 0x2ccc <vfprintf+0x9a>
    2cb2:	29 2d       	mov	r18, r9
    2cb4:	21 60       	ori	r18, 0x01	; 1
    2cb6:	2d c0       	rjmp	.+90     	; 0x2d12 <vfprintf+0xe0>
    2cb8:	39 2d       	mov	r19, r9
    2cba:	32 60       	ori	r19, 0x02	; 2
    2cbc:	93 2e       	mov	r9, r19
    2cbe:	89 2d       	mov	r24, r9
    2cc0:	84 60       	ori	r24, 0x04	; 4
    2cc2:	98 2e       	mov	r9, r24
    2cc4:	2a c0       	rjmp	.+84     	; 0x2d1a <vfprintf+0xe8>
    2cc6:	e9 2d       	mov	r30, r9
    2cc8:	e8 60       	ori	r30, 0x08	; 8
    2cca:	15 c0       	rjmp	.+42     	; 0x2cf6 <vfprintf+0xc4>
    2ccc:	97 fc       	sbrc	r9, 7
    2cce:	2d c0       	rjmp	.+90     	; 0x2d2a <vfprintf+0xf8>
    2cd0:	20 ed       	ldi	r18, 0xD0	; 208
    2cd2:	28 0f       	add	r18, r24
    2cd4:	2a 30       	cpi	r18, 0x0A	; 10
    2cd6:	88 f4       	brcc	.+34     	; 0x2cfa <vfprintf+0xc8>
    2cd8:	96 fe       	sbrs	r9, 6
    2cda:	06 c0       	rjmp	.+12     	; 0x2ce8 <vfprintf+0xb6>
    2cdc:	3a e0       	ldi	r19, 0x0A	; 10
    2cde:	13 9f       	mul	r17, r19
    2ce0:	20 0d       	add	r18, r0
    2ce2:	11 24       	eor	r1, r1
    2ce4:	12 2f       	mov	r17, r18
    2ce6:	19 c0       	rjmp	.+50     	; 0x2d1a <vfprintf+0xe8>
    2ce8:	8a e0       	ldi	r24, 0x0A	; 10
    2cea:	58 9e       	mul	r5, r24
    2cec:	20 0d       	add	r18, r0
    2cee:	11 24       	eor	r1, r1
    2cf0:	52 2e       	mov	r5, r18
    2cf2:	e9 2d       	mov	r30, r9
    2cf4:	e0 62       	ori	r30, 0x20	; 32
    2cf6:	9e 2e       	mov	r9, r30
    2cf8:	10 c0       	rjmp	.+32     	; 0x2d1a <vfprintf+0xe8>
    2cfa:	8e 32       	cpi	r24, 0x2E	; 46
    2cfc:	31 f4       	brne	.+12     	; 0x2d0a <vfprintf+0xd8>
    2cfe:	96 fc       	sbrc	r9, 6
    2d00:	cc c2       	rjmp	.+1432   	; 0x329a <vfprintf+0x668>
    2d02:	f9 2d       	mov	r31, r9
    2d04:	f0 64       	ori	r31, 0x40	; 64
    2d06:	9f 2e       	mov	r9, r31
    2d08:	08 c0       	rjmp	.+16     	; 0x2d1a <vfprintf+0xe8>
    2d0a:	8c 36       	cpi	r24, 0x6C	; 108
    2d0c:	21 f4       	brne	.+8      	; 0x2d16 <vfprintf+0xe4>
    2d0e:	29 2d       	mov	r18, r9
    2d10:	20 68       	ori	r18, 0x80	; 128
    2d12:	92 2e       	mov	r9, r18
    2d14:	02 c0       	rjmp	.+4      	; 0x2d1a <vfprintf+0xe8>
    2d16:	88 36       	cpi	r24, 0x68	; 104
    2d18:	41 f4       	brne	.+16     	; 0x2d2a <vfprintf+0xf8>
    2d1a:	f1 01       	movw	r30, r2
    2d1c:	93 fd       	sbrc	r25, 3
    2d1e:	85 91       	lpm	r24, Z+
    2d20:	93 ff       	sbrs	r25, 3
    2d22:	81 91       	ld	r24, Z+
    2d24:	1f 01       	movw	r2, r30
    2d26:	81 11       	cpse	r24, r1
    2d28:	b3 cf       	rjmp	.-154    	; 0x2c90 <vfprintf+0x5e>
    2d2a:	9b eb       	ldi	r25, 0xBB	; 187
    2d2c:	98 0f       	add	r25, r24
    2d2e:	93 30       	cpi	r25, 0x03	; 3
    2d30:	20 f4       	brcc	.+8      	; 0x2d3a <vfprintf+0x108>
    2d32:	99 2d       	mov	r25, r9
    2d34:	90 61       	ori	r25, 0x10	; 16
    2d36:	80 5e       	subi	r24, 0xE0	; 224
    2d38:	07 c0       	rjmp	.+14     	; 0x2d48 <vfprintf+0x116>
    2d3a:	9b e9       	ldi	r25, 0x9B	; 155
    2d3c:	98 0f       	add	r25, r24
    2d3e:	93 30       	cpi	r25, 0x03	; 3
    2d40:	08 f0       	brcs	.+2      	; 0x2d44 <vfprintf+0x112>
    2d42:	59 c1       	rjmp	.+690    	; 0x2ff6 <vfprintf+0x3c4>
    2d44:	99 2d       	mov	r25, r9
    2d46:	9f 7e       	andi	r25, 0xEF	; 239
    2d48:	96 ff       	sbrs	r25, 6
    2d4a:	16 e0       	ldi	r17, 0x06	; 6
    2d4c:	9f 73       	andi	r25, 0x3F	; 63
    2d4e:	99 2e       	mov	r9, r25
    2d50:	85 36       	cpi	r24, 0x65	; 101
    2d52:	19 f4       	brne	.+6      	; 0x2d5a <vfprintf+0x128>
    2d54:	90 64       	ori	r25, 0x40	; 64
    2d56:	99 2e       	mov	r9, r25
    2d58:	08 c0       	rjmp	.+16     	; 0x2d6a <vfprintf+0x138>
    2d5a:	86 36       	cpi	r24, 0x66	; 102
    2d5c:	21 f4       	brne	.+8      	; 0x2d66 <vfprintf+0x134>
    2d5e:	39 2f       	mov	r19, r25
    2d60:	30 68       	ori	r19, 0x80	; 128
    2d62:	93 2e       	mov	r9, r19
    2d64:	02 c0       	rjmp	.+4      	; 0x2d6a <vfprintf+0x138>
    2d66:	11 11       	cpse	r17, r1
    2d68:	11 50       	subi	r17, 0x01	; 1
    2d6a:	97 fe       	sbrs	r9, 7
    2d6c:	07 c0       	rjmp	.+14     	; 0x2d7c <vfprintf+0x14a>
    2d6e:	1c 33       	cpi	r17, 0x3C	; 60
    2d70:	50 f4       	brcc	.+20     	; 0x2d86 <vfprintf+0x154>
    2d72:	44 24       	eor	r4, r4
    2d74:	43 94       	inc	r4
    2d76:	41 0e       	add	r4, r17
    2d78:	27 e0       	ldi	r18, 0x07	; 7
    2d7a:	0b c0       	rjmp	.+22     	; 0x2d92 <vfprintf+0x160>
    2d7c:	18 30       	cpi	r17, 0x08	; 8
    2d7e:	38 f0       	brcs	.+14     	; 0x2d8e <vfprintf+0x15c>
    2d80:	27 e0       	ldi	r18, 0x07	; 7
    2d82:	17 e0       	ldi	r17, 0x07	; 7
    2d84:	05 c0       	rjmp	.+10     	; 0x2d90 <vfprintf+0x15e>
    2d86:	27 e0       	ldi	r18, 0x07	; 7
    2d88:	9c e3       	ldi	r25, 0x3C	; 60
    2d8a:	49 2e       	mov	r4, r25
    2d8c:	02 c0       	rjmp	.+4      	; 0x2d92 <vfprintf+0x160>
    2d8e:	21 2f       	mov	r18, r17
    2d90:	41 2c       	mov	r4, r1
    2d92:	56 01       	movw	r10, r12
    2d94:	84 e0       	ldi	r24, 0x04	; 4
    2d96:	a8 0e       	add	r10, r24
    2d98:	b1 1c       	adc	r11, r1
    2d9a:	f6 01       	movw	r30, r12
    2d9c:	60 81       	ld	r22, Z
    2d9e:	71 81       	ldd	r23, Z+1	; 0x01
    2da0:	82 81       	ldd	r24, Z+2	; 0x02
    2da2:	93 81       	ldd	r25, Z+3	; 0x03
    2da4:	04 2d       	mov	r16, r4
    2da6:	a3 01       	movw	r20, r6
    2da8:	d9 d2       	rcall	.+1458   	; 0x335c <__ftoa_engine>
    2daa:	6c 01       	movw	r12, r24
    2dac:	f9 81       	ldd	r31, Y+1	; 0x01
    2dae:	fc 87       	std	Y+12, r31	; 0x0c
    2db0:	f0 ff       	sbrs	r31, 0
    2db2:	02 c0       	rjmp	.+4      	; 0x2db8 <vfprintf+0x186>
    2db4:	f3 ff       	sbrs	r31, 3
    2db6:	06 c0       	rjmp	.+12     	; 0x2dc4 <vfprintf+0x192>
    2db8:	91 fc       	sbrc	r9, 1
    2dba:	06 c0       	rjmp	.+12     	; 0x2dc8 <vfprintf+0x196>
    2dbc:	92 fe       	sbrs	r9, 2
    2dbe:	06 c0       	rjmp	.+12     	; 0x2dcc <vfprintf+0x19a>
    2dc0:	00 e2       	ldi	r16, 0x20	; 32
    2dc2:	05 c0       	rjmp	.+10     	; 0x2dce <vfprintf+0x19c>
    2dc4:	0d e2       	ldi	r16, 0x2D	; 45
    2dc6:	03 c0       	rjmp	.+6      	; 0x2dce <vfprintf+0x19c>
    2dc8:	0b e2       	ldi	r16, 0x2B	; 43
    2dca:	01 c0       	rjmp	.+2      	; 0x2dce <vfprintf+0x19c>
    2dcc:	00 e0       	ldi	r16, 0x00	; 0
    2dce:	8c 85       	ldd	r24, Y+12	; 0x0c
    2dd0:	8c 70       	andi	r24, 0x0C	; 12
    2dd2:	19 f0       	breq	.+6      	; 0x2dda <vfprintf+0x1a8>
    2dd4:	01 11       	cpse	r16, r1
    2dd6:	43 c2       	rjmp	.+1158   	; 0x325e <vfprintf+0x62c>
    2dd8:	80 c2       	rjmp	.+1280   	; 0x32da <vfprintf+0x6a8>
    2dda:	97 fe       	sbrs	r9, 7
    2ddc:	10 c0       	rjmp	.+32     	; 0x2dfe <vfprintf+0x1cc>
    2dde:	4c 0c       	add	r4, r12
    2de0:	fc 85       	ldd	r31, Y+12	; 0x0c
    2de2:	f4 ff       	sbrs	r31, 4
    2de4:	04 c0       	rjmp	.+8      	; 0x2dee <vfprintf+0x1bc>
    2de6:	8a 81       	ldd	r24, Y+2	; 0x02
    2de8:	81 33       	cpi	r24, 0x31	; 49
    2dea:	09 f4       	brne	.+2      	; 0x2dee <vfprintf+0x1bc>
    2dec:	4a 94       	dec	r4
    2dee:	14 14       	cp	r1, r4
    2df0:	74 f5       	brge	.+92     	; 0x2e4e <vfprintf+0x21c>
    2df2:	28 e0       	ldi	r18, 0x08	; 8
    2df4:	24 15       	cp	r18, r4
    2df6:	78 f5       	brcc	.+94     	; 0x2e56 <vfprintf+0x224>
    2df8:	88 e0       	ldi	r24, 0x08	; 8
    2dfa:	48 2e       	mov	r4, r24
    2dfc:	2c c0       	rjmp	.+88     	; 0x2e56 <vfprintf+0x224>
    2dfe:	96 fc       	sbrc	r9, 6
    2e00:	2a c0       	rjmp	.+84     	; 0x2e56 <vfprintf+0x224>
    2e02:	81 2f       	mov	r24, r17
    2e04:	90 e0       	ldi	r25, 0x00	; 0
    2e06:	8c 15       	cp	r24, r12
    2e08:	9d 05       	cpc	r25, r13
    2e0a:	9c f0       	brlt	.+38     	; 0x2e32 <vfprintf+0x200>
    2e0c:	3c ef       	ldi	r19, 0xFC	; 252
    2e0e:	c3 16       	cp	r12, r19
    2e10:	3f ef       	ldi	r19, 0xFF	; 255
    2e12:	d3 06       	cpc	r13, r19
    2e14:	74 f0       	brlt	.+28     	; 0x2e32 <vfprintf+0x200>
    2e16:	89 2d       	mov	r24, r9
    2e18:	80 68       	ori	r24, 0x80	; 128
    2e1a:	98 2e       	mov	r9, r24
    2e1c:	0a c0       	rjmp	.+20     	; 0x2e32 <vfprintf+0x200>
    2e1e:	e2 e0       	ldi	r30, 0x02	; 2
    2e20:	f0 e0       	ldi	r31, 0x00	; 0
    2e22:	ec 0f       	add	r30, r28
    2e24:	fd 1f       	adc	r31, r29
    2e26:	e1 0f       	add	r30, r17
    2e28:	f1 1d       	adc	r31, r1
    2e2a:	80 81       	ld	r24, Z
    2e2c:	80 33       	cpi	r24, 0x30	; 48
    2e2e:	19 f4       	brne	.+6      	; 0x2e36 <vfprintf+0x204>
    2e30:	11 50       	subi	r17, 0x01	; 1
    2e32:	11 11       	cpse	r17, r1
    2e34:	f4 cf       	rjmp	.-24     	; 0x2e1e <vfprintf+0x1ec>
    2e36:	97 fe       	sbrs	r9, 7
    2e38:	0e c0       	rjmp	.+28     	; 0x2e56 <vfprintf+0x224>
    2e3a:	44 24       	eor	r4, r4
    2e3c:	43 94       	inc	r4
    2e3e:	41 0e       	add	r4, r17
    2e40:	81 2f       	mov	r24, r17
    2e42:	90 e0       	ldi	r25, 0x00	; 0
    2e44:	c8 16       	cp	r12, r24
    2e46:	d9 06       	cpc	r13, r25
    2e48:	2c f4       	brge	.+10     	; 0x2e54 <vfprintf+0x222>
    2e4a:	1c 19       	sub	r17, r12
    2e4c:	04 c0       	rjmp	.+8      	; 0x2e56 <vfprintf+0x224>
    2e4e:	44 24       	eor	r4, r4
    2e50:	43 94       	inc	r4
    2e52:	01 c0       	rjmp	.+2      	; 0x2e56 <vfprintf+0x224>
    2e54:	10 e0       	ldi	r17, 0x00	; 0
    2e56:	97 fe       	sbrs	r9, 7
    2e58:	06 c0       	rjmp	.+12     	; 0x2e66 <vfprintf+0x234>
    2e5a:	1c 14       	cp	r1, r12
    2e5c:	1d 04       	cpc	r1, r13
    2e5e:	34 f4       	brge	.+12     	; 0x2e6c <vfprintf+0x23a>
    2e60:	c6 01       	movw	r24, r12
    2e62:	01 96       	adiw	r24, 0x01	; 1
    2e64:	05 c0       	rjmp	.+10     	; 0x2e70 <vfprintf+0x23e>
    2e66:	85 e0       	ldi	r24, 0x05	; 5
    2e68:	90 e0       	ldi	r25, 0x00	; 0
    2e6a:	02 c0       	rjmp	.+4      	; 0x2e70 <vfprintf+0x23e>
    2e6c:	81 e0       	ldi	r24, 0x01	; 1
    2e6e:	90 e0       	ldi	r25, 0x00	; 0
    2e70:	01 11       	cpse	r16, r1
    2e72:	01 96       	adiw	r24, 0x01	; 1
    2e74:	11 23       	and	r17, r17
    2e76:	31 f0       	breq	.+12     	; 0x2e84 <vfprintf+0x252>
    2e78:	21 2f       	mov	r18, r17
    2e7a:	30 e0       	ldi	r19, 0x00	; 0
    2e7c:	2f 5f       	subi	r18, 0xFF	; 255
    2e7e:	3f 4f       	sbci	r19, 0xFF	; 255
    2e80:	82 0f       	add	r24, r18
    2e82:	93 1f       	adc	r25, r19
    2e84:	25 2d       	mov	r18, r5
    2e86:	30 e0       	ldi	r19, 0x00	; 0
    2e88:	82 17       	cp	r24, r18
    2e8a:	93 07       	cpc	r25, r19
    2e8c:	14 f4       	brge	.+4      	; 0x2e92 <vfprintf+0x260>
    2e8e:	58 1a       	sub	r5, r24
    2e90:	01 c0       	rjmp	.+2      	; 0x2e94 <vfprintf+0x262>
    2e92:	51 2c       	mov	r5, r1
    2e94:	89 2d       	mov	r24, r9
    2e96:	89 70       	andi	r24, 0x09	; 9
    2e98:	41 f4       	brne	.+16     	; 0x2eaa <vfprintf+0x278>
    2e9a:	55 20       	and	r5, r5
    2e9c:	31 f0       	breq	.+12     	; 0x2eaa <vfprintf+0x278>
    2e9e:	b7 01       	movw	r22, r14
    2ea0:	80 e2       	ldi	r24, 0x20	; 32
    2ea2:	90 e0       	ldi	r25, 0x00	; 0
    2ea4:	5d d3       	rcall	.+1722   	; 0x3560 <fputc>
    2ea6:	5a 94       	dec	r5
    2ea8:	f8 cf       	rjmp	.-16     	; 0x2e9a <vfprintf+0x268>
    2eaa:	00 23       	and	r16, r16
    2eac:	21 f0       	breq	.+8      	; 0x2eb6 <vfprintf+0x284>
    2eae:	b7 01       	movw	r22, r14
    2eb0:	80 2f       	mov	r24, r16
    2eb2:	90 e0       	ldi	r25, 0x00	; 0
    2eb4:	55 d3       	rcall	.+1706   	; 0x3560 <fputc>
    2eb6:	93 fc       	sbrc	r9, 3
    2eb8:	08 c0       	rjmp	.+16     	; 0x2eca <vfprintf+0x298>
    2eba:	55 20       	and	r5, r5
    2ebc:	31 f0       	breq	.+12     	; 0x2eca <vfprintf+0x298>
    2ebe:	b7 01       	movw	r22, r14
    2ec0:	80 e3       	ldi	r24, 0x30	; 48
    2ec2:	90 e0       	ldi	r25, 0x00	; 0
    2ec4:	4d d3       	rcall	.+1690   	; 0x3560 <fputc>
    2ec6:	5a 94       	dec	r5
    2ec8:	f8 cf       	rjmp	.-16     	; 0x2eba <vfprintf+0x288>
    2eca:	97 fe       	sbrs	r9, 7
    2ecc:	4a c0       	rjmp	.+148    	; 0x2f62 <vfprintf+0x330>
    2ece:	46 01       	movw	r8, r12
    2ed0:	d7 fe       	sbrs	r13, 7
    2ed2:	02 c0       	rjmp	.+4      	; 0x2ed8 <vfprintf+0x2a6>
    2ed4:	81 2c       	mov	r8, r1
    2ed6:	91 2c       	mov	r9, r1
    2ed8:	c6 01       	movw	r24, r12
    2eda:	88 19       	sub	r24, r8
    2edc:	99 09       	sbc	r25, r9
    2ede:	f3 01       	movw	r30, r6
    2ee0:	e8 0f       	add	r30, r24
    2ee2:	f9 1f       	adc	r31, r25
    2ee4:	fe 87       	std	Y+14, r31	; 0x0e
    2ee6:	ed 87       	std	Y+13, r30	; 0x0d
    2ee8:	96 01       	movw	r18, r12
    2eea:	24 19       	sub	r18, r4
    2eec:	31 09       	sbc	r19, r1
    2eee:	38 8b       	std	Y+16, r19	; 0x10
    2ef0:	2f 87       	std	Y+15, r18	; 0x0f
    2ef2:	01 2f       	mov	r16, r17
    2ef4:	10 e0       	ldi	r17, 0x00	; 0
    2ef6:	11 95       	neg	r17
    2ef8:	01 95       	neg	r16
    2efa:	11 09       	sbc	r17, r1
    2efc:	3f ef       	ldi	r19, 0xFF	; 255
    2efe:	83 16       	cp	r8, r19
    2f00:	93 06       	cpc	r9, r19
    2f02:	21 f4       	brne	.+8      	; 0x2f0c <vfprintf+0x2da>
    2f04:	b7 01       	movw	r22, r14
    2f06:	8e e2       	ldi	r24, 0x2E	; 46
    2f08:	90 e0       	ldi	r25, 0x00	; 0
    2f0a:	2a d3       	rcall	.+1620   	; 0x3560 <fputc>
    2f0c:	c8 14       	cp	r12, r8
    2f0e:	d9 04       	cpc	r13, r9
    2f10:	4c f0       	brlt	.+18     	; 0x2f24 <vfprintf+0x2f2>
    2f12:	8f 85       	ldd	r24, Y+15	; 0x0f
    2f14:	98 89       	ldd	r25, Y+16	; 0x10
    2f16:	88 15       	cp	r24, r8
    2f18:	99 05       	cpc	r25, r9
    2f1a:	24 f4       	brge	.+8      	; 0x2f24 <vfprintf+0x2f2>
    2f1c:	ed 85       	ldd	r30, Y+13	; 0x0d
    2f1e:	fe 85       	ldd	r31, Y+14	; 0x0e
    2f20:	81 81       	ldd	r24, Z+1	; 0x01
    2f22:	01 c0       	rjmp	.+2      	; 0x2f26 <vfprintf+0x2f4>
    2f24:	80 e3       	ldi	r24, 0x30	; 48
    2f26:	f1 e0       	ldi	r31, 0x01	; 1
    2f28:	8f 1a       	sub	r8, r31
    2f2a:	91 08       	sbc	r9, r1
    2f2c:	2d 85       	ldd	r18, Y+13	; 0x0d
    2f2e:	3e 85       	ldd	r19, Y+14	; 0x0e
    2f30:	2f 5f       	subi	r18, 0xFF	; 255
    2f32:	3f 4f       	sbci	r19, 0xFF	; 255
    2f34:	3e 87       	std	Y+14, r19	; 0x0e
    2f36:	2d 87       	std	Y+13, r18	; 0x0d
    2f38:	80 16       	cp	r8, r16
    2f3a:	91 06       	cpc	r9, r17
    2f3c:	24 f0       	brlt	.+8      	; 0x2f46 <vfprintf+0x314>
    2f3e:	b7 01       	movw	r22, r14
    2f40:	90 e0       	ldi	r25, 0x00	; 0
    2f42:	0e d3       	rcall	.+1564   	; 0x3560 <fputc>
    2f44:	db cf       	rjmp	.-74     	; 0x2efc <vfprintf+0x2ca>
    2f46:	c8 14       	cp	r12, r8
    2f48:	d9 04       	cpc	r13, r9
    2f4a:	41 f4       	brne	.+16     	; 0x2f5c <vfprintf+0x32a>
    2f4c:	9a 81       	ldd	r25, Y+2	; 0x02
    2f4e:	96 33       	cpi	r25, 0x36	; 54
    2f50:	20 f4       	brcc	.+8      	; 0x2f5a <vfprintf+0x328>
    2f52:	95 33       	cpi	r25, 0x35	; 53
    2f54:	19 f4       	brne	.+6      	; 0x2f5c <vfprintf+0x32a>
    2f56:	3c 85       	ldd	r19, Y+12	; 0x0c
    2f58:	34 ff       	sbrs	r19, 4
    2f5a:	81 e3       	ldi	r24, 0x31	; 49
    2f5c:	b7 01       	movw	r22, r14
    2f5e:	90 e0       	ldi	r25, 0x00	; 0
    2f60:	48 c0       	rjmp	.+144    	; 0x2ff2 <vfprintf+0x3c0>
    2f62:	8a 81       	ldd	r24, Y+2	; 0x02
    2f64:	81 33       	cpi	r24, 0x31	; 49
    2f66:	19 f0       	breq	.+6      	; 0x2f6e <vfprintf+0x33c>
    2f68:	9c 85       	ldd	r25, Y+12	; 0x0c
    2f6a:	9f 7e       	andi	r25, 0xEF	; 239
    2f6c:	9c 87       	std	Y+12, r25	; 0x0c
    2f6e:	b7 01       	movw	r22, r14
    2f70:	90 e0       	ldi	r25, 0x00	; 0
    2f72:	f6 d2       	rcall	.+1516   	; 0x3560 <fputc>
    2f74:	11 11       	cpse	r17, r1
    2f76:	05 c0       	rjmp	.+10     	; 0x2f82 <vfprintf+0x350>
    2f78:	94 fc       	sbrc	r9, 4
    2f7a:	16 c0       	rjmp	.+44     	; 0x2fa8 <vfprintf+0x376>
    2f7c:	85 e6       	ldi	r24, 0x65	; 101
    2f7e:	90 e0       	ldi	r25, 0x00	; 0
    2f80:	15 c0       	rjmp	.+42     	; 0x2fac <vfprintf+0x37a>
    2f82:	b7 01       	movw	r22, r14
    2f84:	8e e2       	ldi	r24, 0x2E	; 46
    2f86:	90 e0       	ldi	r25, 0x00	; 0
    2f88:	eb d2       	rcall	.+1494   	; 0x3560 <fputc>
    2f8a:	1e 5f       	subi	r17, 0xFE	; 254
    2f8c:	82 e0       	ldi	r24, 0x02	; 2
    2f8e:	01 e0       	ldi	r16, 0x01	; 1
    2f90:	08 0f       	add	r16, r24
    2f92:	f3 01       	movw	r30, r6
    2f94:	e8 0f       	add	r30, r24
    2f96:	f1 1d       	adc	r31, r1
    2f98:	80 81       	ld	r24, Z
    2f9a:	b7 01       	movw	r22, r14
    2f9c:	90 e0       	ldi	r25, 0x00	; 0
    2f9e:	e0 d2       	rcall	.+1472   	; 0x3560 <fputc>
    2fa0:	80 2f       	mov	r24, r16
    2fa2:	01 13       	cpse	r16, r17
    2fa4:	f4 cf       	rjmp	.-24     	; 0x2f8e <vfprintf+0x35c>
    2fa6:	e8 cf       	rjmp	.-48     	; 0x2f78 <vfprintf+0x346>
    2fa8:	85 e4       	ldi	r24, 0x45	; 69
    2faa:	90 e0       	ldi	r25, 0x00	; 0
    2fac:	b7 01       	movw	r22, r14
    2fae:	d8 d2       	rcall	.+1456   	; 0x3560 <fputc>
    2fb0:	d7 fc       	sbrc	r13, 7
    2fb2:	06 c0       	rjmp	.+12     	; 0x2fc0 <vfprintf+0x38e>
    2fb4:	c1 14       	cp	r12, r1
    2fb6:	d1 04       	cpc	r13, r1
    2fb8:	41 f4       	brne	.+16     	; 0x2fca <vfprintf+0x398>
    2fba:	ec 85       	ldd	r30, Y+12	; 0x0c
    2fbc:	e4 ff       	sbrs	r30, 4
    2fbe:	05 c0       	rjmp	.+10     	; 0x2fca <vfprintf+0x398>
    2fc0:	d1 94       	neg	r13
    2fc2:	c1 94       	neg	r12
    2fc4:	d1 08       	sbc	r13, r1
    2fc6:	8d e2       	ldi	r24, 0x2D	; 45
    2fc8:	01 c0       	rjmp	.+2      	; 0x2fcc <vfprintf+0x39a>
    2fca:	8b e2       	ldi	r24, 0x2B	; 43
    2fcc:	b7 01       	movw	r22, r14
    2fce:	90 e0       	ldi	r25, 0x00	; 0
    2fd0:	c7 d2       	rcall	.+1422   	; 0x3560 <fputc>
    2fd2:	80 e3       	ldi	r24, 0x30	; 48
    2fd4:	2a e0       	ldi	r18, 0x0A	; 10
    2fd6:	c2 16       	cp	r12, r18
    2fd8:	d1 04       	cpc	r13, r1
    2fda:	2c f0       	brlt	.+10     	; 0x2fe6 <vfprintf+0x3b4>
    2fdc:	8f 5f       	subi	r24, 0xFF	; 255
    2fde:	fa e0       	ldi	r31, 0x0A	; 10
    2fe0:	cf 1a       	sub	r12, r31
    2fe2:	d1 08       	sbc	r13, r1
    2fe4:	f7 cf       	rjmp	.-18     	; 0x2fd4 <vfprintf+0x3a2>
    2fe6:	b7 01       	movw	r22, r14
    2fe8:	90 e0       	ldi	r25, 0x00	; 0
    2fea:	ba d2       	rcall	.+1396   	; 0x3560 <fputc>
    2fec:	b7 01       	movw	r22, r14
    2fee:	c6 01       	movw	r24, r12
    2ff0:	c0 96       	adiw	r24, 0x30	; 48
    2ff2:	b6 d2       	rcall	.+1388   	; 0x3560 <fputc>
    2ff4:	49 c1       	rjmp	.+658    	; 0x3288 <vfprintf+0x656>
    2ff6:	83 36       	cpi	r24, 0x63	; 99
    2ff8:	31 f0       	breq	.+12     	; 0x3006 <vfprintf+0x3d4>
    2ffa:	83 37       	cpi	r24, 0x73	; 115
    2ffc:	79 f0       	breq	.+30     	; 0x301c <vfprintf+0x3ea>
    2ffe:	83 35       	cpi	r24, 0x53	; 83
    3000:	09 f0       	breq	.+2      	; 0x3004 <vfprintf+0x3d2>
    3002:	52 c0       	rjmp	.+164    	; 0x30a8 <vfprintf+0x476>
    3004:	1f c0       	rjmp	.+62     	; 0x3044 <vfprintf+0x412>
    3006:	56 01       	movw	r10, r12
    3008:	32 e0       	ldi	r19, 0x02	; 2
    300a:	a3 0e       	add	r10, r19
    300c:	b1 1c       	adc	r11, r1
    300e:	f6 01       	movw	r30, r12
    3010:	80 81       	ld	r24, Z
    3012:	89 83       	std	Y+1, r24	; 0x01
    3014:	01 e0       	ldi	r16, 0x01	; 1
    3016:	10 e0       	ldi	r17, 0x00	; 0
    3018:	63 01       	movw	r12, r6
    301a:	11 c0       	rjmp	.+34     	; 0x303e <vfprintf+0x40c>
    301c:	56 01       	movw	r10, r12
    301e:	f2 e0       	ldi	r31, 0x02	; 2
    3020:	af 0e       	add	r10, r31
    3022:	b1 1c       	adc	r11, r1
    3024:	f6 01       	movw	r30, r12
    3026:	c0 80       	ld	r12, Z
    3028:	d1 80       	ldd	r13, Z+1	; 0x01
    302a:	96 fe       	sbrs	r9, 6
    302c:	03 c0       	rjmp	.+6      	; 0x3034 <vfprintf+0x402>
    302e:	61 2f       	mov	r22, r17
    3030:	70 e0       	ldi	r23, 0x00	; 0
    3032:	02 c0       	rjmp	.+4      	; 0x3038 <vfprintf+0x406>
    3034:	6f ef       	ldi	r22, 0xFF	; 255
    3036:	7f ef       	ldi	r23, 0xFF	; 255
    3038:	c6 01       	movw	r24, r12
    303a:	87 d2       	rcall	.+1294   	; 0x354a <strnlen>
    303c:	8c 01       	movw	r16, r24
    303e:	f9 2d       	mov	r31, r9
    3040:	ff 77       	andi	r31, 0x7F	; 127
    3042:	13 c0       	rjmp	.+38     	; 0x306a <vfprintf+0x438>
    3044:	56 01       	movw	r10, r12
    3046:	22 e0       	ldi	r18, 0x02	; 2
    3048:	a2 0e       	add	r10, r18
    304a:	b1 1c       	adc	r11, r1
    304c:	f6 01       	movw	r30, r12
    304e:	c0 80       	ld	r12, Z
    3050:	d1 80       	ldd	r13, Z+1	; 0x01
    3052:	96 fe       	sbrs	r9, 6
    3054:	03 c0       	rjmp	.+6      	; 0x305c <vfprintf+0x42a>
    3056:	61 2f       	mov	r22, r17
    3058:	70 e0       	ldi	r23, 0x00	; 0
    305a:	02 c0       	rjmp	.+4      	; 0x3060 <vfprintf+0x42e>
    305c:	6f ef       	ldi	r22, 0xFF	; 255
    305e:	7f ef       	ldi	r23, 0xFF	; 255
    3060:	c6 01       	movw	r24, r12
    3062:	54 d2       	rcall	.+1192   	; 0x350c <strnlen_P>
    3064:	8c 01       	movw	r16, r24
    3066:	f9 2d       	mov	r31, r9
    3068:	f0 68       	ori	r31, 0x80	; 128
    306a:	9f 2e       	mov	r9, r31
    306c:	f3 fd       	sbrc	r31, 3
    306e:	18 c0       	rjmp	.+48     	; 0x30a0 <vfprintf+0x46e>
    3070:	85 2d       	mov	r24, r5
    3072:	90 e0       	ldi	r25, 0x00	; 0
    3074:	08 17       	cp	r16, r24
    3076:	19 07       	cpc	r17, r25
    3078:	98 f4       	brcc	.+38     	; 0x30a0 <vfprintf+0x46e>
    307a:	b7 01       	movw	r22, r14
    307c:	80 e2       	ldi	r24, 0x20	; 32
    307e:	90 e0       	ldi	r25, 0x00	; 0
    3080:	6f d2       	rcall	.+1246   	; 0x3560 <fputc>
    3082:	5a 94       	dec	r5
    3084:	f5 cf       	rjmp	.-22     	; 0x3070 <vfprintf+0x43e>
    3086:	f6 01       	movw	r30, r12
    3088:	97 fc       	sbrc	r9, 7
    308a:	85 91       	lpm	r24, Z+
    308c:	97 fe       	sbrs	r9, 7
    308e:	81 91       	ld	r24, Z+
    3090:	6f 01       	movw	r12, r30
    3092:	b7 01       	movw	r22, r14
    3094:	90 e0       	ldi	r25, 0x00	; 0
    3096:	64 d2       	rcall	.+1224   	; 0x3560 <fputc>
    3098:	51 10       	cpse	r5, r1
    309a:	5a 94       	dec	r5
    309c:	01 50       	subi	r16, 0x01	; 1
    309e:	11 09       	sbc	r17, r1
    30a0:	01 15       	cp	r16, r1
    30a2:	11 05       	cpc	r17, r1
    30a4:	81 f7       	brne	.-32     	; 0x3086 <vfprintf+0x454>
    30a6:	f0 c0       	rjmp	.+480    	; 0x3288 <vfprintf+0x656>
    30a8:	84 36       	cpi	r24, 0x64	; 100
    30aa:	11 f0       	breq	.+4      	; 0x30b0 <vfprintf+0x47e>
    30ac:	89 36       	cpi	r24, 0x69	; 105
    30ae:	59 f5       	brne	.+86     	; 0x3106 <vfprintf+0x4d4>
    30b0:	56 01       	movw	r10, r12
    30b2:	97 fe       	sbrs	r9, 7
    30b4:	09 c0       	rjmp	.+18     	; 0x30c8 <vfprintf+0x496>
    30b6:	24 e0       	ldi	r18, 0x04	; 4
    30b8:	a2 0e       	add	r10, r18
    30ba:	b1 1c       	adc	r11, r1
    30bc:	f6 01       	movw	r30, r12
    30be:	60 81       	ld	r22, Z
    30c0:	71 81       	ldd	r23, Z+1	; 0x01
    30c2:	82 81       	ldd	r24, Z+2	; 0x02
    30c4:	93 81       	ldd	r25, Z+3	; 0x03
    30c6:	0a c0       	rjmp	.+20     	; 0x30dc <vfprintf+0x4aa>
    30c8:	f2 e0       	ldi	r31, 0x02	; 2
    30ca:	af 0e       	add	r10, r31
    30cc:	b1 1c       	adc	r11, r1
    30ce:	f6 01       	movw	r30, r12
    30d0:	60 81       	ld	r22, Z
    30d2:	71 81       	ldd	r23, Z+1	; 0x01
    30d4:	07 2e       	mov	r0, r23
    30d6:	00 0c       	add	r0, r0
    30d8:	88 0b       	sbc	r24, r24
    30da:	99 0b       	sbc	r25, r25
    30dc:	f9 2d       	mov	r31, r9
    30de:	ff 76       	andi	r31, 0x6F	; 111
    30e0:	9f 2e       	mov	r9, r31
    30e2:	97 ff       	sbrs	r25, 7
    30e4:	09 c0       	rjmp	.+18     	; 0x30f8 <vfprintf+0x4c6>
    30e6:	90 95       	com	r25
    30e8:	80 95       	com	r24
    30ea:	70 95       	com	r23
    30ec:	61 95       	neg	r22
    30ee:	7f 4f       	sbci	r23, 0xFF	; 255
    30f0:	8f 4f       	sbci	r24, 0xFF	; 255
    30f2:	9f 4f       	sbci	r25, 0xFF	; 255
    30f4:	f0 68       	ori	r31, 0x80	; 128
    30f6:	9f 2e       	mov	r9, r31
    30f8:	2a e0       	ldi	r18, 0x0A	; 10
    30fa:	30 e0       	ldi	r19, 0x00	; 0
    30fc:	a3 01       	movw	r20, r6
    30fe:	8b d2       	rcall	.+1302   	; 0x3616 <__ultoa_invert>
    3100:	c8 2e       	mov	r12, r24
    3102:	c6 18       	sub	r12, r6
    3104:	3e c0       	rjmp	.+124    	; 0x3182 <vfprintf+0x550>
    3106:	09 2d       	mov	r16, r9
    3108:	85 37       	cpi	r24, 0x75	; 117
    310a:	21 f4       	brne	.+8      	; 0x3114 <vfprintf+0x4e2>
    310c:	0f 7e       	andi	r16, 0xEF	; 239
    310e:	2a e0       	ldi	r18, 0x0A	; 10
    3110:	30 e0       	ldi	r19, 0x00	; 0
    3112:	1d c0       	rjmp	.+58     	; 0x314e <vfprintf+0x51c>
    3114:	09 7f       	andi	r16, 0xF9	; 249
    3116:	8f 36       	cpi	r24, 0x6F	; 111
    3118:	91 f0       	breq	.+36     	; 0x313e <vfprintf+0x50c>
    311a:	18 f4       	brcc	.+6      	; 0x3122 <vfprintf+0x4f0>
    311c:	88 35       	cpi	r24, 0x58	; 88
    311e:	59 f0       	breq	.+22     	; 0x3136 <vfprintf+0x504>
    3120:	bc c0       	rjmp	.+376    	; 0x329a <vfprintf+0x668>
    3122:	80 37       	cpi	r24, 0x70	; 112
    3124:	19 f0       	breq	.+6      	; 0x312c <vfprintf+0x4fa>
    3126:	88 37       	cpi	r24, 0x78	; 120
    3128:	11 f0       	breq	.+4      	; 0x312e <vfprintf+0x4fc>
    312a:	b7 c0       	rjmp	.+366    	; 0x329a <vfprintf+0x668>
    312c:	00 61       	ori	r16, 0x10	; 16
    312e:	04 ff       	sbrs	r16, 4
    3130:	09 c0       	rjmp	.+18     	; 0x3144 <vfprintf+0x512>
    3132:	04 60       	ori	r16, 0x04	; 4
    3134:	07 c0       	rjmp	.+14     	; 0x3144 <vfprintf+0x512>
    3136:	94 fe       	sbrs	r9, 4
    3138:	08 c0       	rjmp	.+16     	; 0x314a <vfprintf+0x518>
    313a:	06 60       	ori	r16, 0x06	; 6
    313c:	06 c0       	rjmp	.+12     	; 0x314a <vfprintf+0x518>
    313e:	28 e0       	ldi	r18, 0x08	; 8
    3140:	30 e0       	ldi	r19, 0x00	; 0
    3142:	05 c0       	rjmp	.+10     	; 0x314e <vfprintf+0x51c>
    3144:	20 e1       	ldi	r18, 0x10	; 16
    3146:	30 e0       	ldi	r19, 0x00	; 0
    3148:	02 c0       	rjmp	.+4      	; 0x314e <vfprintf+0x51c>
    314a:	20 e1       	ldi	r18, 0x10	; 16
    314c:	32 e0       	ldi	r19, 0x02	; 2
    314e:	56 01       	movw	r10, r12
    3150:	07 ff       	sbrs	r16, 7
    3152:	09 c0       	rjmp	.+18     	; 0x3166 <vfprintf+0x534>
    3154:	84 e0       	ldi	r24, 0x04	; 4
    3156:	a8 0e       	add	r10, r24
    3158:	b1 1c       	adc	r11, r1
    315a:	f6 01       	movw	r30, r12
    315c:	60 81       	ld	r22, Z
    315e:	71 81       	ldd	r23, Z+1	; 0x01
    3160:	82 81       	ldd	r24, Z+2	; 0x02
    3162:	93 81       	ldd	r25, Z+3	; 0x03
    3164:	08 c0       	rjmp	.+16     	; 0x3176 <vfprintf+0x544>
    3166:	f2 e0       	ldi	r31, 0x02	; 2
    3168:	af 0e       	add	r10, r31
    316a:	b1 1c       	adc	r11, r1
    316c:	f6 01       	movw	r30, r12
    316e:	60 81       	ld	r22, Z
    3170:	71 81       	ldd	r23, Z+1	; 0x01
    3172:	80 e0       	ldi	r24, 0x00	; 0
    3174:	90 e0       	ldi	r25, 0x00	; 0
    3176:	a3 01       	movw	r20, r6
    3178:	4e d2       	rcall	.+1180   	; 0x3616 <__ultoa_invert>
    317a:	c8 2e       	mov	r12, r24
    317c:	c6 18       	sub	r12, r6
    317e:	0f 77       	andi	r16, 0x7F	; 127
    3180:	90 2e       	mov	r9, r16
    3182:	96 fe       	sbrs	r9, 6
    3184:	0b c0       	rjmp	.+22     	; 0x319c <vfprintf+0x56a>
    3186:	09 2d       	mov	r16, r9
    3188:	0e 7f       	andi	r16, 0xFE	; 254
    318a:	c1 16       	cp	r12, r17
    318c:	50 f4       	brcc	.+20     	; 0x31a2 <vfprintf+0x570>
    318e:	94 fe       	sbrs	r9, 4
    3190:	0a c0       	rjmp	.+20     	; 0x31a6 <vfprintf+0x574>
    3192:	92 fc       	sbrc	r9, 2
    3194:	08 c0       	rjmp	.+16     	; 0x31a6 <vfprintf+0x574>
    3196:	09 2d       	mov	r16, r9
    3198:	0e 7e       	andi	r16, 0xEE	; 238
    319a:	05 c0       	rjmp	.+10     	; 0x31a6 <vfprintf+0x574>
    319c:	dc 2c       	mov	r13, r12
    319e:	09 2d       	mov	r16, r9
    31a0:	03 c0       	rjmp	.+6      	; 0x31a8 <vfprintf+0x576>
    31a2:	dc 2c       	mov	r13, r12
    31a4:	01 c0       	rjmp	.+2      	; 0x31a8 <vfprintf+0x576>
    31a6:	d1 2e       	mov	r13, r17
    31a8:	04 ff       	sbrs	r16, 4
    31aa:	0d c0       	rjmp	.+26     	; 0x31c6 <vfprintf+0x594>
    31ac:	fe 01       	movw	r30, r28
    31ae:	ec 0d       	add	r30, r12
    31b0:	f1 1d       	adc	r31, r1
    31b2:	80 81       	ld	r24, Z
    31b4:	80 33       	cpi	r24, 0x30	; 48
    31b6:	11 f4       	brne	.+4      	; 0x31bc <vfprintf+0x58a>
    31b8:	09 7e       	andi	r16, 0xE9	; 233
    31ba:	09 c0       	rjmp	.+18     	; 0x31ce <vfprintf+0x59c>
    31bc:	02 ff       	sbrs	r16, 2
    31be:	06 c0       	rjmp	.+12     	; 0x31cc <vfprintf+0x59a>
    31c0:	d3 94       	inc	r13
    31c2:	d3 94       	inc	r13
    31c4:	04 c0       	rjmp	.+8      	; 0x31ce <vfprintf+0x59c>
    31c6:	80 2f       	mov	r24, r16
    31c8:	86 78       	andi	r24, 0x86	; 134
    31ca:	09 f0       	breq	.+2      	; 0x31ce <vfprintf+0x59c>
    31cc:	d3 94       	inc	r13
    31ce:	03 fd       	sbrc	r16, 3
    31d0:	10 c0       	rjmp	.+32     	; 0x31f2 <vfprintf+0x5c0>
    31d2:	00 ff       	sbrs	r16, 0
    31d4:	06 c0       	rjmp	.+12     	; 0x31e2 <vfprintf+0x5b0>
    31d6:	1c 2d       	mov	r17, r12
    31d8:	d5 14       	cp	r13, r5
    31da:	78 f4       	brcc	.+30     	; 0x31fa <vfprintf+0x5c8>
    31dc:	15 0d       	add	r17, r5
    31de:	1d 19       	sub	r17, r13
    31e0:	0c c0       	rjmp	.+24     	; 0x31fa <vfprintf+0x5c8>
    31e2:	d5 14       	cp	r13, r5
    31e4:	50 f4       	brcc	.+20     	; 0x31fa <vfprintf+0x5c8>
    31e6:	b7 01       	movw	r22, r14
    31e8:	80 e2       	ldi	r24, 0x20	; 32
    31ea:	90 e0       	ldi	r25, 0x00	; 0
    31ec:	b9 d1       	rcall	.+882    	; 0x3560 <fputc>
    31ee:	d3 94       	inc	r13
    31f0:	f8 cf       	rjmp	.-16     	; 0x31e2 <vfprintf+0x5b0>
    31f2:	d5 14       	cp	r13, r5
    31f4:	10 f4       	brcc	.+4      	; 0x31fa <vfprintf+0x5c8>
    31f6:	5d 18       	sub	r5, r13
    31f8:	01 c0       	rjmp	.+2      	; 0x31fc <vfprintf+0x5ca>
    31fa:	51 2c       	mov	r5, r1
    31fc:	04 ff       	sbrs	r16, 4
    31fe:	0f c0       	rjmp	.+30     	; 0x321e <vfprintf+0x5ec>
    3200:	b7 01       	movw	r22, r14
    3202:	80 e3       	ldi	r24, 0x30	; 48
    3204:	90 e0       	ldi	r25, 0x00	; 0
    3206:	ac d1       	rcall	.+856    	; 0x3560 <fputc>
    3208:	02 ff       	sbrs	r16, 2
    320a:	16 c0       	rjmp	.+44     	; 0x3238 <vfprintf+0x606>
    320c:	01 fd       	sbrc	r16, 1
    320e:	03 c0       	rjmp	.+6      	; 0x3216 <vfprintf+0x5e4>
    3210:	88 e7       	ldi	r24, 0x78	; 120
    3212:	90 e0       	ldi	r25, 0x00	; 0
    3214:	02 c0       	rjmp	.+4      	; 0x321a <vfprintf+0x5e8>
    3216:	88 e5       	ldi	r24, 0x58	; 88
    3218:	90 e0       	ldi	r25, 0x00	; 0
    321a:	b7 01       	movw	r22, r14
    321c:	0c c0       	rjmp	.+24     	; 0x3236 <vfprintf+0x604>
    321e:	80 2f       	mov	r24, r16
    3220:	86 78       	andi	r24, 0x86	; 134
    3222:	51 f0       	breq	.+20     	; 0x3238 <vfprintf+0x606>
    3224:	01 ff       	sbrs	r16, 1
    3226:	02 c0       	rjmp	.+4      	; 0x322c <vfprintf+0x5fa>
    3228:	8b e2       	ldi	r24, 0x2B	; 43
    322a:	01 c0       	rjmp	.+2      	; 0x322e <vfprintf+0x5fc>
    322c:	80 e2       	ldi	r24, 0x20	; 32
    322e:	07 fd       	sbrc	r16, 7
    3230:	8d e2       	ldi	r24, 0x2D	; 45
    3232:	b7 01       	movw	r22, r14
    3234:	90 e0       	ldi	r25, 0x00	; 0
    3236:	94 d1       	rcall	.+808    	; 0x3560 <fputc>
    3238:	c1 16       	cp	r12, r17
    323a:	30 f4       	brcc	.+12     	; 0x3248 <vfprintf+0x616>
    323c:	b7 01       	movw	r22, r14
    323e:	80 e3       	ldi	r24, 0x30	; 48
    3240:	90 e0       	ldi	r25, 0x00	; 0
    3242:	8e d1       	rcall	.+796    	; 0x3560 <fputc>
    3244:	11 50       	subi	r17, 0x01	; 1
    3246:	f8 cf       	rjmp	.-16     	; 0x3238 <vfprintf+0x606>
    3248:	ca 94       	dec	r12
    324a:	f3 01       	movw	r30, r6
    324c:	ec 0d       	add	r30, r12
    324e:	f1 1d       	adc	r31, r1
    3250:	80 81       	ld	r24, Z
    3252:	b7 01       	movw	r22, r14
    3254:	90 e0       	ldi	r25, 0x00	; 0
    3256:	84 d1       	rcall	.+776    	; 0x3560 <fputc>
    3258:	c1 10       	cpse	r12, r1
    325a:	f6 cf       	rjmp	.-20     	; 0x3248 <vfprintf+0x616>
    325c:	15 c0       	rjmp	.+42     	; 0x3288 <vfprintf+0x656>
    325e:	f4 e0       	ldi	r31, 0x04	; 4
    3260:	f5 15       	cp	r31, r5
    3262:	50 f5       	brcc	.+84     	; 0x32b8 <vfprintf+0x686>
    3264:	84 e0       	ldi	r24, 0x04	; 4
    3266:	58 1a       	sub	r5, r24
    3268:	93 fe       	sbrs	r9, 3
    326a:	1e c0       	rjmp	.+60     	; 0x32a8 <vfprintf+0x676>
    326c:	01 11       	cpse	r16, r1
    326e:	25 c0       	rjmp	.+74     	; 0x32ba <vfprintf+0x688>
    3270:	2c 85       	ldd	r18, Y+12	; 0x0c
    3272:	23 ff       	sbrs	r18, 3
    3274:	27 c0       	rjmp	.+78     	; 0x32c4 <vfprintf+0x692>
    3276:	04 ee       	ldi	r16, 0xE4	; 228
    3278:	10 e0       	ldi	r17, 0x00	; 0
    327a:	39 2d       	mov	r19, r9
    327c:	30 71       	andi	r19, 0x10	; 16
    327e:	93 2e       	mov	r9, r19
    3280:	f8 01       	movw	r30, r16
    3282:	84 91       	lpm	r24, Z
    3284:	81 11       	cpse	r24, r1
    3286:	21 c0       	rjmp	.+66     	; 0x32ca <vfprintf+0x698>
    3288:	55 20       	and	r5, r5
    328a:	09 f4       	brne	.+2      	; 0x328e <vfprintf+0x65c>
    328c:	fc cc       	rjmp	.-1544   	; 0x2c86 <vfprintf+0x54>
    328e:	b7 01       	movw	r22, r14
    3290:	80 e2       	ldi	r24, 0x20	; 32
    3292:	90 e0       	ldi	r25, 0x00	; 0
    3294:	65 d1       	rcall	.+714    	; 0x3560 <fputc>
    3296:	5a 94       	dec	r5
    3298:	f7 cf       	rjmp	.-18     	; 0x3288 <vfprintf+0x656>
    329a:	f7 01       	movw	r30, r14
    329c:	86 81       	ldd	r24, Z+6	; 0x06
    329e:	97 81       	ldd	r25, Z+7	; 0x07
    32a0:	23 c0       	rjmp	.+70     	; 0x32e8 <vfprintf+0x6b6>
    32a2:	8f ef       	ldi	r24, 0xFF	; 255
    32a4:	9f ef       	ldi	r25, 0xFF	; 255
    32a6:	20 c0       	rjmp	.+64     	; 0x32e8 <vfprintf+0x6b6>
    32a8:	b7 01       	movw	r22, r14
    32aa:	80 e2       	ldi	r24, 0x20	; 32
    32ac:	90 e0       	ldi	r25, 0x00	; 0
    32ae:	58 d1       	rcall	.+688    	; 0x3560 <fputc>
    32b0:	5a 94       	dec	r5
    32b2:	51 10       	cpse	r5, r1
    32b4:	f9 cf       	rjmp	.-14     	; 0x32a8 <vfprintf+0x676>
    32b6:	da cf       	rjmp	.-76     	; 0x326c <vfprintf+0x63a>
    32b8:	51 2c       	mov	r5, r1
    32ba:	b7 01       	movw	r22, r14
    32bc:	80 2f       	mov	r24, r16
    32be:	90 e0       	ldi	r25, 0x00	; 0
    32c0:	4f d1       	rcall	.+670    	; 0x3560 <fputc>
    32c2:	d6 cf       	rjmp	.-84     	; 0x3270 <vfprintf+0x63e>
    32c4:	08 ee       	ldi	r16, 0xE8	; 232
    32c6:	10 e0       	ldi	r17, 0x00	; 0
    32c8:	d8 cf       	rjmp	.-80     	; 0x327a <vfprintf+0x648>
    32ca:	91 10       	cpse	r9, r1
    32cc:	80 52       	subi	r24, 0x20	; 32
    32ce:	b7 01       	movw	r22, r14
    32d0:	90 e0       	ldi	r25, 0x00	; 0
    32d2:	46 d1       	rcall	.+652    	; 0x3560 <fputc>
    32d4:	0f 5f       	subi	r16, 0xFF	; 255
    32d6:	1f 4f       	sbci	r17, 0xFF	; 255
    32d8:	d3 cf       	rjmp	.-90     	; 0x3280 <vfprintf+0x64e>
    32da:	23 e0       	ldi	r18, 0x03	; 3
    32dc:	25 15       	cp	r18, r5
    32de:	10 f4       	brcc	.+4      	; 0x32e4 <vfprintf+0x6b2>
    32e0:	83 e0       	ldi	r24, 0x03	; 3
    32e2:	c1 cf       	rjmp	.-126    	; 0x3266 <vfprintf+0x634>
    32e4:	51 2c       	mov	r5, r1
    32e6:	c4 cf       	rjmp	.-120    	; 0x3270 <vfprintf+0x63e>
    32e8:	60 96       	adiw	r28, 0x10	; 16
    32ea:	e2 e1       	ldi	r30, 0x12	; 18
    32ec:	1c c0       	rjmp	.+56     	; 0x3326 <__epilogue_restores__>

000032ee <__prologue_saves__>:
    32ee:	2f 92       	push	r2
    32f0:	3f 92       	push	r3
    32f2:	4f 92       	push	r4
    32f4:	5f 92       	push	r5
    32f6:	6f 92       	push	r6
    32f8:	7f 92       	push	r7
    32fa:	8f 92       	push	r8
    32fc:	9f 92       	push	r9
    32fe:	af 92       	push	r10
    3300:	bf 92       	push	r11
    3302:	cf 92       	push	r12
    3304:	df 92       	push	r13
    3306:	ef 92       	push	r14
    3308:	ff 92       	push	r15
    330a:	0f 93       	push	r16
    330c:	1f 93       	push	r17
    330e:	cf 93       	push	r28
    3310:	df 93       	push	r29
    3312:	cd b7       	in	r28, 0x3d	; 61
    3314:	de b7       	in	r29, 0x3e	; 62
    3316:	ca 1b       	sub	r28, r26
    3318:	db 0b       	sbc	r29, r27
    331a:	0f b6       	in	r0, 0x3f	; 63
    331c:	f8 94       	cli
    331e:	de bf       	out	0x3e, r29	; 62
    3320:	0f be       	out	0x3f, r0	; 63
    3322:	cd bf       	out	0x3d, r28	; 61
    3324:	09 94       	ijmp

00003326 <__epilogue_restores__>:
    3326:	2a 88       	ldd	r2, Y+18	; 0x12
    3328:	39 88       	ldd	r3, Y+17	; 0x11
    332a:	48 88       	ldd	r4, Y+16	; 0x10
    332c:	5f 84       	ldd	r5, Y+15	; 0x0f
    332e:	6e 84       	ldd	r6, Y+14	; 0x0e
    3330:	7d 84       	ldd	r7, Y+13	; 0x0d
    3332:	8c 84       	ldd	r8, Y+12	; 0x0c
    3334:	9b 84       	ldd	r9, Y+11	; 0x0b
    3336:	aa 84       	ldd	r10, Y+10	; 0x0a
    3338:	b9 84       	ldd	r11, Y+9	; 0x09
    333a:	c8 84       	ldd	r12, Y+8	; 0x08
    333c:	df 80       	ldd	r13, Y+7	; 0x07
    333e:	ee 80       	ldd	r14, Y+6	; 0x06
    3340:	fd 80       	ldd	r15, Y+5	; 0x05
    3342:	0c 81       	ldd	r16, Y+4	; 0x04
    3344:	1b 81       	ldd	r17, Y+3	; 0x03
    3346:	aa 81       	ldd	r26, Y+2	; 0x02
    3348:	b9 81       	ldd	r27, Y+1	; 0x01
    334a:	ce 0f       	add	r28, r30
    334c:	d1 1d       	adc	r29, r1
    334e:	0f b6       	in	r0, 0x3f	; 63
    3350:	f8 94       	cli
    3352:	de bf       	out	0x3e, r29	; 62
    3354:	0f be       	out	0x3f, r0	; 63
    3356:	cd bf       	out	0x3d, r28	; 61
    3358:	ed 01       	movw	r28, r26
    335a:	08 95       	ret

0000335c <__ftoa_engine>:
    335c:	28 30       	cpi	r18, 0x08	; 8
    335e:	08 f0       	brcs	.+2      	; 0x3362 <__ftoa_engine+0x6>
    3360:	27 e0       	ldi	r18, 0x07	; 7
    3362:	33 27       	eor	r19, r19
    3364:	da 01       	movw	r26, r20
    3366:	99 0f       	add	r25, r25
    3368:	31 1d       	adc	r19, r1
    336a:	87 fd       	sbrc	r24, 7
    336c:	91 60       	ori	r25, 0x01	; 1
    336e:	00 96       	adiw	r24, 0x00	; 0
    3370:	61 05       	cpc	r22, r1
    3372:	71 05       	cpc	r23, r1
    3374:	39 f4       	brne	.+14     	; 0x3384 <__ftoa_engine+0x28>
    3376:	32 60       	ori	r19, 0x02	; 2
    3378:	2e 5f       	subi	r18, 0xFE	; 254
    337a:	3d 93       	st	X+, r19
    337c:	30 e3       	ldi	r19, 0x30	; 48
    337e:	2a 95       	dec	r18
    3380:	e1 f7       	brne	.-8      	; 0x337a <__ftoa_engine+0x1e>
    3382:	08 95       	ret
    3384:	9f 3f       	cpi	r25, 0xFF	; 255
    3386:	30 f0       	brcs	.+12     	; 0x3394 <__ftoa_engine+0x38>
    3388:	80 38       	cpi	r24, 0x80	; 128
    338a:	71 05       	cpc	r23, r1
    338c:	61 05       	cpc	r22, r1
    338e:	09 f0       	breq	.+2      	; 0x3392 <__ftoa_engine+0x36>
    3390:	3c 5f       	subi	r19, 0xFC	; 252
    3392:	3c 5f       	subi	r19, 0xFC	; 252
    3394:	3d 93       	st	X+, r19
    3396:	91 30       	cpi	r25, 0x01	; 1
    3398:	08 f0       	brcs	.+2      	; 0x339c <__ftoa_engine+0x40>
    339a:	80 68       	ori	r24, 0x80	; 128
    339c:	91 1d       	adc	r25, r1
    339e:	df 93       	push	r29
    33a0:	cf 93       	push	r28
    33a2:	1f 93       	push	r17
    33a4:	0f 93       	push	r16
    33a6:	ff 92       	push	r15
    33a8:	ef 92       	push	r14
    33aa:	19 2f       	mov	r17, r25
    33ac:	98 7f       	andi	r25, 0xF8	; 248
    33ae:	96 95       	lsr	r25
    33b0:	e9 2f       	mov	r30, r25
    33b2:	96 95       	lsr	r25
    33b4:	96 95       	lsr	r25
    33b6:	e9 0f       	add	r30, r25
    33b8:	ff 27       	eor	r31, r31
    33ba:	ea 5b       	subi	r30, 0xBA	; 186
    33bc:	fe 4f       	sbci	r31, 0xFE	; 254
    33be:	99 27       	eor	r25, r25
    33c0:	33 27       	eor	r19, r19
    33c2:	ee 24       	eor	r14, r14
    33c4:	ff 24       	eor	r15, r15
    33c6:	a7 01       	movw	r20, r14
    33c8:	e7 01       	movw	r28, r14
    33ca:	05 90       	lpm	r0, Z+
    33cc:	08 94       	sec
    33ce:	07 94       	ror	r0
    33d0:	28 f4       	brcc	.+10     	; 0x33dc <__ftoa_engine+0x80>
    33d2:	36 0f       	add	r19, r22
    33d4:	e7 1e       	adc	r14, r23
    33d6:	f8 1e       	adc	r15, r24
    33d8:	49 1f       	adc	r20, r25
    33da:	51 1d       	adc	r21, r1
    33dc:	66 0f       	add	r22, r22
    33de:	77 1f       	adc	r23, r23
    33e0:	88 1f       	adc	r24, r24
    33e2:	99 1f       	adc	r25, r25
    33e4:	06 94       	lsr	r0
    33e6:	a1 f7       	brne	.-24     	; 0x33d0 <__ftoa_engine+0x74>
    33e8:	05 90       	lpm	r0, Z+
    33ea:	07 94       	ror	r0
    33ec:	28 f4       	brcc	.+10     	; 0x33f8 <__ftoa_engine+0x9c>
    33ee:	e7 0e       	add	r14, r23
    33f0:	f8 1e       	adc	r15, r24
    33f2:	49 1f       	adc	r20, r25
    33f4:	56 1f       	adc	r21, r22
    33f6:	c1 1d       	adc	r28, r1
    33f8:	77 0f       	add	r23, r23
    33fa:	88 1f       	adc	r24, r24
    33fc:	99 1f       	adc	r25, r25
    33fe:	66 1f       	adc	r22, r22
    3400:	06 94       	lsr	r0
    3402:	a1 f7       	brne	.-24     	; 0x33ec <__ftoa_engine+0x90>
    3404:	05 90       	lpm	r0, Z+
    3406:	07 94       	ror	r0
    3408:	28 f4       	brcc	.+10     	; 0x3414 <__ftoa_engine+0xb8>
    340a:	f8 0e       	add	r15, r24
    340c:	49 1f       	adc	r20, r25
    340e:	56 1f       	adc	r21, r22
    3410:	c7 1f       	adc	r28, r23
    3412:	d1 1d       	adc	r29, r1
    3414:	88 0f       	add	r24, r24
    3416:	99 1f       	adc	r25, r25
    3418:	66 1f       	adc	r22, r22
    341a:	77 1f       	adc	r23, r23
    341c:	06 94       	lsr	r0
    341e:	a1 f7       	brne	.-24     	; 0x3408 <__ftoa_engine+0xac>
    3420:	05 90       	lpm	r0, Z+
    3422:	07 94       	ror	r0
    3424:	20 f4       	brcc	.+8      	; 0x342e <__ftoa_engine+0xd2>
    3426:	49 0f       	add	r20, r25
    3428:	56 1f       	adc	r21, r22
    342a:	c7 1f       	adc	r28, r23
    342c:	d8 1f       	adc	r29, r24
    342e:	99 0f       	add	r25, r25
    3430:	66 1f       	adc	r22, r22
    3432:	77 1f       	adc	r23, r23
    3434:	88 1f       	adc	r24, r24
    3436:	06 94       	lsr	r0
    3438:	a9 f7       	brne	.-22     	; 0x3424 <__ftoa_engine+0xc8>
    343a:	84 91       	lpm	r24, Z
    343c:	10 95       	com	r17
    343e:	17 70       	andi	r17, 0x07	; 7
    3440:	41 f0       	breq	.+16     	; 0x3452 <__ftoa_engine+0xf6>
    3442:	d6 95       	lsr	r29
    3444:	c7 95       	ror	r28
    3446:	57 95       	ror	r21
    3448:	47 95       	ror	r20
    344a:	f7 94       	ror	r15
    344c:	e7 94       	ror	r14
    344e:	1a 95       	dec	r17
    3450:	c1 f7       	brne	.-16     	; 0x3442 <__ftoa_engine+0xe6>
    3452:	ec ee       	ldi	r30, 0xEC	; 236
    3454:	f0 e0       	ldi	r31, 0x00	; 0
    3456:	68 94       	set
    3458:	15 90       	lpm	r1, Z+
    345a:	15 91       	lpm	r17, Z+
    345c:	35 91       	lpm	r19, Z+
    345e:	65 91       	lpm	r22, Z+
    3460:	95 91       	lpm	r25, Z+
    3462:	05 90       	lpm	r0, Z+
    3464:	7f e2       	ldi	r23, 0x2F	; 47
    3466:	73 95       	inc	r23
    3468:	e1 18       	sub	r14, r1
    346a:	f1 0a       	sbc	r15, r17
    346c:	43 0b       	sbc	r20, r19
    346e:	56 0b       	sbc	r21, r22
    3470:	c9 0b       	sbc	r28, r25
    3472:	d0 09       	sbc	r29, r0
    3474:	c0 f7       	brcc	.-16     	; 0x3466 <__ftoa_engine+0x10a>
    3476:	e1 0c       	add	r14, r1
    3478:	f1 1e       	adc	r15, r17
    347a:	43 1f       	adc	r20, r19
    347c:	56 1f       	adc	r21, r22
    347e:	c9 1f       	adc	r28, r25
    3480:	d0 1d       	adc	r29, r0
    3482:	7e f4       	brtc	.+30     	; 0x34a2 <__ftoa_engine+0x146>
    3484:	70 33       	cpi	r23, 0x30	; 48
    3486:	11 f4       	brne	.+4      	; 0x348c <__ftoa_engine+0x130>
    3488:	8a 95       	dec	r24
    348a:	e6 cf       	rjmp	.-52     	; 0x3458 <__ftoa_engine+0xfc>
    348c:	e8 94       	clt
    348e:	01 50       	subi	r16, 0x01	; 1
    3490:	30 f0       	brcs	.+12     	; 0x349e <__ftoa_engine+0x142>
    3492:	08 0f       	add	r16, r24
    3494:	0a f4       	brpl	.+2      	; 0x3498 <__ftoa_engine+0x13c>
    3496:	00 27       	eor	r16, r16
    3498:	02 17       	cp	r16, r18
    349a:	08 f4       	brcc	.+2      	; 0x349e <__ftoa_engine+0x142>
    349c:	20 2f       	mov	r18, r16
    349e:	23 95       	inc	r18
    34a0:	02 2f       	mov	r16, r18
    34a2:	7a 33       	cpi	r23, 0x3A	; 58
    34a4:	28 f0       	brcs	.+10     	; 0x34b0 <__ftoa_engine+0x154>
    34a6:	79 e3       	ldi	r23, 0x39	; 57
    34a8:	7d 93       	st	X+, r23
    34aa:	2a 95       	dec	r18
    34ac:	e9 f7       	brne	.-6      	; 0x34a8 <__ftoa_engine+0x14c>
    34ae:	10 c0       	rjmp	.+32     	; 0x34d0 <__ftoa_engine+0x174>
    34b0:	7d 93       	st	X+, r23
    34b2:	2a 95       	dec	r18
    34b4:	89 f6       	brne	.-94     	; 0x3458 <__ftoa_engine+0xfc>
    34b6:	06 94       	lsr	r0
    34b8:	97 95       	ror	r25
    34ba:	67 95       	ror	r22
    34bc:	37 95       	ror	r19
    34be:	17 95       	ror	r17
    34c0:	17 94       	ror	r1
    34c2:	e1 18       	sub	r14, r1
    34c4:	f1 0a       	sbc	r15, r17
    34c6:	43 0b       	sbc	r20, r19
    34c8:	56 0b       	sbc	r21, r22
    34ca:	c9 0b       	sbc	r28, r25
    34cc:	d0 09       	sbc	r29, r0
    34ce:	98 f0       	brcs	.+38     	; 0x34f6 <__ftoa_engine+0x19a>
    34d0:	23 95       	inc	r18
    34d2:	7e 91       	ld	r23, -X
    34d4:	73 95       	inc	r23
    34d6:	7a 33       	cpi	r23, 0x3A	; 58
    34d8:	08 f0       	brcs	.+2      	; 0x34dc <__ftoa_engine+0x180>
    34da:	70 e3       	ldi	r23, 0x30	; 48
    34dc:	7c 93       	st	X, r23
    34de:	20 13       	cpse	r18, r16
    34e0:	b8 f7       	brcc	.-18     	; 0x34d0 <__ftoa_engine+0x174>
    34e2:	7e 91       	ld	r23, -X
    34e4:	70 61       	ori	r23, 0x10	; 16
    34e6:	7d 93       	st	X+, r23
    34e8:	30 f0       	brcs	.+12     	; 0x34f6 <__ftoa_engine+0x19a>
    34ea:	83 95       	inc	r24
    34ec:	71 e3       	ldi	r23, 0x31	; 49
    34ee:	7d 93       	st	X+, r23
    34f0:	70 e3       	ldi	r23, 0x30	; 48
    34f2:	2a 95       	dec	r18
    34f4:	e1 f7       	brne	.-8      	; 0x34ee <__ftoa_engine+0x192>
    34f6:	11 24       	eor	r1, r1
    34f8:	ef 90       	pop	r14
    34fa:	ff 90       	pop	r15
    34fc:	0f 91       	pop	r16
    34fe:	1f 91       	pop	r17
    3500:	cf 91       	pop	r28
    3502:	df 91       	pop	r29
    3504:	99 27       	eor	r25, r25
    3506:	87 fd       	sbrc	r24, 7
    3508:	90 95       	com	r25
    350a:	08 95       	ret

0000350c <strnlen_P>:
    350c:	fc 01       	movw	r30, r24
    350e:	05 90       	lpm	r0, Z+
    3510:	61 50       	subi	r22, 0x01	; 1
    3512:	70 40       	sbci	r23, 0x00	; 0
    3514:	01 10       	cpse	r0, r1
    3516:	d8 f7       	brcc	.-10     	; 0x350e <strnlen_P+0x2>
    3518:	80 95       	com	r24
    351a:	90 95       	com	r25
    351c:	8e 0f       	add	r24, r30
    351e:	9f 1f       	adc	r25, r31
    3520:	08 95       	ret

00003522 <strcat>:
    3522:	fb 01       	movw	r30, r22
    3524:	dc 01       	movw	r26, r24
    3526:	0d 90       	ld	r0, X+
    3528:	00 20       	and	r0, r0
    352a:	e9 f7       	brne	.-6      	; 0x3526 <strcat+0x4>
    352c:	11 97       	sbiw	r26, 0x01	; 1
    352e:	01 90       	ld	r0, Z+
    3530:	0d 92       	st	X+, r0
    3532:	00 20       	and	r0, r0
    3534:	e1 f7       	brne	.-8      	; 0x352e <strcat+0xc>
    3536:	08 95       	ret

00003538 <strcmp>:
    3538:	fb 01       	movw	r30, r22
    353a:	dc 01       	movw	r26, r24
    353c:	8d 91       	ld	r24, X+
    353e:	01 90       	ld	r0, Z+
    3540:	80 19       	sub	r24, r0
    3542:	01 10       	cpse	r0, r1
    3544:	d9 f3       	breq	.-10     	; 0x353c <strcmp+0x4>
    3546:	99 0b       	sbc	r25, r25
    3548:	08 95       	ret

0000354a <strnlen>:
    354a:	fc 01       	movw	r30, r24
    354c:	61 50       	subi	r22, 0x01	; 1
    354e:	70 40       	sbci	r23, 0x00	; 0
    3550:	01 90       	ld	r0, Z+
    3552:	01 10       	cpse	r0, r1
    3554:	d8 f7       	brcc	.-10     	; 0x354c <strnlen+0x2>
    3556:	80 95       	com	r24
    3558:	90 95       	com	r25
    355a:	8e 0f       	add	r24, r30
    355c:	9f 1f       	adc	r25, r31
    355e:	08 95       	ret

00003560 <fputc>:
    3560:	0f 93       	push	r16
    3562:	1f 93       	push	r17
    3564:	cf 93       	push	r28
    3566:	df 93       	push	r29
    3568:	fb 01       	movw	r30, r22
    356a:	23 81       	ldd	r18, Z+3	; 0x03
    356c:	21 fd       	sbrc	r18, 1
    356e:	03 c0       	rjmp	.+6      	; 0x3576 <fputc+0x16>
    3570:	8f ef       	ldi	r24, 0xFF	; 255
    3572:	9f ef       	ldi	r25, 0xFF	; 255
    3574:	2c c0       	rjmp	.+88     	; 0x35ce <fputc+0x6e>
    3576:	22 ff       	sbrs	r18, 2
    3578:	16 c0       	rjmp	.+44     	; 0x35a6 <fputc+0x46>
    357a:	46 81       	ldd	r20, Z+6	; 0x06
    357c:	57 81       	ldd	r21, Z+7	; 0x07
    357e:	24 81       	ldd	r18, Z+4	; 0x04
    3580:	35 81       	ldd	r19, Z+5	; 0x05
    3582:	42 17       	cp	r20, r18
    3584:	53 07       	cpc	r21, r19
    3586:	44 f4       	brge	.+16     	; 0x3598 <fputc+0x38>
    3588:	a0 81       	ld	r26, Z
    358a:	b1 81       	ldd	r27, Z+1	; 0x01
    358c:	9d 01       	movw	r18, r26
    358e:	2f 5f       	subi	r18, 0xFF	; 255
    3590:	3f 4f       	sbci	r19, 0xFF	; 255
    3592:	31 83       	std	Z+1, r19	; 0x01
    3594:	20 83       	st	Z, r18
    3596:	8c 93       	st	X, r24
    3598:	26 81       	ldd	r18, Z+6	; 0x06
    359a:	37 81       	ldd	r19, Z+7	; 0x07
    359c:	2f 5f       	subi	r18, 0xFF	; 255
    359e:	3f 4f       	sbci	r19, 0xFF	; 255
    35a0:	37 83       	std	Z+7, r19	; 0x07
    35a2:	26 83       	std	Z+6, r18	; 0x06
    35a4:	14 c0       	rjmp	.+40     	; 0x35ce <fputc+0x6e>
    35a6:	8b 01       	movw	r16, r22
    35a8:	ec 01       	movw	r28, r24
    35aa:	fb 01       	movw	r30, r22
    35ac:	00 84       	ldd	r0, Z+8	; 0x08
    35ae:	f1 85       	ldd	r31, Z+9	; 0x09
    35b0:	e0 2d       	mov	r30, r0
    35b2:	09 95       	icall
    35b4:	89 2b       	or	r24, r25
    35b6:	e1 f6       	brne	.-72     	; 0x3570 <fputc+0x10>
    35b8:	d8 01       	movw	r26, r16
    35ba:	16 96       	adiw	r26, 0x06	; 6
    35bc:	8d 91       	ld	r24, X+
    35be:	9c 91       	ld	r25, X
    35c0:	17 97       	sbiw	r26, 0x07	; 7
    35c2:	01 96       	adiw	r24, 0x01	; 1
    35c4:	17 96       	adiw	r26, 0x07	; 7
    35c6:	9c 93       	st	X, r25
    35c8:	8e 93       	st	-X, r24
    35ca:	16 97       	sbiw	r26, 0x06	; 6
    35cc:	ce 01       	movw	r24, r28
    35ce:	df 91       	pop	r29
    35d0:	cf 91       	pop	r28
    35d2:	1f 91       	pop	r17
    35d4:	0f 91       	pop	r16
    35d6:	08 95       	ret

000035d8 <sprintf>:
    35d8:	ae e0       	ldi	r26, 0x0E	; 14
    35da:	b0 e0       	ldi	r27, 0x00	; 0
    35dc:	e1 ef       	ldi	r30, 0xF1	; 241
    35de:	fa e1       	ldi	r31, 0x1A	; 26
    35e0:	94 ce       	rjmp	.-728    	; 0x330a <__prologue_saves__+0x1c>
    35e2:	0d 89       	ldd	r16, Y+21	; 0x15
    35e4:	1e 89       	ldd	r17, Y+22	; 0x16
    35e6:	86 e0       	ldi	r24, 0x06	; 6
    35e8:	8c 83       	std	Y+4, r24	; 0x04
    35ea:	1a 83       	std	Y+2, r17	; 0x02
    35ec:	09 83       	std	Y+1, r16	; 0x01
    35ee:	8f ef       	ldi	r24, 0xFF	; 255
    35f0:	9f e7       	ldi	r25, 0x7F	; 127
    35f2:	9e 83       	std	Y+6, r25	; 0x06
    35f4:	8d 83       	std	Y+5, r24	; 0x05
    35f6:	ae 01       	movw	r20, r28
    35f8:	47 5e       	subi	r20, 0xE7	; 231
    35fa:	5f 4f       	sbci	r21, 0xFF	; 255
    35fc:	6f 89       	ldd	r22, Y+23	; 0x17
    35fe:	78 8d       	ldd	r23, Y+24	; 0x18
    3600:	ce 01       	movw	r24, r28
    3602:	01 96       	adiw	r24, 0x01	; 1
    3604:	16 db       	rcall	.-2516   	; 0x2c32 <vfprintf>
    3606:	ef 81       	ldd	r30, Y+7	; 0x07
    3608:	f8 85       	ldd	r31, Y+8	; 0x08
    360a:	e0 0f       	add	r30, r16
    360c:	f1 1f       	adc	r31, r17
    360e:	10 82       	st	Z, r1
    3610:	2e 96       	adiw	r28, 0x0e	; 14
    3612:	e4 e0       	ldi	r30, 0x04	; 4
    3614:	96 ce       	rjmp	.-724    	; 0x3342 <__epilogue_restores__+0x1c>

00003616 <__ultoa_invert>:
    3616:	fa 01       	movw	r30, r20
    3618:	aa 27       	eor	r26, r26
    361a:	28 30       	cpi	r18, 0x08	; 8
    361c:	51 f1       	breq	.+84     	; 0x3672 <__ultoa_invert+0x5c>
    361e:	20 31       	cpi	r18, 0x10	; 16
    3620:	81 f1       	breq	.+96     	; 0x3682 <__ultoa_invert+0x6c>
    3622:	e8 94       	clt
    3624:	6f 93       	push	r22
    3626:	6e 7f       	andi	r22, 0xFE	; 254
    3628:	6e 5f       	subi	r22, 0xFE	; 254
    362a:	7f 4f       	sbci	r23, 0xFF	; 255
    362c:	8f 4f       	sbci	r24, 0xFF	; 255
    362e:	9f 4f       	sbci	r25, 0xFF	; 255
    3630:	af 4f       	sbci	r26, 0xFF	; 255
    3632:	b1 e0       	ldi	r27, 0x01	; 1
    3634:	3e d0       	rcall	.+124    	; 0x36b2 <__ultoa_invert+0x9c>
    3636:	b4 e0       	ldi	r27, 0x04	; 4
    3638:	3c d0       	rcall	.+120    	; 0x36b2 <__ultoa_invert+0x9c>
    363a:	67 0f       	add	r22, r23
    363c:	78 1f       	adc	r23, r24
    363e:	89 1f       	adc	r24, r25
    3640:	9a 1f       	adc	r25, r26
    3642:	a1 1d       	adc	r26, r1
    3644:	68 0f       	add	r22, r24
    3646:	79 1f       	adc	r23, r25
    3648:	8a 1f       	adc	r24, r26
    364a:	91 1d       	adc	r25, r1
    364c:	a1 1d       	adc	r26, r1
    364e:	6a 0f       	add	r22, r26
    3650:	71 1d       	adc	r23, r1
    3652:	81 1d       	adc	r24, r1
    3654:	91 1d       	adc	r25, r1
    3656:	a1 1d       	adc	r26, r1
    3658:	20 d0       	rcall	.+64     	; 0x369a <__ultoa_invert+0x84>
    365a:	09 f4       	brne	.+2      	; 0x365e <__ultoa_invert+0x48>
    365c:	68 94       	set
    365e:	3f 91       	pop	r19
    3660:	2a e0       	ldi	r18, 0x0A	; 10
    3662:	26 9f       	mul	r18, r22
    3664:	11 24       	eor	r1, r1
    3666:	30 19       	sub	r19, r0
    3668:	30 5d       	subi	r19, 0xD0	; 208
    366a:	31 93       	st	Z+, r19
    366c:	de f6       	brtc	.-74     	; 0x3624 <__ultoa_invert+0xe>
    366e:	cf 01       	movw	r24, r30
    3670:	08 95       	ret
    3672:	46 2f       	mov	r20, r22
    3674:	47 70       	andi	r20, 0x07	; 7
    3676:	40 5d       	subi	r20, 0xD0	; 208
    3678:	41 93       	st	Z+, r20
    367a:	b3 e0       	ldi	r27, 0x03	; 3
    367c:	0f d0       	rcall	.+30     	; 0x369c <__ultoa_invert+0x86>
    367e:	c9 f7       	brne	.-14     	; 0x3672 <__ultoa_invert+0x5c>
    3680:	f6 cf       	rjmp	.-20     	; 0x366e <__ultoa_invert+0x58>
    3682:	46 2f       	mov	r20, r22
    3684:	4f 70       	andi	r20, 0x0F	; 15
    3686:	40 5d       	subi	r20, 0xD0	; 208
    3688:	4a 33       	cpi	r20, 0x3A	; 58
    368a:	18 f0       	brcs	.+6      	; 0x3692 <__ultoa_invert+0x7c>
    368c:	49 5d       	subi	r20, 0xD9	; 217
    368e:	31 fd       	sbrc	r19, 1
    3690:	40 52       	subi	r20, 0x20	; 32
    3692:	41 93       	st	Z+, r20
    3694:	02 d0       	rcall	.+4      	; 0x369a <__ultoa_invert+0x84>
    3696:	a9 f7       	brne	.-22     	; 0x3682 <__ultoa_invert+0x6c>
    3698:	ea cf       	rjmp	.-44     	; 0x366e <__ultoa_invert+0x58>
    369a:	b4 e0       	ldi	r27, 0x04	; 4
    369c:	a6 95       	lsr	r26
    369e:	97 95       	ror	r25
    36a0:	87 95       	ror	r24
    36a2:	77 95       	ror	r23
    36a4:	67 95       	ror	r22
    36a6:	ba 95       	dec	r27
    36a8:	c9 f7       	brne	.-14     	; 0x369c <__ultoa_invert+0x86>
    36aa:	00 97       	sbiw	r24, 0x00	; 0
    36ac:	61 05       	cpc	r22, r1
    36ae:	71 05       	cpc	r23, r1
    36b0:	08 95       	ret
    36b2:	9b 01       	movw	r18, r22
    36b4:	ac 01       	movw	r20, r24
    36b6:	0a 2e       	mov	r0, r26
    36b8:	06 94       	lsr	r0
    36ba:	57 95       	ror	r21
    36bc:	47 95       	ror	r20
    36be:	37 95       	ror	r19
    36c0:	27 95       	ror	r18
    36c2:	ba 95       	dec	r27
    36c4:	c9 f7       	brne	.-14     	; 0x36b8 <__ultoa_invert+0xa2>
    36c6:	62 0f       	add	r22, r18
    36c8:	73 1f       	adc	r23, r19
    36ca:	84 1f       	adc	r24, r20
    36cc:	95 1f       	adc	r25, r21
    36ce:	a0 1d       	adc	r26, r0
    36d0:	08 95       	ret

000036d2 <_exit>:
    36d2:	f8 94       	cli

000036d4 <__stop_program>:
    36d4:	ff cf       	rjmp	.-2      	; 0x36d4 <__stop_program>
